
SELivre-eth-multServ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 startup       00000048  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 prog          00014edc  00000048  00000048  00008048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         0000083c  40000000  00014f24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00002e6c  4000083c  4000083c  0002083c  2**2
                  ALLOC
  4 .debug_abbrev 00008419  00000000  00000000  0002083c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000249b7  00000000  00000000  00028c55  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00007a8d  00000000  00000000  0004d60c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00002a20  00000000  00000000  0005509c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000cd74  00000000  00000000  00057abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 0000289d  00000000  00000000  00064830  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b88  00000000  00000000  000670d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003be9  00000000  00000000  00067c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      0000068a  00000000  00000000  0006b841  2**0
                  CONTENTS, READONLY
 13 .debug_ranges 00000810  00000000  00000000  0006becb  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section startup:

00000000 <startup>:
.section .startup,"ax"
         .code 32
         .align 0

	b     _start						/* reset - _start			*/
   0:	ea00276b 	b	9db4 <start>
	ldr   pc, _undf						/* undefined - _undf		*/
   4:	e59ff014 	ldr	pc, [pc, #20]	; 20 <_undf>
	ldr   pc, _swi						/* SWI - _swi				*/
   8:	e59ff014 	ldr	pc, [pc, #20]	; 24 <_swi>
	ldr   pc, _pabt						/* program abort - _pabt	*/
   c:	e59ff014 	ldr	pc, [pc, #20]	; 28 <_pabt>
	ldr   pc, _dabt						/* data abort - _dabt		*/
  10:	e59ff014 	ldr	pc, [pc, #20]	; 2c <_dabt>
	nop									/* reserved					*/
  14:	e1a00000 	nop			(mov r0,r0)
	ldr   pc, [pc,#-0x120]				/* IRQ - read the VIC		*/
  18:	e51ff120 	ldr	pc, [pc, #-288]	; ffffff00 <__stack_end__+0xbfff7f04>
	ldr   pc, _fiq						/* FIQ - _fiq				*/
  1c:	e59ff00c 	ldr	pc, [pc, #12]	; 30 <_fiq>
  20:	000001e0 	andeq	r0, r0, r0, ror #3
  24:	0000022c 	andeq	r0, r0, ip, lsr #4
  28:	00000288 	andeq	r0, r0, r8, lsl #5
  2c:	000002c4 	andeq	r0, r0, r4, asr #5
  30:	00000204 	andeq	r0, r0, r4, lsl #4

_undf:  .word UNDF_Routine                    /* undefined				*/
_swi:   .word SWI_Routine				        /* SWI						*/
_pabt:  .word PABT_Routine                    /* program abort			*/
_dabt:  .word DABT_Routine                    /* data abort				*/
_fiq:   .word FIQ_Routine                     /* FIQ						*/

__swi:  b     .
  34:	eafffffe 	b	34 <__swi>
__undf: b     .                         /* undefined				*/
  38:	eafffffe 	b	38 <__undf>
__pabt: b     .                         /* program abort			*/
  3c:	eafffffe 	b	3c <__pabt>
__dabt: b     .                         /* data abort				*/
  40:	eafffffe 	b	40 <F_BIT>
__fiq:  b     .                         /* FIQ						*/
  44:	eafffffe 	b	44 <__fiq>
Disassembly of section prog:

00000048 <LigaAC>:
{
//	Liga 1.23
//	PINSEL3 &= ~(3<<14); //1.23 GPIO
//	PINMODE3 |= 3<<14;   //1.23 Pull Down
	FIO1DIR |= (1<<23); //1.23 Output
      48:	e3e03103 	mvn	r3, #-1073741824	; 0xc0000000
      4c:	e2433a03 	sub	r3, r3, #12288	; 0x3000
      50:	e5132fdf 	ldr	r2, [r3, #-4063]
      54:	e3822502 	orr	r2, r2, #8388608	; 0x800000
      58:	e5032fdf 	str	r2, [r3, #-4063]
	FIO1SET = 1<<23;     //1.23 ON
      5c:	e3a02502 	mov	r2, #8388608	; 0x800000
      60:	e5032fc7 	str	r2, [r3, #-4039]
}
      64:	e12fff1e 	bx	lr

00000068 <DesligaAC>:
void DesligaAC()
{
//	Desliga 1.23
//	PINSEL3 &= ~(3<<14); //1.23 GPIO
//	PINMODE3 |= 3<<14;   //1.23 Pull Down
	FIO1DIR |= (1<<23); //1.23 Output
      68:	e3e03103 	mvn	r3, #-1073741824	; 0xc0000000
      6c:	e2433a03 	sub	r3, r3, #12288	; 0x3000
      70:	e5132fdf 	ldr	r2, [r3, #-4063]
      74:	e3822502 	orr	r2, r2, #8388608	; 0x800000
      78:	e5032fdf 	str	r2, [r3, #-4063]
	FIO1CLR = 1<<23;     //1.23 OFF
      7c:	e3a02502 	mov	r2, #8388608	; 0x800000
      80:	e5032fc3 	str	r2, [r3, #-4035]
}
      84:	e12fff1e 	bx	lr

00000088 <PLLInit>:



RTCTime localtime;
unsigned char temp0, temp1, setpoint, ac_auto_on, ac_modo;

int main( void )
{
	int i;
	int temp;
	char  str[20];
	char buff[MAX_TAM_SIZE_STRING];
	char dest[MAX_COMMAND_SIZE];
	str_t *tp;
	RTCTime temp_time;
	struct txtinfo stxt;
	PLLInit();
	GPIOInit();

    RTCInit();
    RTCStart();

    UARTInit(115200,UART_CH_0,0);


 	uart_puts("\nDelay test: ");
 	delayMs(1000);
 	uart_putc('.');
 	delayMs(1000);
 	uart_putc('.');
 	uart_puts(" Ok\n");

   	uart_puts("RTC test: ..");
   	temp_time = RTCGetTime();
   	RTCClearTime();
   	delayMs(1000);
  	temp_time = RTCGetTime();
   	uart_puts(" Ok\n");

   	T0Init(1000);
   	T0Start();
   	uart_puts("Timer test: ");
   	delayMs(1000);
   	uart_puts(" Ok\n");

 	uart_puts("Init lcd ..");
 	init_lcd();
 	lcd_clr();
 	lcd_goto(1,0);
 	lcd_string("UIP Aplication");
 	uart_puts("Ok");

   	uart_puts("\nETH...");
   	ethernet_init();
   	uart_puts(" Ok");


 	uart_puts("\nI2C...");
 	temp = I2CInit( (int)I2CMASTER );
 	if (temp!=TRUE) uart_puts("erro");
 	uart_puts("initd...");
 	temp=read_temp();
	temp1 = temp>>8;
	temp0 = temp&0xf;
 	sprintf(str, " %d,%dC ",temp1,temp0 );
 	uart_puts(str);
 	uart_puts("Ok");

    uart_puts("\nNokia LCD init.. ");
    lcd_nokia_init(&stxt);	/* Inicializa display grafico (fundo branco) */
    uart_puts(" ok\n");


 	do_init(tp);
 	uart_puts(tp->resp);
 	uart_puts(CLI_PROMPT);
 	UARTTakeString(dest, UART_CH_0);
 	CLI_Builder(dest, buff);
 	uart_puts(buff);

	while(1)
    {
		fflush(stdout);

		/* Escreve hora:minuto:segundo no LCD de texto */
		lcd_goto(2,0);
		LCDbcd(RTC_HOUR);
		lcd_putc(':');
		LCDbcd(RTC_MIN);
		lcd_putc(':');
		LCDbcd(RTC_SEC);

#if 0
		if(global_chat_flag==0){//se em 1 significa que uart esta dedicada para atender o chat.
			if(UARTTakeStringAsync(dest, UART_CH_0) == 0){
				if (strlen(dest)>2){
				CLI_Builder(dest,buff);
				uart_puts(buff);
				memset(dest, '\0', sizeof(dest));

				if(global_chat_flag==0) uart_puts(CLI_PROMPT);
				}
			}
		}

#endif

        if(global_chat_flag!=1){//se em 1 significa que uart esta dedivada para atender o chat.
                uart_puts(CLI_PROMPT);
                UARTTakeString(dest, UART_CH_0);
                if (strlen(dest)>2){
                CLI_Builder(dest,buff);
                uart_puts(buff);
                memset(dest, '\0', sizeof(dest));
                }
        }



  	}



	return 0;
}


void PLLInit( void )
{
	int i;
	#ifdef RUN_FROM_RAM
		/* Remap the interrupt vectors to RAM if we are are running from RAM. */
		SCB_MEMMAP = 2;
	#endif

	/* Disable the PLL. */
	PLLCON = 0;
      88:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
      8c:	e282297f 	add	r2, r2, #2080768	; 0x1fc000
      90:	e3a03000 	mov	r3, #0	; 0x0
      94:	e5823080 	str	r3, [r2, #128]
	PLLFEED = PLL_FEED_BYTE1;
      98:	e28330aa 	add	r3, r3, #170	; 0xaa
      9c:	e582308c 	str	r3, [r2, #140]
	PLLFEED = PLL_FEED_BYTE2;
      a0:	e2433055 	sub	r3, r3, #85	; 0x55
      a4:	e582308c 	str	r3, [r2, #140]

	/* Configure clock source. */
	SCS |= OSC_ENABLE;
      a8:	e59231a0 	ldr	r3, [r2, #416]
      ac:	e3833020 	orr	r3, r3, #32	; 0x20
      b0:	e58231a0 	str	r3, [r2, #416]
      b4:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
      b8:	e283097f 	add	r0, r3, #2080768	; 0x1fc000
	while( !( SCS & OSC_STAT ) );
      bc:	e59031a0 	ldr	r3, [r0, #416]
      c0:	e3130040 	tst	r3, #64	; 0x40
      c4:	0afffffc 	beq	bc <PLLInit+0x34>
	CLKSRCSEL = OSC_SELECT;
      c8:	e3a02001 	mov	r2, #1	; 0x1
      cc:	e580210c 	str	r2, [r0, #268]

	/* Setup the PLL to multiply the XTAL input by 8. */
	PLLCFG = ( PLL_MUL | PLL_DIV );
      d0:	e3a03005 	mov	r3, #5	; 0x5
      d4:	e5803084 	str	r3, [r0, #132]
	PLLFEED = PLL_FEED_BYTE1;
      d8:	e3a010aa 	mov	r1, #170	; 0xaa
      dc:	e580108c 	str	r1, [r0, #140]
	PLLFEED = PLL_FEED_BYTE2;
      e0:	e2833050 	add	r3, r3, #80	; 0x50
      e4:	e580308c 	str	r3, [r0, #140]

	/* Turn on and wait for the PLL to lock... */
	PLLCON = PLL_ENABLE;
      e8:	e5802080 	str	r2, [r0, #128]
	PLLFEED = PLL_FEED_BYTE1;
      ec:	e580108c 	str	r1, [r0, #140]
	PLLFEED = PLL_FEED_BYTE2;
      f0:	e580308c 	str	r3, [r0, #140]
	/* Configurate CPU clock to divide PLL by 4... */
	CCLKCFG = CPU_CLK_DIV;
      f4:	e5802104 	str	r2, [r0, #260]
      f8:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
      fc:	e283297f 	add	r2, r3, #2080768	; 0x1fc000
	while( !( PLLSTAT & PLL_LOCK ) );
     100:	e5923088 	ldr	r3, [r2, #136]
     104:	e3130301 	tst	r3, #67108864	; 0x4000000
     108:	0afffffc 	beq	100 <IRQ_STACK_SIZE>

	/* Connecting the clock. */
	PLLCON = PLL_CONNECT;
     10c:	e3a03003 	mov	r3, #3	; 0x3
     110:	e5823080 	str	r3, [r2, #128]
	PLLFEED = PLL_FEED_BYTE1;
     114:	e28330a7 	add	r3, r3, #167	; 0xa7
     118:	e582308c 	str	r3, [r2, #140]
	PLLFEED = PLL_FEED_BYTE2;
     11c:	e2433055 	sub	r3, r3, #85	; 0x55
     120:	e582308c 	str	r3, [r2, #140]
     124:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
     128:	e283297f 	add	r2, r3, #2080768	; 0x1fc000
	while( !( PLLSTAT & PLL_CONNECTED ) );
     12c:	e5923088 	ldr	r3, [r2, #136]
     130:	e3130402 	tst	r3, #33554432	; 0x2000000
     134:	0afffffc 	beq	12c <IRQ_STACK_SIZE+0x2c>

	MAMCR = 0;
     138:	e3a03000 	mov	r3, #0	; 0x0
     13c:	e5823000 	str	r3, [r2]
	MAMTIM = 3;
     140:	e2833003 	add	r3, r3, #3	; 0x3
     144:	e5823004 	str	r3, [r2, #4]
	MAMCR = 2;
     148:	e2433001 	sub	r3, r3, #1	; 0x1
     14c:	e5823000 	str	r3, [r2]

}
     150:	e12fff1e 	bx	lr

00000154 <GPIOInit>:
void GPIOInit(void)
{
	// Set to inputs
	IODIR0  = 0;
     154:	e3a0020e 	mov	r0, #-536870912	; 0xe0000000
     158:	e280390a 	add	r3, r0, #163840	; 0x28000
     15c:	e3a02000 	mov	r2, #0	; 0x0
     160:	e5832008 	str	r2, [r3, #8]
	IODIR1  = 0;
     164:	e5832018 	str	r2, [r3, #24]
	FIO0DIR = 0;
     168:	e3e01103 	mvn	r1, #-1073741824	; 0xc0000000
     16c:	e2411a03 	sub	r1, r1, #12288	; 0x3000
     170:	e5012fff 	str	r2, [r1, #-4095]
	FIO1DIR = 0;
     174:	e5012fdf 	str	r2, [r1, #-4063]
	FIO2DIR = 0;
     178:	e5012fbf 	str	r2, [r1, #-4031]
	FIO3DIR = 0;
     17c:	e5012f9f 	str	r2, [r1, #-3999]
	FIO4DIR = 0;
     180:	e5012f7f 	str	r2, [r1, #-3967]

	// Enable Fast GPIO
	SCS|=0x01;
     184:	e280c97f 	add	ip, r0, #2080768	; 0x1fc000
     188:	e59c31a0 	ldr	r3, [ip, #416]
     18c:	e3833001 	orr	r3, r3, #1	; 0x1
     190:	e58c31a0 	str	r3, [ip, #416]

	// clear mask registers
	FIO0MASK =0;
     194:	e5012fef 	str	r2, [r1, #-4079]
	FIO1MASK =0;
     198:	e5012fcf 	str	r2, [r1, #-4047]
	FIO2MASK =0;
     19c:	e5012faf 	str	r2, [r1, #-4015]
	FIO3MASK =0;
     1a0:	e5012f8f 	str	r2, [r1, #-3983]
	FIO4MASK = 0;
     1a4:	e5012f6f 	str	r2, [r1, #-3951]

	// Reset all GPIO pins to default primary function
	PINSEL0 =0;
     1a8:	e280090b 	add	r0, r0, #180224	; 0x2c000
     1ac:	e5802000 	str	r2, [r0]
	PINSEL1 =0;
     1b0:	e5802004 	str	r2, [r0, #4]
	PINSEL2 =0;
     1b4:	e5802008 	str	r2, [r0, #8]
	PINSEL3 =0;
     1b8:	e580200c 	str	r2, [r0, #12]
	PINSEL4 =0;
     1bc:	e5802010 	str	r2, [r0, #16]
	PINSEL5 =0;
     1c0:	e5802014 	str	r2, [r0, #20]
	PINSEL6 =0;
     1c4:	e5802018 	str	r2, [r0, #24]
	PINSEL7 =0;
     1c8:	e580201c 	str	r2, [r0, #28]
	PINSEL8 =0;
     1cc:	e5802020 	str	r2, [r0, #32]
	PINSEL9 =0;
     1d0:	e5802024 	str	r2, [r0, #36]
	PINSEL10= 0;
     1d4:	e5802028 	str	r2, [r0, #40]
	PINSEL11= 0;
     1d8:	e580202c 	str	r2, [r0, #44]

//	PCONP = 0xC00006; //All timers on only
}
     1dc:	e12fff1e 	bx	lr

000001e0 <UNDF_Routine>:

void DABT_Routine()
{
	register unsigned long *r14 asm("%lr");
	unsigned long reg;
	char str[50];
	reg = (unsigned long)r14;
	sprintf(str, "\nData Abort Exception at 0x%x : OPCODE=0x%x", reg-8, *(unsigned long*)(reg-8));
	uart_puts(str);
	disableIRQ();
	while(1);
}

void PABT_Routine()
{
	register unsigned long *r14 asm("%r14");
	unsigned long reg;
	char str[50];
	reg = (unsigned long)r14;
	sprintf(str, "\nPrefetch Abort Exception at 0x%x", reg-4);
	uart_puts(str);
	disableIRQ();
	while(1);
}

void LCDbcd(int val)
{
	lcd_putc((val / 10)  + '0');
	lcd_putc((val % 10) + '0');
}


void SWI_Routine(){	uart_puts("SWI"); disableIRQ();	while(1);}
void FIQ_Routine(){	uart_puts("FIQ"); disableIRQ();	while(1);}
void UNDF_Routine(){ uart_puts("UNDEF"); disableIRQ();	while(1);}
     1e0:	e52de004 	str	lr, [sp, #-4]!
     1e4:	e59f0014 	ldr	r0, [pc, #20]	; 200 <prog+0x1b8>
     1e8:	e3a01000 	mov	r1, #0	; 0x0
     1ec:	eb000287 	bl	c10 <UARTTransmitString>
     1f0:	e10f3000 	mrs	r3, CPSR
     1f4:	e3833080 	orr	r3, r3, #128	; 0x80
     1f8:	e129f003 	msr	CPSR_fc, r3
     1fc:	eafffffe 	b	1fc <UNDF_Routine+0x1c>
     200:	000146b4 	streqh	r4, [r1], -r4

00000204 <FIQ_Routine>:
     204:	e24ee004 	sub	lr, lr, #4	; 0x4
     208:	e92d400f 	stmdb	sp!, {r0, r1, r2, r3, lr}
     20c:	e59f0014 	ldr	r0, [pc, #20]	; 228 <prog+0x1e0>
     210:	e3a01000 	mov	r1, #0	; 0x0
     214:	eb00027d 	bl	c10 <UARTTransmitString>
     218:	e10f3000 	mrs	r3, CPSR
     21c:	e3833080 	orr	r3, r3, #128	; 0x80
     220:	e129f003 	msr	CPSR_fc, r3
     224:	eafffffe 	b	224 <FIQ_Routine+0x20>
     228:	000146bc 	streqh	r4, [r1], -ip

0000022c <SWI_Routine>:
     22c:	e92d500f 	stmdb	sp!, {r0, r1, r2, r3, ip, lr}
     230:	e59f0014 	ldr	r0, [pc, #20]	; 24c <prog+0x204>
     234:	e3a01000 	mov	r1, #0	; 0x0
     238:	eb000274 	bl	c10 <UARTTransmitString>
     23c:	e10f3000 	mrs	r3, CPSR
     240:	e3833080 	orr	r3, r3, #128	; 0x80
     244:	e129f003 	msr	CPSR_fc, r3
     248:	eafffffe 	b	248 <SWI_Routine+0x1c>
     24c:	000146c0 	andeq	r4, r1, r0, asr #13

00000250 <LCDbcd>:
     250:	e92d4030 	stmdb	sp!, {r4, r5, lr}
     254:	e1a05000 	mov	r5, r0
     258:	e59f3024 	ldr	r3, [pc, #36]	; 284 <prog+0x23c>
     25c:	e0c32390 	smull	r2, r3, r0, r3
     260:	e1a04fc0 	mov	r4, r0, asr #31
     264:	e0644143 	rsb	r4, r4, r3, asr #2
     268:	e2840030 	add	r0, r4, #48	; 0x30
     26c:	eb001542 	bl	577c <lcd_putc>
     270:	e0844104 	add	r4, r4, r4, lsl #2
     274:	e0455084 	sub	r5, r5, r4, lsl #1
     278:	e2850030 	add	r0, r5, #48	; 0x30
     27c:	eb00153e 	bl	577c <lcd_putc>
     280:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
     284:	66666667 	strvsbt	r6, [r6], -r7, ror #12

00000288 <PABT_Routine>:
     288:	e92d4010 	stmdb	sp!, {r4, lr}
     28c:	e24dd034 	sub	sp, sp, #52	; 0x34
     290:	e28d4002 	add	r4, sp, #2	; 0x2
     294:	e1a00004 	mov	r0, r4
     298:	e59f1020 	ldr	r1, [pc, #32]	; 2c0 <prog+0x278>
     29c:	e24e2004 	sub	r2, lr, #4	; 0x4
     2a0:	eb0005c9 	bl	19cc <sprintf>
     2a4:	e1a00004 	mov	r0, r4
     2a8:	e3a01000 	mov	r1, #0	; 0x0
     2ac:	eb000257 	bl	c10 <UARTTransmitString>
     2b0:	e10f3000 	mrs	r3, CPSR
     2b4:	e3833080 	orr	r3, r3, #128	; 0x80
     2b8:	e129f003 	msr	CPSR_fc, r3
     2bc:	eafffffe 	b	2bc <PABT_Routine+0x34>
     2c0:	000146c4 	andeq	r4, r1, r4, asr #13

000002c4 <DABT_Routine>:
     2c4:	e92d4010 	stmdb	sp!, {r4, lr}
     2c8:	e24dd034 	sub	sp, sp, #52	; 0x34
     2cc:	e28d4002 	add	r4, sp, #2	; 0x2
     2d0:	e1a00004 	mov	r0, r4
     2d4:	e59f1024 	ldr	r1, [pc, #36]	; 300 <prog+0x2b8>
     2d8:	e24e2008 	sub	r2, lr, #8	; 0x8
     2dc:	e51e3008 	ldr	r3, [lr, #-8]
     2e0:	eb0005b9 	bl	19cc <sprintf>
     2e4:	e1a00004 	mov	r0, r4
     2e8:	e3a01000 	mov	r1, #0	; 0x0
     2ec:	eb000247 	bl	c10 <UARTTransmitString>
     2f0:	e10f3000 	mrs	r3, CPSR
     2f4:	e3833080 	orr	r3, r3, #128	; 0x80
     2f8:	e129f003 	msr	CPSR_fc, r3
     2fc:	eafffffe 	b	2fc <DABT_Routine+0x38>
     300:	000146e8 	andeq	r4, r1, r8, ror #13

00000304 <read_temp>:
     304:	e92d4010 	stmdb	sp!, {r4, lr}
     308:	e3a03000 	mov	r3, #0	; 0x0
     30c:	e59f10a8 	ldr	r1, [pc, #168]	; 3bc <prog+0x374>
     310:	e1a04003 	mov	r4, r3
     314:	e7c14003 	strb	r4, [r1, r3]
     318:	e2833001 	add	r3, r3, #1	; 0x1
     31c:	e3530020 	cmp	r3, #32	; 0x20
     320:	1afffffb 	bne	314 <read_temp+0x10>
     324:	e3a02002 	mov	r2, #2	; 0x2
     328:	e59f3090 	ldr	r3, [pc, #144]	; 3c0 <prog+0x378>
     32c:	e5832000 	str	r2, [r3]
     330:	e59f308c 	ldr	r3, [pc, #140]	; 3c4 <prog+0x37c>
     334:	e5834000 	str	r4, [r3]
     338:	e3e0306f 	mvn	r3, #111	; 0x6f
     33c:	e5c13000 	strb	r3, [r1]
     340:	e2422001 	sub	r2, r2, #1	; 0x1
     344:	e5c12001 	strb	r2, [r1, #1]
     348:	e5c14002 	strb	r4, [r1, #2]
     34c:	e59f3074 	ldr	r3, [pc, #116]	; 3c8 <prog+0x380>
     350:	e5832000 	str	r2, [r3]
     354:	eb0006ed 	bl	1f10 <I2CEngine>
     358:	e1a03004 	mov	r3, r4
     35c:	e59f4058 	ldr	r4, [pc, #88]	; 3bc <prog+0x374>
     360:	e3a01000 	mov	r1, #0	; 0x0
     364:	e7c41003 	strb	r1, [r4, r3]
     368:	e2833001 	add	r3, r3, #1	; 0x1
     36c:	e3530020 	cmp	r3, #32	; 0x20
     370:	1afffffb 	bne	364 <read_temp+0x60>
     374:	e3a02001 	mov	r2, #1	; 0x1
     378:	e59f3040 	ldr	r3, [pc, #64]	; 3c0 <prog+0x378>
     37c:	e5832000 	str	r2, [r3]
     380:	e2822001 	add	r2, r2, #1	; 0x1
     384:	e59f3038 	ldr	r3, [pc, #56]	; 3c4 <prog+0x37c>
     388:	e5832000 	str	r2, [r3]
     38c:	e3e0306f 	mvn	r3, #111	; 0x6f
     390:	e5c43000 	strb	r3, [r4]
     394:	e5c41001 	strb	r1, [r4, #1]
     398:	e2833001 	add	r3, r3, #1	; 0x1
     39c:	e5c43002 	strb	r3, [r4, #2]
     3a0:	e59f3020 	ldr	r3, [pc, #32]	; 3c8 <prog+0x380>
     3a4:	e5831000 	str	r1, [r3]
     3a8:	eb0006d8 	bl	1f10 <I2CEngine>
     3ac:	e5d43003 	ldrb	r3, [r4, #3]
     3b0:	e5d40004 	ldrb	r0, [r4, #4]
     3b4:	e1800403 	orr	r0, r0, r3, lsl #8
     3b8:	e8bd8010 	ldmia	sp!, {r4, pc}
     3bc:	40001714 	andmi	r1, r0, r4, lsl r7
     3c0:	40001738 	andmi	r1, r0, r8, lsr r7
     3c4:	400016ec 	andmi	r1, r0, ip, ror #13
     3c8:	40001734 	andmi	r1, r0, r4, lsr r7

000003cc <main>:
     3cc:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
     3d0:	e24ddd23 	sub	sp, sp, #2240	; 0x8c0
     3d4:	e24dd00c 	sub	sp, sp, #12	; 0xc
     3d8:	ebffff2a 	bl	88 <PLLInit>
     3dc:	ebffff5c 	bl	154 <GPIOInit>
     3e0:	eb000603 	bl	1bf4 <RTCInit>
     3e4:	eb000615 	bl	1c40 <RTCStart>
     3e8:	e3a00907 	mov	r0, #114688	; 0x1c000
     3ec:	e2800c02 	add	r0, r0, #512	; 0x200
     3f0:	e3a01000 	mov	r1, #0	; 0x0
     3f4:	e1a02001 	mov	r2, r1
     3f8:	eb000109 	bl	824 <UARTInit>
     3fc:	e59f02c8 	ldr	r0, [pc, #712]	; 6cc <prog+0x684>
     400:	e3a01000 	mov	r1, #0	; 0x0
     404:	eb000201 	bl	c10 <UARTTransmitString>
     408:	e3a00ffa 	mov	r0, #1000	; 0x3e8
     40c:	eb0005ad 	bl	1ac8 <delayMs>
     410:	e3a0002e 	mov	r0, #46	; 0x2e
     414:	e3a01000 	mov	r1, #0	; 0x0
     418:	eb0001d6 	bl	b78 <UARTTransmitByte>
     41c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
     420:	eb0005a8 	bl	1ac8 <delayMs>
     424:	e3a0002e 	mov	r0, #46	; 0x2e
     428:	e3a01000 	mov	r1, #0	; 0x0
     42c:	eb0001d1 	bl	b78 <UARTTransmitByte>
     430:	e59f6298 	ldr	r6, [pc, #664]	; 6d0 <prog+0x688>
     434:	e1a00006 	mov	r0, r6
     438:	e3a01000 	mov	r1, #0	; 0x0
     43c:	eb0001f3 	bl	c10 <UARTTransmitString>
     440:	e59f028c 	ldr	r0, [pc, #652]	; 6d4 <prog+0x68c>
     444:	e3a01000 	mov	r1, #0	; 0x0
     448:	eb0001f0 	bl	c10 <UARTTransmitString>
     44c:	e28d503c 	add	r5, sp, #60	; 0x3c
     450:	e245500c 	sub	r5, r5, #12	; 0xc
     454:	e1a00005 	mov	r0, r5
     458:	eb000646 	bl	1d78 <RTCGetTime>
     45c:	eb000635 	bl	1d38 <RTCClearTime>
     460:	e3a00ffa 	mov	r0, #1000	; 0x3e8
     464:	eb000597 	bl	1ac8 <delayMs>
     468:	e28d400c 	add	r4, sp, #12	; 0xc
     46c:	e244400c 	sub	r4, r4, #12	; 0xc
     470:	e1a00004 	mov	r0, r4
     474:	eb00063f 	bl	1d78 <RTCGetTime>
     478:	e1a0c004 	mov	ip, r4
     47c:	e8bc000f 	ldmia	ip!, {r0, r1, r2, r3}
     480:	e1a0e005 	mov	lr, r5
     484:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
     488:	e89c000f 	ldmia	ip, {r0, r1, r2, r3}
     48c:	e88e000f 	stmia	lr, {r0, r1, r2, r3}
     490:	e1a00006 	mov	r0, r6
     494:	e3a01000 	mov	r1, #0	; 0x0
     498:	eb0001dc 	bl	c10 <UARTTransmitString>
     49c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
     4a0:	eb000567 	bl	1a44 <T0Init>
     4a4:	eb00057e 	bl	1aa4 <T0Start>
     4a8:	e59f0228 	ldr	r0, [pc, #552]	; 6d8 <prog+0x690>
     4ac:	e3a01000 	mov	r1, #0	; 0x0
     4b0:	eb0001d6 	bl	c10 <UARTTransmitString>
     4b4:	e3a00ffa 	mov	r0, #1000	; 0x3e8
     4b8:	eb000582 	bl	1ac8 <delayMs>
     4bc:	e1a00006 	mov	r0, r6
     4c0:	e3a01000 	mov	r1, #0	; 0x0
     4c4:	eb0001d1 	bl	c10 <UARTTransmitString>
     4c8:	e59f020c 	ldr	r0, [pc, #524]	; 6dc <prog+0x694>
     4cc:	e3a01000 	mov	r1, #0	; 0x0
     4d0:	eb0001ce 	bl	c10 <UARTTransmitString>
     4d4:	eb0014d3 	bl	5828 <init_lcd>
     4d8:	eb0014ef 	bl	589c <lcd_clr>
     4dc:	e3a00001 	mov	r0, #1	; 0x1
     4e0:	e3a01000 	mov	r1, #0	; 0x0
     4e4:	eb0014e3 	bl	5878 <lcd_goto>
     4e8:	e59f01f0 	ldr	r0, [pc, #496]	; 6e0 <prog+0x698>
     4ec:	eb0014b2 	bl	57bc <lcd_string>
     4f0:	e59f01ec 	ldr	r0, [pc, #492]	; 6e4 <prog+0x69c>
     4f4:	e3a01000 	mov	r1, #0	; 0x0
     4f8:	eb0001c4 	bl	c10 <UARTTransmitString>
     4fc:	e59f01e4 	ldr	r0, [pc, #484]	; 6e8 <prog+0x6a0>
     500:	e3a01000 	mov	r1, #0	; 0x0
     504:	eb0001c1 	bl	c10 <UARTTransmitString>
     508:	eb001451 	bl	5654 <ethernet_init>
     50c:	e59f01d8 	ldr	r0, [pc, #472]	; 6ec <prog+0x6a4>
     510:	e3a01000 	mov	r1, #0	; 0x0
     514:	eb0001bd 	bl	c10 <UARTTransmitString>
     518:	e59f01d0 	ldr	r0, [pc, #464]	; 6f0 <prog+0x6a8>
     51c:	e3a01000 	mov	r1, #0	; 0x0
     520:	eb0001ba 	bl	c10 <UARTTransmitString>
     524:	e3a00001 	mov	r0, #1	; 0x1
     528:	eb00064e 	bl	1e68 <I2CInit>
     52c:	e3500001 	cmp	r0, #1	; 0x1
     530:	159f01bc 	ldrne	r0, [pc, #444]	; 6f4 <prog+0x6ac>
     534:	13a01000 	movne	r1, #0	; 0x0
     538:	1b0001b4 	blne	c10 <UARTTransmitString>
     53c:	e59f01b4 	ldr	r0, [pc, #436]	; 6f8 <prog+0x6b0>
     540:	e3a01000 	mov	r1, #0	; 0x0
     544:	eb0001b1 	bl	c10 <UARTTransmitString>
     548:	ebffff6d 	bl	304 <read_temp>
     54c:	e1a02440 	mov	r2, r0, asr #8
     550:	e20220ff 	and	r2, r2, #255	; 0xff
     554:	e59f11a0 	ldr	r1, [pc, #416]	; 6fc <prog+0x6b4>
     558:	e5c12000 	strb	r2, [r1]
     55c:	e200300f 	and	r3, r0, #15	; 0xf
     560:	e59f1198 	ldr	r1, [pc, #408]	; 700 <prog+0x6b8>
     564:	e5c13000 	strb	r3, [r1]
     568:	e28d4e8b 	add	r4, sp, #2224	; 0x8b0
     56c:	e2844008 	add	r4, r4, #8	; 0x8
     570:	e1a00004 	mov	r0, r4
     574:	e59f1188 	ldr	r1, [pc, #392]	; 704 <prog+0x6bc>
     578:	eb000513 	bl	19cc <sprintf>
     57c:	e1a00004 	mov	r0, r4
     580:	e3a01000 	mov	r1, #0	; 0x0
     584:	eb0001a1 	bl	c10 <UARTTransmitString>
     588:	e59f0154 	ldr	r0, [pc, #340]	; 6e4 <prog+0x69c>
     58c:	e3a01000 	mov	r1, #0	; 0x0
     590:	eb00019e 	bl	c10 <UARTTransmitString>
     594:	e59f016c 	ldr	r0, [pc, #364]	; 708 <prog+0x6c0>
     598:	e3a01000 	mov	r1, #0	; 0x0
     59c:	eb00019b 	bl	c10 <UARTTransmitString>
     5a0:	e28d002c 	add	r0, sp, #44	; 0x2c
     5a4:	e240000c 	sub	r0, r0, #12	; 0xc
     5a8:	eb0009bb 	bl	2c9c <lcd_nokia_init>
     5ac:	e59f0158 	ldr	r0, [pc, #344]	; 70c <prog+0x6c4>
     5b0:	e3a01000 	mov	r1, #0	; 0x0
     5b4:	eb000195 	bl	c10 <UARTTransmitString>
     5b8:	e1a00004 	mov	r0, r4
     5bc:	eb0018ff 	bl	69c0 <do_init>
     5c0:	e2840086 	add	r0, r4, #134	; 0x86
     5c4:	e3a01000 	mov	r1, #0	; 0x0
     5c8:	eb000190 	bl	c10 <UARTTransmitString>
     5cc:	e59f013c 	ldr	r0, [pc, #316]	; 710 <prog+0x6c8>
     5d0:	e3a01000 	mov	r1, #0	; 0x0
     5d4:	eb00018d 	bl	c10 <UARTTransmitString>
     5d8:	e28d505c 	add	r5, sp, #92	; 0x5c
     5dc:	e245500a 	sub	r5, r5, #10	; 0xa
     5e0:	e1a00005 	mov	r0, r5
     5e4:	e3a01000 	mov	r1, #0	; 0x0
     5e8:	eb001512 	bl	5a38 <UARTTakeString>
     5ec:	e28d40ec 	add	r4, sp, #236	; 0xec
     5f0:	e2444004 	sub	r4, r4, #4	; 0x4
     5f4:	e1a00005 	mov	r0, r5
     5f8:	e1a01004 	mov	r1, r4
     5fc:	eb001606 	bl	5e1c <CLI_Builder>
     600:	e1a00004 	mov	r0, r4
     604:	e3a01000 	mov	r1, #0	; 0x0
     608:	eb000180 	bl	c10 <UARTTransmitString>
     60c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
     610:	e2836909 	add	r6, r3, #147456	; 0x24000
     614:	e28d705c 	add	r7, sp, #92	; 0x5c
     618:	e247700a 	sub	r7, r7, #10	; 0xa
     61c:	e59f30f0 	ldr	r3, [pc, #240]	; 714 <prog+0x6cc>
     620:	e5933000 	ldr	r3, [r3]
     624:	e5930008 	ldr	r0, [r3, #8]
     628:	eb002b7d 	bl	b424 <fflush>
     62c:	e3a00002 	mov	r0, #2	; 0x2
     630:	e3a01000 	mov	r1, #0	; 0x0
     634:	eb00148f 	bl	5878 <lcd_goto>
     638:	e5960028 	ldr	r0, [r6, #40]
     63c:	ebffff03 	bl	250 <LCDbcd>
     640:	e3a0003a 	mov	r0, #58	; 0x3a
     644:	eb00144c 	bl	577c <lcd_putc>
     648:	e5960024 	ldr	r0, [r6, #36]
     64c:	ebfffeff 	bl	250 <LCDbcd>
     650:	e3a0003a 	mov	r0, #58	; 0x3a
     654:	eb001448 	bl	577c <lcd_putc>
     658:	e5960020 	ldr	r0, [r6, #32]
     65c:	ebfffefb 	bl	250 <LCDbcd>
     660:	e59f30b0 	ldr	r3, [pc, #176]	; 718 <prog+0x6d0>
     664:	e5933000 	ldr	r3, [r3]
     668:	e3530001 	cmp	r3, #1	; 0x1
     66c:	0affffea 	beq	61c <main+0x250>
     670:	e59f0098 	ldr	r0, [pc, #152]	; 710 <prog+0x6c8>
     674:	e3a01000 	mov	r1, #0	; 0x0
     678:	eb000164 	bl	c10 <UARTTransmitString>
     67c:	e1a00007 	mov	r0, r7
     680:	e3a01000 	mov	r1, #0	; 0x0
     684:	eb0014eb 	bl	5a38 <UARTTakeString>
     688:	e1a00007 	mov	r0, r7
     68c:	eb003039 	bl	c778 <strlen>
     690:	e3500002 	cmp	r0, #2	; 0x2
     694:	9affffe0 	bls	61c <main+0x250>
     698:	e28d40ec 	add	r4, sp, #236	; 0xec
     69c:	e2444004 	sub	r4, r4, #4	; 0x4
     6a0:	e1a00007 	mov	r0, r7
     6a4:	e1a01004 	mov	r1, r4
     6a8:	eb0015db 	bl	5e1c <CLI_Builder>
     6ac:	e1a00004 	mov	r0, r4
     6b0:	e3a01000 	mov	r1, #0	; 0x0
     6b4:	eb000155 	bl	c10 <UARTTransmitString>
     6b8:	e1a00007 	mov	r0, r7
     6bc:	e3a01000 	mov	r1, #0	; 0x0
     6c0:	e3a02096 	mov	r2, #150	; 0x96
     6c4:	eb002e9a 	bl	c134 <memset>
     6c8:	eaffffd3 	b	61c <main+0x250>
     6cc:	00014714 	andeq	r4, r1, r4, lsl r7
     6d0:	00014724 	andeq	r4, r1, r4, lsr #14
     6d4:	0001472c 	andeq	r4, r1, ip, lsr #14
     6d8:	0001473c 	andeq	r4, r1, ip, lsr r7
     6dc:	0001474c 	andeq	r4, r1, ip, asr #14
     6e0:	00014758 	andeq	r4, r1, r8, asr r7
     6e4:	00014768 	andeq	r4, r1, r8, ror #14
     6e8:	0001476c 	andeq	r4, r1, ip, ror #14
     6ec:	00014774 	andeq	r4, r1, r4, ror r7
     6f0:	00014778 	andeq	r4, r1, r8, ror r7
     6f4:	00014780 	andeq	r4, r1, r0, lsl #15
     6f8:	00014788 	andeq	r4, r1, r8, lsl #15
     6fc:	40001694 	mulmi	r0, r4, r6
     700:	40001695 	mulmi	r0, r5, r6
     704:	00014794 	muleq	r1, r4, r7
     708:	000147a0 	andeq	r4, r1, r0, lsr #15
     70c:	000147b4 	streqh	r4, [r1], -r4
     710:	000147bc 	streqh	r4, [r1], -ip
     714:	40000014 	andmi	r0, r0, r4, lsl r0
     718:	400016dc 	ldrmid	r1, [r0], -ip

0000071c <_lseek_r>:
  ptr = ptr;
  dir = dir;
  
  return 0;
}
     71c:	e3a00000 	mov	r0, #0	; 0x0
     720:	e12fff1e 	bx	lr

00000724 <_close_r>:

/***************************************************************************/

int _write_r (struct _reent *r, int file, char * ptr, int len)
{  
  r = r;
  file = file;
  ptr = ptr;

#if 1
  int index;

  /* For example, output string by UART */
  for(index=0; index<len; index++)
  {
    if (ptr[index] == '\n')
    {
      UARTTransmitByte('\r',UART_CH_0);
    }

    UARTTransmitByte(ptr[index],UART_CH_0);
  }
#endif

  
  return len;
}

/***************************************************************************/

int _close_r (struct _reent *r, int file)
{
  return 0;
}
     724:	e3a00000 	mov	r0, #0	; 0x0
     728:	e12fff1e 	bx	lr

0000072c <_isatty_r>:

/***************************************************************************/

/* Register name faking - works in collusion with the linker.  */
register char * stack_ptr asm ("sp");

caddr_t _sbrk_r (struct _reent *r, int incr)
{
  extern char   end asm ("end"); /* Defined by the linker.  */
  static char * heap_end;
  unsigned long n;
  char *        prev_heap_end;
  if (heap_end == NULL)
    heap_end = &end;
  
  prev_heap_end = heap_end;
  
  if (heap_end + incr > stack_ptr)
  {
	  uart_puts("\n Heap > stack");
      /* Some of the libstdc++-v3 tests rely upon detecting
        out of memory errors, so do not abort here.  */
#if 0
      extern void DABT_Routine(void);

      n = (unsigned long)stack_ptr;

      uart_puts("0x");
      uart_putc('0' + ((n>>7) & 0xf));
      uart_putc('0' + ((n>>6) & 0xf));
      uart_putc('0' + ((n>>5) & 0xf));
      uart_putc('0' + ((n>>4) & 0xf));
      uart_putc('0' + ((n>>3) & 0xf));
      uart_putc('0' + ((n>>2) & 0xf));
      uart_putc('0' + ((n>>1) & 0xf));
      uart_putc('0' + ((n) & 0xf));
      uart_putc(' ');

      n = (unsigned long)(heap_end);

      uart_puts("0x");
      uart_putc('0' + ((n>>7) & 0xf));
      uart_putc('0' + ((n>>6) & 0xf));
      uart_putc('0' + ((n>>5) & 0xf));
      uart_putc('0' + ((n>>4) & 0xf));
      uart_putc('0' + ((n>>3) & 0xf));
      uart_putc('0' + ((n>>2) & 0xf));
      uart_putc('0' + ((n>>1) & 0xf));
      uart_putc('0' + ((n) & 0xf));
      uart_putc(' ');

      uart_puts("_sbrk: Heap and stack collision\n");
      
      DABT_Routine ();
#else
      errno = ENOMEM;
      return (caddr_t) -1;
#endif
  }
  
  heap_end += incr;

  return (caddr_t) prev_heap_end;
}

/***************************************************************************/

int _fstat_r (struct _reent *r, int file, struct stat * st)
{
  r = r; 
  file = file;
   
  memset (st, 0, sizeof (* st));
  st->st_mode = S_IFCHR;
  return 0;
}

/***************************************************************************/

int _isatty_r(struct _reent *r, int fd)
{
  r = r;
  fd = fd;
   
  return 1;
}
     72c:	e3a00001 	mov	r0, #1	; 0x1
     730:	e12fff1e 	bx	lr

00000734 <_fstat_r>:
     734:	e92d4010 	stmdb	sp!, {r4, lr}
     738:	e1a04002 	mov	r4, r2
     73c:	e1a00002 	mov	r0, r2
     740:	e3a01000 	mov	r1, #0	; 0x0
     744:	e3a0203c 	mov	r2, #60	; 0x3c
     748:	eb002e79 	bl	c134 <memset>
     74c:	e3a03a02 	mov	r3, #8192	; 0x2000
     750:	e5843004 	str	r3, [r4, #4]
     754:	e3a00000 	mov	r0, #0	; 0x0
     758:	e8bd8010 	ldmia	sp!, {r4, pc}

0000075c <_sbrk_r>:
     75c:	e52de004 	str	lr, [sp, #-4]!
     760:	e59f204c 	ldr	r2, [pc, #76]	; 7b4 <prog+0x76c>
     764:	e5923000 	ldr	r3, [r2]
     768:	e3530000 	cmp	r3, #0	; 0x0
     76c:	059f3044 	ldreq	r3, [pc, #68]	; 7b8 <prog+0x770>
     770:	05823000 	streq	r3, [r2]
     774:	e59f3038 	ldr	r3, [pc, #56]	; 7b4 <prog+0x76c>
     778:	e5930000 	ldr	r0, [r3]
     77c:	e0801001 	add	r1, r0, r1
     780:	e151000d 	cmp	r1, sp
     784:	9a000007 	bls	7a8 <_sbrk_r+0x4c>
     788:	e59f002c 	ldr	r0, [pc, #44]	; 7bc <prog+0x774>
     78c:	e3a01000 	mov	r1, #0	; 0x0
     790:	eb00011e 	bl	c10 <UARTTransmitString>
     794:	eb002b1e 	bl	b414 <__errno>
     798:	e3a0300c 	mov	r3, #12	; 0xc
     79c:	e5803000 	str	r3, [r0]
     7a0:	e3e00000 	mvn	r0, #0	; 0x0
     7a4:	e49df004 	ldr	pc, [sp], #4
     7a8:	e59f3004 	ldr	r3, [pc, #4]	; 7b4 <prog+0x76c>
     7ac:	e5831000 	str	r1, [r3]
     7b0:	e49df004 	ldr	pc, [sp], #4
     7b4:	4000083c 	andmi	r0, r0, ip, lsr r8
     7b8:	400036a8 	andmi	r3, r0, r8, lsr #13
     7bc:	000147c8 	andeq	r4, r1, r8, asr #15

000007c0 <_read_r>:
     7c0:	e52de004 	str	lr, [sp, #-4]!
     7c4:	eb002b12 	bl	b414 <__errno>
     7c8:	e3a03016 	mov	r3, #22	; 0x16
     7cc:	e5803000 	str	r3, [r0]
     7d0:	e3e00000 	mvn	r0, #0	; 0x0
     7d4:	e49df004 	ldr	pc, [sp], #4

000007d8 <_write_r>:
     7d8:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
     7dc:	e1a06002 	mov	r6, r2
     7e0:	e2537000 	subs	r7, r3, #0	; 0x0
     7e4:	da00000c 	ble	81c <_write_r+0x44>
     7e8:	e3a04000 	mov	r4, #0	; 0x0
     7ec:	e1a05004 	mov	r5, r4
     7f0:	e7d43006 	ldrb	r3, [r4, r6]
     7f4:	e353000a 	cmp	r3, #10	; 0xa
     7f8:	03a0000d 	moveq	r0, #13	; 0xd
     7fc:	03a01000 	moveq	r1, #0	; 0x0
     800:	0b0000dc 	bleq	b78 <UARTTransmitByte>
     804:	e7d50006 	ldrb	r0, [r5, r6]
     808:	e3a01000 	mov	r1, #0	; 0x0
     80c:	eb0000d9 	bl	b78 <UARTTransmitByte>
     810:	e2844001 	add	r4, r4, #1	; 0x1
     814:	e1570004 	cmp	r7, r4
     818:	1afffff3 	bne	7ec <_write_r+0x14>
     81c:	e1a00007 	mov	r0, r7
     820:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}

00000824 <UARTInit>:

/* the "location parameter is used when the particular channel can be connected
 * to many different places. the order is P0_x, P1_x, etc. */
void	UARTInit(unsigned int baud, char channel, char location)
{
     824:	e92d4030 	stmdb	sp!, {r4, r5, lr}
     828:	e1a0c000 	mov	ip, r0
     82c:	e20240ff 	and	r4, r2, #255	; 0xff
    unsigned int pclkoffset,  div_l, div_h;

    switch (channel)
     830:	e21110ff 	ands	r1, r1, #255	; 0xff
     834:	0a000002 	beq	844 <UARTInit+0x20>
     838:	e3510001 	cmp	r1, #1	; 0x1
     83c:	18bd8030 	ldmneia	sp!, {r4, r5, pc}
     840:	ea000022 	b	8d0 <UARTInit+0xac>
	{
		case UART_CH_0:
			PCLKSEL0 &= ~(0x3<<6);
     844:	e3a0420e 	mov	r4, #-536870912	; 0xe0000000
     848:	e284597f 	add	r5, r4, #2080768	; 0x1fc000
     84c:	e59531a8 	ldr	r3, [r5, #424]
     850:	e3c330c0 	bic	r3, r3, #192	; 0xc0
     854:	e58531a8 	str	r3, [r5, #424]
			pclkoffset = 6;
			break;

		case UART_CH_1:
			PCLKSEL0 &= ~(0x3<<8);
			pclkoffset = 8;
			break;

/*		case UART_CH_2:
			PCLKSEL0 &= ~(0x3<<48);
			pclkoffset = 48;
			break;

		case UART_CH_3:
			PCLKSEL0 &= ~(0x3<<50);
			pclkoffset = 50;
			break;
*/
		default:
			return;
	}


	div_h = ((UART_CLK/baud) >> 12) & 0xff;
     858:	e3a00611 	mov	r0, #17825792	; 0x1100000
     85c:	e2800baa 	add	r0, r0, #174080	; 0x2a800
     860:	e2800080 	add	r0, r0, #128	; 0x80
     864:	e1a0100c 	mov	r1, ip
     868:	eb002582 	bl	9e78 <__aeabi_uidiv>
     86c:	e1a01620 	mov	r1, r0, lsr #12
     870:	e20110ff 	and	r1, r1, #255	; 0xff
	div_l = ((UART_CLK/baud+8) >> 4) & 0xff;
     874:	e2800008 	add	r0, r0, #8	; 0x8
     878:	e1a00220 	mov	r0, r0, lsr #4
     87c:	e20000ff 	and	r0, r0, #255	; 0xff

	switch (channel)
	{
		case UART_CH_0:
			PINSEL0 &= ~(0x00000050);
     880:	e284290b 	add	r2, r4, #180224	; 0x2c000
     884:	e5923000 	ldr	r3, [r2]
     888:	e3c33050 	bic	r3, r3, #80	; 0x50
     88c:	e5823000 	str	r3, [r2]
			PINSEL0 |= 0x00000050;
     890:	e5923000 	ldr	r3, [r2]
     894:	e3833050 	orr	r3, r3, #80	; 0x50
     898:	e5823000 	str	r3, [r2]
			PCONP |= 0x1<<3;
     89c:	e59530c4 	ldr	r3, [r5, #196]
     8a0:	e3833008 	orr	r3, r3, #8	; 0x8
     8a4:	e58530c4 	str	r3, [r5, #196]
			U0LCR = 0x83;   /* 8 bits, no Parity, 1 Stop bit */
     8a8:	e2844903 	add	r4, r4, #49152	; 0xc000
     8ac:	e3a03083 	mov	r3, #131	; 0x83
     8b0:	e584300c 	str	r3, [r4, #12]
			U0DLM = div_h;
     8b4:	e5841004 	str	r1, [r4, #4]
			U0DLL = div_l;
     8b8:	e5840000 	str	r0, [r4]
			U0LCR = 0x03;   /* DLAB = 0 */
     8bc:	e2433080 	sub	r3, r3, #128	; 0x80
     8c0:	e584300c 	str	r3, [r4, #12]
			U0FCR = 0x07;   /* Enable and reset TX and RX FIFO. */
     8c4:	e2833004 	add	r3, r3, #4	; 0x4
     8c8:	e5843008 	str	r3, [r4, #8]
     8cc:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
     8d0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
     8d4:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
     8d8:	e59321a8 	ldr	r2, [r3, #424]
     8dc:	e3c22c03 	bic	r2, r2, #768	; 0x300
     8e0:	e58321a8 	str	r2, [r3, #424]
     8e4:	e3a00611 	mov	r0, #17825792	; 0x1100000
     8e8:	e2800baa 	add	r0, r0, #174080	; 0x2a800
     8ec:	e2800080 	add	r0, r0, #128	; 0x80
     8f0:	e1a0100c 	mov	r1, ip
     8f4:	eb00255f 	bl	9e78 <__aeabi_uidiv>
			break;

		case UART_CH_1:
			switch (location)
     8f8:	e3540001 	cmp	r4, #1	; 0x1
     8fc:	0a000012 	beq	94c <UARTInit+0x128>
     900:	3a000002 	bcc	910 <UARTInit+0xec>
     904:	e3540002 	cmp	r4, #2	; 0x2
     908:	1a00001d 	bne	984 <UARTInit+0x160>
     90c:	ea000017 	b	970 <UARTInit+0x14c>
			{
				case 0:
					PINSEL0 &= ~(0xC0000000);
     910:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
     914:	e282290b 	add	r2, r2, #180224	; 0x2c000
     918:	e5923000 	ldr	r3, [r2]
     91c:	e3c33103 	bic	r3, r3, #-1073741824	; 0xc0000000
     920:	e5823000 	str	r3, [r2]
					PINSEL0 |= 0x40000000;
     924:	e5923000 	ldr	r3, [r2]
     928:	e3833101 	orr	r3, r3, #1073741824	; 0x40000000
     92c:	e5823000 	str	r3, [r2]
					PINSEL1 &= ~(0x00000003);
     930:	e5923004 	ldr	r3, [r2, #4]
     934:	e3c33003 	bic	r3, r3, #3	; 0x3
     938:	e5823004 	str	r3, [r2, #4]
					PINSEL1 |= 0x00000001;
     93c:	e5923004 	ldr	r3, [r2, #4]
     940:	e3833001 	orr	r3, r3, #1	; 0x1
     944:	e5823004 	str	r3, [r2, #4]
     948:	ea00000d 	b	984 <UARTInit+0x160>
					break;

				case 1:
					PINSEL4 &= ~(0x0000000F);
     94c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
     950:	e283390b 	add	r3, r3, #180224	; 0x2c000
     954:	e5932010 	ldr	r2, [r3, #16]
     958:	e3c2200f 	bic	r2, r2, #15	; 0xf
     95c:	e5832010 	str	r2, [r3, #16]
					PINSEL4 |= 0x00000000A;
     960:	e5932010 	ldr	r2, [r3, #16]
     964:	e382200a 	orr	r2, r2, #10	; 0xa
     968:	e5832010 	str	r2, [r3, #16]
     96c:	ea000004 	b	984 <UARTInit+0x160>
					break;

				case 2:
					PINSEL7 |= 0x0000000F;
     970:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
     974:	e282290b 	add	r2, r2, #180224	; 0x2c000
     978:	e592301c 	ldr	r3, [r2, #28]
     97c:	e383300f 	orr	r3, r3, #15	; 0xf
     980:	e582301c 	str	r3, [r2, #28]
					break;
			}
			PCONP |= 0x1<<4;
     984:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
     988:	e282197f 	add	r1, r2, #2080768	; 0x1fc000
     98c:	e59130c4 	ldr	r3, [r1, #196]
     990:	e3833010 	orr	r3, r3, #16	; 0x10
     994:	e58130c4 	str	r3, [r1, #196]
			U1LCR = 0x83;   /* 8 bits, no Parity, 1 Stop bit */
     998:	e2822801 	add	r2, r2, #65536	; 0x10000
     99c:	e3a03083 	mov	r3, #131	; 0x83
     9a0:	e582300c 	str	r3, [r2, #12]
     9a4:	e1a03620 	mov	r3, r0, lsr #12
     9a8:	e20330ff 	and	r3, r3, #255	; 0xff
			U1DLM = div_h;
     9ac:	e5823004 	str	r3, [r2, #4]
     9b0:	e2803008 	add	r3, r0, #8	; 0x8
     9b4:	e1a03223 	mov	r3, r3, lsr #4
     9b8:	e20330ff 	and	r3, r3, #255	; 0xff
			U1DLL = div_l;
     9bc:	e5823000 	str	r3, [r2]
			U1LCR = 0x03;   /* DLAB = 0 */
     9c0:	e3a03003 	mov	r3, #3	; 0x3
     9c4:	e582300c 	str	r3, [r2, #12]
			U1FCR = 0x07;   /* Enable and reset TX and RX FIFO. */
     9c8:	e2833004 	add	r3, r3, #4	; 0x4
     9cc:	e5823008 	str	r3, [r2, #8]
     9d0:	e8bd8030 	ldmia	sp!, {r4, r5, pc}

000009d4 <UARTIsDataReady>:
			break;

		case UART_CH_2:
			switch (location)
			{
				case 0:
					PINSEL0 &= ~(0x00F00000);
					PINSEL0 |=   0x00500000;
					break;

				case 1:
					PINSEL4 &= ~(0x000F0000);
					PINSEL4 |=   0x000A0000;
					break;

				case 2:
					PINSEL9 &= ~(0x0000F000);
					PINSEL9 |=   0x0000A000;
					break;
			}
			PCONP |= 0x1<<24;
			U2LCR = 0x83;   /* 8 bits, no Parity, 1 Stop bit */
			U2DLM = div_h;
			U2DLL = div_l;
			U2LCR = 0x03;   /* DLAB = 0 */
			U2FCR = 0x07;   /* Enable and reset TX and RX FIFO. */
			break;

		case UART_CH_3:
			switch (location)
			{
				case 0:
					PINSEL0 &= ~(0x0000000F);
					PINSEL0 |=   0x0000000A;
					break;

				case 1:
					PINSEL1 |=   0x003C0000;
					break;

				case 2:

					PINSEL9 |=   0x0F000000;
					break;
			}
			PCONP |= 0x1<<25;
			U3LCR = 0x83;   /* 8 bits, no Parity, 1 Stop bit */
			U3DLM = div_h;
			U3DLL = div_l;
			U3LCR = 0x03;   /* DLAB = 0 */
			U3FCR = 0x07;   /* Enable and reset TX and RX FIFO. */
			break;
	}
}


char UARTIsDataReady(char channel)
{
     9d4:	e20000ff 	and	r0, r0, #255	; 0xff
	switch (channel)
     9d8:	e3500004 	cmp	r0, #4	; 0x4
     9dc:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
     9e0:	ea000004 	b	9f8 <prog+0x9b0>
     9e4:	00000a00 	andeq	r0, r0, r0, lsl #20
     9e8:	00000a14 	andeq	r0, r0, r4, lsl sl
     9ec:	00000a28 	andeq	r0, r0, r8, lsr #20
     9f0:	000009f8 	streqd	r0, [r0], -r8
     9f4:	00000a3c 	andeq	r0, r0, ip, lsr sl
     9f8:	e3a00000 	mov	r0, #0	; 0x0
     9fc:	e12fff1e 	bx	lr
	{
		case UART_CH_0:
			if (U0LSR & 0x01) return TRUE;
     a00:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
     a04:	e2833903 	add	r3, r3, #49152	; 0xc000
     a08:	e5933014 	ldr	r3, [r3, #20]
     a0c:	e2030001 	and	r0, r3, #1	; 0x1
     a10:	e12fff1e 	bx	lr
				else return FALSE;

		case UART_CH_1:
			if (U1LSR & 0x01) return TRUE;
     a14:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
     a18:	e2833801 	add	r3, r3, #65536	; 0x10000
     a1c:	e5933014 	ldr	r3, [r3, #20]
     a20:	e2030001 	and	r0, r3, #1	; 0x1
     a24:	e12fff1e 	bx	lr
				else return FALSE;

		case UART_CH_2:
			if (U2LSR & 0x01) return TRUE;
     a28:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
     a2c:	e283391e 	add	r3, r3, #491520	; 0x78000
     a30:	e5933014 	ldr	r3, [r3, #20]
     a34:	e2030001 	and	r0, r3, #1	; 0x1
     a38:	e12fff1e 	bx	lr
				else return FALSE;

		case UART_CH_3:
			if (U3LSR & 0x01) return TRUE;
     a3c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
     a40:	e283391f 	add	r3, r3, #507904	; 0x7c000
     a44:	e5933014 	ldr	r3, [r3, #20]
     a48:	e2030001 	and	r0, r3, #1	; 0x1
				else return FALSE;

		default:
			return FALSE;
	}

}
     a4c:	e12fff1e 	bx	lr

00000a50 <UARTWaitForByte>:
char UARTWaitForByte(char channel)
{
     a50:	e20000ff 	and	r0, r0, #255	; 0xff
	switch (channel)
     a54:	e3500004 	cmp	r0, #4	; 0x4
     a58:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
     a5c:	ea000004 	b	a74 <prog+0xa2c>
     a60:	00000a7c 	andeq	r0, r0, ip, ror sl
     a64:	00000a9c 	muleq	r0, ip, sl
     a68:	00000abc 	streqh	r0, [r0], -ip
     a6c:	00000a74 	andeq	r0, r0, r4, ror sl
     a70:	00000adc 	ldreqd	r0, [r0], -ip
     a74:	e3a00000 	mov	r0, #0	; 0x0
     a78:	e12fff1e 	bx	lr
	{
		case UART_CH_0:
			while((U0LSR & 0x01)==0);
     a7c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
     a80:	e2832903 	add	r2, r3, #49152	; 0xc000
     a84:	e5923014 	ldr	r3, [r2, #20]
     a88:	e3130001 	tst	r3, #1	; 0x1
     a8c:	0afffffa 	beq	a7c <prog+0xa34>
			return U0RBR;
     a90:	e5923000 	ldr	r3, [r2]
     a94:	e20300ff 	and	r0, r3, #255	; 0xff
     a98:	e12fff1e 	bx	lr

		case UART_CH_1:
			while((U1LSR & 0x01)==0);
     a9c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
     aa0:	e2832801 	add	r2, r3, #65536	; 0x10000
     aa4:	e5923014 	ldr	r3, [r2, #20]
     aa8:	e3130001 	tst	r3, #1	; 0x1
     aac:	0afffffa 	beq	a9c <prog+0xa54>
			return U1RBR;
     ab0:	e5923000 	ldr	r3, [r2]
     ab4:	e20300ff 	and	r0, r3, #255	; 0xff
     ab8:	e12fff1e 	bx	lr

		case UART_CH_2:
			while((U2LSR & 0x01)==0);
     abc:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
     ac0:	e283291e 	add	r2, r3, #491520	; 0x78000
     ac4:	e5923014 	ldr	r3, [r2, #20]
     ac8:	e3130001 	tst	r3, #1	; 0x1
     acc:	0afffffa 	beq	abc <prog+0xa74>
			return U2RBR;
     ad0:	e5923000 	ldr	r3, [r2]
     ad4:	e20300ff 	and	r0, r3, #255	; 0xff
     ad8:	e12fff1e 	bx	lr

		case UART_CH_3:
			while((U3LSR & 0x01)==0);
     adc:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
     ae0:	e283291f 	add	r2, r3, #507904	; 0x7c000
     ae4:	e5923014 	ldr	r3, [r2, #20]
     ae8:	e3130001 	tst	r3, #1	; 0x1
     aec:	0afffffa 	beq	adc <prog+0xa94>
			return U3RBR;
     af0:	e5923000 	ldr	r3, [r2]
     af4:	e20300ff 	and	r0, r3, #255	; 0xff

		default:
			return FALSE;
	}
}
     af8:	e12fff1e 	bx	lr

00000afc <UARTReceiveByte>:

char UARTReceiveByte(char channel)
{
     afc:	e20000ff 	and	r0, r0, #255	; 0xff
	switch (channel)
     b00:	e3500004 	cmp	r0, #4	; 0x4
     b04:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
     b08:	ea000004 	b	b20 <prog+0xad8>
     b0c:	00000b28 	andeq	r0, r0, r8, lsr #22
     b10:	00000b3c 	andeq	r0, r0, ip, lsr fp
     b14:	00000b50 	andeq	r0, r0, r0, asr fp
     b18:	00000b20 	andeq	r0, r0, r0, lsr #22
     b1c:	00000b64 	andeq	r0, r0, r4, ror #22
     b20:	e3a00000 	mov	r0, #0	; 0x0
     b24:	e12fff1e 	bx	lr
	{
		case UART_CH_0:
			//while((U0LSR & 0x01)==0);	//enquanto não a sinal de caracter vindo da serial.
			return U0RBR;
     b28:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
     b2c:	e2833903 	add	r3, r3, #49152	; 0xc000
     b30:	e5933000 	ldr	r3, [r3]
     b34:	e20300ff 	and	r0, r3, #255	; 0xff
     b38:	e12fff1e 	bx	lr

		case UART_CH_1:
			return U1RBR;
     b3c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
     b40:	e2833801 	add	r3, r3, #65536	; 0x10000
     b44:	e5933000 	ldr	r3, [r3]
     b48:	e20300ff 	and	r0, r3, #255	; 0xff
     b4c:	e12fff1e 	bx	lr

		case UART_CH_2:
			return U2RBR;
     b50:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
     b54:	e283391e 	add	r3, r3, #491520	; 0x78000
     b58:	e5933000 	ldr	r3, [r3]
     b5c:	e20300ff 	and	r0, r3, #255	; 0xff
     b60:	e12fff1e 	bx	lr

		case UART_CH_3:
			return U3RBR;
     b64:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
     b68:	e283391f 	add	r3, r3, #507904	; 0x7c000
     b6c:	e5933000 	ldr	r3, [r3]
     b70:	e20300ff 	and	r0, r3, #255	; 0xff

		default:
			return FALSE;
	}
}
     b74:	e12fff1e 	bx	lr

00000b78 <UARTTransmitByte>:

void	UARTTransmitByte(char ch, char channel)
{
     b78:	e20000ff 	and	r0, r0, #255	; 0xff
     b7c:	e20110ff 	and	r1, r1, #255	; 0xff
	switch (channel)
     b80:	e3510004 	cmp	r1, #4	; 0x4
     b84:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
     b88:	ea00001f 	b	c0c <prog+0xbc4>
     b8c:	00000ba0 	andeq	r0, r0, r0, lsr #23
     b90:	00000bbc 	streqh	r0, [r0], -ip
     b94:	00000bd8 	ldreqd	r0, [r0], -r8
     b98:	00000c0c 	andeq	r0, r0, ip, lsl #24
     b9c:	00000bf4 	streqd	r0, [r0], -r4
	{
		case UART_CH_0:
			while (!(U0LSR & 0x20));
     ba0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
     ba4:	e2832903 	add	r2, r3, #49152	; 0xc000
     ba8:	e5923014 	ldr	r3, [r2, #20]
     bac:	e3130020 	tst	r3, #32	; 0x20
     bb0:	0afffffa 	beq	ba0 <prog+0xb58>
			U0THR = ch;
     bb4:	e5820000 	str	r0, [r2]
     bb8:	e12fff1e 	bx	lr
			break;

		case UART_CH_1:
			while (!(U1LSR & 0x20));
     bbc:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
     bc0:	e2832801 	add	r2, r3, #65536	; 0x10000
     bc4:	e5923014 	ldr	r3, [r2, #20]
     bc8:	e3130020 	tst	r3, #32	; 0x20
     bcc:	0afffffa 	beq	bbc <prog+0xb74>
			U1THR = ch;
     bd0:	e5820000 	str	r0, [r2]
     bd4:	e12fff1e 	bx	lr
			break;

		case UART_CH_2:
			while (!(U2LSR & 0x20));
     bd8:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
     bdc:	e283291e 	add	r2, r3, #491520	; 0x78000
     be0:	e5923014 	ldr	r3, [r2, #20]
     be4:	e3130020 	tst	r3, #32	; 0x20
     be8:	0afffffa 	beq	bd8 <prog+0xb90>
			U2THR = ch;
     bec:	e5820000 	str	r0, [r2]
     bf0:	e12fff1e 	bx	lr
			break;

		case UART_CH_3:
			while (!(U3LSR & 0x20));
     bf4:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
     bf8:	e283291f 	add	r2, r3, #507904	; 0x7c000
     bfc:	e5923014 	ldr	r3, [r2, #20]
     c00:	e3130020 	tst	r3, #32	; 0x20
     c04:	0afffffa 	beq	bf4 <prog+0xbac>
			U3THR = ch;
     c08:	e5820000 	str	r0, [r2]
     c0c:	e12fff1e 	bx	lr

00000c10 <UARTTransmitString>:
			break;

		default:
			break;
	}

}

void UARTTransmitString(char *str, char channel)
{
     c10:	e92d4030 	stmdb	sp!, {r4, r5, lr}
     c14:	e1a03000 	mov	r3, r0
     c18:	e20150ff 	and	r5, r1, #255	; 0xff
	while(*str) UARTTransmitByte(*str++, channel);
     c1c:	e5d00000 	ldrb	r0, [r0]
     c20:	e3500000 	cmp	r0, #0	; 0x0
     c24:	08bd8030 	ldmeqia	sp!, {r4, r5, pc}
     c28:	e1a04003 	mov	r4, r3
     c2c:	e1a01005 	mov	r1, r5
     c30:	ebffffd0 	bl	b78 <UARTTransmitByte>
     c34:	e5f40001 	ldrb	r0, [r4, #1]!
     c38:	e3500000 	cmp	r0, #0	; 0x0
     c3c:	1afffffa 	bne	c2c <UARTTransmitString+0x1c>
     c40:	e8bd8030 	ldmia	sp!, {r4, r5, pc}

00000c44 <u2str>:
#define edigito(c) ((c)>='0' && (c)<='9')

/* uso interno: Escreve o numero de tras para a frente */
int u2str(char *buf, unsigned int num, int base)
{
     c44:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
     c48:	e1a07000 	mov	r7, r0
     c4c:	e1a04001 	mov	r4, r1
     c50:	e3a05000 	mov	r5, #0	; 0x0
     c54:	e1a06002 	mov	r6, r2
int nd=0, c;
do	{
	c = (num % base) + '0';
     c58:	e1a00004 	mov	r0, r4
     c5c:	e1a01006 	mov	r1, r6
     c60:	eb0024c8 	bl	9f88 <__umodsi3>
     c64:	e2803030 	add	r3, r0, #48	; 0x30
	if(c > '9') c+=7;
     c68:	e3530039 	cmp	r3, #57	; 0x39
     c6c:	c2803037 	addgt	r3, r0, #55	; 0x37
	buf[nd++] = c;
     c70:	e7c53007 	strb	r3, [r5, r7]
     c74:	e2855001 	add	r5, r5, #1	; 0x1
	num /= base;
     c78:	e1a00004 	mov	r0, r4
     c7c:	e1a01006 	mov	r1, r6
     c80:	eb00247c 	bl	9e78 <__aeabi_uidiv>
	} while(num);
     c84:	e2504000 	subs	r4, r0, #0	; 0x0
     c88:	1afffff2 	bne	c58 <u2str+0x14>
return nd;
}
     c8c:	e1a00005 	mov	r0, r5
     c90:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}

00000c94 <atoi>:

/* Converte string para numero (similar ao atoi da biblioteca padrao);
 Usa-se assim:
char buf[20];	// Para armazenar o texto lido
int i;		// Vai ler o numero i
U0gets(buf,20);	// Le como texto
i = atoi(buf);	// Converte para numero
*/
int atoi(char *str)
{
     c94:	e1a01000 	mov	r1, r0
int x, d, s;
x=s=0;
while(!edigito(*str)) s |= (*str++ == '-');
     c98:	e5d02000 	ldrb	r2, [r0]
     c9c:	e2423030 	sub	r3, r2, #48	; 0x30
     ca0:	e3530009 	cmp	r3, #9	; 0x9
     ca4:	93a0c000 	movls	ip, #0	; 0x0
     ca8:	9a000007 	bls	ccc <atoi+0x38>
     cac:	e3a0c000 	mov	ip, #0	; 0x0
     cb0:	e352002d 	cmp	r2, #45	; 0x2d
     cb4:	038cc001 	orreq	ip, ip, #1	; 0x1
     cb8:	e5f02001 	ldrb	r2, [r0, #1]!
     cbc:	e2423030 	sub	r3, r2, #48	; 0x30
     cc0:	e3530009 	cmp	r3, #9	; 0x9
     cc4:	8afffff9 	bhi	cb0 <atoi+0x1c>
     cc8:	e1a01000 	mov	r1, r0
do	{
	d = *str++;
     ccc:	e5d10000 	ldrb	r0, [r1]
	if(!edigito(d)) break;
     cd0:	e2403030 	sub	r3, r0, #48	; 0x30
     cd4:	e3530009 	cmp	r3, #9	; 0x9
     cd8:	83a01000 	movhi	r1, #0	; 0x0
     cdc:	8a000008 	bhi	d04 <atoi+0x70>
     ce0:	e1a02001 	mov	r2, r1
     ce4:	e3a01000 	mov	r1, #0	; 0x0
	x = x*10 + d - '0';
     ce8:	e0813101 	add	r3, r1, r1, lsl #2
     cec:	e0803083 	add	r3, r0, r3, lsl #1
     cf0:	e2431030 	sub	r1, r3, #48	; 0x30
     cf4:	e5f20001 	ldrb	r0, [r2, #1]!
     cf8:	e2403030 	sub	r3, r0, #48	; 0x30
     cfc:	e3530009 	cmp	r3, #9	; 0x9
     d00:	9afffff8 	bls	ce8 <atoi+0x54>
	} while(1);
return s? -x: x;
     d04:	e35c0000 	cmp	ip, #0	; 0x0
     d08:	12611000 	rsbne	r1, r1, #0	; 0x0
}
     d0c:	e1a00001 	mov	r0, r1
     d10:	e12fff1e 	bx	lr

00000d14 <atod>:

/* Converte string para numero tipo double (com notacao cientifica)*/
double atod(char *str)
{
     d14:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d18:	e24dd004 	sub	sp, sp, #4	; 0x4
     d1c:	e1a07000 	mov	r7, r0
double x, p;
int d, s;
p=1.0;
x=0.0; s=0;
while(*str == ' ') str++;
     d20:	e5d03000 	ldrb	r3, [r0]
     d24:	e3530020 	cmp	r3, #32	; 0x20
     d28:	1a000003 	bne	d3c <atod+0x28>
     d2c:	e5f03001 	ldrb	r3, [r0, #1]!
     d30:	e3530020 	cmp	r3, #32	; 0x20
     d34:	0afffffc 	beq	d2c <atod+0x18>
     d38:	e1a07000 	mov	r7, r0
if(*str == '-') { s=1; str++; }
     d3c:	e353002d 	cmp	r3, #45	; 0x2d
     d40:	13a03000 	movne	r3, #0	; 0x0
     d44:	158d3000 	strne	r3, [sp]
     d48:	02877001 	addeq	r7, r7, #1	; 0x1
     d4c:	03a03001 	moveq	r3, #1	; 0x1
     d50:	058d3000 	streq	r3, [sp]
     d54:	e3a08000 	mov	r8, #0	; 0x0
     d58:	e3a09000 	mov	r9, #0	; 0x0
     d5c:	e3a0a5ff 	mov	sl, #1069547520	; 0x3fc00000
     d60:	e28aa603 	add	sl, sl, #3145728	; 0x300000
     d64:	e3a0b000 	mov	fp, #0	; 0x0
     d68:	ea000014 	b	dc0 <atod+0xac>
do	{
	d = *str++;
	if(d=='.') { d = *str++; s |= 2; }
	if(d < '0' || d > '9') break;
	x = x*10 + d - '0';
     d6c:	e1a00008 	mov	r0, r8
     d70:	e1a01009 	mov	r1, r9
     d74:	e3a02101 	mov	r2, #1073741824	; 0x40000000
     d78:	e2822709 	add	r2, r2, #2359296	; 0x240000
     d7c:	e3a03000 	mov	r3, #0	; 0x0
     d80:	eb0025d1 	bl	a4cc <__muldf3>
     d84:	e1a04000 	mov	r4, r0
     d88:	e1a05001 	mov	r5, r1
     d8c:	e1a00006 	mov	r0, r6
     d90:	eb0027bd 	bl	ac8c <__floatsidf>
     d94:	e1a02000 	mov	r2, r0
     d98:	e1a03001 	mov	r3, r1
     d9c:	e1a00004 	mov	r0, r4
     da0:	e1a01005 	mov	r1, r5
     da4:	eb0025a1 	bl	a430 <__adddf3>
     da8:	e3a02101 	mov	r2, #1073741824	; 0x40000000
     dac:	e2822712 	add	r2, r2, #4718592	; 0x480000
     db0:	e3a03000 	mov	r3, #0	; 0x0
     db4:	eb002585 	bl	a3d0 <__subdf3>
     db8:	e1a08000 	mov	r8, r0
     dbc:	e1a09001 	mov	r9, r1
     dc0:	e4d70001 	ldrb	r0, [r7], #1
     dc4:	e350002e 	cmp	r0, #46	; 0x2e
     dc8:	11a06000 	movne	r6, r0
     dcc:	04d76001 	ldreqb	r6, [r7], #1
     dd0:	059d3000 	ldreq	r3, [sp]
     dd4:	03833002 	orreq	r3, r3, #2	; 0x2
     dd8:	058d3000 	streq	r3, [sp]
     ddc:	e2463030 	sub	r3, r6, #48	; 0x30
     de0:	e3530009 	cmp	r3, #9	; 0x9
     de4:	8a00000b 	bhi	e18 <atod+0x104>
	if(s & 2) p *=10.;
     de8:	e59d3000 	ldr	r3, [sp]
     dec:	e3130002 	tst	r3, #2	; 0x2
     df0:	0affffdd 	beq	d6c <atod+0x58>
     df4:	e1a0000a 	mov	r0, sl
     df8:	e1a0100b 	mov	r1, fp
     dfc:	e3a02101 	mov	r2, #1073741824	; 0x40000000
     e00:	e2822709 	add	r2, r2, #2359296	; 0x240000
     e04:	e3a03000 	mov	r3, #0	; 0x0
     e08:	eb0025af 	bl	a4cc <__muldf3>
     e0c:	e1a0a000 	mov	sl, r0
     e10:	e1a0b001 	mov	fp, r1
     e14:	eaffffd4 	b	d6c <atod+0x58>
	} while(1);
if(d=='e' || d=='E'){
     e18:	e3560045 	cmp	r6, #69	; 0x45
     e1c:	13560065 	cmpne	r6, #101	; 0x65
     e20:	1a00003c 	bne	f18 <atod+0x204>
	if(*str == '-') { str++; s |= 4; }
     e24:	e5d73000 	ldrb	r3, [r7]
     e28:	e353002d 	cmp	r3, #45	; 0x2d
     e2c:	02877001 	addeq	r7, r7, #1	; 0x1
     e30:	059d3000 	ldreq	r3, [sp]
     e34:	03833004 	orreq	r3, r3, #4	; 0x4
     e38:	058d3000 	streq	r3, [sp]
	if(*str == '+') str++;
     e3c:	e5d73000 	ldrb	r3, [r7]
     e40:	e353002b 	cmp	r3, #43	; 0x2b
     e44:	02877001 	addeq	r7, r7, #1	; 0x1
	d=0;
	while(edigito(*str)) d = 10*d + (*str++) - '0';
     e48:	e5d72000 	ldrb	r2, [r7]
     e4c:	e2423030 	sub	r3, r2, #48	; 0x30
     e50:	e3530009 	cmp	r3, #9	; 0x9
     e54:	83a01000 	movhi	r1, #0	; 0x0
     e58:	8a000008 	bhi	e80 <atod+0x16c>
     e5c:	e1a00007 	mov	r0, r7
     e60:	e3a01000 	mov	r1, #0	; 0x0
     e64:	e0813101 	add	r3, r1, r1, lsl #2
     e68:	e0823083 	add	r3, r2, r3, lsl #1
     e6c:	e2431030 	sub	r1, r3, #48	; 0x30
     e70:	e5f02001 	ldrb	r2, [r0, #1]!
     e74:	e2423030 	sub	r3, r2, #48	; 0x30
     e78:	e3530009 	cmp	r3, #9	; 0x9
     e7c:	9afffff8 	bls	e64 <atod+0x150>
	if(s & 4) while(d--) p *= 10.0;
     e80:	e59d3000 	ldr	r3, [sp]
     e84:	e3130004 	tst	r3, #4	; 0x4
     e88:	0a000005 	beq	ea4 <atod+0x190>
     e8c:	e2413001 	sub	r3, r1, #1	; 0x1
     e90:	e3730001 	cmn	r3, #1	; 0x1
	else while(d--) x *= 10.0;
     e94:	13a04000 	movne	r4, #0	; 0x0
     e98:	12836001 	addne	r6, r3, #1	; 0x1
     e9c:	1a000006 	bne	ebc <atod+0x1a8>
     ea0:	ea00001c 	b	f18 <atod+0x204>
     ea4:	e2413001 	sub	r3, r1, #1	; 0x1
     ea8:	e3730001 	cmn	r3, #1	; 0x1
     eac:	13a04000 	movne	r4, #0	; 0x0
     eb0:	12836001 	addne	r6, r3, #1	; 0x1
     eb4:	1a00000c 	bne	eec <atod+0x1d8>
     eb8:	ea000016 	b	f18 <atod+0x204>
     ebc:	e1a0000a 	mov	r0, sl
     ec0:	e1a0100b 	mov	r1, fp
     ec4:	e3a02101 	mov	r2, #1073741824	; 0x40000000
     ec8:	e2822709 	add	r2, r2, #2359296	; 0x240000
     ecc:	e3a03000 	mov	r3, #0	; 0x0
     ed0:	eb00257d 	bl	a4cc <__muldf3>
     ed4:	e1a0a000 	mov	sl, r0
     ed8:	e1a0b001 	mov	fp, r1
     edc:	e2844001 	add	r4, r4, #1	; 0x1
     ee0:	e1540006 	cmp	r4, r6
     ee4:	0a00000b 	beq	f18 <atod+0x204>
     ee8:	eafffff3 	b	ebc <atod+0x1a8>
     eec:	e1a00008 	mov	r0, r8
     ef0:	e1a01009 	mov	r1, r9
     ef4:	e3a02101 	mov	r2, #1073741824	; 0x40000000
     ef8:	e2822709 	add	r2, r2, #2359296	; 0x240000
     efc:	e3a03000 	mov	r3, #0	; 0x0
     f00:	eb002571 	bl	a4cc <__muldf3>
     f04:	e1a08000 	mov	r8, r0
     f08:	e1a09001 	mov	r9, r1
     f0c:	e2844001 	add	r4, r4, #1	; 0x1
     f10:	e1540006 	cmp	r4, r6
     f14:	1afffff4 	bne	eec <atod+0x1d8>
	}
if(s & 1) x = -x;
     f18:	e59d3000 	ldr	r3, [sp]
     f1c:	e3130001 	tst	r3, #1	; 0x1
     f20:	12883102 	addne	r3, r8, #-2147483648	; 0x80000000
     f24:	11a04009 	movne	r4, r9
     f28:	11a08003 	movne	r8, r3
     f2c:	11a09004 	movne	r9, r4
     f30:	e1a00008 	mov	r0, r8
     f34:	e1a01009 	mov	r1, r9
     f38:	e1a0200a 	mov	r2, sl
     f3c:	e1a0300b 	mov	r3, fp
     f40:	eb002645 	bl	a85c <__divdf3>
return x/p;
}
     f44:	e28dd004 	add	sp, sp, #4	; 0x4
     f48:	e8bd8ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000f4c <dprint>:

/**** dprint Escreve double ******
x	Numero double que sera escrito
campo	Espaco de campo total (largura em caracteres)
frac	Numero de digitos depois do ponto
putc	Nome da funcao que escreve caractere 
retorna o numero de caracteres escritos  */
int dprint(double x, int campo, int frac, void (*putc)(int))
{
     f4c:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f50:	e24dd004 	sub	sp, sp, #4	; 0x4
     f54:	e1a05000 	mov	r5, r0
     f58:	e1a06001 	mov	r6, r1
     f5c:	e1a08002 	mov	r8, r2
     f60:	e1a07003 	mov	r7, r3
     f64:	e59d9028 	ldr	r9, [sp, #40]
int dig, k, sinal=0, npr=1;
double ar;
if(x < 0) { sinal=1; x=-x; campo--; }
     f68:	e3a02000 	mov	r2, #0	; 0x0
     f6c:	e3a03000 	mov	r3, #0	; 0x0
     f70:	eb002728 	bl	ac18 <__ltdf2>
     f74:	e3500000 	cmp	r0, #0	; 0x0
     f78:	a3a03000 	movge	r3, #0	; 0x0
     f7c:	a58d3000 	strge	r3, [sp]
     f80:	b2853102 	addlt	r3, r5, #-2147483648	; 0x80000000
     f84:	b1a04006 	movlt	r4, r6
     f88:	b1a05003 	movlt	r5, r3
     f8c:	b1a06004 	movlt	r6, r4
     f90:	b2488001 	sublt	r8, r8, #1	; 0x1
     f94:	b3a03001 	movlt	r3, #1	; 0x1
     f98:	b58d3000 	strlt	r3, [sp]
for(ar=0.5, k=0; k<frac; k++) ar/=10.0;
     f9c:	e3570000 	cmp	r7, #0	; 0x0
     fa0:	d3a025ff 	movle	r2, #1069547520	; 0x3fc00000
     fa4:	d2822602 	addle	r2, r2, #2097152	; 0x200000
     fa8:	d3a03000 	movle	r3, #0	; 0x0
     fac:	da00000e 	ble	fec <dprint+0xa0>
     fb0:	e3a04000 	mov	r4, #0	; 0x0
     fb4:	e3a025ff 	mov	r2, #1069547520	; 0x3fc00000
     fb8:	e2822602 	add	r2, r2, #2097152	; 0x200000
     fbc:	e3a03000 	mov	r3, #0	; 0x0
     fc0:	e1a00002 	mov	r0, r2
     fc4:	e1a01003 	mov	r1, r3
     fc8:	e3a02101 	mov	r2, #1073741824	; 0x40000000
     fcc:	e2822709 	add	r2, r2, #2359296	; 0x240000
     fd0:	e3a03000 	mov	r3, #0	; 0x0
     fd4:	eb002620 	bl	a85c <__divdf3>
     fd8:	e1a02000 	mov	r2, r0
     fdc:	e1a03001 	mov	r3, r1
     fe0:	e2844001 	add	r4, r4, #1	; 0x1
     fe4:	e1570004 	cmp	r7, r4
     fe8:	1afffff4 	bne	fc0 <dprint+0x74>
x += ar;
     fec:	e1a00005 	mov	r0, r5
     ff0:	e1a01006 	mov	r1, r6
     ff4:	eb00250d 	bl	a430 <__adddf3>
     ff8:	e1a04000 	mov	r4, r0
     ffc:	e1a05001 	mov	r5, r1
k=0;
campo -= (frac+1);
    1000:	e067a008 	rsb	sl, r7, r8
    1004:	e24a6001 	sub	r6, sl, #1	; 0x1
while(x >= 1.0) { x/=10.0; k++; campo--; }
    1008:	e3a025ff 	mov	r2, #1069547520	; 0x3fc00000
    100c:	e2822603 	add	r2, r2, #3145728	; 0x300000
    1010:	e3a03000 	mov	r3, #0	; 0x0
    1014:	eb0026dd 	bl	ab90 <__gedf2>
    1018:	e3500000 	cmp	r0, #0	; 0x0
    101c:	ba000013 	blt	1070 <dprint+0x124>
    1020:	e3a08000 	mov	r8, #0	; 0x0
    1024:	e1a00004 	mov	r0, r4
    1028:	e1a01005 	mov	r1, r5
    102c:	e3a02101 	mov	r2, #1073741824	; 0x40000000
    1030:	e2822709 	add	r2, r2, #2359296	; 0x240000
    1034:	e3a03000 	mov	r3, #0	; 0x0
    1038:	eb002607 	bl	a85c <__divdf3>
    103c:	e1a04000 	mov	r4, r0
    1040:	e1a05001 	mov	r5, r1
    1044:	e2888001 	add	r8, r8, #1	; 0x1
    1048:	e3a025ff 	mov	r2, #1069547520	; 0x3fc00000
    104c:	e2822603 	add	r2, r2, #3145728	; 0x300000
    1050:	e3a03000 	mov	r3, #0	; 0x0
    1054:	eb0026cd 	bl	ab90 <__gedf2>
    1058:	e3500000 	cmp	r0, #0	; 0x0
    105c:	aafffff0 	bge	1024 <dprint+0xd8>
    1060:	e068300a 	rsb	r3, r8, sl
    1064:	e2436001 	sub	r6, r3, #1	; 0x1
if(!k) { k=1; campo--; x/=10.0; }
    1068:	e3580000 	cmp	r8, #0	; 0x0
    106c:	1a000009 	bne	1098 <dprint+0x14c>
    1070:	e2466001 	sub	r6, r6, #1	; 0x1
    1074:	e1a00004 	mov	r0, r4
    1078:	e1a01005 	mov	r1, r5
    107c:	e3a02101 	mov	r2, #1073741824	; 0x40000000
    1080:	e2822709 	add	r2, r2, #2359296	; 0x240000
    1084:	e3a03000 	mov	r3, #0	; 0x0
    1088:	eb0025f3 	bl	a85c <__divdf3>
    108c:	e1a04000 	mov	r4, r0
    1090:	e1a05001 	mov	r5, r1
    1094:	e3a08001 	mov	r8, #1	; 0x1
frac += k;
    1098:	e088b007 	add	fp, r8, r7
while(campo-- > 0) { putc(' '); npr++; }
    109c:	e3560000 	cmp	r6, #0	; 0x0
    10a0:	d3a0a001 	movle	sl, #1	; 0x1
    10a4:	da000007 	ble	10c8 <dprint+0x17c>
    10a8:	e3a0a001 	mov	sl, #1	; 0x1
    10ac:	e086600a 	add	r6, r6, sl
    10b0:	e3a00020 	mov	r0, #32	; 0x20
    10b4:	e1a0e00f 	mov	lr, pc
    10b8:	e12fff19 	bx	r9
    10bc:	e28aa001 	add	sl, sl, #1	; 0x1
    10c0:	e15a0006 	cmp	sl, r6
    10c4:	1afffff9 	bne	10b0 <dprint+0x164>
if(sinal) { putc('-'); npr++; }
    10c8:	e59d3000 	ldr	r3, [sp]
    10cc:	e3530000 	cmp	r3, #0	; 0x0
    10d0:	0a000003 	beq	10e4 <dprint+0x198>
    10d4:	e3a0002d 	mov	r0, #45	; 0x2d
    10d8:	e1a0e00f 	mov	lr, pc
    10dc:	e12fff19 	bx	r9
    10e0:	e28aa001 	add	sl, sl, #1	; 0x1
    10e4:	e1a0700b 	mov	r7, fp
    10e8:	ea00001b 	b	115c <dprint+0x210>
npr += frac;
while(frac--) {
	x *= 10;
    10ec:	e1a00004 	mov	r0, r4
    10f0:	e1a01005 	mov	r1, r5
    10f4:	e3a02101 	mov	r2, #1073741824	; 0x40000000
    10f8:	e2822709 	add	r2, r2, #2359296	; 0x240000
    10fc:	e3a03000 	mov	r3, #0	; 0x0
    1100:	eb0024f1 	bl	a4cc <__muldf3>
    1104:	e1a04000 	mov	r4, r0
    1108:	e1a05001 	mov	r5, r1
	dig = x;
    110c:	eb00271c 	bl	ad84 <__fixdfsi>
    1110:	e1a06000 	mov	r6, r0
	x -= dig;
	putc(dig+'0');
    1114:	e2800030 	add	r0, r0, #48	; 0x30
    1118:	e1a0e00f 	mov	lr, pc
    111c:	e12fff19 	bx	r9
	if(!(--k)) { putc('.'); k=800; }
    1120:	e2588001 	subs	r8, r8, #1	; 0x1
    1124:	1a000003 	bne	1138 <dprint+0x1ec>
    1128:	e3a0002e 	mov	r0, #46	; 0x2e
    112c:	e1a0e00f 	mov	lr, pc
    1130:	e12fff19 	bx	r9
    1134:	e3a08e32 	mov	r8, #800	; 0x320
    1138:	e1a00006 	mov	r0, r6
    113c:	eb0026d2 	bl	ac8c <__floatsidf>
    1140:	e1a02000 	mov	r2, r0
    1144:	e1a03001 	mov	r3, r1
    1148:	e1a00004 	mov	r0, r4
    114c:	e1a01005 	mov	r1, r5
    1150:	eb00249e 	bl	a3d0 <__subdf3>
    1154:	e1a04000 	mov	r4, r0
    1158:	e1a05001 	mov	r5, r1
    115c:	e2477001 	sub	r7, r7, #1	; 0x1
    1160:	e3770001 	cmn	r7, #1	; 0x1
    1164:	1affffe0 	bne	10ec <dprint+0x1a0>
	}
return npr;
}
    1168:	e08a000b 	add	r0, sl, fp
    116c:	e28dd004 	add	sp, sp, #4	; 0x4
    1170:	e8bd8ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001174 <va_printf>:

int va_printf(void (*putc)(int), const char *formato, va_list va)
{
    1174:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1178:	e24dd038 	sub	sp, sp, #56	; 0x38
    117c:	e1a0a000 	mov	sl, r0
    1180:	e1a05002 	mov	r5, r2
char buf[16];
char *s, *ps;
int c,  frac, n, sinal, base, nprinted;
int campo,padchar;
double x, y;
s=(char *)formato;
    1184:	e1a07001 	mov	r7, r1
    1188:	e3a00000 	mov	r0, #0	; 0x0
    118c:	e58d000c 	str	r0, [sp, #12]
    1190:	ea0001f9 	b	197c <prog+0x1934>
nprinted=campo=0;
while((c=*s++)) {
    1194:	e2877001 	add	r7, r7, #1	; 0x1
	if(c != '%') { putc(c); nprinted++; continue;} 
    1198:	e3500025 	cmp	r0, #37	; 0x25
    119c:	0a000006 	beq	11bc <va_printf+0x48>
    11a0:	e1a0e00f 	mov	lr, pc
    11a4:	e12fff1a 	bx	sl
    11a8:	e59d100c 	ldr	r1, [sp, #12]
    11ac:	e2811001 	add	r1, r1, #1	; 0x1
    11b0:	e58d100c 	str	r1, [sp, #12]
    11b4:	e1a0b005 	mov	fp, r5
    11b8:	ea0001ee 	b	1978 <prog+0x1930>
	c=*s++;
    11bc:	e4d74001 	ldrb	r4, [r7], #1
    11c0:	e1a02007 	mov	r2, r7
	sinal=frac=campo=0;
	padchar = ((c=='0')? '0' + 0x100:' ' + 0x100);
    11c4:	e3540030 	cmp	r4, #48	; 0x30
    11c8:	03a09e13 	moveq	r9, #304	; 0x130
    11cc:	0a0001ee 	beq	198c <prog+0x1944>
	if(c=='-') { padchar =' '; c=*s++; }
    11d0:	e354002d 	cmp	r4, #45	; 0x2d
    11d4:	13a09e12 	movne	r9, #288	; 0x120
    11d8:	04d24001 	ldreqb	r4, [r2], #1
    11dc:	03a09020 	moveq	r9, #32	; 0x20
    11e0:	ea0001e9 	b	198c <prog+0x1944>
    11e4:	e3a08000 	mov	r8, #0	; 0x0
	while(edigito(c)) { campo=10*campo+c-'0'; c=*s++; }
    11e8:	e0883108 	add	r3, r8, r8, lsl #2
    11ec:	e0843083 	add	r3, r4, r3, lsl #1
    11f0:	e2438030 	sub	r8, r3, #48	; 0x30
    11f4:	e4d24001 	ldrb	r4, [r2], #1
    11f8:	e2443030 	sub	r3, r4, #48	; 0x30
    11fc:	e3530009 	cmp	r3, #9	; 0x9
    1200:	9afffff8 	bls	11e8 <va_printf+0x74>
	if(c=='.') {
    1204:	e354002e 	cmp	r4, #46	; 0x2e
    1208:	11a07002 	movne	r7, r2
    120c:	13a02000 	movne	r2, #0	; 0x0
    1210:	158d2004 	strne	r2, [sp, #4]
    1214:	1a000015 	bne	1270 <va_printf+0xfc>
		c=*s++;
    1218:	e1a07002 	mov	r7, r2
    121c:	e4d74001 	ldrb	r4, [r7], #1
		while(edigito(c)) { frac=10*frac+c-'0'; c=*s++; }
    1220:	e2443030 	sub	r3, r4, #48	; 0x30
    1224:	e3530009 	cmp	r3, #9	; 0x9
    1228:	83a03000 	movhi	r3, #0	; 0x0
    122c:	858d3004 	strhi	r3, [sp, #4]
    1230:	8a00000e 	bhi	1270 <va_printf+0xfc>
    1234:	e1a01002 	mov	r1, r2
    1238:	e3a00000 	mov	r0, #0	; 0x0
    123c:	e58d0004 	str	r0, [sp, #4]
    1240:	e59d2004 	ldr	r2, [sp, #4]
    1244:	e0823102 	add	r3, r2, r2, lsl #2
    1248:	e0843083 	add	r3, r4, r3, lsl #1
    124c:	e2433030 	sub	r3, r3, #48	; 0x30
    1250:	e58d3004 	str	r3, [sp, #4]
    1254:	e5f14001 	ldrb	r4, [r1, #1]!
    1258:	e2443030 	sub	r3, r4, #48	; 0x30
    125c:	e3530009 	cmp	r3, #9	; 0x9
    1260:	9afffff6 	bls	1240 <va_printf+0xcc>
    1264:	e2817001 	add	r7, r1, #1	; 0x1
    1268:	ea000000 	b	1270 <va_printf+0xfc>
		}
	while(c=='l' || c=='L' || c=='h') c=*s++;
    126c:	e4d74001 	ldrb	r4, [r7], #1
    1270:	e354004c 	cmp	r4, #76	; 0x4c
    1274:	1354006c 	cmpne	r4, #108	; 0x6c
    1278:	0afffffb 	beq	126c <va_printf+0xf8>
    127c:	e3540068 	cmp	r4, #104	; 0x68
    1280:	0afffff9 	beq	126c <va_printf+0xf8>
    1284:	e58d7020 	str	r7, [sp, #32]
	base=10;
	if(c >= 'A' && c <= 'Z') c ^= 0x20;
    1288:	e2443041 	sub	r3, r4, #65	; 0x41
    128c:	e3530019 	cmp	r3, #25	; 0x19
    1290:	92244020 	eorls	r4, r4, #32	; 0x20
	switch(c){
    1294:	e2443025 	sub	r3, r4, #37	; 0x25
    1298:	e3530053 	cmp	r3, #83	; 0x53
    129c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    12a0:	ea000053 	b	13f4 <prog+0x13ac>
    12a4:	0000190c 	andeq	r1, r0, ip, lsl #18
    12a8:	000013f4 	streqd	r1, [r0], -r4
    12ac:	000013f4 	streqd	r1, [r0], -r4
    12b0:	000013f4 	streqd	r1, [r0], -r4
    12b4:	000013f4 	streqd	r1, [r0], -r4
    12b8:	000013f4 	streqd	r1, [r0], -r4
    12bc:	000013f4 	streqd	r1, [r0], -r4
    12c0:	000013f4 	streqd	r1, [r0], -r4
    12c4:	000013f4 	streqd	r1, [r0], -r4
    12c8:	000013f4 	streqd	r1, [r0], -r4
    12cc:	000013f4 	streqd	r1, [r0], -r4
    12d0:	000013f4 	streqd	r1, [r0], -r4
    12d4:	000013f4 	streqd	r1, [r0], -r4
    12d8:	000013f4 	streqd	r1, [r0], -r4
    12dc:	000013f4 	streqd	r1, [r0], -r4
    12e0:	000013f4 	streqd	r1, [r0], -r4
    12e4:	000013f4 	streqd	r1, [r0], -r4
    12e8:	000013f4 	streqd	r1, [r0], -r4
    12ec:	000013f4 	streqd	r1, [r0], -r4
    12f0:	000013f4 	streqd	r1, [r0], -r4
    12f4:	000013f4 	streqd	r1, [r0], -r4
    12f8:	000013f4 	streqd	r1, [r0], -r4
    12fc:	000013f4 	streqd	r1, [r0], -r4
    1300:	000013f4 	streqd	r1, [r0], -r4
    1304:	000013f4 	streqd	r1, [r0], -r4
    1308:	000013f4 	streqd	r1, [r0], -r4
    130c:	000013f4 	streqd	r1, [r0], -r4
    1310:	000013f4 	streqd	r1, [r0], -r4
    1314:	000013f4 	streqd	r1, [r0], -r4
    1318:	000013f4 	streqd	r1, [r0], -r4
    131c:	000013f4 	streqd	r1, [r0], -r4
    1320:	000013f4 	streqd	r1, [r0], -r4
    1324:	000013f4 	streqd	r1, [r0], -r4
    1328:	000013f4 	streqd	r1, [r0], -r4
    132c:	000013f4 	streqd	r1, [r0], -r4
    1330:	000013f4 	streqd	r1, [r0], -r4
    1334:	000013f4 	streqd	r1, [r0], -r4
    1338:	000013f4 	streqd	r1, [r0], -r4
    133c:	000013f4 	streqd	r1, [r0], -r4
    1340:	000013f4 	streqd	r1, [r0], -r4
    1344:	000013f4 	streqd	r1, [r0], -r4
    1348:	000013f4 	streqd	r1, [r0], -r4
    134c:	000013f4 	streqd	r1, [r0], -r4
    1350:	000013f4 	streqd	r1, [r0], -r4
    1354:	000013f4 	streqd	r1, [r0], -r4
    1358:	000013f4 	streqd	r1, [r0], -r4
    135c:	000013f4 	streqd	r1, [r0], -r4
    1360:	000013f4 	streqd	r1, [r0], -r4
    1364:	000013f4 	streqd	r1, [r0], -r4
    1368:	000013f4 	streqd	r1, [r0], -r4
    136c:	000013f4 	streqd	r1, [r0], -r4
    1370:	000013f4 	streqd	r1, [r0], -r4
    1374:	000013f4 	streqd	r1, [r0], -r4
    1378:	000013f4 	streqd	r1, [r0], -r4
    137c:	000013f4 	streqd	r1, [r0], -r4
    1380:	000013f4 	streqd	r1, [r0], -r4
    1384:	000013f4 	streqd	r1, [r0], -r4
    1388:	000013f4 	streqd	r1, [r0], -r4
    138c:	000013f4 	streqd	r1, [r0], -r4
    1390:	000013f4 	streqd	r1, [r0], -r4
    1394:	000013f4 	streqd	r1, [r0], -r4
    1398:	000013f4 	streqd	r1, [r0], -r4
    139c:	00001518 	andeq	r1, r0, r8, lsl r5
    13a0:	000014e4 	andeq	r1, r0, r4, ror #9
    13a4:	00001644 	andeq	r1, r0, r4, asr #12
    13a8:	00001644 	andeq	r1, r0, r4, asr #12
    13ac:	00001644 	andeq	r1, r0, r4, asr #12
    13b0:	000013f4 	streqd	r1, [r0], -r4
    13b4:	000014e4 	andeq	r1, r0, r4, ror #9
    13b8:	000013f4 	streqd	r1, [r0], -r4
    13bc:	000013f4 	streqd	r1, [r0], -r4
    13c0:	000013f4 	streqd	r1, [r0], -r4
    13c4:	000013f4 	streqd	r1, [r0], -r4
    13c8:	000013f4 	streqd	r1, [r0], -r4
    13cc:	0000140c 	andeq	r1, r0, ip, lsl #8
    13d0:	000013f4 	streqd	r1, [r0], -r4
    13d4:	0000140c 	andeq	r1, r0, ip, lsl #8
    13d8:	000013f4 	streqd	r1, [r0], -r4
    13dc:	00001590 	muleq	r0, r0, r5
    13e0:	000013f4 	streqd	r1, [r0], -r4
    13e4:	00001404 	andeq	r1, r0, r4, lsl #8
    13e8:	000013f4 	streqd	r1, [r0], -r4
    13ec:	000013f4 	streqd	r1, [r0], -r4
    13f0:	000013fc 	streqd	r1, [r0], -ip
    13f4:	e1a0b005 	mov	fp, r5
    13f8:	ea00014a 	b	1928 <prog+0x18e0>
    13fc:	e3a02010 	mov	r2, #16	; 0x10
    1400:	ea000002 	b	1410 <prog+0x13c8>
    1404:	e3a0200a 	mov	r2, #10	; 0xa
    1408:	ea000000 	b	1410 <prog+0x13c8>
    140c:	e3a02008 	mov	r2, #8	; 0x8
		case 'o': case 'q': base=8; goto lbl_u;
		case 'x': base=16;
		case 'u':
		lbl_u:
			n = u2str(buf, va_arg(va, unsigned int), base);
    1410:	e285b004 	add	fp, r5, #4	; 0x4
    1414:	e28d0028 	add	r0, sp, #40	; 0x28
    1418:	e5951000 	ldr	r1, [r5]
    141c:	ebfffe08 	bl	c44 <u2str>
    1420:	e1a06000 	mov	r6, r0
    1424:	e3a03000 	mov	r3, #0	; 0x0
    1428:	e58d3008 	str	r3, [sp, #8]
		lbl_escrevei:
		nprinted += n;
    142c:	e59d400c 	ldr	r4, [sp, #12]
    1430:	e0862004 	add	r2, r6, r4
		campo -= (n+sinal);
    1434:	e59d0008 	ldr	r0, [sp, #8]
    1438:	e0863000 	add	r3, r6, r0
    143c:	e0633008 	rsb	r3, r3, r8
    1440:	e3530000 	cmp	r3, #0	; 0x0
    1444:	a1a08003 	movge	r8, r3
    1448:	b3a08000 	movlt	r8, #0	; 0x0
		if(campo < 0) campo=0;
		nprinted +=campo;
    144c:	e0882002 	add	r2, r8, r2
    1450:	e58d200c 	str	r2, [sp, #12]
			if(padchar & 0x100) while(campo--) putc(padchar);
    1454:	e3190c01 	tst	r9, #256	; 0x100
    1458:	0a00000d 	beq	1494 <prog+0x144c>
    145c:	e2483001 	sub	r3, r8, #1	; 0x1
    1460:	e3730001 	cmn	r3, #1	; 0x1
    1464:	01a08003 	moveq	r8, r3
    1468:	0a000009 	beq	1494 <prog+0x144c>
    146c:	e3a04000 	mov	r4, #0	; 0x0
    1470:	e2835001 	add	r5, r3, #1	; 0x1
    1474:	e1a00009 	mov	r0, r9
    1478:	e1a0e00f 	mov	lr, pc
    147c:	e12fff1a 	bx	sl
    1480:	e2844001 	add	r4, r4, #1	; 0x1
    1484:	e1540005 	cmp	r4, r5
    1488:	1afffff9 	bne	1474 <prog+0x142c>
    148c:	e0643008 	rsb	r3, r4, r8
    1490:	e2438001 	sub	r8, r3, #1	; 0x1
			if(sinal) putc('-');
    1494:	e59d1008 	ldr	r1, [sp, #8]
    1498:	e3510000 	cmp	r1, #0	; 0x0
    149c:	13a0002d 	movne	r0, #45	; 0x2d
    14a0:	11a0e00f 	movne	lr, pc
    14a4:	112fff1a 	bxne	sl
			while(n--) putc(buf[n]);
    14a8:	e2460001 	sub	r0, r6, #1	; 0x1
    14ac:	e3700001 	cmn	r0, #1	; 0x1
    14b0:	0a00011c 	beq	1928 <prog+0x18e0>
    14b4:	e28d3028 	add	r3, sp, #40	; 0x28
    14b8:	e0834006 	add	r4, r3, r6
    14bc:	e0603006 	rsb	r3, r0, r6
    14c0:	e28d2038 	add	r2, sp, #56	; 0x38
    14c4:	e0833002 	add	r3, r3, r2
    14c8:	e2435011 	sub	r5, r3, #17	; 0x11
    14cc:	e5740001 	ldrb	r0, [r4, #-1]!
    14d0:	e1a0e00f 	mov	lr, pc
    14d4:	e12fff1a 	bx	sl
    14d8:	e1540005 	cmp	r4, r5
    14dc:	0a000111 	beq	1928 <prog+0x18e0>
    14e0:	eafffff9 	b	14cc <prog+0x1484>
			break;
		case 'd': case 'i':
			base=va_arg(va, int);
    14e4:	e5951000 	ldr	r1, [r5]
			if(base < 0) { sinal=1; base=-base; }
    14e8:	e3510000 	cmp	r1, #0	; 0x0
    14ec:	a3a03000 	movge	r3, #0	; 0x0
    14f0:	a58d3008 	strge	r3, [sp, #8]
    14f4:	b2611000 	rsblt	r1, r1, #0	; 0x0
    14f8:	b3a04001 	movlt	r4, #1	; 0x1
    14fc:	b58d4008 	strlt	r4, [sp, #8]
    1500:	e285b004 	add	fp, r5, #4	; 0x4
			n = u2str(buf, base, 10);
    1504:	e28d0028 	add	r0, sp, #40	; 0x28
    1508:	e3a0200a 	mov	r2, #10	; 0xa
    150c:	ebfffdcc 	bl	c44 <u2str>
    1510:	e1a06000 	mov	r6, r0
    1514:	eaffffc4 	b	142c <prog+0x13e4>
			goto lbl_escrevei;
    1518:	e3580000 	cmp	r8, #0	; 0x0
    151c:	b3a08000 	movlt	r8, #0	; 0x0
    1520:	e58d8018 	str	r8, [sp, #24]
		case 'c':
			if(campo < 0) campo=0;
			nprinted +=campo;
			if(padchar & 0x100) while(campo--) putc(padchar);
    1524:	e3190c01 	tst	r9, #256	; 0x100
    1528:	0a00000e 	beq	1568 <prog+0x1520>
    152c:	e59d0018 	ldr	r0, [sp, #24]
    1530:	e2408001 	sub	r8, r0, #1	; 0x1
    1534:	e3780001 	cmn	r8, #1	; 0x1
    1538:	0a00000a 	beq	1568 <prog+0x1520>
    153c:	e3a04000 	mov	r4, #0	; 0x0
    1540:	e2886001 	add	r6, r8, #1	; 0x1
    1544:	e1a00009 	mov	r0, r9
    1548:	e1a0e00f 	mov	lr, pc
    154c:	e12fff1a 	bx	sl
    1550:	e2844001 	add	r4, r4, #1	; 0x1
    1554:	e1540006 	cmp	r4, r6
    1558:	1afffff9 	bne	1544 <prog+0x14fc>
    155c:	e59d1018 	ldr	r1, [sp, #24]
    1560:	e0643001 	rsb	r3, r4, r1
    1564:	e2438001 	sub	r8, r3, #1	; 0x1
			putc(va_arg(va, int)); nprinted++; break;
    1568:	e285b004 	add	fp, r5, #4	; 0x4
    156c:	e5950000 	ldr	r0, [r5]
    1570:	e1a0e00f 	mov	lr, pc
    1574:	e12fff1a 	bx	sl
    1578:	e59d200c 	ldr	r2, [sp, #12]
    157c:	e2823001 	add	r3, r2, #1	; 0x1
    1580:	e59d4018 	ldr	r4, [sp, #24]
    1584:	e0843003 	add	r3, r4, r3
    1588:	e58d300c 	str	r3, [sp, #12]
    158c:	ea0000e5 	b	1928 <prog+0x18e0>
		case 's':
			ps = va_arg(va, char *);
    1590:	e285b004 	add	fp, r5, #4	; 0x4
    1594:	e5956000 	ldr	r6, [r5]
			for(n=0; ps[n]; n++);
    1598:	e5d63000 	ldrb	r3, [r6]
    159c:	e3530000 	cmp	r3, #0	; 0x0
    15a0:	01a02003 	moveq	r2, r3
    15a4:	0a000004 	beq	15bc <prog+0x1574>
    15a8:	e3a02000 	mov	r2, #0	; 0x0
    15ac:	e2822001 	add	r2, r2, #1	; 0x1
    15b0:	e7d23006 	ldrb	r3, [r2, r6]
    15b4:	e3530000 	cmp	r3, #0	; 0x0
    15b8:	1afffffb 	bne	15ac <prog+0x1564>
			nprinted += n;
			campo -= n;
    15bc:	e0623008 	rsb	r3, r2, r8
    15c0:	e3530000 	cmp	r3, #0	; 0x0
    15c4:	a1a08003 	movge	r8, r3
    15c8:	b3a08000 	movlt	r8, #0	; 0x0
    15cc:	e0883002 	add	r3, r8, r2
			if(campo < 0) campo=0;
			nprinted +=campo;
    15d0:	e59d000c 	ldr	r0, [sp, #12]
    15d4:	e0800003 	add	r0, r0, r3
    15d8:	e58d000c 	str	r0, [sp, #12]
			if(padchar & 0x100) while(campo--) putc(padchar);
    15dc:	e3190c01 	tst	r9, #256	; 0x100
    15e0:	0a00000d 	beq	161c <prog+0x15d4>
    15e4:	e2483001 	sub	r3, r8, #1	; 0x1
    15e8:	e3730001 	cmn	r3, #1	; 0x1
    15ec:	01a08003 	moveq	r8, r3
    15f0:	0a000009 	beq	161c <prog+0x15d4>
    15f4:	e3a04000 	mov	r4, #0	; 0x0
    15f8:	e2835001 	add	r5, r3, #1	; 0x1
    15fc:	e1a00009 	mov	r0, r9
    1600:	e1a0e00f 	mov	lr, pc
    1604:	e12fff1a 	bx	sl
    1608:	e2844001 	add	r4, r4, #1	; 0x1
    160c:	e1550004 	cmp	r5, r4
    1610:	1afffff9 	bne	15fc <prog+0x15b4>
    1614:	e0643008 	rsb	r3, r4, r8
    1618:	e2438001 	sub	r8, r3, #1	; 0x1
			while(*ps) { putc(*ps); ps++; }
    161c:	e5d60000 	ldrb	r0, [r6]
    1620:	e3500000 	cmp	r0, #0	; 0x0
    1624:	0a0000bf 	beq	1928 <prog+0x18e0>
    1628:	e1a04006 	mov	r4, r6
    162c:	e1a0e00f 	mov	lr, pc
    1630:	e12fff1a 	bx	sl
    1634:	e5f40001 	ldrb	r0, [r4, #1]!
    1638:	e3500000 	cmp	r0, #0	; 0x0
    163c:	0a0000b9 	beq	1928 <prog+0x18e0>
    1640:	eafffff9 	b	162c <prog+0x15e4>
			break;
		case 'e': case 'f': case 'g':
			n=0;
			x=y=va_arg(va, double);
    1644:	e285b008 	add	fp, r5, #8	; 0x8
    1648:	e8950006 	ldmia	r5, {r1, r2}
    164c:	e58d1010 	str	r1, [sp, #16]
    1650:	e58d2014 	str	r2, [sp, #20]
			if(x<0) { x=-x; sinal=1; }
    1654:	e1a00001 	mov	r0, r1
    1658:	e1a01002 	mov	r1, r2
    165c:	e3a02000 	mov	r2, #0	; 0x0
    1660:	e3a03000 	mov	r3, #0	; 0x0
    1664:	eb00256b 	bl	ac18 <__ltdf2>
    1668:	e3500000 	cmp	r0, #0	; 0x0
    166c:	a28d5010 	addge	r5, sp, #16	; 0x10
    1670:	a8950060 	ldmgeia	r5, {r5, r6}
    1674:	a3a02000 	movge	r2, #0	; 0x0
    1678:	a58d2024 	strge	r2, [sp, #36]
    167c:	aa000005 	bge	1698 <prog+0x1650>
    1680:	e59d3010 	ldr	r3, [sp, #16]
    1684:	e2835102 	add	r5, r3, #-2147483648	; 0x80000000
    1688:	e59d0014 	ldr	r0, [sp, #20]
    168c:	e1a06000 	mov	r6, r0
    1690:	e3a01001 	mov	r1, #1	; 0x1
    1694:	e58d1024 	str	r1, [sp, #36]
			while((x > 1.0)) { x /= 10.0; n++; }
    1698:	e1a00005 	mov	r0, r5
    169c:	e1a01006 	mov	r1, r6
    16a0:	e3a025ff 	mov	r2, #1069547520	; 0x3fc00000
    16a4:	e2822603 	add	r2, r2, #3145728	; 0x300000
    16a8:	e3a03000 	mov	r3, #0	; 0x0
    16ac:	eb002515 	bl	ab08 <__gtdf2>
    16b0:	e3500000 	cmp	r0, #0	; 0x0
    16b4:	d3a02000 	movle	r2, #0	; 0x0
    16b8:	d58d201c 	strle	r2, [sp, #28]
    16bc:	da000013 	ble	1710 <prog+0x16c8>
    16c0:	e3a03000 	mov	r3, #0	; 0x0
    16c4:	e58d301c 	str	r3, [sp, #28]
    16c8:	e1a00005 	mov	r0, r5
    16cc:	e1a01006 	mov	r1, r6
    16d0:	e3a02101 	mov	r2, #1073741824	; 0x40000000
    16d4:	e2822709 	add	r2, r2, #2359296	; 0x240000
    16d8:	e3a03000 	mov	r3, #0	; 0x0
    16dc:	eb00245e 	bl	a85c <__divdf3>
    16e0:	e1a05000 	mov	r5, r0
    16e4:	e1a06001 	mov	r6, r1
    16e8:	e59d001c 	ldr	r0, [sp, #28]
    16ec:	e2800001 	add	r0, r0, #1	; 0x1
    16f0:	e58d001c 	str	r0, [sp, #28]
    16f4:	e1a00005 	mov	r0, r5
    16f8:	e3a025ff 	mov	r2, #1069547520	; 0x3fc00000
    16fc:	e2822603 	add	r2, r2, #3145728	; 0x300000
    1700:	e3a03000 	mov	r3, #0	; 0x0
    1704:	eb0024ff 	bl	ab08 <__gtdf2>
    1708:	e3500000 	cmp	r0, #0	; 0x0
    170c:	caffffed 	bgt	16c8 <prog+0x1680>
			if(x) while((x < 1.0)) { x *= 10.0; n--; }
    1710:	e1a00005 	mov	r0, r5
    1714:	e1a01006 	mov	r1, r6
    1718:	e3a02000 	mov	r2, #0	; 0x0
    171c:	e3a03000 	mov	r3, #0	; 0x0
    1720:	eb0024d6 	bl	aa80 <__nedf2>
    1724:	e3500000 	cmp	r0, #0	; 0x0
    1728:	0a00001a 	beq	1798 <prog+0x1750>
    172c:	e1a00005 	mov	r0, r5
    1730:	e1a01006 	mov	r1, r6
    1734:	e3a025ff 	mov	r2, #1069547520	; 0x3fc00000
    1738:	e2822603 	add	r2, r2, #3145728	; 0x300000
    173c:	e3a03000 	mov	r3, #0	; 0x0
    1740:	eb002534 	bl	ac18 <__ltdf2>
    1744:	e3500000 	cmp	r0, #0	; 0x0
    1748:	aa000012 	bge	1798 <prog+0x1750>
    174c:	e1a00005 	mov	r0, r5
    1750:	e1a01006 	mov	r1, r6
    1754:	e3a02101 	mov	r2, #1073741824	; 0x40000000
    1758:	e2822709 	add	r2, r2, #2359296	; 0x240000
    175c:	e3a03000 	mov	r3, #0	; 0x0
    1760:	eb002359 	bl	a4cc <__muldf3>
    1764:	e1a05000 	mov	r5, r0
    1768:	e1a06001 	mov	r6, r1
    176c:	e59d101c 	ldr	r1, [sp, #28]
    1770:	e2411001 	sub	r1, r1, #1	; 0x1
    1774:	e58d101c 	str	r1, [sp, #28]
    1778:	e1a00005 	mov	r0, r5
    177c:	e1a01006 	mov	r1, r6
    1780:	e3a025ff 	mov	r2, #1069547520	; 0x3fc00000
    1784:	e2822603 	add	r2, r2, #3145728	; 0x300000
    1788:	e3a03000 	mov	r3, #0	; 0x0
    178c:	eb002521 	bl	ac18 <__ltdf2>
    1790:	e3500000 	cmp	r0, #0	; 0x0
    1794:	baffffec 	blt	174c <prog+0x1704>
			if(c=='e' || ((c=='g') && 
    1798:	e3540065 	cmp	r4, #101	; 0x65
    179c:	0a00000d 	beq	17d8 <prog+0x1790>
    17a0:	e3540067 	cmp	r4, #103	; 0x67
    17a4:	1a00001b 	bne	1818 <prog+0x17d0>
    17a8:	e59d201c 	ldr	r2, [sp, #28]
    17ac:	e3520009 	cmp	r2, #9	; 0x9
    17b0:	ca000008 	bgt	17d8 <prog+0x1790>
    17b4:	e2623000 	rsb	r3, r2, #0	; 0x0
    17b8:	e59d4004 	ldr	r4, [sp, #4]
    17bc:	e1530004 	cmp	r3, r4
    17c0:	b3a03000 	movlt	r3, #0	; 0x0
    17c4:	a3a03001 	movge	r3, #1	; 0x1
    17c8:	e3540000 	cmp	r4, #0	; 0x0
    17cc:	03a03000 	moveq	r3, #0	; 0x0
    17d0:	e3530000 	cmp	r3, #0	; 0x0
    17d4:	0a00000f 	beq	1818 <prog+0x17d0>
				((n > 9) || ((-n >= frac)&& frac)))){
				y = (sinal ? -x: x);
    17d8:	e59d0024 	ldr	r0, [sp, #36]
    17dc:	e3500000 	cmp	r0, #0	; 0x0
    17e0:	12851102 	addne	r1, r5, #-2147483648	; 0x80000000
    17e4:	158d1010 	strne	r1, [sp, #16]
    17e8:	11a05006 	movne	r5, r6
    17ec:	158d5014 	strne	r5, [sp, #20]
    17f0:	058d5010 	streq	r5, [sp, #16]
    17f4:	058d6014 	streq	r6, [sp, #20]
				sinal = 2;
				campo -=4;
    17f8:	e2488004 	sub	r8, r8, #4	; 0x4
				if(frac<2) frac=2;
    17fc:	e59d3004 	ldr	r3, [sp, #4]
    1800:	e3530001 	cmp	r3, #1	; 0x1
    1804:	d3a04002 	movle	r4, #2	; 0x2
    1808:	d58d4024 	strle	r4, [sp, #36]
    180c:	d58d4004 	strle	r4, [sp, #4]
    1810:	c3a00002 	movgt	r0, #2	; 0x2
    1814:	c58d0024 	strgt	r0, [sp, #36]
				}
			c = dprint(y, (padchar & 0x100)?campo:0, frac, putc);
    1818:	e3190c01 	tst	r9, #256	; 0x100
    181c:	e58da000 	str	sl, [sp]
    1820:	e28d0010 	add	r0, sp, #16	; 0x10
    1824:	e8900003 	ldmia	r0, {r0, r1}
    1828:	11a02008 	movne	r2, r8
    182c:	03a02000 	moveq	r2, #0	; 0x0
    1830:	e59d3004 	ldr	r3, [sp, #4]
    1834:	ebfffdc4 	bl	f4c <dprint>
			campo -=c;
    1838:	e0608008 	rsb	r8, r0, r8
			nprinted +=c;
    183c:	e59d100c 	ldr	r1, [sp, #12]
    1840:	e0811000 	add	r1, r1, r0
    1844:	e58d100c 	str	r1, [sp, #12]
			if(sinal & 2){
    1848:	e59d2024 	ldr	r2, [sp, #36]
    184c:	e3120002 	tst	r2, #2	; 0x2
    1850:	0a000034 	beq	1928 <prog+0x18e0>
				putc('E');
    1854:	e3a00045 	mov	r0, #69	; 0x45
    1858:	e1a0e00f 	mov	lr, pc
    185c:	e12fff1a 	bx	sl
				if(n < 0) { putc('-'); n=-n; }
    1860:	e59d301c 	ldr	r3, [sp, #28]
    1864:	e3530000 	cmp	r3, #0	; 0x0
    1868:	aa000006 	bge	1888 <prog+0x1840>
    186c:	e3a0002d 	mov	r0, #45	; 0x2d
    1870:	e1a0e00f 	mov	lr, pc
    1874:	e12fff1a 	bx	sl
    1878:	e59d401c 	ldr	r4, [sp, #28]
    187c:	e2644000 	rsb	r4, r4, #0	; 0x0
    1880:	e58d401c 	str	r4, [sp, #28]
    1884:	ea000002 	b	1894 <prog+0x184c>
				else putc('+');
    1888:	e3a0002b 	mov	r0, #43	; 0x2b
    188c:	e1a0e00f 	mov	lr, pc
    1890:	e12fff1a 	bx	sl
				if(n>99) { putc((n/100) + '0'); n %= 100; }
    1894:	e59d001c 	ldr	r0, [sp, #28]
    1898:	e3500063 	cmp	r0, #99	; 0x63
    189c:	da00000b 	ble	18d0 <prog+0x1888>
    18a0:	e59f3104 	ldr	r3, [pc, #260]	; 19ac <prog+0x1964>
    18a4:	e0c31390 	smull	r1, r3, r0, r3
    18a8:	e1a04fc0 	mov	r4, r0, asr #31
    18ac:	e06442c3 	rsb	r4, r4, r3, asr #5
    18b0:	e2840030 	add	r0, r4, #48	; 0x30
    18b4:	e1a0e00f 	mov	lr, pc
    18b8:	e12fff1a 	bx	sl
    18bc:	e0844104 	add	r4, r4, r4, lsl #2
    18c0:	e0844104 	add	r4, r4, r4, lsl #2
    18c4:	e59d201c 	ldr	r2, [sp, #28]
    18c8:	e0422104 	sub	r2, r2, r4, lsl #2
    18cc:	e58d201c 	str	r2, [sp, #28]
				putc((n / 10) + '0');
    18d0:	e59f30d8 	ldr	r3, [pc, #216]	; 19b0 <prog+0x1968>
    18d4:	e59d401c 	ldr	r4, [sp, #28]
    18d8:	e0c30394 	smull	r0, r3, r4, r3
    18dc:	e1a04fc4 	mov	r4, r4, asr #31
    18e0:	e0644143 	rsb	r4, r4, r3, asr #2
    18e4:	e2840030 	add	r0, r4, #48	; 0x30
    18e8:	e1a0e00f 	mov	lr, pc
    18ec:	e12fff1a 	bx	sl
				putc((n % 10) + '0');
    18f0:	e0844104 	add	r4, r4, r4, lsl #2
    18f4:	e59d101c 	ldr	r1, [sp, #28]
    18f8:	e0414084 	sub	r4, r1, r4, lsl #1
    18fc:	e2840030 	add	r0, r4, #48	; 0x30
    1900:	e1a0e00f 	mov	lr, pc
    1904:	e12fff1a 	bx	sl
    1908:	ea000006 	b	1928 <prog+0x18e0>
				}
			break;
		case '%': putc(c); nprinted++; break;
    190c:	e3a00025 	mov	r0, #37	; 0x25
    1910:	e1a0e00f 	mov	lr, pc
    1914:	e12fff1a 	bx	sl
    1918:	e59d200c 	ldr	r2, [sp, #12]
    191c:	e2822001 	add	r2, r2, #1	; 0x1
    1920:	e58d200c 	str	r2, [sp, #12]
    1924:	e1a0b005 	mov	fp, r5
    1928:	e3580000 	cmp	r8, #0	; 0x0
    192c:	a1a03008 	movge	r3, r8
    1930:	b3a03000 	movlt	r3, #0	; 0x0
		}
	if(campo < 0) campo=0;
	nprinted +=campo;
    1934:	e59d400c 	ldr	r4, [sp, #12]
    1938:	e0844003 	add	r4, r4, r3
    193c:	e58d400c 	str	r4, [sp, #12]
	if(!(padchar & 0x100)) while(campo--) putc(padchar);
    1940:	e2192c01 	ands	r2, r9, #256	; 0x100
    1944:	1a00000b 	bne	1978 <prog+0x1930>
    1948:	e2433001 	sub	r3, r3, #1	; 0x1
    194c:	e3730001 	cmn	r3, #1	; 0x1
    1950:	0a000008 	beq	1978 <prog+0x1930>
    1954:	e1a04002 	mov	r4, r2
    1958:	e2835001 	add	r5, r3, #1	; 0x1
    195c:	e1a00009 	mov	r0, r9
    1960:	e1a0e00f 	mov	lr, pc
    1964:	e12fff1a 	bx	sl
    1968:	e2844001 	add	r4, r4, #1	; 0x1
    196c:	e1550004 	cmp	r5, r4
    1970:	1afffff9 	bne	195c <prog+0x1914>
    1974:	e59d7020 	ldr	r7, [sp, #32]
    1978:	e1a0500b 	mov	r5, fp
    197c:	e5d70000 	ldrb	r0, [r7]
    1980:	e3500000 	cmp	r0, #0	; 0x0
    1984:	1afffe02 	bne	1194 <va_printf+0x20>
    1988:	ea000004 	b	19a0 <prog+0x1958>
    198c:	e2443030 	sub	r3, r4, #48	; 0x30
    1990:	e3530009 	cmp	r3, #9	; 0x9
    1994:	83a08000 	movhi	r8, #0	; 0x0
    1998:	8afffe19 	bhi	1204 <va_printf+0x90>
    199c:	eafffe10 	b	11e4 <va_printf+0x70>
	}
return nprinted;
}
    19a0:	e59d000c 	ldr	r0, [sp, #12]
    19a4:	e28dd038 	add	sp, sp, #56	; 0x38
    19a8:	e8bd8ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    19ac:	51eb851f 	mvnpl	r8, pc, lsl r5
    19b0:	66666667 	strvsbt	r6, [r6], -r7, ror #12

000019b4 <sputchar>:

int mprintf(void (*putc)(int), const char *formato, ... )
{
va_list va;
va_start(va,formato);
return va_printf(putc, formato, va);
}

char *gp_buf;
void sputchar(int c) { *gp_buf++=c; }
    19b4:	e59f200c 	ldr	r2, [pc, #12]	; 19c8 <prog+0x1980>
    19b8:	e5923000 	ldr	r3, [r2]
    19bc:	e4c30001 	strb	r0, [r3], #1
    19c0:	e5823000 	str	r3, [r2]
    19c4:	e12fff1e 	bx	lr
    19c8:	400016e8 	andmi	r1, r0, r8, ror #13

000019cc <sprintf>:

/* Atendendo a pedidos, o meu sprintf: */
int sprintf(char *buf, const char *formato, ... )
{
    19cc:	e92d000e 	stmdb	sp!, {r1, r2, r3}
    19d0:	e92d4010 	stmdb	sp!, {r4, lr}
    19d4:	e24dd004 	sub	sp, sp, #4	; 0x4
va_list va;
int n;
va_start(va,formato);
    19d8:	e28d2010 	add	r2, sp, #16	; 0x10
    19dc:	e58d2000 	str	r2, [sp]
gp_buf=buf;
    19e0:	e59f4028 	ldr	r4, [pc, #40]	; 1a10 <prog+0x19c8>
    19e4:	e5840000 	str	r0, [r4]
n=va_printf(sputchar, formato, va);
    19e8:	e59f0024 	ldr	r0, [pc, #36]	; 1a14 <prog+0x19cc>
    19ec:	e59d100c 	ldr	r1, [sp, #12]
    19f0:	ebfffddf 	bl	1174 <va_printf>
*gp_buf='\0';
    19f4:	e5942000 	ldr	r2, [r4]
    19f8:	e3a03000 	mov	r3, #0	; 0x0
    19fc:	e5c23000 	strb	r3, [r2]
return n;
}
    1a00:	e28dd004 	add	sp, sp, #4	; 0x4
    1a04:	e8bd4010 	ldmia	sp!, {r4, lr}
    1a08:	e28dd00c 	add	sp, sp, #12	; 0xc
    1a0c:	e12fff1e 	bx	lr
    1a10:	400016e8 	andmi	r1, r0, r8, ror #13
    1a14:	000019b4 	streqh	r1, [r0], -r4

00001a18 <mprintf>:
    1a18:	e92d000e 	stmdb	sp!, {r1, r2, r3}
    1a1c:	e52de004 	str	lr, [sp, #-4]!
    1a20:	e24dd004 	sub	sp, sp, #4	; 0x4
    1a24:	e28d200c 	add	r2, sp, #12	; 0xc
    1a28:	e58d2000 	str	r2, [sp]
    1a2c:	e59d1008 	ldr	r1, [sp, #8]
    1a30:	ebfffdcf 	bl	1174 <va_printf>
    1a34:	e28dd004 	add	sp, sp, #4	; 0x4
    1a38:	e49de004 	ldr	lr, [sp], #4
    1a3c:	e28dd00c 	add	sp, sp, #12	; 0xc
    1a40:	e12fff1e 	bx	lr

00001a44 <T0Init>:
#include "timer.h"

void T0Init(int ms)
{
	T0TCR = 0;
    1a44:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    1a48:	e2822901 	add	r2, r2, #16384	; 0x4000
    1a4c:	e3a01000 	mov	r1, #0	; 0x0
    1a50:	e5821004 	str	r1, [r2, #4]
	T0TCR =	2;
    1a54:	e3a03002 	mov	r3, #2	; 0x2
    1a58:	e5823004 	str	r3, [r2, #4]
	T0PR = (CPU_CLOCK_HZ*ms/4000) - 1;
    1a5c:	e0803380 	add	r3, r0, r0, lsl #7
    1a60:	e0803103 	add	r3, r0, r3, lsl #2
    1a64:	e0833203 	add	r3, r3, r3, lsl #4
    1a68:	e0800203 	add	r0, r0, r3, lsl #4
    1a6c:	e1a00480 	mov	r0, r0, lsl #9
    1a70:	e59f3014 	ldr	r3, [pc, #20]	; 1a8c <prog+0x1a44>
    1a74:	e083c390 	umull	ip, r3, r0, r3
    1a78:	e1a03423 	mov	r3, r3, lsr #8
    1a7c:	e2433001 	sub	r3, r3, #1	; 0x1
    1a80:	e582300c 	str	r3, [r2, #12]
	T0TCR = 0;
    1a84:	e5821004 	str	r1, [r2, #4]
}
    1a88:	e12fff1e 	bx	lr
    1a8c:	10624dd3 	ldrned	r4, [r2], #-211

00001a90 <T0Stop>:

void T0Stop()
{
	T0TCR = 0;
    1a90:	e3a02000 	mov	r2, #0	; 0x0
    1a94:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    1a98:	e2833901 	add	r3, r3, #16384	; 0x4000
    1a9c:	e5832004 	str	r2, [r3, #4]
}
    1aa0:	e12fff1e 	bx	lr

00001aa4 <T0Start>:
void T0Start()
{
	T0TCR = 1;
    1aa4:	e3a02001 	mov	r2, #1	; 0x1
    1aa8:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    1aac:	e2833901 	add	r3, r3, #16384	; 0x4000
    1ab0:	e5832004 	str	r2, [r3, #4]
}
    1ab4:	e12fff1e 	bx	lr

00001ab8 <T0Get>:

int T0Get()
{
	return T0TC;
    1ab8:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    1abc:	e2833901 	add	r3, r3, #16384	; 0x4000
    1ac0:	e5930008 	ldr	r0, [r3, #8]
}
    1ac4:	e12fff1e 	bx	lr

00001ac8 <delayMs>:

void delayMs(unsigned int delayInMs)
{
	/*
	* setup timer #1 for delay
	*/
	T1TCR = 0x02;		/* reset timer */
    1ac8:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    1acc:	e2822902 	add	r2, r2, #32768	; 0x8000
    1ad0:	e3a03002 	mov	r3, #2	; 0x2
    1ad4:	e5823004 	str	r3, [r2, #4]
	T1PR  = (CPU_CLOCK_HZ/4000 -1);		/* set prescaler to zero */
    1ad8:	e3a03c46 	mov	r3, #17920	; 0x4600
    1adc:	e283304f 	add	r3, r3, #79	; 0x4f
    1ae0:	e582300c 	str	r3, [r2, #12]
	T1MR0 = delayInMs;
    1ae4:	e5820018 	str	r0, [r2, #24]
	T1IR  = 0xff;		/* reset all interrrupts */
    1ae8:	e3a030ff 	mov	r3, #255	; 0xff
    1aec:	e5823000 	str	r3, [r2]
	T1MCR = 0x04;		/* stop timer on match */
    1af0:	e24330fb 	sub	r3, r3, #251	; 0xfb
    1af4:	e5823014 	str	r3, [r2, #20]
	T1TCR = 0x01;		/* start timer */
    1af8:	e2433003 	sub	r3, r3, #3	; 0x3
    1afc:	e5823004 	str	r3, [r2, #4]

	/* wait until delay time has elapsed */
	while (T1TCR & 0x01);
    1b00:	e5923004 	ldr	r3, [r2, #4]
    1b04:	e3130001 	tst	r3, #1	; 0x1
    1b08:	1afffffc 	bne	1b00 <delayMs+0x38>
  return;
}
    1b0c:	e12fff1e 	bx	lr

00001b10 <delayUs>:

void delayUs(unsigned int delayInUs)
{
	/*
	* setup timer #1 for delay
	*/
	T2TCR = 0x02;		/* reset timer */
    1b10:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    1b14:	e2833807 	add	r3, r3, #458752	; 0x70000
    1b18:	e3a02002 	mov	r2, #2	; 0x2
    1b1c:	e5832004 	str	r2, [r3, #4]
	T2PR  = (CPU_CLOCK_HZ/4000000 -1);
    1b20:	e282200f 	add	r2, r2, #15	; 0xf
    1b24:	e583200c 	str	r2, [r3, #12]
	T2MR0 = delayInUs;
    1b28:	e5830018 	str	r0, [r3, #24]
	T2IR  = 0xff;		/* reset all interrrupts */
    1b2c:	e28220ee 	add	r2, r2, #238	; 0xee
    1b30:	e5832000 	str	r2, [r3]
	T2MCR = 0x04;		/* stop timer on match */
    1b34:	e24220fb 	sub	r2, r2, #251	; 0xfb
    1b38:	e5832014 	str	r2, [r3, #20]
	T2TCR = 0x01;		/* start timer */
    1b3c:	e2422003 	sub	r2, r2, #3	; 0x3
    1b40:	e5832004 	str	r2, [r3, #4]
    1b44:	e2433807 	sub	r3, r3, #458752	; 0x70000
    1b48:	e2832807 	add	r2, r3, #458752	; 0x70000

	/* wait until delay time has elapsed */
	while (T2TCR & 0x01);
    1b4c:	e5923004 	ldr	r3, [r2, #4]
    1b50:	e3130001 	tst	r3, #1	; 0x1
    1b54:	1afffffc 	bne	1b4c <delayUs+0x3c>
  return;
}
    1b58:	e12fff1e 	bx	lr

00001b5c <timeoutMs>:

int timeoutMs(unsigned int delayInMs, unsigned int condition)
{
	switch(condition)
    1b5c:	e3510007 	cmp	r1, #7	; 0x7
    1b60:	0a000003 	beq	1b74 <timeoutMs+0x18>
    1b64:	e3510008 	cmp	r1, #8	; 0x8
    1b68:	13a00001 	movne	r0, #1	; 0x1
    1b6c:	112fff1e 	bxne	lr
    1b70:	ea00000f 	b	1bb4 <timeoutMs+0x58>
	{
	case START:
		T1TCR = 0x02;		/* reset timer */
    1b74:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    1b78:	e2822902 	add	r2, r2, #32768	; 0x8000
    1b7c:	e3a03002 	mov	r3, #2	; 0x2
    1b80:	e5823004 	str	r3, [r2, #4]
		T1PR  = (CPU_CLOCK_HZ/4000 -1);
    1b84:	e3a03c46 	mov	r3, #17920	; 0x4600
    1b88:	e283304f 	add	r3, r3, #79	; 0x4f
    1b8c:	e582300c 	str	r3, [r2, #12]
		T1MR0 = delayInMs;
    1b90:	e5820018 	str	r0, [r2, #24]
		T1IR  = 0xff;		/* reset all interrrupts */
    1b94:	e3a030ff 	mov	r3, #255	; 0xff
    1b98:	e5823000 	str	r3, [r2]
		T1MCR = 0x04;		/* stop timer on match */
    1b9c:	e24330fb 	sub	r3, r3, #251	; 0xfb
    1ba0:	e5823014 	str	r3, [r2, #20]
		T1TCR = 0x01;		/* start timer */
    1ba4:	e2433003 	sub	r3, r3, #3	; 0x3
    1ba8:	e5823004 	str	r3, [r2, #4]
    1bac:	e1a00003 	mov	r0, r3
    1bb0:	e12fff1e 	bx	lr
		break;

	case CHECK_IF_MATCH:
		if (T1TCR&0x01) return NOT_MATCH;
    1bb4:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    1bb8:	e2833902 	add	r3, r3, #32768	; 0x8000
    1bbc:	e5933004 	ldr	r3, [r3, #4]
    1bc0:	e2033001 	and	r3, r3, #1	; 0x1
    1bc4:	e2230001 	eor	r0, r3, #1	; 0x1
		else return MATCH;

	}

	return 1;
}
    1bc8:	e12fff1e 	bx	lr

00001bcc <delay_1us>:

void delay_1us(int t)	//configurar ini_timer(1000000);
{
     unsigned int tf;
     tf = T0TC + t;
    1bcc:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    1bd0:	e2833901 	add	r3, r3, #16384	; 0x4000
    1bd4:	e5933008 	ldr	r3, [r3, #8]
    1bd8:	e0832000 	add	r2, r3, r0
    1bdc:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    1be0:	e2831901 	add	r1, r3, #16384	; 0x4000
     while(tf != T0TC);
    1be4:	e5913008 	ldr	r3, [r1, #8]
    1be8:	e1520003 	cmp	r2, r3
    1bec:	1afffffc 	bne	1be4 <delay_1us+0x18>
}
    1bf0:	e12fff1e 	bx	lr

00001bf4 <RTCInit>:
** 
*****************************************************************************/
void RTCInit( void )
{
	PCONP |= 1<<9;
    1bf4:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    1bf8:	e282197f 	add	r1, r2, #2080768	; 0x1fc000
    1bfc:	e59130c4 	ldr	r3, [r1, #196]
    1c00:	e3833c02 	orr	r3, r3, #512	; 0x200
    1c04:	e58130c4 	str	r3, [r1, #196]
    alarm_on = 0;
    1c08:	e3a01000 	mov	r1, #0	; 0x0
    1c0c:	e59f3028 	ldr	r3, [pc, #40]	; 1c3c <prog+0x1bf4>
    1c10:	e5831000 	str	r1, [r3]

    /*--- Initialize registers ---*/    
    RTC_AMR = 0;
    1c14:	e2822909 	add	r2, r2, #147456	; 0x24000
    1c18:	e5821010 	str	r1, [r2, #16]
    RTC_CIIR = 0;
    1c1c:	e582100c 	str	r1, [r2, #12]
    RTC_CCR = 0;
    1c20:	e5821008 	str	r1, [r2, #8]
    RTC_PREINT = PREINT_RTC;
    1c24:	e3a03f72 	mov	r3, #456	; 0x1c8
    1c28:	e5823080 	str	r3, [r2, #128]
    RTC_PREFRAC = PREFRAC_RTC;
    1c2c:	e3a03c61 	mov	r3, #24832	; 0x6100
    1c30:	e28330c0 	add	r3, r3, #192	; 0xc0
    1c34:	e5823084 	str	r3, [r2, #132]
    return;
}
    1c38:	e12fff1e 	bx	lr
    1c3c:	40000840 	andmi	r0, r0, r0, asr #16

00001c40 <RTCStart>:

/*****************************************************************************
** Function name:		RTCStart
**
** Descriptions:		Start RTC timer
**
** parameters:			None
** Returned value:		None
** 
*****************************************************************************/
void RTCStart( void ) 
{
    /*--- Start RTC counters ---*/
    RTC_CCR |= CCR_CLKSRC | CCR_CLKEN;
    1c40:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    1c44:	e2833909 	add	r3, r3, #147456	; 0x24000
    1c48:	e5932008 	ldr	r2, [r3, #8]
    1c4c:	e3822011 	orr	r2, r2, #17	; 0x11
    1c50:	e5832008 	str	r2, [r3, #8]
    RTC_ILR = ILR_RTCCIF;
    1c54:	e3a02001 	mov	r2, #1	; 0x1
    1c58:	e5832000 	str	r2, [r3]
    return;
}
    1c5c:	e12fff1e 	bx	lr

00001c60 <RTCStop>:

/*****************************************************************************
** Function name:		RTCStop
**
** Descriptions:		Stop RTC timer
**
** parameters:			None
** Returned value:		None
** 
*****************************************************************************/
void RTCStop( void )
{   
    /*--- Stop RTC counters ---*/
    RTC_CCR &= ~CCR_CLKEN;
    1c60:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    1c64:	e2822909 	add	r2, r2, #147456	; 0x24000
    1c68:	e5923008 	ldr	r3, [r2, #8]
    1c6c:	e3c33001 	bic	r3, r3, #1	; 0x1
    1c70:	e5823008 	str	r3, [r2, #8]
    return;
} 
    1c74:	e12fff1e 	bx	lr

00001c78 <RTC_CTCReset>:

/*****************************************************************************
** Function name:		RTC_CTCReset
**
** Descriptions:		Reset RTC clock tick counter
**
** parameters:			None
** Returned value:		None
** 
*****************************************************************************/
void RTC_CTCReset( void )
{   
    /*--- Reset CTC ---*/
    RTC_CCR |= CCR_CTCRST;
    1c78:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    1c7c:	e2822909 	add	r2, r2, #147456	; 0x24000
    1c80:	e5923008 	ldr	r3, [r2, #8]
    1c84:	e3833002 	orr	r3, r3, #2	; 0x2
    1c88:	e5823008 	str	r3, [r2, #8]
    return;
}
    1c8c:	e12fff1e 	bx	lr

00001c90 <RTCSetTime>:

/*****************************************************************************
** Function name:		RTCSetTime
**
** Descriptions:		Setup RTC timer value
**
** parameters:			None
** Returned value:		None
** 
*****************************************************************************/
void RTCSetTime( RTCTime Time ) 
{
    1c90:	e24dd010 	sub	sp, sp, #16	; 0x10
    1c94:	e88d000f 	stmia	sp, {r0, r1, r2, r3}
    RTC_SEC = Time.RTC_Sec;
    1c98:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    1c9c:	e2822909 	add	r2, r2, #147456	; 0x24000
    1ca0:	e5820020 	str	r0, [r2, #32]
    RTC_MIN = Time.RTC_Min;
    1ca4:	e59d3004 	ldr	r3, [sp, #4]
    1ca8:	e5823024 	str	r3, [r2, #36]
    RTC_HOUR = Time.RTC_Hour;
    1cac:	e59d3008 	ldr	r3, [sp, #8]
    1cb0:	e5823028 	str	r3, [r2, #40]
    RTC_DOM = Time.RTC_Mday;
    1cb4:	e59d300c 	ldr	r3, [sp, #12]
    1cb8:	e582302c 	str	r3, [r2, #44]
    RTC_DOW = Time.RTC_Wday;
    1cbc:	e59d3018 	ldr	r3, [sp, #24]
    1cc0:	e5823030 	str	r3, [r2, #48]
    RTC_DOY = Time.RTC_Yday;
    1cc4:	e59d301c 	ldr	r3, [sp, #28]
    1cc8:	e5823034 	str	r3, [r2, #52]
    RTC_MONTH = Time.RTC_Mon;
    1ccc:	e59d3010 	ldr	r3, [sp, #16]
    1cd0:	e5823038 	str	r3, [r2, #56]
    RTC_YEAR = Time.RTC_Year;    
    1cd4:	e59d3014 	ldr	r3, [sp, #20]
    1cd8:	e582303c 	str	r3, [r2, #60]
    return;
}
    1cdc:	e28dd010 	add	sp, sp, #16	; 0x10
    1ce0:	e12fff1e 	bx	lr

00001ce4 <RTCSetAlarm>:

/*****************************************************************************
** Function name:		RTCSetAlarm
**
** Descriptions:		Initialize RTC timer
**
** parameters:			None
** Returned value:		None
** 
*****************************************************************************/
void RTCSetAlarm( RTCTime Alarm ) 
{   
    1ce4:	e24dd010 	sub	sp, sp, #16	; 0x10
    1ce8:	e88d000f 	stmia	sp, {r0, r1, r2, r3}
    RTC_ALSEC = Alarm.RTC_Sec;
    1cec:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    1cf0:	e2822909 	add	r2, r2, #147456	; 0x24000
    1cf4:	e5820060 	str	r0, [r2, #96]
    RTC_ALMIN = Alarm.RTC_Min;
    1cf8:	e59d3004 	ldr	r3, [sp, #4]
    1cfc:	e5823064 	str	r3, [r2, #100]
    RTC_ALHOUR = Alarm.RTC_Hour;
    1d00:	e59d3008 	ldr	r3, [sp, #8]
    1d04:	e5823068 	str	r3, [r2, #104]
    RTC_ALDOM = Alarm.RTC_Mday;
    1d08:	e59d300c 	ldr	r3, [sp, #12]
    1d0c:	e582306c 	str	r3, [r2, #108]
    RTC_ALDOW = Alarm.RTC_Wday;
    1d10:	e59d3018 	ldr	r3, [sp, #24]
    1d14:	e5823070 	str	r3, [r2, #112]
    RTC_ALDOY = Alarm.RTC_Yday;
    1d18:	e59d301c 	ldr	r3, [sp, #28]
    1d1c:	e5823074 	str	r3, [r2, #116]
    RTC_ALMON = Alarm.RTC_Mon;
    1d20:	e59d3010 	ldr	r3, [sp, #16]
    1d24:	e5823078 	str	r3, [r2, #120]
    RTC_ALYEAR = Alarm.RTC_Year;    
    1d28:	e59d3014 	ldr	r3, [sp, #20]
    1d2c:	e582307c 	str	r3, [r2, #124]
    return;
}
    1d30:	e28dd010 	add	sp, sp, #16	; 0x10
    1d34:	e12fff1e 	bx	lr

00001d38 <RTCClearTime>:


/*****************************************************************************
** Function name:		RTCClearTime
**
** Descriptions:		Initialize RTC timer
**
** parameters:			None
** Returned value:		None
**
*****************************************************************************/
void RTCClearTime()
{
    RTC_ALSEC = 0;
    1d38:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    1d3c:	e2822909 	add	r2, r2, #147456	; 0x24000
    1d40:	e3a03000 	mov	r3, #0	; 0x0
    1d44:	e5823060 	str	r3, [r2, #96]
    RTC_ALMIN = 0;
    1d48:	e5823064 	str	r3, [r2, #100]
    RTC_ALHOUR = 0;
    1d4c:	e5823068 	str	r3, [r2, #104]
    RTC_ALDOM = 01;
    1d50:	e3a01001 	mov	r1, #1	; 0x1
    1d54:	e582106c 	str	r1, [r2, #108]
    RTC_ALDOW = 01;
    1d58:	e5821070 	str	r1, [r2, #112]
    RTC_ALDOY = 11;
    1d5c:	e283300b 	add	r3, r3, #11	; 0xb
    1d60:	e5823074 	str	r3, [r2, #116]
    RTC_ALMON = 01;
    1d64:	e5821078 	str	r1, [r2, #120]
    RTC_ALYEAR = 2011;
    1d68:	e3a03e7d 	mov	r3, #2000	; 0x7d0
    1d6c:	e283300b 	add	r3, r3, #11	; 0xb
    1d70:	e582307c 	str	r3, [r2, #124]
}
    1d74:	e12fff1e 	bx	lr

00001d78 <RTCGetTime>:


/*****************************************************************************
** Function name:		RTCGetTime
**
** Descriptions:		Get RTC timer value
**
** parameters:			None
** Returned value:		The data structure of the RTC time table
** 
*****************************************************************************/
RTCTime RTCGetTime( void ) 
{
    1d78:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
    RTCTime LocalTime;
    
    LocalTime.RTC_Sec = RTC_SEC;
    1d7c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    1d80:	e2833909 	add	r3, r3, #147456	; 0x24000
    1d84:	e5937020 	ldr	r7, [r3, #32]
    LocalTime.RTC_Min = RTC_MIN;
    1d88:	e5936024 	ldr	r6, [r3, #36]
    LocalTime.RTC_Hour = RTC_HOUR;
    1d8c:	e5935028 	ldr	r5, [r3, #40]
    LocalTime.RTC_Mday = RTC_DOM;
    1d90:	e593402c 	ldr	r4, [r3, #44]
    LocalTime.RTC_Wday = RTC_DOW;
    1d94:	e593e030 	ldr	lr, [r3, #48]
    LocalTime.RTC_Yday = RTC_DOY;
    1d98:	e593c034 	ldr	ip, [r3, #52]
    LocalTime.RTC_Mon = RTC_MONTH;
    1d9c:	e5931038 	ldr	r1, [r3, #56]
    LocalTime.RTC_Year = RTC_YEAR;
    1da0:	e593303c 	ldr	r3, [r3, #60]
    return ( LocalTime );    
    1da4:	e5803014 	str	r3, [r0, #20]
    1da8:	e5801010 	str	r1, [r0, #16]
    1dac:	e580c01c 	str	ip, [r0, #28]
    1db0:	e580e018 	str	lr, [r0, #24]
    1db4:	e580400c 	str	r4, [r0, #12]
    1db8:	e5805008 	str	r5, [r0, #8]
    1dbc:	e5806004 	str	r6, [r0, #4]
    1dc0:	e5807000 	str	r7, [r0]
}
    1dc4:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}

00001dc8 <RTCSetAlarmMask>:

/*****************************************************************************
** Function name:		RTCSetAlarmMask
**
** Descriptions:		Set RTC timer alarm mask
**
** parameters:			Alarm mask setting
** Returned value:		None
** 
*****************************************************************************/
void RTCSetAlarmMask( DWORD AlarmMask ) 
{
    /*--- Set alarm mask ---*/    
    RTC_AMR = AlarmMask;
    1dc8:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    1dcc:	e2833909 	add	r3, r3, #147456	; 0x24000
    1dd0:	e5830010 	str	r0, [r3, #16]
    return;
}
    1dd4:	e12fff1e 	bx	lr

00001dd8 <I2CStart>:
  int timeout = 0;
  int retVal = FALSE;
 
  /*--- Issue a start condition ---*/
  I22CONSET = I2CONSET_STA;	/* Set Start flag */
    1dd8:	e3a02020 	mov	r2, #32	; 0x20
    1ddc:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    1de0:	e2833702 	add	r3, r3, #524288	; 0x80000
    1de4:	e5832000 	str	r2, [r3]
  /*--- Wait until START transmitted ---*/
  while( 1 )
  {
	if ( I2CMasterState == I2C_STARTED )
    1de8:	e59f3040 	ldr	r3, [pc, #64]	; 1e30 <prog+0x1de8>
    1dec:	e5933000 	ldr	r3, [r3]
    1df0:	e3530001 	cmp	r3, #1	; 0x1
    1df4:	12422020 	subne	r2, r2, #32	; 0x20
    1df8:	159f0030 	ldrne	r0, [pc, #48]	; 1e30 <prog+0x1de8>
    1dfc:	13e014ff 	mvnne	r1, #-16777216	; 0xff000000
    1e00:	1a000005 	bne	1e1c <I2CStart+0x44>
    1e04:	ea000007 	b	1e28 <I2CStart+0x50>
	{
	  retVal = TRUE;
	  break;	
	}
	if ( timeout >= MAX_TIMEOUT )
	{
	  retVal = FALSE;
	  break;
	}
	timeout++;
    1e08:	e2822001 	add	r2, r2, #1	; 0x1
    1e0c:	e1520001 	cmp	r2, r1
    1e10:	1a000001 	bne	1e1c <I2CStart+0x44>
    1e14:	e3a00000 	mov	r0, #0	; 0x0
    1e18:	e12fff1e 	bx	lr
    1e1c:	e5903000 	ldr	r3, [r0]
    1e20:	e3530001 	cmp	r3, #1	; 0x1
    1e24:	1afffff7 	bne	1e08 <I2CStart+0x30>
    1e28:	e3a00001 	mov	r0, #1	; 0x1
  }
  return( retVal );
}
    1e2c:	e12fff1e 	bx	lr
    1e30:	40000844 	andmi	r0, r0, r4, asr #16

00001e34 <I2CStop>:

/*****************************************************************************
** Function name:		I2CStop
**
** Descriptions:		Set the I2C stop condition, if the routine
**				never exit, it's a fatal bus error.
**
** parameters:			None
** Returned value:		true or never return
** 
*****************************************************************************/
int I2CStop( void )
{
  I22CONSET = I2CONSET_STO;      /* Set Stop flag */
    1e34:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    1e38:	e2833702 	add	r3, r3, #524288	; 0x80000
    1e3c:	e3a02010 	mov	r2, #16	; 0x10
    1e40:	e5832000 	str	r2, [r3]
  I22CONCLR = I2CONCLR_SIC;  /* Clear SI flag */
    1e44:	e2422008 	sub	r2, r2, #8	; 0x8
    1e48:	e5832018 	str	r2, [r3, #24]
    1e4c:	e2433702 	sub	r3, r3, #524288	; 0x80000
    1e50:	e2832702 	add	r2, r3, #524288	; 0x80000
  /*--- Wait for STOP detected ---*/
  while( I22CONSET & I2CONSET_STO );
    1e54:	e5923000 	ldr	r3, [r2]
    1e58:	e3130010 	tst	r3, #16	; 0x10
    1e5c:	1afffffc 	bne	1e54 <I2CStop+0x20>
  return TRUE;
}
    1e60:	e3a00001 	mov	r0, #1	; 0x1
    1e64:	e12fff1e 	bx	lr

00001e68 <I2CInit>:

/*****************************************************************************
** Function name:		I2CInit
**
** Descriptions:		Initialize I2C controller
**
** parameters:			I2c mode is either MASTER or SLAVE
** Returned value:		true or false, return false if the I2C
**				interrupt handler was not installed correctly
** 
*****************************************************************************/
int I2CInit( int I2cMode )
{
  //I2C2
  PCONP |=   0x04000000;
    1e68:	e3a0120e 	mov	r1, #-536870912	; 0xe0000000
    1e6c:	e281297f 	add	r2, r1, #2080768	; 0x1fc000
    1e70:	e59230c4 	ldr	r3, [r2, #196]
    1e74:	e3833301 	orr	r3, r3, #67108864	; 0x4000000
    1e78:	e58230c4 	str	r3, [r2, #196]
  PINSEL0 &= 0xffafffff;
    1e7c:	e281290b 	add	r2, r1, #180224	; 0x2c000
    1e80:	e5923000 	ldr	r3, [r2]
    1e84:	e3c33605 	bic	r3, r3, #5242880	; 0x500000
    1e88:	e5823000 	str	r3, [r2]
  PINSEL0 |= 0x00a00000;
    1e8c:	e5923000 	ldr	r3, [r2]
    1e90:	e383360a 	orr	r3, r3, #10485760	; 0xa00000
    1e94:	e5823000 	str	r3, [r2]

  //I2C0
//  PCONP |=  0x00000080
//  PINSEL1 &= ~0x03C00000;
//  PINSEL1 |= 0x01400000;	/* set PIO0.27 and PIO0.28 to I2C0 SDA and SCK */
							/* function to 01 on both SDA and SCK. */
  /*--- Clear flags ---*/
  I22CONCLR = I2CONCLR_AAC | I2CONCLR_SIC | I2CONCLR_STAC | I2CONCLR_I2ENC;
    1e98:	e2811702 	add	r1, r1, #524288	; 0x80000
    1e9c:	e3a0306c 	mov	r3, #108	; 0x6c
    1ea0:	e5813018 	str	r3, [r1, #24]


  /*--- Reset registers ---*/
  I22SCLL   = I2SCLL_SCLL;
    1ea4:	e2833014 	add	r3, r3, #20	; 0x14
    1ea8:	e5813014 	str	r3, [r1, #20]
  I22SCLH   = I2SCLH_SCLH;
    1eac:	e5813010 	str	r3, [r1, #16]
  if ( I2cMode == I2CSLAVE )
    1eb0:	e3500002 	cmp	r0, #2	; 0x2
  {
	I22ADR = LM75_ADDR;
    1eb4:	02833010 	addeq	r3, r3, #16	; 0x10
    1eb8:	0581300c 	streq	r3, [r1, #12]
  }    

  extern void I2C0MasterHandler( void ) __attribute__ ((interrupt("IRQ")));

  disableIRQ();
    1ebc:	e10f3000 	mrs	r3, CPSR
    1ec0:	e3833080 	orr	r3, r3, #128	; 0x80
    1ec4:	e129f003 	msr	CPSR_fc, r3
//  PINSEL0 &= 0xffafffff;
//  PINSEL0 |= 0x00a00000;
  VICIntSelect &= ~0x40000000;	/* i2c2=bit 30 como IRQ	*/
    1ec8:	e3e02000 	mvn	r2, #0	; 0x0
    1ecc:	e5123ff3 	ldr	r3, [r2, #-4083]
    1ed0:	e3c33101 	bic	r3, r3, #1073741824	; 0x40000000
    1ed4:	e5023ff3 	str	r3, [r2, #-4083]
  VICIntEnable = 0x40000000;	/* Habilita int do i2c2 no VIC*/
    1ed8:	e3a03101 	mov	r3, #1073741824	; 0x40000000
    1edc:	e5023fef 	str	r3, [r2, #-4079]
  VICVectAddr30 = (int)I2C0MasterHandler;	/* Vetor para atendimento do I2C2 */
    1ee0:	e59f3024 	ldr	r3, [pc, #36]	; 1f0c <prog+0x1ec4>
    1ee4:	e5023e87 	str	r3, [r2, #-3719]

//  PINSEL1 &= 0xfd7fffff;
//  PINSEL1 |= 0x01400000;
//  VICIntSelect &= ~0x200;	/* i2c0=bit 9 como IRQ	*/
//  VICIntEnable = 0x200;	/* Habilita int do i2c0 no VIC*/
//  VICVectAddr9 = (int)I2C0MasterHandler;	/* Vetor 9 para atendimento do I2C0 */
  enableIRQ();
    1ee8:	e10f3000 	mrs	r3, CPSR
    1eec:	e3c33080 	bic	r3, r3, #128	; 0x80
    1ef0:	e129f003 	msr	CPSR_fc, r3

  I22CONSET = I2CONSET_I2EN;
    1ef4:	e2822041 	add	r2, r2, #65	; 0x41
    1ef8:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    1efc:	e2833702 	add	r3, r3, #524288	; 0x80000
    1f00:	e5832000 	str	r2, [r3]
  return( TRUE );
}
    1f04:	e3a00001 	mov	r0, #1	; 0x1
    1f08:	e12fff1e 	bx	lr
    1f0c:	00001f70 	andeq	r1, r0, r0, ror pc

00001f10 <I2CEngine>:


/*****************************************************************************
** Function name:		I2CEngine
**
** Descriptions:		The routine to complete a I2C transaction
**				from start to stop. All the intermitten
**				steps are handled in the interrupt handler.
**				Before this routine is called, the read
**				length, write length, I2C master buffer,
**				and I2C command fields need to be filled.
**				see i2cmst.c for more details. 
**
** parameters:			None
** Returned value:		true or false, return false only if the
**				start condition can never be generated and
**				timed out. 
** 
*****************************************************************************/
int I2CEngine( void )
{
    1f10:	e92d4010 	stmdb	sp!, {r4, lr}
  I2CMasterState = I2C_IDLE;
    1f14:	e3a04000 	mov	r4, #0	; 0x0
    1f18:	e59f3044 	ldr	r3, [pc, #68]	; 1f64 <prog+0x1f1c>
    1f1c:	e5834000 	str	r4, [r3]
  RdIndex = 0;
    1f20:	e59f3040 	ldr	r3, [pc, #64]	; 1f68 <prog+0x1f20>
    1f24:	e5834000 	str	r4, [r3]
  WrIndex = 0;
    1f28:	e59f303c 	ldr	r3, [pc, #60]	; 1f6c <prog+0x1f24>
    1f2c:	e5834000 	str	r4, [r3]
  if ( I2CStart() != TRUE )
    1f30:	ebffffa8 	bl	1dd8 <I2CStart>
    1f34:	e3500001 	cmp	r0, #1	; 0x1
    1f38:	0a000002 	beq	1f48 <I2CEngine+0x38>
  {
	I2CStop();
    1f3c:	ebffffbc 	bl	1e34 <I2CStop>
    1f40:	e1a00004 	mov	r0, r4
    1f44:	e8bd8010 	ldmia	sp!, {r4, pc}
	return ( FALSE );
  }

  while ( 1 )
  {
	if ( I2CMasterState == DATA_NACK )
    1f48:	e59f3014 	ldr	r3, [pc, #20]	; 1f64 <prog+0x1f1c>
    1f4c:	e5933000 	ldr	r3, [r3]
    1f50:	e3530005 	cmp	r3, #5	; 0x5
    1f54:	1afffffb 	bne	1f48 <I2CEngine+0x38>
	{
	  I2CStop();
    1f58:	ebffffb5 	bl	1e34 <I2CStop>
    1f5c:	e3a00001 	mov	r0, #1	; 0x1
	  break;
	}
  }    
  return ( TRUE );      
}
    1f60:	e8bd8010 	ldmia	sp!, {r4, pc}
    1f64:	40000844 	andmi	r0, r0, r4, asr #16
    1f68:	40000850 	andmi	r0, r0, r0, asr r8
    1f6c:	40000854 	andmi	r0, r0, r4, asr r8

00001f70 <I2C0MasterHandler>:
** Returned value:		None
**
*****************************************************************************/
void I2C0MasterHandler(void)
{
    1f70:	e24ee004 	sub	lr, lr, #4	; 0x4
    1f74:	e92d500f 	stmdb	sp!, {r0, r1, r2, r3, ip, lr}
  char StatValue;
  uart_putc('i');
    1f78:	e3a00069 	mov	r0, #105	; 0x69
    1f7c:	e3a01000 	mov	r1, #0	; 0x0
    1f80:	ebfffafc 	bl	b78 <UARTTransmitByte>
  /* this handler deals with master read and master write only */
  StatValue = I22STAT;
    1f84:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    1f88:	e2833702 	add	r3, r3, #524288	; 0x80000
    1f8c:	e5933004 	ldr	r3, [r3, #4]
  switch ( StatValue )
    1f90:	e20330ff 	and	r3, r3, #255	; 0xff
    1f94:	e2433008 	sub	r3, r3, #8	; 0x8
    1f98:	e3530050 	cmp	r3, #80	; 0x50
    1f9c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    1fa0:	ea0000f1 	b	236c <prog+0x2324>
    1fa4:	000020e8 	andeq	r2, r0, r8, ror #1
    1fa8:	0000236c 	andeq	r2, r0, ip, ror #6
    1fac:	0000236c 	andeq	r2, r0, ip, ror #6
    1fb0:	0000236c 	andeq	r2, r0, ip, ror #6
    1fb4:	0000236c 	andeq	r2, r0, ip, ror #6
    1fb8:	0000236c 	andeq	r2, r0, ip, ror #6
    1fbc:	0000236c 	andeq	r2, r0, ip, ror #6
    1fc0:	0000236c 	andeq	r2, r0, ip, ror #6
    1fc4:	00002118 	andeq	r2, r0, r8, lsl r1
    1fc8:	0000236c 	andeq	r2, r0, ip, ror #6
    1fcc:	0000236c 	andeq	r2, r0, ip, ror #6
    1fd0:	0000236c 	andeq	r2, r0, ip, ror #6
    1fd4:	0000236c 	andeq	r2, r0, ip, ror #6
    1fd8:	0000236c 	andeq	r2, r0, ip, ror #6
    1fdc:	0000236c 	andeq	r2, r0, ip, ror #6
    1fe0:	0000236c 	andeq	r2, r0, ip, ror #6
    1fe4:	00002160 	andeq	r2, r0, r0, ror #2
    1fe8:	0000236c 	andeq	r2, r0, ip, ror #6
    1fec:	0000236c 	andeq	r2, r0, ip, ror #6
    1ff0:	0000236c 	andeq	r2, r0, ip, ror #6
    1ff4:	0000236c 	andeq	r2, r0, ip, ror #6
    1ff8:	0000236c 	andeq	r2, r0, ip, ror #6
    1ffc:	0000236c 	andeq	r2, r0, ip, ror #6
    2000:	0000236c 	andeq	r2, r0, ip, ror #6
    2004:	0000234c 	andeq	r2, r0, ip, asr #6
    2008:	0000236c 	andeq	r2, r0, ip, ror #6
    200c:	0000236c 	andeq	r2, r0, ip, ror #6
    2010:	0000236c 	andeq	r2, r0, ip, ror #6
    2014:	0000236c 	andeq	r2, r0, ip, ror #6
    2018:	0000236c 	andeq	r2, r0, ip, ror #6
    201c:	0000236c 	andeq	r2, r0, ip, ror #6
    2020:	0000236c 	andeq	r2, r0, ip, ror #6
    2024:	000021bc 	streqh	r2, [r0], -ip
    2028:	0000236c 	andeq	r2, r0, ip, ror #6
    202c:	0000236c 	andeq	r2, r0, ip, ror #6
    2030:	0000236c 	andeq	r2, r0, ip, ror #6
    2034:	0000236c 	andeq	r2, r0, ip, ror #6
    2038:	0000236c 	andeq	r2, r0, ip, ror #6
    203c:	0000236c 	andeq	r2, r0, ip, ror #6
    2040:	0000236c 	andeq	r2, r0, ip, ror #6
    2044:	000021bc 	streqh	r2, [r0], -ip
    2048:	0000236c 	andeq	r2, r0, ip, ror #6
    204c:	0000236c 	andeq	r2, r0, ip, ror #6
    2050:	0000236c 	andeq	r2, r0, ip, ror #6
    2054:	0000236c 	andeq	r2, r0, ip, ror #6
    2058:	0000236c 	andeq	r2, r0, ip, ror #6
    205c:	0000236c 	andeq	r2, r0, ip, ror #6
    2060:	0000236c 	andeq	r2, r0, ip, ror #6
    2064:	0000236c 	andeq	r2, r0, ip, ror #6
    2068:	0000236c 	andeq	r2, r0, ip, ror #6
    206c:	0000236c 	andeq	r2, r0, ip, ror #6
    2070:	0000236c 	andeq	r2, r0, ip, ror #6
    2074:	0000236c 	andeq	r2, r0, ip, ror #6
    2078:	0000236c 	andeq	r2, r0, ip, ror #6
    207c:	0000236c 	andeq	r2, r0, ip, ror #6
    2080:	0000236c 	andeq	r2, r0, ip, ror #6
    2084:	000022b0 	streqh	r2, [r0], -r0
    2088:	0000236c 	andeq	r2, r0, ip, ror #6
    208c:	0000236c 	andeq	r2, r0, ip, ror #6
    2090:	0000236c 	andeq	r2, r0, ip, ror #6
    2094:	0000236c 	andeq	r2, r0, ip, ror #6
    2098:	0000236c 	andeq	r2, r0, ip, ror #6
    209c:	0000236c 	andeq	r2, r0, ip, ror #6
    20a0:	0000236c 	andeq	r2, r0, ip, ror #6
    20a4:	0000234c 	andeq	r2, r0, ip, asr #6
    20a8:	0000236c 	andeq	r2, r0, ip, ror #6
    20ac:	0000236c 	andeq	r2, r0, ip, ror #6
    20b0:	0000236c 	andeq	r2, r0, ip, ror #6
    20b4:	0000236c 	andeq	r2, r0, ip, ror #6
    20b8:	0000236c 	andeq	r2, r0, ip, ror #6
    20bc:	0000236c 	andeq	r2, r0, ip, ror #6
    20c0:	0000236c 	andeq	r2, r0, ip, ror #6
    20c4:	000022cc 	andeq	r2, r0, ip, asr #5
    20c8:	0000236c 	andeq	r2, r0, ip, ror #6
    20cc:	0000236c 	andeq	r2, r0, ip, ror #6
    20d0:	0000236c 	andeq	r2, r0, ip, ror #6
    20d4:	0000236c 	andeq	r2, r0, ip, ror #6
    20d8:	0000236c 	andeq	r2, r0, ip, ror #6
    20dc:	0000236c 	andeq	r2, r0, ip, ror #6
    20e0:	0000236c 	andeq	r2, r0, ip, ror #6
    20e4:	000022cc 	andeq	r2, r0, ip, asr #5
  {
	case 0x08:			/* A Start condition is issued. */
	I22DAT = I2CMasterBuffer[0];
    20e8:	e59f329c 	ldr	r3, [pc, #668]	; 238c <prog+0x2344>
    20ec:	e5d32000 	ldrb	r2, [r3]
    20f0:	e20220ff 	and	r2, r2, #255	; 0xff
    20f4:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    20f8:	e2833702 	add	r3, r3, #524288	; 0x80000
    20fc:	e5832008 	str	r2, [r3, #8]
	I22CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    2100:	e3a02028 	mov	r2, #40	; 0x28
    2104:	e5832018 	str	r2, [r3, #24]
	I2CMasterState = I2C_STARTED;
    2108:	e2422027 	sub	r2, r2, #39	; 0x27
    210c:	e59f327c 	ldr	r3, [pc, #636]	; 2390 <prog+0x2348>
    2110:	e5832000 	str	r2, [r3]
    2114:	ea000098 	b	237c <prog+0x2334>
	break;

	case 0x10:			/* A repeated started is issued */
	if ( I2CCmd == LM75_TEMP )
    2118:	e59f3274 	ldr	r3, [pc, #628]	; 2394 <prog+0x234c>
    211c:	e5933000 	ldr	r3, [r3]
    2120:	e3530000 	cmp	r3, #0	; 0x0
    2124:	1a000005 	bne	2140 <prog+0x20f8>
	{
	  I22DAT = I2CMasterBuffer[2];
    2128:	e59f325c 	ldr	r3, [pc, #604]	; 238c <prog+0x2344>
    212c:	e5d32002 	ldrb	r2, [r3, #2]
    2130:	e20220ff 	and	r2, r2, #255	; 0xff
    2134:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2138:	e2833702 	add	r3, r3, #524288	; 0x80000
    213c:	e5832008 	str	r2, [r3, #8]
	}
	I22CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    2140:	e3a02028 	mov	r2, #40	; 0x28
    2144:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2148:	e2833702 	add	r3, r3, #524288	; 0x80000
    214c:	e5832018 	str	r2, [r3, #24]
	I2CMasterState = I2C_RESTARTED;
    2150:	e2422026 	sub	r2, r2, #38	; 0x26
    2154:	e59f3234 	ldr	r3, [pc, #564]	; 2390 <prog+0x2348>
    2158:	e5832000 	str	r2, [r3]
    215c:	ea000086 	b	237c <prog+0x2334>
	break;

	case 0x18:			/* Regardless, it's a ACK */
	if ( I2CMasterState == I2C_STARTED )
    2160:	e59f0228 	ldr	r0, [pc, #552]	; 2390 <prog+0x2348>
    2164:	e5903000 	ldr	r3, [r0]
    2168:	e3530001 	cmp	r3, #1	; 0x1
    216c:	1a00000d 	bne	21a8 <prog+0x2160>
	{
	  I22DAT = I2CMasterBuffer[1+WrIndex];
    2170:	e59f1220 	ldr	r1, [pc, #544]	; 2398 <prog+0x2350>
    2174:	e5913000 	ldr	r3, [r1]
    2178:	e2833001 	add	r3, r3, #1	; 0x1
    217c:	e59f2208 	ldr	r2, [pc, #520]	; 238c <prog+0x2344>
    2180:	e7d22003 	ldrb	r2, [r2, r3]
    2184:	e20220ff 	and	r2, r2, #255	; 0xff
    2188:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    218c:	e2833702 	add	r3, r3, #524288	; 0x80000
    2190:	e5832008 	str	r2, [r3, #8]
	  WrIndex++;
    2194:	e5913000 	ldr	r3, [r1]
    2198:	e2833001 	add	r3, r3, #1	; 0x1
    219c:	e5813000 	str	r3, [r1]
	  I2CMasterState = DATA_ACK;
    21a0:	e3a03004 	mov	r3, #4	; 0x4
    21a4:	e5803000 	str	r3, [r0]
	}
	I22CONCLR = I2CONCLR_SIC;
    21a8:	e3a02008 	mov	r2, #8	; 0x8
    21ac:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    21b0:	e2833702 	add	r3, r3, #524288	; 0x80000
    21b4:	e5832018 	str	r2, [r3, #24]
    21b8:	ea00006f 	b	237c <prog+0x2334>
	break;

	case 0x28:	/* Data char has been transmitted, regardless ACK or NACK */
	case 0x30:
	if ( WrIndex != I2CWriteLength )
    21bc:	e59f11d4 	ldr	r1, [pc, #468]	; 2398 <prog+0x2350>
    21c0:	e5912000 	ldr	r2, [r1]
    21c4:	e59f01d0 	ldr	r0, [pc, #464]	; 239c <prog+0x2354>
    21c8:	e5903000 	ldr	r3, [r0]
    21cc:	e1520003 	cmp	r2, r3
    21d0:	0a00001e 	beq	2250 <prog+0x2208>
	{
	  I22DAT = I2CMasterBuffer[1+WrIndex]; /* this should be the last one */
    21d4:	e5913000 	ldr	r3, [r1]
    21d8:	e2833001 	add	r3, r3, #1	; 0x1
    21dc:	e59f21a8 	ldr	r2, [pc, #424]	; 238c <prog+0x2344>
    21e0:	e7d22003 	ldrb	r2, [r2, r3]
    21e4:	e20220ff 	and	r2, r2, #255	; 0xff
    21e8:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    21ec:	e2833702 	add	r3, r3, #524288	; 0x80000
    21f0:	e5832008 	str	r2, [r3, #8]
	  WrIndex++;
    21f4:	e5913000 	ldr	r3, [r1]
    21f8:	e2833001 	add	r3, r3, #1	; 0x1
    21fc:	e5813000 	str	r3, [r1]
	  if ( WrIndex != I2CWriteLength )
    2200:	e5912000 	ldr	r2, [r1]
    2204:	e5903000 	ldr	r3, [r0]
    2208:	e1520003 	cmp	r2, r3
	  {
		I2CMasterState = DATA_ACK;
    220c:	13a02004 	movne	r2, #4	; 0x4
    2210:	159f3178 	ldrne	r3, [pc, #376]	; 2390 <prog+0x2348>
    2214:	15832000 	strne	r2, [r3]
    2218:	1a00001f 	bne	229c <prog+0x2254>
	  }
	  else
	  {
		I2CMasterState = DATA_NACK;
    221c:	e59f116c 	ldr	r1, [pc, #364]	; 2390 <prog+0x2348>
    2220:	e3a03005 	mov	r3, #5	; 0x5
    2224:	e5813000 	str	r3, [r1]
		if ( I2CReadLength != 0 )
    2228:	e59f3170 	ldr	r3, [pc, #368]	; 23a0 <prog+0x2358>
    222c:	e5933000 	ldr	r3, [r3]
    2230:	e3530000 	cmp	r3, #0	; 0x0
		{
		  I22CONSET = I2CONSET_STA;	/* Set Repeated-start flag */
    2234:	13a03020 	movne	r3, #32	; 0x20
    2238:	13a0220e 	movne	r2, #-536870912	; 0xe0000000
    223c:	12822702 	addne	r2, r2, #524288	; 0x80000
    2240:	15823000 	strne	r3, [r2]
		  I2CMasterState = I2C_REPEATED_START;
    2244:	1243301d 	subne	r3, r3, #29	; 0x1d
    2248:	15813000 	strne	r3, [r1]
    224c:	ea000012 	b	229c <prog+0x2254>
		}
	  }
	}
	else
	{
	  if ( I2CReadLength != 0 )
    2250:	e59f3148 	ldr	r3, [pc, #328]	; 23a0 <prog+0x2358>
    2254:	e5933000 	ldr	r3, [r3]
    2258:	e3530000 	cmp	r3, #0	; 0x0
    225c:	0a000007 	beq	2280 <prog+0x2238>
	  {
		I22CONSET = I2CONSET_STA;	/* Set Repeated-start flag */
    2260:	e3a02020 	mov	r2, #32	; 0x20
    2264:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2268:	e2833702 	add	r3, r3, #524288	; 0x80000
    226c:	e5832000 	str	r2, [r3]
		I2CMasterState = I2C_REPEATED_START;
    2270:	e242201d 	sub	r2, r2, #29	; 0x1d
    2274:	e59f3114 	ldr	r3, [pc, #276]	; 2390 <prog+0x2348>
    2278:	e5832000 	str	r2, [r3]
    227c:	ea000006 	b	229c <prog+0x2254>
	  }
	  else
	  {
		I2CMasterState = DATA_NACK;
    2280:	e3a02005 	mov	r2, #5	; 0x5
    2284:	e59f3104 	ldr	r3, [pc, #260]	; 2390 <prog+0x2348>
    2288:	e5832000 	str	r2, [r3]
		I22CONSET = I2CONSET_STO;      /* Set Stop flag */
    228c:	e282200b 	add	r2, r2, #11	; 0xb
    2290:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2294:	e2833702 	add	r3, r3, #524288	; 0x80000
    2298:	e5832000 	str	r2, [r3]
	  }
	}
	I22CONCLR = I2CONCLR_SIC;
    229c:	e3a02008 	mov	r2, #8	; 0x8
    22a0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    22a4:	e2833702 	add	r3, r3, #524288	; 0x80000
    22a8:	e5832018 	str	r2, [r3, #24]
    22ac:	ea000032 	b	237c <prog+0x2334>
	break;

	case 0x40:	/* Master Receive, SLA_R has been sent */
	I22CONSET = I2CONSET_AA;	/* assert ACK after data is received */
    22b0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    22b4:	e2833702 	add	r3, r3, #524288	; 0x80000
    22b8:	e3a02004 	mov	r2, #4	; 0x4
    22bc:	e5832000 	str	r2, [r3]
	I22CONCLR = I2CONCLR_SIC;
    22c0:	e2822004 	add	r2, r2, #4	; 0x4
    22c4:	e5832018 	str	r2, [r3, #24]
    22c8:	ea00002b 	b	237c <prog+0x2334>
	break;

	case 0x50:	/* Data char has been received, regardless following ACK or NACK */
	case 0x58:
	I2CMasterBuffer[3+RdIndex] = I22DAT;
    22cc:	e59f00d0 	ldr	r0, [pc, #208]	; 23a4 <prog+0x235c>
    22d0:	e5901000 	ldr	r1, [r0]
    22d4:	e2811003 	add	r1, r1, #3	; 0x3
    22d8:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    22dc:	e2833702 	add	r3, r3, #524288	; 0x80000
    22e0:	e5933008 	ldr	r3, [r3, #8]
    22e4:	e20330ff 	and	r3, r3, #255	; 0xff
    22e8:	e59f209c 	ldr	r2, [pc, #156]	; 238c <prog+0x2344>
    22ec:	e7c23001 	strb	r3, [r2, r1]
	RdIndex++;
    22f0:	e5903000 	ldr	r3, [r0]
    22f4:	e2833001 	add	r3, r3, #1	; 0x1
    22f8:	e5803000 	str	r3, [r0]
	if ( RdIndex != I2CReadLength )
    22fc:	e5902000 	ldr	r2, [r0]
    2300:	e59f3098 	ldr	r3, [pc, #152]	; 23a0 <prog+0x2358>
    2304:	e5933000 	ldr	r3, [r3]
    2308:	e1520003 	cmp	r2, r3
	{
	  I2CMasterState = DATA_ACK;
    230c:	13a02004 	movne	r2, #4	; 0x4
    2310:	159f3078 	ldrne	r3, [pc, #120]	; 2390 <prog+0x2348>
    2314:	15832000 	strne	r2, [r3]
	}
	else
	{
	  RdIndex = 0;
    2318:	03a02000 	moveq	r2, #0	; 0x0
    231c:	059f3080 	ldreq	r3, [pc, #128]	; 23a4 <prog+0x235c>
    2320:	05832000 	streq	r2, [r3]
	  I2CMasterState = DATA_NACK;
    2324:	02822005 	addeq	r2, r2, #5	; 0x5
    2328:	059f3060 	ldreq	r3, [pc, #96]	; 2390 <prog+0x2348>
    232c:	05832000 	streq	r2, [r3]
	}
	I22CONSET = I2CONSET_AA;	/* assert ACK after data is received */
    2330:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2334:	e2833702 	add	r3, r3, #524288	; 0x80000
    2338:	e3a02004 	mov	r2, #4	; 0x4
    233c:	e5832000 	str	r2, [r3]
	I22CONCLR = I2CONCLR_SIC;
    2340:	e2822004 	add	r2, r2, #4	; 0x4
    2344:	e5832018 	str	r2, [r3, #24]
    2348:	ea00000b 	b	237c <prog+0x2334>
	break;

	case 0x20:		/* regardless, it's a NACK */
	case 0x48:
	I22CONCLR = I2CONCLR_SIC;
    234c:	e3a02008 	mov	r2, #8	; 0x8
    2350:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2354:	e2833702 	add	r3, r3, #524288	; 0x80000
    2358:	e5832018 	str	r2, [r3, #24]
	I2CMasterState = DATA_NACK;
    235c:	e2422003 	sub	r2, r2, #3	; 0x3
    2360:	e59f3028 	ldr	r3, [pc, #40]	; 2390 <prog+0x2348>
    2364:	e5832000 	str	r2, [r3]
    2368:	ea000003 	b	237c <prog+0x2334>
	break;

	case 0x38:		/* Arbitration lost, in this example, we don't
					deal with multiple master situation */
	default:
	I22CONCLR = I2CONCLR_SIC;
    236c:	e3a02008 	mov	r2, #8	; 0x8
    2370:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2374:	e2833702 	add	r3, r3, #524288	; 0x80000
    2378:	e5832018 	str	r2, [r3, #24]
	break;
  }
  VICVectAddr = 0;		/* Acknowledge Interrupt */
    237c:	e3a02000 	mov	r2, #0	; 0x0
    2380:	e3e03000 	mvn	r3, #0	; 0x0
    2384:	e50320ff 	str	r2, [r3, #-255]
}
    2388:	e8fd900f 	ldmia	sp!, {r0, r1, r2, r3, ip, pc}^
    238c:	40001714 	andmi	r1, r0, r4, lsl r7
    2390:	40000844 	andmi	r0, r0, r4, asr #16
    2394:	40001734 	andmi	r1, r0, r4, lsr r7
    2398:	40000854 	andmi	r0, r0, r4, asr r8
    239c:	40001738 	andmi	r1, r0, r8, lsr r7
    23a0:	400016ec 	andmi	r1, r0, ip, ror #13
    23a4:	40000850 	andmi	r0, r0, r0, asr r8

000023a8 <write_PHY>:
void write_PHY (int PhyReg, int Value)
{
  unsigned int tout;

  MAC_MADR = DP83848C_DEF_ADR | PhyReg;
    23a8:	e3800c01 	orr	r0, r0, #256	; 0x100
    23ac:	e3a03eff 	mov	r3, #4080	; 0xff0
    23b0:	e283300f 	add	r3, r3, #15	; 0xf
    23b4:	e1833a83 	orr	r3, r3, r3, lsl #21
    23b8:	e5030fd7 	str	r0, [r3, #-4055]
  MAC_MWTD = Value;
    23bc:	e5031fd3 	str	r1, [r3, #-4051]
    23c0:	e3a02000 	mov	r2, #0	; 0x0
    23c4:	e3a03eff 	mov	r3, #4080	; 0xff0
    23c8:	e283300f 	add	r3, r3, #15	; 0xf
    23cc:	e1831a83 	orr	r1, r3, r3, lsl #21

  /* Wait utill operation completed */
  tout = 0;
  for (tout = 0; tout < MII_WR_TOUT; tout++) {
    if ((MAC_MIND & MIND_BUSY) == 0) {
    23d0:	e5113fcb 	ldr	r3, [r1, #-4043]
    23d4:	e3130001 	tst	r3, #1	; 0x1
    23d8:	012fff1e 	bxeq	lr
    23dc:	e2822001 	add	r2, r2, #1	; 0x1
    23e0:	e3520805 	cmp	r2, #327680	; 0x50000
    23e4:	1afffff9 	bne	23d0 <write_PHY+0x28>
    23e8:	e12fff1e 	bx	lr

000023ec <read_PHY>:
      break;
    }
  }
}


// Keil: function added to read PHY
unsigned short read_PHY (unsigned char PhyReg) 
{
    23ec:	e20000ff 	and	r0, r0, #255	; 0xff
  unsigned int tout;

  MAC_MADR = DP83848C_DEF_ADR | PhyReg;
    23f0:	e3800c01 	orr	r0, r0, #256	; 0x100
    23f4:	e3a03eff 	mov	r3, #4080	; 0xff0
    23f8:	e283300f 	add	r3, r3, #15	; 0xf
    23fc:	e1833a83 	orr	r3, r3, r3, lsl #21
    2400:	e5030fd7 	str	r0, [r3, #-4055]
  MAC_MCMD = MCMD_READ;
    2404:	e3a02001 	mov	r2, #1	; 0x1
    2408:	e5032fdb 	str	r2, [r3, #-4059]
    240c:	e2422001 	sub	r2, r2, #1	; 0x1
    2410:	e3a03eff 	mov	r3, #4080	; 0xff0
    2414:	e283300f 	add	r3, r3, #15	; 0xf
    2418:	e1831a83 	orr	r1, r3, r3, lsl #21

  /* Wait until operation completed */
  tout = 0;
  for (tout = 0; tout < MII_RD_TOUT; tout++) {
    if ((MAC_MIND & MIND_BUSY) == 0) {
    241c:	e5113fcb 	ldr	r3, [r1, #-4043]
    2420:	e3130001 	tst	r3, #1	; 0x1
    2424:	0a000002 	beq	2434 <read_PHY+0x48>
    2428:	e2822001 	add	r2, r2, #1	; 0x1
    242c:	e3520805 	cmp	r2, #327680	; 0x50000
    2430:	1afffff9 	bne	241c <read_PHY+0x30>
      break;
    }
  }
  MAC_MCMD = 0;
    2434:	e3a03eff 	mov	r3, #4080	; 0xff0
    2438:	e283300f 	add	r3, r3, #15	; 0xf
    243c:	e1833a83 	orr	r3, r3, r3, lsl #21
    2440:	e3a02000 	mov	r2, #0	; 0x0
    2444:	e5032fdb 	str	r2, [r3, #-4059]
  return (MAC_MRDD);
    2448:	e5130fcf 	ldr	r0, [r3, #-4047]
    244c:	e1a00800 	mov	r0, r0, lsl #16
}
    2450:	e1a00820 	mov	r0, r0, lsr #16
    2454:	e12fff1e 	bx	lr

00002458 <rx_descr_init>:


// Keil: function added to initialize Rx Descriptors
void rx_descr_init (void)
{
    2458:	e3a0347f 	mov	r3, #2130706432	; 0x7f000000
    245c:	e283160e 	add	r1, r3, #14680064	; 0xe00000
    2460:	e2812058 	add	r2, r1, #88	; 0x58
    2464:	e3a03e5f 	mov	r3, #1520	; 0x5f0
    2468:	e283c13e 	add	ip, r3, #-2147483633	; 0x8000000f
    246c:	e3a00000 	mov	r0, #0	; 0x0
    2470:	e3a0347f 	mov	r3, #2130706432	; 0x7f000000
    2474:	e283360e 	add	r3, r3, #14680064	; 0xe00000
    2478:	e2833020 	add	r3, r3, #32	; 0x20
  unsigned int i;

  for (i = 0; i < NUM_RX_FRAG; i++) {
    RX_DESC_PACKET(i)  = RX_BUF(i);
    247c:	e8811004 	stmia	r1, {r2, ip}
    RX_DESC_CTRL(i)    = RCTRL_INT | (ETH_FRAG_SIZE-1);
    RX_STAT_INFO(i)    = 0;
    2480:	e5810020 	str	r0, [r1, #32]
    RX_STAT_HASHCRC(i) = 0;
    2484:	e5810024 	str	r0, [r1, #36]
    2488:	e2811008 	add	r1, r1, #8	; 0x8
    248c:	e2822c06 	add	r2, r2, #1536	; 0x600
    2490:	e1510003 	cmp	r1, r3
    2494:	1afffff8 	bne	247c <rx_descr_init+0x24>
  }

  /* Set EMAC Receive Descriptor Registers. */
  MAC_RXDESCRIPTOR    = RX_DESC_BASE;
    2498:	e3a03eff 	mov	r3, #4080	; 0xff0
    249c:	e283300f 	add	r3, r3, #15	; 0xf
    24a0:	e1833a83 	orr	r3, r3, r3, lsl #21
    24a4:	e3a0247f 	mov	r2, #2130706432	; 0x7f000000
    24a8:	e282260e 	add	r2, r2, #14680064	; 0xe00000
    24ac:	e5032ef7 	str	r2, [r3, #-3831]
  MAC_RXSTATUS        = RX_STAT_BASE;
    24b0:	e5031ef3 	str	r1, [r3, #-3827]
  MAC_RXDESCRIPTORNUM = NUM_RX_FRAG-1;
    24b4:	e3a02003 	mov	r2, #3	; 0x3
    24b8:	e5032eef 	str	r2, [r3, #-3823]

  /* Rx Descriptors Point to 0 */
  MAC_RXCONSUMEINDEX  = 0;
    24bc:	e5030ee7 	str	r0, [r3, #-3815]
}
    24c0:	e12fff1e 	bx	lr

000024c4 <tx_descr_init>:


// Keil: function added to initialize Tx Descriptors
void tx_descr_init (void) {
  unsigned int i;

  for (i = 0; i < NUM_TX_FRAG; i++) {
    TX_DESC_PACKET(i) = TX_BUF(i);
    24c4:	e3a0247f 	mov	r2, #2130706432	; 0x7f000000
    24c8:	e282260e 	add	r2, r2, #14680064	; 0xe00000
    24cc:	e59f3050 	ldr	r3, [pc, #80]	; 2524 <prog+0x24dc>
    24d0:	e5823040 	str	r3, [r2, #64]
    TX_DESC_CTRL(i)   = 0;
    24d4:	e3a00000 	mov	r0, #0	; 0x0
    24d8:	e5820044 	str	r0, [r2, #68]
    TX_STAT_INFO(i)   = 0;
    24dc:	e5820050 	str	r0, [r2, #80]
    24e0:	e3e0397f 	mvn	r3, #2080768	; 0x1fc000
    24e4:	e2433d86 	sub	r3, r3, #8576	; 0x2180
    24e8:	e243319e 	sub	r3, r3, #-2147483609	; 0x80000027
    24ec:	e5823048 	str	r3, [r2, #72]
    24f0:	e582004c 	str	r0, [r2, #76]
    24f4:	e5820054 	str	r0, [r2, #84]
  }

  /* Set EMAC Transmit Descriptor Registers. */
  MAC_TXDESCRIPTOR    = TX_DESC_BASE;
    24f8:	e3a03eff 	mov	r3, #4080	; 0xff0
    24fc:	e283300f 	add	r3, r3, #15	; 0xf
    2500:	e1833a83 	orr	r3, r3, r3, lsl #21
    2504:	e2821040 	add	r1, r2, #64	; 0x40
    2508:	e5031ee3 	str	r1, [r3, #-3811]
  MAC_TXSTATUS        = TX_STAT_BASE;
    250c:	e2822050 	add	r2, r2, #80	; 0x50
    2510:	e5032edf 	str	r2, [r3, #-3807]
  MAC_TXDESCRIPTORNUM = NUM_TX_FRAG-1;
    2514:	e3a02001 	mov	r2, #1	; 0x1
    2518:	e5032edb 	str	r2, [r3, #-3803]

  /* Tx Descriptors Point to 0 */
  MAC_TXPRODUCEINDEX  = 0;
    251c:	e5030ed7 	str	r0, [r3, #-3799]
}
    2520:	e12fff1e 	bx	lr
    2524:	7fe01858 	swivc	0x00e01858

00002528 <ReadFrame_EMAC>:

/**
 * \brief configure port-pins for use with LAN-controller,
 * reset it and send the configuration-sequence
 */
int Init_EMAC(void)
{

// Keil: function modified to access the EMAC
// Initializes the EMAC ethernet controller
  volatile unsigned int regv,tout,id1,id2;

  /* Power Up the EMAC controller. */
  PCONP |= 0x40000000;
  delayMs(10);

  /* Enable P1 Ethernet Pins. */
  PINSEL2 = 0x50150105;
  PINSEL3 = (PINSEL3 & ~0x0000000F) | 0x00000005;

  /* Reset all EMAC internal modules. */
  MAC_MAC1 = MAC1_RES_TX | MAC1_RES_MCS_TX | MAC1_RES_RX | MAC1_RES_MCS_RX | MAC1_SIM_RES | MAC1_SOFT_RES;
  MAC_COMMAND = CR_REG_RES | CR_TX_RES | CR_RX_RES;

  /* A short delay after reset. */
  delayMs(10);

  /* Initialize MAC control registers. */
  MAC_MAC1 = MAC1_PASS_ALL;
  MAC_MAC2 = MAC2_CRC_EN | MAC2_PAD_EN;
  MAC_MAXF = ETH_MAX_FLEN;
  MAC_CLRT = CLRT_DEF;
  MAC_IPGR = IPGR_DEF;

  /* Enable Reduced MII interface. */
  MAC_COMMAND = CR_RMII | CR_PASS_RUNT_FRM;

  /* Put the DP83848C in reset mode */
  write_PHY (PHY_REG_BMCR, 0x8000);

  /* Wait for hardware reset to end. */
  for (tout = 0; tout < 100; tout++) {
	delayMs(10);
    regv = read_PHY (PHY_REG_BMCR);
    if (!(regv & 0x8000)) {
      /* Reset complete */
    	uart_puts(" PHY-RSTD");
      break;
    }
  }

  /* MII Mgmt Configuration register and MII Mgnt hardware Reset       */
  /* host clock divided by 20, no suppress preamble, no scan increment */
  MAC_MCFG = HOST_CLK_BY_20 | MCFG_RES_MII;
  delayMs(10);
  MAC_MCFG &= (~MCFG_RES_MII);	/* Clear the reset */
  MAC_MCMD = 0;

  /* Check if this is a DP83848C PHY. */
  id1 = read_PHY (PHY_REG_IDR1);
  id2 = read_PHY (PHY_REG_IDR2);
  if (((id1 << 16) | (id2 & 0xFFF0)) == DP83848C_ID) {
    /* Configure the PHY device */
	//  write_PHY(PHY_REG_ANAR,0x3<<5 | 0x1); //Remove 100Mbit from supported options
    /* Use autonegotiation about the link speed. */
    write_PHY (PHY_REG_BMCR, PHY_AUTO_NEG);
    /* Wait to complete Auto_Negotiation. */
    for (tout = 0; tout < 10; tout++) {
      delayMs( 100 );
      regv = read_PHY (PHY_REG_BMSR);
      if (regv & 0x0020) {
        /* Autonegotiation Complete. */
    	  uart_puts(" AUTO-NEGD");
        break;
      }
    }
  }
  else  return FAIL;

  /* Check the link status. */
    for (tout = 0; tout < 10; tout++) {
      delayMs( 100 );
      regv = read_PHY (PHY_REG_STS);
      if (regv & 0x0001) {
        /* Link is on. */
    	  uart_puts(" LINK-ON");
        break;
      }
    }
    /* Configure Full/Half Duplex mode. */
    if (regv & 0x0004) {
      /* Full duplex is enabled. */
      MAC_MAC2    |= MAC2_FULL_DUP;
      MAC_COMMAND |= CR_FULL_DUP;
      MAC_IPGT     = IPGT_FULL_DUP;
      uart_puts(" FullDuplex");
    }
    else {
      /* Half duplex mode. */
      MAC_IPGT = IPGT_HALF_DUP;
      uart_puts(" HalfDuplex");
    }

    /* Configure 100MBit/10MBit mode. */
    if (regv & 0x0002) {
      /* 10MBit mode. */
      MAC_SUPP = 0;
      uart_puts(" 10Mbps\n");
    }
    else {
      /* 100MBit mode. */
      MAC_SUPP = SUPP_SPEED;
      uart_puts(" 100Mbps\n");
    }

    /* Set the Ethernet MAC Address registers */
    MAC_SA0 = (emacETHADDR0 << 8) | emacETHADDR1;
    MAC_SA1 = (emacETHADDR2 << 8) | emacETHADDR3;
    MAC_SA2 = (emacETHADDR4 << 8) | emacETHADDR5;

    /* Initialize Tx and Rx DMA Descriptors */
    rx_descr_init ();
    tx_descr_init ();
    /* Receive Broadcast and Perfect Match Packets */
    MAC_RXFILTERCTRL = RFC_UCAST_EN | RFC_BCAST_EN | RFC_PERFECT_EN;

    /* Reset all interrupts */
    MAC_INTCLEAR  = 0xFFFF;

    /* Enable receive and transmit mode of MAC Ethernet core */
    MAC_COMMAND  |= (CR_RX_EN | CR_TX_EN);
    MAC_MAC1     |= MAC1_REC_EN;

  return PASS;
}


// reads a word in little-endian byte order from RX_BUFFER

unsigned short ReadFrame_EMAC(void)
{
  return (*rptr++);
    2528:	e59f300c 	ldr	r3, [pc, #12]	; 253c <prog+0x24f4>
    252c:	e5932000 	ldr	r2, [r3]
    2530:	e0d200b2 	ldrh	r0, [r2], #2
    2534:	e5832000 	str	r2, [r3]
}
    2538:	e12fff1e 	bx	lr
    253c:	40000858 	andmi	r0, r0, r8, asr r8

00002540 <ReadFrameBE_EMAC>:

// reads a word in big-endian byte order from RX_FRAME_PORT
// (useful to avoid permanent byte-swapping while reading
// TCP/IP-data)

unsigned short ReadFrameBE_EMAC(void)
{
  unsigned short ReturnValue;

  ReturnValue = SwapBytes (*rptr++);
    2540:	e59f201c 	ldr	r2, [pc, #28]	; 2564 <prog+0x251c>
    2544:	e5923000 	ldr	r3, [r2]
    2548:	e0d310b2 	ldrh	r1, [r3], #2
    254c:	e5823000 	str	r3, [r2]
    2550:	e1a00401 	mov	r0, r1, lsl #8
    2554:	e1800421 	orr	r0, r0, r1, lsr #8
    2558:	e1a00800 	mov	r0, r0, lsl #16
  return (ReturnValue);
}
    255c:	e1a00820 	mov	r0, r0, lsr #16
    2560:	e12fff1e 	bx	lr
    2564:	40000858 	andmi	r0, r0, r8, asr r8

00002568 <CopyFromFrame_EMAC>:


// copies bytes from frame port to MCU-memory
// NOTES: * an odd number of byte may only be transfered
//          if the frame is read to the end!
//        * MCU-memory MUST start at word-boundary

void CopyFromFrame_EMAC(void *Dest, unsigned short Size)
{
    2568:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    256c:	e1a01801 	mov	r1, r1, lsl #16
    2570:	e1a04821 	mov	r4, r1, lsr #16
  unsigned short * piDest;                       // Keil: Pointer added to correct expression

  piDest = Dest;                                 // Keil: Line added
    2574:	e1a05000 	mov	r5, r0
  while (Size > 1) {
    2578:	e3540001 	cmp	r4, #1	; 0x1
    257c:	9a000006 	bls	259c <CopyFromFrame_EMAC+0x34>
    *piDest++ = ReadFrame_EMAC();
    2580:	ebffffe8 	bl	2528 <ReadFrame_EMAC>
    2584:	e0c500b2 	strh	r0, [r5], #2
    Size -= 2;
    2588:	e2443002 	sub	r3, r4, #2	; 0x2
    258c:	e1a03803 	mov	r3, r3, lsl #16
    2590:	e1a04823 	mov	r4, r3, lsr #16
    2594:	e3540001 	cmp	r4, #1	; 0x1
    2598:	8afffff8 	bhi	2580 <CopyFromFrame_EMAC+0x18>
  }
  
  if (Size) {                                         // check for leftover byte...
    259c:	e3540000 	cmp	r4, #0	; 0x0
    25a0:	08bd8030 	ldmeqia	sp!, {r4, r5, pc}
    *(unsigned char *)piDest = (char)ReadFrame_EMAC();// the LAN-Controller will return 0
    25a4:	ebffffdf 	bl	2528 <ReadFrame_EMAC>
    25a8:	e5c50000 	strb	r0, [r5]
    25ac:	e8bd8030 	ldmia	sp!, {r4, r5, pc}

000025b0 <DummyReadFrame_EMAC>:
  }                                                   // for the highbyte
}

// does a dummy read on frame-I/O-port
// NOTE: only an even number of bytes is read!

void DummyReadFrame_EMAC(unsigned short Size)    // discards an EVEN number of bytes
{                                                // from RX-fifo
    25b0:	e92d4010 	stmdb	sp!, {r4, lr}
    25b4:	e1a00800 	mov	r0, r0, lsl #16
    25b8:	e1a04820 	mov	r4, r0, lsr #16
  while (Size > 1) {
    25bc:	e3540001 	cmp	r4, #1	; 0x1
    25c0:	98bd8010 	ldmlsia	sp!, {r4, pc}
    ReadFrame_EMAC();
    25c4:	ebffffd7 	bl	2528 <ReadFrame_EMAC>
    Size -= 2;
    25c8:	e2443002 	sub	r3, r4, #2	; 0x2
    25cc:	e1a03803 	mov	r3, r3, lsl #16
    25d0:	e1a04823 	mov	r4, r3, lsr #16
    25d4:	e3540001 	cmp	r4, #1	; 0x1
    25d8:	8afffff9 	bhi	25c4 <DummyReadFrame_EMAC+0x14>
    25dc:	e8bd8010 	ldmia	sp!, {r4, pc}

000025e0 <StartReadFrame>:
  }
}

// Reads the length of the received ethernet frame and checks if the 
// destination address is a broadcast message or not
// returns the frame length
unsigned short StartReadFrame(void) {
  unsigned short RxLen;
  unsigned int idx;

  idx = MAC_RXCONSUMEINDEX;
    25e0:	e3a03eff 	mov	r3, #4080	; 0xff0
    25e4:	e283300f 	add	r3, r3, #15	; 0xf
    25e8:	e1833a83 	orr	r3, r3, r3, lsl #21
    25ec:	e5131ee7 	ldr	r1, [r3, #-3815]
  RxLen = (RX_STAT_INFO(idx) & RINFO_SIZE) - 3;
    25f0:	e1a01181 	mov	r1, r1, lsl #3
    25f4:	e3a0347f 	mov	r3, #2130706432	; 0x7f000000
    25f8:	e283360e 	add	r3, r3, #14680064	; 0xe00000
    25fc:	e2832020 	add	r2, r3, #32	; 0x20
    2600:	e7910002 	ldr	r0, [r1, r2]
  rptr = (unsigned short *)RX_DESC_PACKET(idx);
    2604:	e7912003 	ldr	r2, [r1, r3]
    2608:	e59f3014 	ldr	r3, [pc, #20]	; 2624 <prog+0x25dc>
    260c:	e5832000 	str	r2, [r3]
    2610:	e3c00b3e 	bic	r0, r0, #63488	; 0xf800
    2614:	e2400003 	sub	r0, r0, #3	; 0x3
    2618:	e1a00800 	mov	r0, r0, lsl #16
  return(RxLen);
}
    261c:	e1a00820 	mov	r0, r0, lsr #16
    2620:	e12fff1e 	bx	lr
    2624:	40000858 	andmi	r0, r0, r8, asr r8

00002628 <EndReadFrame>:

void EndReadFrame(void) {
  unsigned int idx;

  /* DMA free packet. */
  idx = MAC_RXCONSUMEINDEX;
    2628:	e3a03eff 	mov	r3, #4080	; 0xff0
    262c:	e283300f 	add	r3, r3, #15	; 0xf
    2630:	e1833a83 	orr	r3, r3, r3, lsl #21
    2634:	e5132ee7 	ldr	r2, [r3, #-3815]

  if (++idx == NUM_RX_FRAG)
    2638:	e3520003 	cmp	r2, #3	; 0x3
    263c:	12822001 	addne	r2, r2, #1	; 0x1
    2640:	03a02000 	moveq	r2, #0	; 0x0
    idx = 0;

  MAC_RXCONSUMEINDEX = idx;
    2644:	e3a03eff 	mov	r3, #4080	; 0xff0
    2648:	e283300f 	add	r3, r3, #15	; 0xf
    264c:	e1833a83 	orr	r3, r3, r3, lsl #21
    2650:	e5032ee7 	str	r2, [r3, #-3815]
}
    2654:	e12fff1e 	bx	lr

00002658 <CheckFrameReceived>:

unsigned int CheckFrameReceived(void) {             // Packet received ?

  if (MAC_RXPRODUCEINDEX != MAC_RXCONSUMEINDEX)     // more packets received ?
    2658:	e3a03eff 	mov	r3, #4080	; 0xff0
    265c:	e283300f 	add	r3, r3, #15	; 0xf
    2660:	e1833a83 	orr	r3, r3, r3, lsl #21
    2664:	e5132eeb 	ldr	r2, [r3, #-3819]
    2668:	e5130ee7 	ldr	r0, [r3, #-3815]
    return(1);
  else 
    return(0);
}
    266c:	e0520000 	subs	r0, r2, r0
    2670:	13a00001 	movne	r0, #1	; 0x1
    2674:	e12fff1e 	bx	lr

00002678 <uiGetEMACRxData>:

unsigned int uiGetEMACRxData( unsigned char *ucBuffer )
{
    2678:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    267c:	e1a05000 	mov	r5, r0
unsigned int uiLen = 0;

    if( MAC_RXPRODUCEINDEX != MAC_RXCONSUMEINDEX )
    2680:	e3a03eff 	mov	r3, #4080	; 0xff0
    2684:	e283300f 	add	r3, r3, #15	; 0xf
    2688:	e1833a83 	orr	r3, r3, r3, lsl #21
    268c:	e5132eeb 	ldr	r2, [r3, #-3819]
    2690:	e5133ee7 	ldr	r3, [r3, #-3815]
    2694:	e1520003 	cmp	r2, r3
    2698:	03a04000 	moveq	r4, #0	; 0x0
    269c:	0a000006 	beq	26bc <uiGetEMACRxData+0x44>
    {
        uiLen = StartReadFrame();
    26a0:	ebffffce 	bl	25e0 <StartReadFrame>
    26a4:	e1a04000 	mov	r4, r0
        CopyFromFrame_EMAC( ucBuffer, uiLen );
    26a8:	e1a01800 	mov	r1, r0, lsl #16
    26ac:	e1a00005 	mov	r0, r5
    26b0:	e1a01821 	mov	r1, r1, lsr #16
    26b4:	ebffffab 	bl	2568 <CopyFromFrame_EMAC>

        EndReadFrame();
    26b8:	ebffffda 	bl	2628 <EndReadFrame>
    }

    return uiLen;
}
    26bc:	e1a00004 	mov	r0, r4
    26c0:	e8bd8030 	ldmia	sp!, {r4, r5, pc}

000026c4 <RequestSend>:

// requests space in EMAC memory for storing an outgoing frame

void RequestSend(void)
{
  unsigned int idx;

  idx  = MAC_TXPRODUCEINDEX;
    26c4:	e3a03eff 	mov	r3, #4080	; 0xff0
    26c8:	e283300f 	add	r3, r3, #15	; 0xf
    26cc:	e1833a83 	orr	r3, r3, r3, lsl #21
    26d0:	e5132ed7 	ldr	r2, [r3, #-3799]
  tptr = (unsigned short *)TX_DESC_PACKET(idx);
    26d4:	e3a0347f 	mov	r3, #2130706432	; 0x7f000000
    26d8:	e283360e 	add	r3, r3, #14680064	; 0xe00000
    26dc:	e2833040 	add	r3, r3, #64	; 0x40
    26e0:	e7932182 	ldr	r2, [r3, r2, lsl #3]
    26e4:	e59f3004 	ldr	r3, [pc, #4]	; 26f0 <prog+0x26a8>
    26e8:	e5832000 	str	r2, [r3]
}
    26ec:	e12fff1e 	bx	lr
    26f0:	4000085c 	andmi	r0, r0, ip, asr r8

000026f4 <Rdy4Tx>:

// check if ethernet controller is ready to accept the
// frame we want to send

unsigned int Rdy4Tx(void)
{
  return (1);   // the ethernet controller transmits much faster
}               // than the CPU can load its buffers
    26f4:	e3a00001 	mov	r0, #1	; 0x1
    26f8:	e12fff1e 	bx	lr

000026fc <WriteFrame_EMAC>:


// writes a word in little-endian byte order to TX_BUFFER
void WriteFrame_EMAC(unsigned short Data)
{
  *tptr++ = Data;
    26fc:	e59f200c 	ldr	r2, [pc, #12]	; 2710 <prog+0x26c8>
    2700:	e5923000 	ldr	r3, [r2]
    2704:	e0c300b2 	strh	r0, [r3], #2
    2708:	e5823000 	str	r3, [r2]
}
    270c:	e12fff1e 	bx	lr
    2710:	4000085c 	andmi	r0, r0, ip, asr r8

00002714 <CopyToFrame_EMAC>:

// copies bytes from MCU-memory to frame port
// NOTES: * an odd number of byte may only be transfered
//          if the frame is written to the end!
//        * MCU-memory MUST start at word-boundary

void CopyToFrame_EMAC(void *Source, unsigned int Size)
{
    2714:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
  unsigned short * piSource;

  piSource = Source;
  Size = (Size + 1) & 0xFFFE;    // round Size up to next even number
    2718:	e2811001 	add	r1, r1, #1	; 0x1
    271c:	e3a03cff 	mov	r3, #65280	; 0xff00
    2720:	e28330fe 	add	r3, r3, #254	; 0xfe
  while (Size > 0) {
    2724:	e0114003 	ands	r4, r1, r3
    2728:	08bd8070 	ldmeqia	sp!, {r4, r5, r6, pc}
    272c:	e1a06000 	mov	r6, r0
    2730:	e3a05000 	mov	r5, #0	; 0x0
    WriteFrame_EMAC(*piSource++);
    2734:	e19500b6 	ldrh	r0, [r5, r6]
    2738:	ebffffef 	bl	26fc <WriteFrame_EMAC>
    Size -= 2;
    273c:	e2855002 	add	r5, r5, #2	; 0x2
    2740:	e2544002 	subs	r4, r4, #2	; 0x2
    2744:	1afffffa 	bne	2734 <CopyToFrame_EMAC+0x20>
    2748:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}

0000274c <DoSend_EMAC>:
  }
}

void DoSend_EMAC(unsigned short FrameSize)
{
    274c:	e1a00800 	mov	r0, r0, lsl #16
    2750:	e1a00820 	mov	r0, r0, lsr #16
  unsigned int idx;

  idx = MAC_TXPRODUCEINDEX;
    2754:	e3a03eff 	mov	r3, #4080	; 0xff0
    2758:	e283300f 	add	r3, r3, #15	; 0xf
    275c:	e1833a83 	orr	r3, r3, r3, lsl #21
    2760:	e5132ed7 	ldr	r2, [r3, #-3799]
  TX_DESC_CTRL(idx) = FrameSize | TCTRL_LAST;
    2764:	e3800101 	orr	r0, r0, #1073741824	; 0x40000000
    2768:	e3a0347f 	mov	r3, #2130706432	; 0x7f000000
    276c:	e283360e 	add	r3, r3, #14680064	; 0xe00000
    2770:	e2833044 	add	r3, r3, #68	; 0x44
    2774:	e7830182 	str	r0, [r3, r2, lsl #3]
  if (++idx == NUM_TX_FRAG) idx = 0;
    2778:	e3520001 	cmp	r2, #1	; 0x1
    277c:	12822001 	addne	r2, r2, #1	; 0x1
    2780:	03a02000 	moveq	r2, #0	; 0x0
  MAC_TXPRODUCEINDEX = idx;
    2784:	e3a03eff 	mov	r3, #4080	; 0xff0
    2788:	e283300f 	add	r3, r3, #15	; 0xf
    278c:	e1833a83 	orr	r3, r3, r3, lsl #21
    2790:	e5032ed7 	str	r2, [r3, #-3799]
}
    2794:	e12fff1e 	bx	lr

00002798 <Init_EMAC>:
    2798:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    279c:	e24dd010 	sub	sp, sp, #16	; 0x10
    27a0:	e3a0420e 	mov	r4, #-536870912	; 0xe0000000
    27a4:	e284297f 	add	r2, r4, #2080768	; 0x1fc000
    27a8:	e59230c4 	ldr	r3, [r2, #196]
    27ac:	e3833101 	orr	r3, r3, #1073741824	; 0x40000000
    27b0:	e58230c4 	str	r3, [r2, #196]
    27b4:	e3a0000a 	mov	r0, #10	; 0xa
    27b8:	ebfffcc2 	bl	1ac8 <delayMs>
    27bc:	e284490b 	add	r4, r4, #180224	; 0x2c000
    27c0:	e3a03f41 	mov	r3, #260	; 0x104
    27c4:	e2833215 	add	r3, r3, #1342177281	; 0x50000001
    27c8:	e2833815 	add	r3, r3, #1376256	; 0x150000
    27cc:	e5843008 	str	r3, [r4, #8]
    27d0:	e594300c 	ldr	r3, [r4, #12]
    27d4:	e3c3300f 	bic	r3, r3, #15	; 0xf
    27d8:	e3833005 	orr	r3, r3, #5	; 0x5
    27dc:	e584300c 	str	r3, [r4, #12]
    27e0:	e3a04eff 	mov	r4, #4080	; 0xff0
    27e4:	e284400f 	add	r4, r4, #15	; 0xf
    27e8:	e1844a84 	orr	r4, r4, r4, lsl #21
    27ec:	e3a03ccf 	mov	r3, #52992	; 0xcf00
    27f0:	e5043fff 	str	r3, [r4, #-4095]
    27f4:	e3a03038 	mov	r3, #56	; 0x38
    27f8:	e5043eff 	str	r3, [r4, #-3839]
    27fc:	e3a0000a 	mov	r0, #10	; 0xa
    2800:	ebfffcb0 	bl	1ac8 <delayMs>
    2804:	e3a03002 	mov	r3, #2	; 0x2
    2808:	e5043fff 	str	r3, [r4, #-4095]
    280c:	e283302e 	add	r3, r3, #46	; 0x2e
    2810:	e5043ffb 	str	r3, [r4, #-4091]
    2814:	e2833e5d 	add	r3, r3, #1488	; 0x5d0
    2818:	e5043feb 	str	r3, [r4, #-4075]
    281c:	e2833c31 	add	r3, r3, #12544	; 0x3100
    2820:	e283300f 	add	r3, r3, #15	; 0xf
    2824:	e5043fef 	str	r3, [r4, #-4079]
    2828:	e3a03012 	mov	r3, #18	; 0x12
    282c:	e5043ff3 	str	r3, [r4, #-4083]
    2830:	e3a03d09 	mov	r3, #576	; 0x240
    2834:	e5043eff 	str	r3, [r4, #-3839]
    2838:	e3a00000 	mov	r0, #0	; 0x0
    283c:	e3a01902 	mov	r1, #32768	; 0x8000
    2840:	ebfffed8 	bl	23a8 <write_PHY>
    2844:	e3a03000 	mov	r3, #0	; 0x0
    2848:	e58d3008 	str	r3, [sp, #8]
    284c:	e59d3008 	ldr	r3, [sp, #8]
    2850:	e3530063 	cmp	r3, #99	; 0x63
    2854:	8a00000d 	bhi	2890 <Init_EMAC+0xf8>
    2858:	e3a0000a 	mov	r0, #10	; 0xa
    285c:	ebfffc99 	bl	1ac8 <delayMs>
    2860:	e3a00000 	mov	r0, #0	; 0x0
    2864:	ebfffee0 	bl	23ec <read_PHY>
    2868:	e58d000c 	str	r0, [sp, #12]
    286c:	e59d300c 	ldr	r3, [sp, #12]
    2870:	e2131902 	ands	r1, r3, #32768	; 0x8000
    2874:	0a000025 	beq	2910 <Init_EMAC+0x178>
    2878:	e59d3008 	ldr	r3, [sp, #8]
    287c:	e2833001 	add	r3, r3, #1	; 0x1
    2880:	e58d3008 	str	r3, [sp, #8]
    2884:	e59d3008 	ldr	r3, [sp, #8]
    2888:	e3530063 	cmp	r3, #99	; 0x63
    288c:	9afffff1 	bls	2858 <Init_EMAC+0xc0>
    2890:	e3a04eff 	mov	r4, #4080	; 0xff0
    2894:	e284400f 	add	r4, r4, #15	; 0xf
    2898:	e1844a84 	orr	r4, r4, r4, lsl #21
    289c:	e3a03902 	mov	r3, #32768	; 0x8000
    28a0:	e2833018 	add	r3, r3, #24	; 0x18
    28a4:	e5043fdf 	str	r3, [r4, #-4063]
    28a8:	e3a0000a 	mov	r0, #10	; 0xa
    28ac:	ebfffc85 	bl	1ac8 <delayMs>
    28b0:	e5143fdf 	ldr	r3, [r4, #-4063]
    28b4:	e3c33902 	bic	r3, r3, #32768	; 0x8000
    28b8:	e5043fdf 	str	r3, [r4, #-4063]
    28bc:	e3a05000 	mov	r5, #0	; 0x0
    28c0:	e5045fdb 	str	r5, [r4, #-4059]
    28c4:	e3a00002 	mov	r0, #2	; 0x2
    28c8:	ebfffec7 	bl	23ec <read_PHY>
    28cc:	e58d0004 	str	r0, [sp, #4]
    28d0:	e3a00003 	mov	r0, #3	; 0x3
    28d4:	ebfffec4 	bl	23ec <read_PHY>
    28d8:	e58d0000 	str	r0, [sp]
    28dc:	e59d1004 	ldr	r1, [sp, #4]
    28e0:	e59d2000 	ldr	r2, [sp]
    28e4:	e3a03cff 	mov	r3, #65280	; 0xff00
    28e8:	e28330f0 	add	r3, r3, #240	; 0xf0
    28ec:	e0022003 	and	r2, r2, r3
    28f0:	e1822801 	orr	r2, r2, r1, lsl #16
    28f4:	e3a03202 	mov	r3, #536870912	; 0x20000000
    28f8:	e2833b17 	add	r3, r3, #23552	; 0x5c00
    28fc:	e2833090 	add	r3, r3, #144	; 0x90
    2900:	e1520003 	cmp	r2, r3
    2904:	11a00005 	movne	r0, r5
    2908:	1a00007a 	bne	2af8 <Init_EMAC+0x360>
    290c:	ea00000a 	b	293c <Init_EMAC+0x1a4>
    2910:	e59f01e8 	ldr	r0, [pc, #488]	; 2b00 <prog+0x2ab8>
    2914:	ebfff8bd 	bl	c10 <UARTTransmitString>
    2918:	eaffffdc 	b	2890 <Init_EMAC+0xf8>
    291c:	e59f01e0 	ldr	r0, [pc, #480]	; 2b04 <prog+0x2abc>
    2920:	e3a01000 	mov	r1, #0	; 0x0
    2924:	ebfff8b9 	bl	c10 <UARTTransmitString>
    2928:	ea000019 	b	2994 <Init_EMAC+0x1fc>
    292c:	e59f01d4 	ldr	r0, [pc, #468]	; 2b08 <prog+0x2ac0>
    2930:	e3a01000 	mov	r1, #0	; 0x0
    2934:	ebfff8b5 	bl	c10 <UARTTransmitString>
    2938:	ea000028 	b	29e0 <Init_EMAC+0x248>
    293c:	e3a00000 	mov	r0, #0	; 0x0
    2940:	e3a01a03 	mov	r1, #12288	; 0x3000
    2944:	ebfffe97 	bl	23a8 <write_PHY>
    2948:	e3a03000 	mov	r3, #0	; 0x0
    294c:	e58d3008 	str	r3, [sp, #8]
    2950:	e59d3008 	ldr	r3, [sp, #8]
    2954:	e3530009 	cmp	r3, #9	; 0x9
    2958:	8a00000d 	bhi	2994 <Init_EMAC+0x1fc>
    295c:	e3a00064 	mov	r0, #100	; 0x64
    2960:	ebfffc58 	bl	1ac8 <delayMs>
    2964:	e3a00001 	mov	r0, #1	; 0x1
    2968:	ebfffe9f 	bl	23ec <read_PHY>
    296c:	e58d000c 	str	r0, [sp, #12]
    2970:	e59d300c 	ldr	r3, [sp, #12]
    2974:	e3130020 	tst	r3, #32	; 0x20
    2978:	1affffe7 	bne	291c <Init_EMAC+0x184>
    297c:	e59d3008 	ldr	r3, [sp, #8]
    2980:	e2833001 	add	r3, r3, #1	; 0x1
    2984:	e58d3008 	str	r3, [sp, #8]
    2988:	e59d3008 	ldr	r3, [sp, #8]
    298c:	e3530009 	cmp	r3, #9	; 0x9
    2990:	9afffff1 	bls	295c <Init_EMAC+0x1c4>
    2994:	e3a03000 	mov	r3, #0	; 0x0
    2998:	e58d3008 	str	r3, [sp, #8]
    299c:	e59d3008 	ldr	r3, [sp, #8]
    29a0:	e3530009 	cmp	r3, #9	; 0x9
    29a4:	8a00000d 	bhi	29e0 <Init_EMAC+0x248>
    29a8:	e3a00064 	mov	r0, #100	; 0x64
    29ac:	ebfffc45 	bl	1ac8 <delayMs>
    29b0:	e3a00010 	mov	r0, #16	; 0x10
    29b4:	ebfffe8c 	bl	23ec <read_PHY>
    29b8:	e58d000c 	str	r0, [sp, #12]
    29bc:	e59d300c 	ldr	r3, [sp, #12]
    29c0:	e3130001 	tst	r3, #1	; 0x1
    29c4:	1affffd8 	bne	292c <Init_EMAC+0x194>
    29c8:	e59d3008 	ldr	r3, [sp, #8]
    29cc:	e2833001 	add	r3, r3, #1	; 0x1
    29d0:	e58d3008 	str	r3, [sp, #8]
    29d4:	e59d3008 	ldr	r3, [sp, #8]
    29d8:	e3530009 	cmp	r3, #9	; 0x9
    29dc:	9afffff1 	bls	29a8 <Init_EMAC+0x210>
    29e0:	e59d300c 	ldr	r3, [sp, #12]
    29e4:	e3130004 	tst	r3, #4	; 0x4
    29e8:	0a00000e 	beq	2a28 <Init_EMAC+0x290>
    29ec:	e3a02eff 	mov	r2, #4080	; 0xff0
    29f0:	e282200f 	add	r2, r2, #15	; 0xf
    29f4:	e1822a82 	orr	r2, r2, r2, lsl #21
    29f8:	e5123ffb 	ldr	r3, [r2, #-4091]
    29fc:	e3833001 	orr	r3, r3, #1	; 0x1
    2a00:	e5023ffb 	str	r3, [r2, #-4091]
    2a04:	e5123eff 	ldr	r3, [r2, #-3839]
    2a08:	e3833b01 	orr	r3, r3, #1024	; 0x400
    2a0c:	e5023eff 	str	r3, [r2, #-3839]
    2a10:	e3a03015 	mov	r3, #21	; 0x15
    2a14:	e5023ff7 	str	r3, [r2, #-4087]
    2a18:	e59f00ec 	ldr	r0, [pc, #236]	; 2b0c <prog+0x2ac4>
    2a1c:	e3a01000 	mov	r1, #0	; 0x0
    2a20:	ebfff87a 	bl	c10 <UARTTransmitString>
    2a24:	ea000007 	b	2a48 <Init_EMAC+0x2b0>
    2a28:	e3a03eff 	mov	r3, #4080	; 0xff0
    2a2c:	e283300f 	add	r3, r3, #15	; 0xf
    2a30:	e1833a83 	orr	r3, r3, r3, lsl #21
    2a34:	e3a02012 	mov	r2, #18	; 0x12
    2a38:	e5032ff7 	str	r2, [r3, #-4087]
    2a3c:	e59f00cc 	ldr	r0, [pc, #204]	; 2b10 <prog+0x2ac8>
    2a40:	e3a01000 	mov	r1, #0	; 0x0
    2a44:	ebfff871 	bl	c10 <UARTTransmitString>
    2a48:	e59d300c 	ldr	r3, [sp, #12]
    2a4c:	e3130002 	tst	r3, #2	; 0x2
    2a50:	0a000007 	beq	2a74 <Init_EMAC+0x2dc>
    2a54:	e3a03eff 	mov	r3, #4080	; 0xff0
    2a58:	e283300f 	add	r3, r3, #15	; 0xf
    2a5c:	e1833a83 	orr	r3, r3, r3, lsl #21
    2a60:	e3a01000 	mov	r1, #0	; 0x0
    2a64:	e5031fe7 	str	r1, [r3, #-4071]
    2a68:	e59f00a4 	ldr	r0, [pc, #164]	; 2b14 <prog+0x2acc>
    2a6c:	ebfff867 	bl	c10 <UARTTransmitString>
    2a70:	ea000007 	b	2a94 <Init_EMAC+0x2fc>
    2a74:	e3a03eff 	mov	r3, #4080	; 0xff0
    2a78:	e283300f 	add	r3, r3, #15	; 0xf
    2a7c:	e1833a83 	orr	r3, r3, r3, lsl #21
    2a80:	e3a02c01 	mov	r2, #256	; 0x100
    2a84:	e5032fe7 	str	r2, [r3, #-4071]
    2a88:	e59f0088 	ldr	r0, [pc, #136]	; 2b18 <prog+0x2ad0>
    2a8c:	e3a01000 	mov	r1, #0	; 0x0
    2a90:	ebfff85e 	bl	c10 <UARTTransmitString>
    2a94:	e3a04eff 	mov	r4, #4080	; 0xff0
    2a98:	e284400f 	add	r4, r4, #15	; 0xf
    2a9c:	e1844a84 	orr	r4, r4, r4, lsl #21
    2aa0:	e3a030bd 	mov	r3, #189	; 0xbd
    2aa4:	e5043fbf 	str	r3, [r4, #-4031]
    2aa8:	e3a03c33 	mov	r3, #13056	; 0x3300
    2aac:	e2833002 	add	r3, r3, #2	; 0x2
    2ab0:	e5043fbb 	str	r3, [r4, #-4027]
    2ab4:	e3a03b19 	mov	r3, #25600	; 0x6400
    2ab8:	e2833024 	add	r3, r3, #36	; 0x24
    2abc:	e5043fb7 	str	r3, [r4, #-4023]
    2ac0:	ebfffe64 	bl	2458 <rx_descr_init>
    2ac4:	ebfffe7e 	bl	24c4 <tx_descr_init>
    2ac8:	e3a03023 	mov	r3, #35	; 0x23
    2acc:	e5043dff 	str	r3, [r4, #-3583]
    2ad0:	e3a03801 	mov	r3, #65536	; 0x10000
    2ad4:	e2433001 	sub	r3, r3, #1	; 0x1
    2ad8:	e5043017 	str	r3, [r4, #-23]
    2adc:	e5143eff 	ldr	r3, [r4, #-3839]
    2ae0:	e3833003 	orr	r3, r3, #3	; 0x3
    2ae4:	e5043eff 	str	r3, [r4, #-3839]
    2ae8:	e5143fff 	ldr	r3, [r4, #-4095]
    2aec:	e3833001 	orr	r3, r3, #1	; 0x1
    2af0:	e5043fff 	str	r3, [r4, #-4095]
    2af4:	e3a00001 	mov	r0, #1	; 0x1
    2af8:	e28dd010 	add	sp, sp, #16	; 0x10
    2afc:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
    2b00:	000147d8 	ldreqd	r4, [r1], -r8
    2b04:	000147e4 	andeq	r4, r1, r4, ror #15
    2b08:	000147f0 	streqd	r4, [r1], -r0
    2b0c:	000147fc 	streqd	r4, [r1], -ip
    2b10:	00014808 	andeq	r4, r1, r8, lsl #16
    2b14:	00014814 	andeq	r4, r1, r4, lsl r8
    2b18:	00014820 	andeq	r4, r1, r0, lsr #16

00002b1c <EMAC_ISR_Handler>:

void EMAC_ISR_Handler( void ) __attribute__ ((interrupt("IRQ")));

void EMAC_ISR_Handler( void )
{
    2b1c:	e24ee004 	sub	lr, lr, #4	; 0x4
    2b20:	e92d500f 	stmdb	sp!, {r0, r1, r2, r3, ip, lr}
    MAC_INTCLEAR = 0xf0ff;
    2b24:	e3a02eff 	mov	r2, #4080	; 0xff0
    2b28:	e282200f 	add	r2, r2, #15	; 0xf
    2b2c:	e1822a82 	orr	r2, r2, r2, lsl #21
    2b30:	e3a03cf1 	mov	r3, #61696	; 0xf100
    2b34:	e2433001 	sub	r3, r3, #1	; 0x1
    2b38:	e5023017 	str	r3, [r2, #-23]
    VICVectAddr = 0;
    2b3c:	e3a02000 	mov	r2, #0	; 0x0
    2b40:	e2433cf1 	sub	r3, r3, #61696	; 0xf100
    2b44:	e50320ff 	str	r2, [r3, #-255]
	//uart_putc('e');
	ethernet_task();
    2b48:	eb000a50 	bl	5490 <ethernet_task>
}
    2b4c:	e8fd900f 	ldmia	sp!, {r0, r1, r2, r3, ip, pc}^

00002b50 <services_appcall>:
 *
 * Gerencia os pacotes vindos da rede e de acordo com a porta que esta sendo feito a requisicao
 * e encaminhado para o devido pacote.
 */
void services_appcall(void){
    2b50:	e52de004 	str	lr, [sp, #-4]!

	struct services_state *proc;

//	proc = (struct services_state)uip_conn->appstate;

//	if (uip_connected()){//uip_connected - aloca uma nova conexão.

	//verificação de qual serviço deve ser atendido é feita através da porta utilizada por ele.
	if(uip_conn->lport == HTONS(TELNET_PORT)){
    2b54:	e59f305c 	ldr	r3, [pc, #92]	; 2bb8 <prog+0x2b70>
    2b58:	e5933000 	ldr	r3, [r3]
    2b5c:	e1d310b4 	ldrh	r1, [r3, #4]
    2b60:	e3510c17 	cmp	r1, #5888	; 0x1700
    2b64:	1a000001 	bne	2b70 <services_appcall+0x20>
		DEBUG_INFO("Atendendo servicos de TELNET");
		//função tratadora dos serviços de telnet.
		telnetd_appcall();
    2b68:	eb001034 	bl	6c40 <telnetd_appcall>
    2b6c:	e49df004 	ldr	pc, [sp], #4
	}
	else if(uip_conn->lport == HTONS(HTTP_PORT)){
    2b70:	e3510a05 	cmp	r1, #20480	; 0x5000
    2b74:	1a000001 	bne	2b80 <services_appcall+0x30>
		DEBUG_INFO("Atendendo servicos de HTTP");
		//função tratadora dos serviços do webServer.
		httpd_appcall();
    2b78:	eb0007ef 	bl	4b3c <httpd_appcall>
    2b7c:	e49df004 	ldr	pc, [sp], #4
	}
	else if(uip_conn->lport == HTONS(CHAT_PORT)){
    2b80:	e59f3034 	ldr	r3, [pc, #52]	; 2bbc <prog+0x2b74>
    2b84:	e5932000 	ldr	r2, [r3]
    2b88:	e1a02802 	mov	r2, r2, lsl #16
    2b8c:	e1a03c22 	mov	r3, r2, lsr #24
    2b90:	e1833422 	orr	r3, r3, r2, lsr #8
    2b94:	e1a03803 	mov	r3, r3, lsl #16
    2b98:	e1510823 	cmp	r1, r3, lsr #16
    2b9c:	1a000001 	bne	2ba8 <services_appcall+0x58>
		DEBUG_INFO("Atendendo servicos de CHAT");
		//função tratadora dos serviços do chat.
		chat_appcall();
    2ba0:	eb0009f2 	bl	5370 <chat_appcall>
    2ba4:	e49df004 	ldr	pc, [sp], #4
	}
	else if(uip_conn->lport == HTONS(SFTD_PORT)){
    2ba8:	e3510c2d 	cmp	r1, #11520	; 0x2d00
    2bac:	149df004 	ldrne	pc, [sp], #4
		DEBUG_INFO("Atendendo servicos de SFT");
		//função tratadora dos serviços do sft.
		sftd_appcall();
    2bb0:	eb0003ba 	bl	3aa0 <sftd_appcall>
    2bb4:	e49df004 	ldr	pc, [sp], #4
    2bb8:	40001848 	andmi	r1, r0, r8, asr #16
    2bbc:	400016c4 	andmi	r1, r0, r4, asr #13

00002bc0 <services_init>:
    2bc0:	e52de004 	str	lr, [sp, #-4]!
    2bc4:	e3a03d56 	mov	r3, #5504	; 0x1580
    2bc8:	e2833033 	add	r3, r3, #51	; 0x33
    2bcc:	e59f2020 	ldr	r2, [pc, #32]	; 2bf4 <prog+0x2bac>
    2bd0:	e5823000 	str	r3, [r2]
    2bd4:	e3a02000 	mov	r2, #0	; 0x0
    2bd8:	e59f3018 	ldr	r3, [pc, #24]	; 2bf8 <prog+0x2bb0>
    2bdc:	e5832000 	str	r2, [r3]
    2be0:	eb00110a 	bl	7010 <telnetd_init>
    2be4:	eb0005c1 	bl	42f0 <httpd_init>
    2be8:	eb0009f4 	bl	53c0 <chat_init>
    2bec:	eb0003d8 	bl	3b54 <sftd_init>
    2bf0:	e49df004 	ldr	pc, [sp], #4
    2bf4:	400016c4 	andmi	r1, r0, r4, asr #13
    2bf8:	400016dc 	ldrmid	r1, [r0], -ip

00002bfc <espera_ms>:
#define INVERTE
/* espera t milisegundos (usa timer T1) */
void espera_ms(unsigned t)
{
t += T1TC;
    2bfc:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2c00:	e2833902 	add	r3, r3, #32768	; 0x8000
    2c04:	e5933008 	ldr	r3, [r3, #8]
    2c08:	e0832000 	add	r2, r3, r0
    2c0c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2c10:	e2831902 	add	r1, r3, #32768	; 0x8000
while(t != T1TC);
    2c14:	e5913008 	ldr	r3, [r1, #8]
    2c18:	e1520003 	cmp	r2, r3
    2c1c:	1afffffc 	bne	2c14 <espera_ms+0x18>
}
    2c20:	e12fff1e 	bx	lr

00002c24 <spiconfig>:

void spiconfig(void)
{
SSP1CR1 = 0;	// Conigura desabilitado
    2c24:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    2c28:	e2820803 	add	r0, r2, #196608	; 0x30000
    2c2c:	e3a03000 	mov	r3, #0	; 0x0
    2c30:	e5803004 	str	r3, [r0, #4]
// Divide por 1 no SSP1-PCLK
PCLKSEL0 = (PCLKSEL0 & (~(3<<20))) | (0<<20);
    2c34:	e282197f 	add	r1, r2, #2080768	; 0x1fc000
    2c38:	e59131a8 	ldr	r3, [r1, #424]
    2c3c:	e3c33603 	bic	r3, r3, #3145728	; 0x300000
    2c40:	e58131a8 	str	r3, [r1, #424]
// Seleciona pinos p0.9=MOSI1; P0.7=SCLK1;  P0.6=SSEL1
PINSEL0 = (PINSEL0 & (~0x000ff000)) | 0x8a000;
    2c44:	e282290b 	add	r2, r2, #180224	; 0x2c000
    2c48:	e5923000 	ldr	r3, [r2]
    2c4c:	e3c33aff 	bic	r3, r3, #1044480	; 0xff000
    2c50:	e3833a8a 	orr	r3, r3, #565248	; 0x8a000
    2c54:	e5823000 	str	r3, [r2]
PCONP |= (1 << 10);		// Liga ssp1
    2c58:	e59130c4 	ldr	r3, [r1, #196]
    2c5c:	e3833b01 	orr	r3, r3, #1024	; 0x400
    2c60:	e58130c4 	str	r3, [r1, #196]
SSP1CR0 = 8 + (0x0 << 6);	// Configura SPI de 9 bits
    2c64:	e3a03008 	mov	r3, #8	; 0x8
    2c68:	e5803000 	str	r3, [r0]
SSP1CPSR = 4;	// Divide PCLK por 4
    2c6c:	e2433004 	sub	r3, r3, #4	; 0x4
    2c70:	e5803010 	str	r3, [r0, #16]
SSP1CR1 = 2;	// Habilita SSP1 como SPI
    2c74:	e2433002 	sub	r3, r3, #2	; 0x2
    2c78:	e5803004 	str	r3, [r0, #4]
}
    2c7c:	e12fff1e 	bx	lr

00002c80 <WrSPI>:

/* Rotina para escrever um byte na interface SPI */
void WrSPI(int c)
{
    2c80:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2c84:	e2832803 	add	r2, r3, #196608	; 0x30000
while((SSP1SR & 2) == 0);	// Wait while FIFO full
    2c88:	e592300c 	ldr	r3, [r2, #12]
    2c8c:	e3130002 	tst	r3, #2	; 0x2
    2c90:	0afffffc 	beq	2c88 <WrSPI+0x8>
SSP1DR = c;
    2c94:	e5820008 	str	r0, [r2, #8]
}
    2c98:	e12fff1e 	bx	lr

00002c9c <lcd_nokia_init>:

void lcd_nokia_init()
{
    2c9c:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
int k;
spiconfig();
    2ca0:	ebffffdf 	bl	2c24 <spiconfig>
T1TCR = 0;	// T1 em 1000 contagens por segundo
    2ca4:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    2ca8:	e2822902 	add	r2, r2, #32768	; 0x8000
    2cac:	e3a06000 	mov	r6, #0	; 0x0
    2cb0:	e5826004 	str	r6, [r2, #4]
T1PR = 12000000/10000 - 1;
    2cb4:	e3a03e4a 	mov	r3, #1184	; 0x4a0
    2cb8:	e283300f 	add	r3, r3, #15	; 0xf
    2cbc:	e582300c 	str	r3, [r2, #12]
T1TCR = 2;
    2cc0:	e3a03002 	mov	r3, #2	; 0x2
    2cc4:	e5823004 	str	r3, [r2, #4]
T1TCR = 1;
    2cc8:	e2433001 	sub	r3, r3, #1	; 0x1
    2ccc:	e5823004 	str	r3, [r2, #4]
FIO0DIR |= 0x100;
    2cd0:	e3e04103 	mvn	r4, #-1073741824	; 0xc0000000
    2cd4:	e2444a03 	sub	r4, r4, #12288	; 0x3000
    2cd8:	e5143fff 	ldr	r3, [r4, #-4095]
    2cdc:	e3833c01 	orr	r3, r3, #256	; 0x100
    2ce0:	e5043fff 	str	r3, [r4, #-4095]
FIO0CLR = 0x100;	// Reset no PCF8833
    2ce4:	e3a05c01 	mov	r5, #256	; 0x100
    2ce8:	e5045fe3 	str	r5, [r4, #-4067]
espera_ms(10);		// Pulso de 10ms
    2cec:	e3a0000a 	mov	r0, #10	; 0xa
    2cf0:	ebffffc1 	bl	2bfc <espera_ms>
FIO0SET = 0x100;
    2cf4:	e5045fe7 	str	r5, [r4, #-4071]
espera_ms(10);
    2cf8:	e3a0000a 	mov	r0, #10	; 0xa
    2cfc:	ebffffbe 	bl	2bfc <espera_ms>
WriteSpiCommand(0x11);	// SLEEPOUT
    2d00:	e3a00011 	mov	r0, #17	; 0x11
    2d04:	ebffffdd 	bl	2c80 <WrSPI>
WriteSpiCommand(0x3a);	// COLMOD (Modo de colorido)
    2d08:	e3a0003a 	mov	r0, #58	; 0x3a
    2d0c:	ebffffdb 	bl	2c80 <WrSPI>
WriteSpiData(0x03);	// 12 bits
    2d10:	e2850003 	add	r0, r5, #3	; 0x3
    2d14:	ebffffd9 	bl	2c80 <WrSPI>
// Dependendo do modelo de display estas configuracoes devem mudar
WriteSpiCommand(0x36);	// MADCTL
    2d18:	e3a00036 	mov	r0, #54	; 0x36
    2d1c:	ebffffd7 	bl	2c80 <WrSPI>
#ifdef INVERTE
WriteSpiData(0x48);	// 0x40: Xmirror;  0x08: bgr [1-bgr 0-rgb]
    2d20:	e3a00f52 	mov	r0, #328	; 0x148
    2d24:	ebffffd5 	bl	2c80 <WrSPI>
#else
WriteSpiData(0x0);	// no mirror - rgb
WriteSpiCommand(0x20);	// INVON
#endif
WriteSpiCommand(0x25);	// SETCON Ajusta contraste
    2d28:	e3a00025 	mov	r0, #37	; 0x25
    2d2c:	ebffffd3 	bl	2c80 <WrSPI>
WriteSpiData(0x38);	// Metade do maximo
    2d30:	e3a00f4e 	mov	r0, #312	; 0x138
    2d34:	ebffffd1 	bl	2c80 <WrSPI>
WriteSpiCommand(0x29);	// DISPON
    2d38:	e3a00029 	mov	r0, #41	; 0x29
    2d3c:	ebffffcf 	bl	2c80 <WrSPI>
WriteSpiCommand(0x2b);	// PASET Linha inicial e final
    2d40:	e3a0002b 	mov	r0, #43	; 0x2b
    2d44:	ebffffcd 	bl	2c80 <WrSPI>
WriteSpiData(0);
    2d48:	e1a00005 	mov	r0, r5
    2d4c:	ebffffcb 	bl	2c80 <WrSPI>
WriteSpiData(131);
    2d50:	e3a04d06 	mov	r4, #384	; 0x180
    2d54:	e2844003 	add	r4, r4, #3	; 0x3
    2d58:	e1a00004 	mov	r0, r4
    2d5c:	ebffffc7 	bl	2c80 <WrSPI>
WriteSpiCommand(0x2a);	// CASET Coluna inicial e final
    2d60:	e3a0002a 	mov	r0, #42	; 0x2a
    2d64:	ebffffc5 	bl	2c80 <WrSPI>
WriteSpiData(0);
    2d68:	e1a00005 	mov	r0, r5
    2d6c:	ebffffc3 	bl	2c80 <WrSPI>
WriteSpiData(131);
    2d70:	e1a00004 	mov	r0, r4
    2d74:	ebffffc1 	bl	2c80 <WrSPI>
WriteSpiCommand(0x2c);	// Write Memory
    2d78:	e3a0002c 	mov	r0, #44	; 0x2c
    2d7c:	ebffffbf 	bl	2c80 <WrSPI>
    2d80:	e3a03f7f 	mov	r3, #508	; 0x1fc
    2d84:	e2834003 	add	r4, r3, #3	; 0x3
    2d88:	e3a03c66 	mov	r3, #26112	; 0x6600
    2d8c:	e2835018 	add	r5, r3, #24	; 0x18
/* Pinta tudo de branco */
for(k=0; k < 26136;){
	WriteSpiData(0xff); k++;
    2d90:	e1a00004 	mov	r0, r4
    2d94:	ebffffb9 	bl	2c80 <WrSPI>
	WriteSpiData(0xff); k++;
    2d98:	e1a00004 	mov	r0, r4
    2d9c:	ebffffb7 	bl	2c80 <WrSPI>
	WriteSpiData(0xff); k++;
    2da0:	e1a00004 	mov	r0, r4
    2da4:	ebffffb5 	bl	2c80 <WrSPI>
    2da8:	e2866003 	add	r6, r6, #3	; 0x3
    2dac:	e1560005 	cmp	r6, r5
    2db0:	1afffff6 	bne	2d90 <lcd_nokia_init+0xf4>
	}
}
    2db4:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}

00002db8 <txtattrib>:




///Funções para configuração das mensagens para aparecer no display.

void inline txtattrib(struct txtinfo *pptxt)
{
ptxt = pptxt;
    2db8:	e59f3004 	ldr	r3, [pc, #4]	; 2dc4 <prog+0x2d7c>
    2dbc:	e5830000 	str	r0, [r3]
}
    2dc0:	e12fff1e 	bx	lr
    2dc4:	4000173c 	andmi	r1, r0, ip, lsr r7

00002dc8 <lcdgr_putchar>:



/* \brief Escreve um caractere no display grafico */
void lcdgr_putchar(int c)
{
    2dc8:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2dcc:	e24dd014 	sub	sp, sp, #20	; 0x14
    2dd0:	e1a05000 	mov	r5, r0
int x,y, bc, cbg, cfg;
WriteSpiCommand(0x2b);	// PASET Linha inicial e final
    2dd4:	e3a0002b 	mov	r0, #43	; 0x2b
    2dd8:	ebffffa8 	bl	2c80 <WrSPI>
WriteSpiData(ptxt->linha);
    2ddc:	e59f4200 	ldr	r4, [pc, #512]	; 2fe4 <prog+0x2f9c>
    2de0:	e5943000 	ldr	r3, [r4]
    2de4:	e5930008 	ldr	r0, [r3, #8]
    2de8:	e3800c01 	orr	r0, r0, #256	; 0x100
    2dec:	ebffffa3 	bl	2c80 <WrSPI>
WriteSpiData(ptxt->linha+7);
    2df0:	e5943000 	ldr	r3, [r4]
    2df4:	e5930008 	ldr	r0, [r3, #8]
    2df8:	e2800007 	add	r0, r0, #7	; 0x7
    2dfc:	e3800c01 	orr	r0, r0, #256	; 0x100
    2e00:	ebffff9e 	bl	2c80 <WrSPI>
WriteSpiCommand(0x2a);	// CASET Coluna inicial e final
    2e04:	e3a0002a 	mov	r0, #42	; 0x2a
    2e08:	ebffff9c 	bl	2c80 <WrSPI>
WriteSpiData(ptxt->coluna);
    2e0c:	e5943000 	ldr	r3, [r4]
    2e10:	e593000c 	ldr	r0, [r3, #12]
    2e14:	e3800c01 	orr	r0, r0, #256	; 0x100
    2e18:	ebffff98 	bl	2c80 <WrSPI>
WriteSpiData(ptxt->coluna+7);
    2e1c:	e5943000 	ldr	r3, [r4]
    2e20:	e593000c 	ldr	r0, [r3, #12]
    2e24:	e2800007 	add	r0, r0, #7	; 0x7
    2e28:	e3800c01 	orr	r0, r0, #256	; 0x100
    2e2c:	ebffff93 	bl	2c80 <WrSPI>
WriteSpiCommand(0x2c);	// Write Memory
    2e30:	e3a0002c 	mov	r0, #44	; 0x2c
    2e34:	ebffff91 	bl	2c80 <WrSPI>
cfg = ptxt->corfrente;
    2e38:	e5942000 	ldr	r2, [r4]
    2e3c:	e5927004 	ldr	r7, [r2, #4]
cbg = ptxt->corfundo;
    2e40:	e5929000 	ldr	r9, [r2]
ptxt->coluna += 8;
    2e44:	e592300c 	ldr	r3, [r2, #12]
    2e48:	e2833008 	add	r3, r3, #8	; 0x8
    2e4c:	e582300c 	str	r3, [r2, #12]
if((ptxt->coluna > 128) || (c == '\n') ) {
    2e50:	e5941000 	ldr	r1, [r4]
    2e54:	e591200c 	ldr	r2, [r1, #12]
    2e58:	e355000a 	cmp	r5, #10	; 0xa
    2e5c:	13a03000 	movne	r3, #0	; 0x0
    2e60:	03a03001 	moveq	r3, #1	; 0x1
    2e64:	e3520080 	cmp	r2, #128	; 0x80
    2e68:	c3833001 	orrgt	r3, r3, #1	; 0x1
    2e6c:	e3530000 	cmp	r3, #0	; 0x0
    2e70:	0a00000a 	beq	2ea0 <lcdgr_putchar+0xd8>
	ptxt->coluna = 0;
    2e74:	e3a00000 	mov	r0, #0	; 0x0
    2e78:	e581000c 	str	r0, [r1, #12]
	ptxt->linha += 12;
    2e7c:	e5943000 	ldr	r3, [r4]
    2e80:	e5932008 	ldr	r2, [r3, #8]
    2e84:	e282200c 	add	r2, r2, #12	; 0xc
    2e88:	e5832008 	str	r2, [r3, #8]
	if(ptxt->linha > 128) ptxt->linha = 0;
    2e8c:	e5942000 	ldr	r2, [r4]
    2e90:	e5923008 	ldr	r3, [r2, #8]
    2e94:	e3530080 	cmp	r3, #128	; 0x80
    2e98:	c5820008 	strgt	r0, [r2, #8]
    2e9c:	ea00004e 	b	2fdc <lcdgr_putchar+0x214>
	return;
	}
if(c < 0x20) return;
    2ea0:	e355001f 	cmp	r5, #31	; 0x1f
    2ea4:	da00004c 	ble	2fdc <lcdgr_putchar+0x214>
    2ea8:	e59f3138 	ldr	r3, [pc, #312]	; 2fe8 <prog+0x2fa0>
    2eac:	e0838185 	add	r8, r3, r5, lsl #3
    2eb0:	e3a03000 	mov	r3, #0	; 0x0
    2eb4:	e58d3010 	str	r3, [sp, #16]
    2eb8:	e1a06249 	mov	r6, r9, asr #4
    2ebc:	e1863209 	orr	r3, r6, r9, lsl #4
    2ec0:	e20330ff 	and	r3, r3, #255	; 0xff
    2ec4:	e58d300c 	str	r3, [sp, #12]
    2ec8:	e1a0a247 	mov	sl, r7, asr #4
    2ecc:	e18a3209 	orr	r3, sl, r9, lsl #4
    2ed0:	e58d3008 	str	r3, [sp, #8]
for(y = 0; y < 8; y++) {
	bc = rom8x8_bits[8*(c-0x20) + y];
    2ed4:	e5584100 	ldrb	r4, [r8, #-256]
    2ed8:	e3a05003 	mov	r5, #3	; 0x3
    2edc:	e59d3008 	ldr	r3, [sp, #8]
    2ee0:	e203b0ff 	and	fp, r3, #255	; 0xff
    2ee4:	e1863207 	orr	r3, r6, r7, lsl #4
    2ee8:	e20330ff 	and	r3, r3, #255	; 0xff
    2eec:	e58d3004 	str	r3, [sp, #4]
    2ef0:	e18a3207 	orr	r3, sl, r7, lsl #4
    2ef4:	e20330ff 	and	r3, r3, #255	; 0xff
    2ef8:	e58d3000 	str	r3, [sp]
	for(x=4; x--; bc <<=2) {
		switch(bc & 0xc0){
    2efc:	e20430c0 	and	r3, r4, #192	; 0xc0
    2f00:	e3530040 	cmp	r3, #64	; 0x40
    2f04:	0a000011 	beq	2f50 <lcdgr_putchar+0x188>
    2f08:	ca000002 	bgt	2f18 <lcdgr_putchar+0x150>
    2f0c:	e3530000 	cmp	r3, #0	; 0x0
    2f10:	0a000005 	beq	2f2c <lcdgr_putchar+0x164>
    2f14:	ea000026 	b	2fb4 <lcdgr_putchar+0x1ec>
    2f18:	e3530080 	cmp	r3, #128	; 0x80
    2f1c:	0a000013 	beq	2f70 <lcdgr_putchar+0x1a8>
    2f20:	e35300c0 	cmp	r3, #192	; 0xc0
    2f24:	1a000022 	bne	2fb4 <lcdgr_putchar+0x1ec>
    2f28:	ea000019 	b	2f94 <lcdgr_putchar+0x1cc>
		case 0x00:
			WriteSpiData(cbg >> 4);
    2f2c:	e3860c01 	orr	r0, r6, #256	; 0x100
    2f30:	ebffff52 	bl	2c80 <WrSPI>
			WriteSpiData(((cbg << 4) | (cbg >> 4)) & 0xff);
    2f34:	e59d300c 	ldr	r3, [sp, #12]
    2f38:	e3830c01 	orr	r0, r3, #256	; 0x100
    2f3c:	ebffff4f 	bl	2c80 <WrSPI>
			WriteSpiData(cbg & 0xff);
    2f40:	e20900ff 	and	r0, r9, #255	; 0xff
    2f44:	e3800c01 	orr	r0, r0, #256	; 0x100
    2f48:	ebffff4c 	bl	2c80 <WrSPI>
    2f4c:	ea000018 	b	2fb4 <lcdgr_putchar+0x1ec>
			break;
		case 0x40:
			WriteSpiData(cbg >> 4);
    2f50:	e3860c01 	orr	r0, r6, #256	; 0x100
    2f54:	ebffff49 	bl	2c80 <WrSPI>
			WriteSpiData(((cbg << 4) | (cfg >> 4)) & 0xff);
    2f58:	e38b0c01 	orr	r0, fp, #256	; 0x100
    2f5c:	ebffff47 	bl	2c80 <WrSPI>
			WriteSpiData(cfg & 0xff);
    2f60:	e20700ff 	and	r0, r7, #255	; 0xff
    2f64:	e3800c01 	orr	r0, r0, #256	; 0x100
    2f68:	ebffff44 	bl	2c80 <WrSPI>
    2f6c:	ea000010 	b	2fb4 <lcdgr_putchar+0x1ec>
			break;
		case 0x80:
			WriteSpiData(cfg >> 4);
    2f70:	e38a0c01 	orr	r0, sl, #256	; 0x100
    2f74:	ebffff41 	bl	2c80 <WrSPI>
			WriteSpiData(((cfg << 4) | (cbg >> 4)) & 0xff);
    2f78:	e59d3004 	ldr	r3, [sp, #4]
    2f7c:	e3830c01 	orr	r0, r3, #256	; 0x100
    2f80:	ebffff3e 	bl	2c80 <WrSPI>
			WriteSpiData(cbg & 0xff);
    2f84:	e20900ff 	and	r0, r9, #255	; 0xff
    2f88:	e3800c01 	orr	r0, r0, #256	; 0x100
    2f8c:	ebffff3b 	bl	2c80 <WrSPI>
    2f90:	ea000007 	b	2fb4 <lcdgr_putchar+0x1ec>
			break;
		case 0xc0:
			WriteSpiData(cfg >> 4);
    2f94:	e38a0c01 	orr	r0, sl, #256	; 0x100
    2f98:	ebffff38 	bl	2c80 <WrSPI>
			WriteSpiData(((cfg << 4) | (cfg >> 4)) & 0xff);
    2f9c:	e59d3000 	ldr	r3, [sp]
    2fa0:	e3830c01 	orr	r0, r3, #256	; 0x100
    2fa4:	ebffff35 	bl	2c80 <WrSPI>
			WriteSpiData(cfg & 0xff);
    2fa8:	e20700ff 	and	r0, r7, #255	; 0xff
    2fac:	e3800c01 	orr	r0, r0, #256	; 0x100
    2fb0:	ebffff32 	bl	2c80 <WrSPI>
    2fb4:	e2455001 	sub	r5, r5, #1	; 0x1
    2fb8:	e3750001 	cmn	r5, #1	; 0x1
    2fbc:	11a04104 	movne	r4, r4, lsl #2
    2fc0:	1affffcd 	bne	2efc <lcdgr_putchar+0x134>
    2fc4:	e59d3010 	ldr	r3, [sp, #16]
    2fc8:	e2833001 	add	r3, r3, #1	; 0x1
    2fcc:	e58d3010 	str	r3, [sp, #16]
    2fd0:	e2888001 	add	r8, r8, #1	; 0x1
    2fd4:	e3530008 	cmp	r3, #8	; 0x8
    2fd8:	1affffbd 	bne	2ed4 <lcdgr_putchar+0x10c>
			break;
			}
		}
	}
}
    2fdc:	e28dd014 	add	sp, sp, #20	; 0x14
    2fe0:	e8bd8ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2fe4:	4000173c 	andmi	r1, r0, ip, lsr r7
    2fe8:	000131f4 	streqd	r3, [r1], -r4

00002fec <lcdgr_puts>:

void lcdgr_puts(char *str)
{
    2fec:	e92d4010 	stmdb	sp!, {r4, lr}
    2ff0:	e1a03000 	mov	r3, r0
while(*str) lcdgr_putchar(*str++);
    2ff4:	e5d00000 	ldrb	r0, [r0]
    2ff8:	e3500000 	cmp	r0, #0	; 0x0
    2ffc:	08bd8010 	ldmeqia	sp!, {r4, pc}
    3000:	e1a04003 	mov	r4, r3
    3004:	ebffff6f 	bl	2dc8 <lcdgr_putchar>
    3008:	e5f40001 	ldrb	r0, [r4, #1]!
    300c:	e3500000 	cmp	r0, #0	; 0x0
    3010:	1afffffb 	bne	3004 <lcdgr_puts+0x18>
    3014:	e8bd8010 	ldmia	sp!, {r4, pc}

00003018 <setPixel>:
}


void setPixel(int x, int y)
{
    3018:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
    301c:	e1a05000 	mov	r5, r0
    3020:	e1a04001 	mov	r4, r1
/* Se o bit 6 (mascara 0x4000) da cor for 1 desenha com linha grossa */
if(ptxt->corfrente & 0x4000) {
    3024:	e59f614c 	ldr	r6, [pc, #332]	; 3178 <prog+0x3130>
    3028:	e5963000 	ldr	r3, [r6]
    302c:	e5933004 	ldr	r3, [r3, #4]
    3030:	e3130901 	tst	r3, #16384	; 0x4000
    3034:	0a000030 	beq	30fc <setPixel+0xe4>
	WriteSpiCommand(0x2b);	// PASET Linha inicial e final
    3038:	e3a0002b 	mov	r0, #43	; 0x2b
    303c:	ebffff0f 	bl	2c80 <WrSPI>
	WriteSpiData(y);
    3040:	e3840c01 	orr	r0, r4, #256	; 0x100
    3044:	ebffff0d 	bl	2c80 <WrSPI>
	WriteSpiData(y+1);
    3048:	e2840001 	add	r0, r4, #1	; 0x1
    304c:	e3800c01 	orr	r0, r0, #256	; 0x100
    3050:	ebffff0a 	bl	2c80 <WrSPI>
	WriteSpiCommand(0x2a);	// CASET coluna inicial e final
    3054:	e3a0002a 	mov	r0, #42	; 0x2a
    3058:	ebffff08 	bl	2c80 <WrSPI>
	WriteSpiData(x);
    305c:	e3850c01 	orr	r0, r5, #256	; 0x100
    3060:	ebffff06 	bl	2c80 <WrSPI>
	WriteSpiData(x+1);
    3064:	e2850001 	add	r0, r5, #1	; 0x1
    3068:	e3800c01 	orr	r0, r0, #256	; 0x100
    306c:	ebffff03 	bl	2c80 <WrSPI>
	WriteSpiCommand(0x2c);	// Write Memory
    3070:	e3a0002c 	mov	r0, #44	; 0x2c
    3074:	ebffff01 	bl	2c80 <WrSPI>
	WriteSpiData(ptxt->corfrente >> 4);
    3078:	e5963000 	ldr	r3, [r6]
    307c:	e5930004 	ldr	r0, [r3, #4]
    3080:	e1a00240 	mov	r0, r0, asr #4
    3084:	e3800c01 	orr	r0, r0, #256	; 0x100
    3088:	ebfffefc 	bl	2c80 <WrSPI>
	WriteSpiData((ptxt->corfrente << 4) | ((ptxt->corfrente >> 8) & 15));
    308c:	e5963000 	ldr	r3, [r6]
    3090:	e5930004 	ldr	r0, [r3, #4]
    3094:	e1a03a00 	mov	r3, r0, lsl #20
    3098:	e1a00200 	mov	r0, r0, lsl #4
    309c:	e3800c01 	orr	r0, r0, #256	; 0x100
    30a0:	e1800e23 	orr	r0, r0, r3, lsr #28
    30a4:	ebfffef5 	bl	2c80 <WrSPI>
	WriteSpiData(ptxt->corfrente);
    30a8:	e5963000 	ldr	r3, [r6]
    30ac:	e5930004 	ldr	r0, [r3, #4]
    30b0:	e3800c01 	orr	r0, r0, #256	; 0x100
    30b4:	ebfffef1 	bl	2c80 <WrSPI>
	WriteSpiData(ptxt->corfrente >> 4);
    30b8:	e5963000 	ldr	r3, [r6]
    30bc:	e5930004 	ldr	r0, [r3, #4]
    30c0:	e1a00240 	mov	r0, r0, asr #4
    30c4:	e3800c01 	orr	r0, r0, #256	; 0x100
    30c8:	ebfffeec 	bl	2c80 <WrSPI>
	WriteSpiData((ptxt->corfrente << 4) | ((ptxt->corfrente >> 8) & 15));
    30cc:	e5963000 	ldr	r3, [r6]
    30d0:	e5930004 	ldr	r0, [r3, #4]
    30d4:	e1a03a00 	mov	r3, r0, lsl #20
    30d8:	e1a00200 	mov	r0, r0, lsl #4
    30dc:	e3800c01 	orr	r0, r0, #256	; 0x100
    30e0:	e1800e23 	orr	r0, r0, r3, lsr #28
    30e4:	ebfffee5 	bl	2c80 <WrSPI>
	WriteSpiData(ptxt->corfrente);
    30e8:	e5963000 	ldr	r3, [r6]
    30ec:	e5930004 	ldr	r0, [r3, #4]
    30f0:	e3800c01 	orr	r0, r0, #256	; 0x100
    30f4:	ebfffee1 	bl	2c80 <WrSPI>
    30f8:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
	return;
	}
WriteSpiCommand(0x2b);	// PASET Linha inicial e final
    30fc:	e3a0002b 	mov	r0, #43	; 0x2b
    3100:	ebfffede 	bl	2c80 <WrSPI>
WriteSpiData(y);
    3104:	e3844c01 	orr	r4, r4, #256	; 0x100
    3108:	e1a00004 	mov	r0, r4
    310c:	ebfffedb 	bl	2c80 <WrSPI>
WriteSpiData(y);
    3110:	e1a00004 	mov	r0, r4
    3114:	ebfffed9 	bl	2c80 <WrSPI>
WriteSpiCommand(0x2a);	// CASET coluna inicial e final
    3118:	e3a0002a 	mov	r0, #42	; 0x2a
    311c:	ebfffed7 	bl	2c80 <WrSPI>
WriteSpiData(x);
    3120:	e3854c01 	orr	r4, r5, #256	; 0x100
    3124:	e1a00004 	mov	r0, r4
    3128:	ebfffed4 	bl	2c80 <WrSPI>
WriteSpiData(x);
    312c:	e1a00004 	mov	r0, r4
    3130:	ebfffed2 	bl	2c80 <WrSPI>
WriteSpiCommand(0x2c);	// Write Memory
    3134:	e3a0002c 	mov	r0, #44	; 0x2c
    3138:	ebfffed0 	bl	2c80 <WrSPI>
WriteSpiData(ptxt->corfrente >> 4);
    313c:	e59f4034 	ldr	r4, [pc, #52]	; 3178 <prog+0x3130>
    3140:	e5943000 	ldr	r3, [r4]
    3144:	e5930004 	ldr	r0, [r3, #4]
    3148:	e1a00240 	mov	r0, r0, asr #4
    314c:	e3800c01 	orr	r0, r0, #256	; 0x100
    3150:	ebfffeca 	bl	2c80 <WrSPI>
WriteSpiData((ptxt->corfrente << 4) & 0xf0);
    3154:	e5943000 	ldr	r3, [r4]
    3158:	e5930004 	ldr	r0, [r3, #4]
    315c:	e1a00200 	mov	r0, r0, lsl #4
    3160:	e20000f0 	and	r0, r0, #240	; 0xf0
    3164:	e3800c01 	orr	r0, r0, #256	; 0x100
    3168:	ebfffec4 	bl	2c80 <WrSPI>
WriteSpiCommand(0);	// NOP
    316c:	e3a00000 	mov	r0, #0	; 0x0
    3170:	ebfffec2 	bl	2c80 <WrSPI>
    3174:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
    3178:	4000173c 	andmi	r1, r0, ip, lsr r7

0000317c <carrega_img>:
 * A imagem (ou arquivo) nao e armazenado devido ao pouco espaco de memoria existente no microprocessador.
 *
 * \param s Estrutura do protocolo SFT
 */
void carrega_img(struct sftd_state *s){
    317c:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
    3180:	e1a06000 	mov	r6, r0
	int i;
	char a[20];

	DEBUG_ENTER;
	if(s->nr_pkt == 0){
    3184:	e5905bc4 	ldr	r5, [r0, #3012]
    3188:	e3550000 	cmp	r5, #0	; 0x0
    318c:	1a00001c 	bne	3204 <carrega_img+0x88>
		//Carrega ponteiro do display para o inicio dele.
		WriteSpiCommand(0x2b);	// PASET Linha inicial e final
    3190:	e3a0002b 	mov	r0, #43	; 0x2b
    3194:	ebfffeb9 	bl	2c80 <WrSPI>
		WriteSpiData(0);
    3198:	e3a00c01 	mov	r0, #256	; 0x100
    319c:	ebfffeb7 	bl	2c80 <WrSPI>
		WriteSpiData(131);
    31a0:	e3a04d06 	mov	r4, #384	; 0x180
    31a4:	e2844003 	add	r4, r4, #3	; 0x3
    31a8:	e1a00004 	mov	r0, r4
    31ac:	ebfffeb3 	bl	2c80 <WrSPI>
		WriteSpiCommand(0x2a);	// CASET Coluna inicial e final
    31b0:	e3a0002a 	mov	r0, #42	; 0x2a
    31b4:	ebfffeb1 	bl	2c80 <WrSPI>
		WriteSpiData(0);
    31b8:	e3a00c01 	mov	r0, #256	; 0x100
    31bc:	ebfffeaf 	bl	2c80 <WrSPI>
		WriteSpiData(131);
    31c0:	e1a00004 	mov	r0, r4
    31c4:	ebfffead 	bl	2c80 <WrSPI>
		WriteSpiCommand(0x2c);	// Write Memory
    31c8:	e3a0002c 	mov	r0, #44	; 0x2c
    31cc:	ebfffeab 	bl	2c80 <WrSPI>

		contImg = 0; 	//contador da imagem é inicializado.
    31d0:	e59f329c 	ldr	r3, [pc, #668]	; 3474 <prog+0x342c>
    31d4:	e5835000 	str	r5, [r3]
		for(i=0;i<TAM_BUFF_TEMP;i++) buff_temp[i]=0;//zera o buffer de dados temporarios para caracteres repetidos.
    31d8:	e59f3298 	ldr	r3, [pc, #664]	; 3478 <prog+0x3430>
    31dc:	e5835000 	str	r5, [r3]
    31e0:	e5835004 	str	r5, [r3, #4]
    31e4:	e5835008 	str	r5, [r3, #8]
		flag_buff_temp = 0;
    31e8:	e59f328c 	ldr	r3, [pc, #652]	; 347c <prog+0x3434>
    31ec:	e5835000 	str	r5, [r3]
		n_buff = 0;
    31f0:	e59f3288 	ldr	r3, [pc, #648]	; 3480 <prog+0x3438>
    31f4:	e5835000 	str	r5, [r3]
		break_geral = 0;
    31f8:	e59f3284 	ldr	r3, [pc, #644]	; 3484 <prog+0x343c>
    31fc:	e5835000 	str	r5, [r3]
    3200:	ea000009 	b	322c <carrega_img+0xb0>
	}

	if(contImg < TOTAL_PIXEL && break_geral==0){	//atualmente total_pixel é 26136.
    3204:	e3a03c66 	mov	r3, #26112	; 0x6600
    3208:	e2833017 	add	r3, r3, #23	; 0x17
    320c:	e59f2260 	ldr	r2, [pc, #608]	; 3474 <prog+0x342c>
    3210:	e5922000 	ldr	r2, [r2]
    3214:	e1520003 	cmp	r2, r3
    3218:	ca000083 	bgt	342c <carrega_img+0x2b0>
    321c:	e59f3260 	ldr	r3, [pc, #608]	; 3484 <prog+0x343c>
    3220:	e5933000 	ldr	r3, [r3]
    3224:	e3530000 	cmp	r3, #0	; 0x0
    3228:	1a00007f 	bne	342c <carrega_img+0x2b0>
    322c:	e3a05000 	mov	r5, #0	; 0x0
    3230:	ea00007a 	b	3420 <carrega_img+0x2a4>
		for(i=0;i<s->len_buff;){//é limitado em relação ao tamanho do buffer do arquivo.
			if(contImg >= TOTAL_PIXEL) break;	//ja completou o lcd.
    3234:	e3a03c66 	mov	r3, #26112	; 0x6600
    3238:	e2833017 	add	r3, r3, #23	; 0x17
    323c:	e59f2230 	ldr	r2, [pc, #560]	; 3474 <prog+0x342c>
    3240:	e5922000 	ldr	r2, [r2]
    3244:	e1520003 	cmp	r2, r3
    3248:	ca000077 	bgt	342c <carrega_img+0x2b0>

			if(flag_buff_temp > 0){	//significa que tem pixel repetidos.
    324c:	e59f3228 	ldr	r3, [pc, #552]	; 347c <prog+0x3434>
    3250:	e5933000 	ldr	r3, [r3]
    3254:	e3530000 	cmp	r3, #0	; 0x0
    3258:	ca000022 	bgt	32e8 <carrega_img+0x16c>
    325c:	ea00002e 	b	331c <carrega_img+0x1a0>
				while(n_buff--){	//grava três pixels
					if(flag_buff_temp == 3){ //significa que dois pixels é dobuffer anterior.
    3260:	e59f3214 	ldr	r3, [pc, #532]	; 347c <prog+0x3434>
    3264:	e5933000 	ldr	r3, [r3]
    3268:	e3530003 	cmp	r3, #3	; 0x3
    326c:	1a00000e 	bne	32ac <carrega_img+0x130>
						WriteSpiData(buff_temp[0]);	// R1G1
    3270:	e59f4200 	ldr	r4, [pc, #512]	; 3478 <prog+0x3430>
    3274:	e5940000 	ldr	r0, [r4]
    3278:	e3800c01 	orr	r0, r0, #256	; 0x100
    327c:	ebfffe7f 	bl	2c80 <WrSPI>
						WriteSpiData(buff_temp[1]);	// B1R2
    3280:	e5940004 	ldr	r0, [r4, #4]
    3284:	e3800c01 	orr	r0, r0, #256	; 0x100
    3288:	ebfffe7c 	bl	2c80 <WrSPI>
						WriteSpiData(s->buff[i]);	// G2B2
    328c:	e7d60005 	ldrb	r0, [r6, r5]
    3290:	e3800c01 	orr	r0, r0, #256	; 0x100
    3294:	ebfffe79 	bl	2c80 <WrSPI>
						contImg+=3;
    3298:	e59f21d4 	ldr	r2, [pc, #468]	; 3474 <prog+0x342c>
    329c:	e5923000 	ldr	r3, [r2]
    32a0:	e2833003 	add	r3, r3, #3	; 0x3
    32a4:	e5823000 	str	r3, [r2]
    32a8:	ea00000e 	b	32e8 <carrega_img+0x16c>
					}
					else{	//um é do buffer antigo.
						WriteSpiData(buff_temp[0]);	// R1G1
    32ac:	e59f31c4 	ldr	r3, [pc, #452]	; 3478 <prog+0x3430>
    32b0:	e5930000 	ldr	r0, [r3]
    32b4:	e3800c01 	orr	r0, r0, #256	; 0x100
    32b8:	ebfffe70 	bl	2c80 <WrSPI>
						WriteSpiData(s->buff[i]);	// B1R2
    32bc:	e7d60005 	ldrb	r0, [r6, r5]
    32c0:	e3800c01 	orr	r0, r0, #256	; 0x100
    32c4:	ebfffe6d 	bl	2c80 <WrSPI>
						WriteSpiData(s->buff[i+1]);	// G2B2
    32c8:	e0853006 	add	r3, r5, r6
    32cc:	e5d30001 	ldrb	r0, [r3, #1]
    32d0:	e3800c01 	orr	r0, r0, #256	; 0x100
    32d4:	ebfffe69 	bl	2c80 <WrSPI>
						contImg+=3;
    32d8:	e59f2194 	ldr	r2, [pc, #404]	; 3474 <prog+0x342c>
    32dc:	e5923000 	ldr	r3, [r2]
    32e0:	e2833003 	add	r3, r3, #3	; 0x3
    32e4:	e5823000 	str	r3, [r2]
    32e8:	e59f2190 	ldr	r2, [pc, #400]	; 3480 <prog+0x3438>
    32ec:	e5923000 	ldr	r3, [r2]
    32f0:	e2433001 	sub	r3, r3, #1	; 0x1
    32f4:	e5823000 	str	r3, [r2]
    32f8:	e3730001 	cmn	r3, #1	; 0x1
    32fc:	1affffd7 	bne	3260 <carrega_img+0xe4>
					}
				}
				i = flag_buff_temp -1;	//quantidade de pacotes utilizados do buffer que chegou.
    3300:	e59f2174 	ldr	r2, [pc, #372]	; 347c <prog+0x3434>
    3304:	e5923000 	ldr	r3, [r2]
    3308:	e2435001 	sub	r5, r3, #1	; 0x1
				if(flag_buff_temp!=1) flag_buff_temp = 0; //se for1 é igual a n_buff...
    330c:	e3530001 	cmp	r3, #1	; 0x1
    3310:	0a000051 	beq	345c <carrega_img+0x2e0>
    3314:	e3a03000 	mov	r3, #0	; 0x0
    3318:	e5823000 	str	r3, [r2]
			}//flag 1

			//n_buff só é alterado caso o ultimo dado do pacote anterior não tenha sido ele mesmo.
			if(flag_buff_temp ==1) flag_buff_temp = 0;	//n_buff fica com o valor do ultimo pacote.
			else n_buff = s->buff[i] & 0xff; //nro de pixels repetidos.
    331c:	e7d62005 	ldrb	r2, [r6, r5]
    3320:	e59f3158 	ldr	r3, [pc, #344]	; 3480 <prog+0x3438>
    3324:	e5832000 	str	r2, [r3]
			if(n_buff == 0xfa) { break_geral = 1; break; }//break total...................................................
    3328:	e35200fa 	cmp	r2, #250	; 0xfa
    332c:	0a000005 	beq	3348 <carrega_img+0x1cc>
			while(n_buff--){	//grava três pixel
    3330:	e2422001 	sub	r2, r2, #1	; 0x1
    3334:	e59f3144 	ldr	r3, [pc, #324]	; 3480 <prog+0x3438>
    3338:	e5832000 	str	r2, [r3]
    333c:	e3720001 	cmn	r2, #1	; 0x1
    3340:	1a000004 	bne	3358 <carrega_img+0x1dc>
    3344:	ea000017 	b	33a8 <carrega_img+0x22c>
    3348:	e3a02001 	mov	r2, #1	; 0x1
    334c:	e59f3130 	ldr	r3, [pc, #304]	; 3484 <prog+0x343c>
    3350:	e5832000 	str	r2, [r3]
    3354:	ea000034 	b	342c <carrega_img+0x2b0>
				WriteSpiData(s->buff[i+1]);	// R1G1
    3358:	e0854006 	add	r4, r5, r6
    335c:	e5d40001 	ldrb	r0, [r4, #1]
    3360:	e3800c01 	orr	r0, r0, #256	; 0x100
    3364:	ebfffe45 	bl	2c80 <WrSPI>
				WriteSpiData(s->buff[i+2]);	// B1R2
    3368:	e5d40002 	ldrb	r0, [r4, #2]
    336c:	e3800c01 	orr	r0, r0, #256	; 0x100
    3370:	ebfffe42 	bl	2c80 <WrSPI>
				WriteSpiData(s->buff[i+3]);	// G2B2
    3374:	e5d40003 	ldrb	r0, [r4, #3]
    3378:	e3800c01 	orr	r0, r0, #256	; 0x100
    337c:	ebfffe3f 	bl	2c80 <WrSPI>
				contImg+=3;
    3380:	e59f20ec 	ldr	r2, [pc, #236]	; 3474 <prog+0x342c>
    3384:	e5923000 	ldr	r3, [r2]
    3388:	e2833003 	add	r3, r3, #3	; 0x3
    338c:	e5823000 	str	r3, [r2]
    3390:	e59f20e8 	ldr	r2, [pc, #232]	; 3480 <prog+0x3438>
    3394:	e5923000 	ldr	r3, [r2]
    3398:	e2433001 	sub	r3, r3, #1	; 0x1
    339c:	e5823000 	str	r3, [r2]
    33a0:	e3730001 	cmn	r3, #1	; 0x1
    33a4:	1affffeb 	bne	3358 <carrega_img+0x1dc>
			}
			i +=4;//contador do buffer do pacote.
    33a8:	e2855004 	add	r5, r5, #4	; 0x4

			if(i > s->len_buff){//	significa que não pode carregar as imagens, devido ao buffer chegar ao fim.
    33ac:	e59625dc 	ldr	r2, [r6, #1500]
    33b0:	e1550002 	cmp	r5, r2
    33b4:	da000019 	ble	3420 <carrega_img+0x2a4>
				if(i == s->len_buff + 4) break;	//todos os dados vão estar no proximo pacote.
    33b8:	e2823004 	add	r3, r2, #4	; 0x4
    33bc:	e1550003 	cmp	r5, r3
    33c0:	0a000019 	beq	342c <carrega_img+0x2b0>
				flag_buff_temp = i - s->len_buff; //máximo é três mínimo é 1.
    33c4:	e0621005 	rsb	r1, r2, r5
    33c8:	e59f30ac 	ldr	r3, [pc, #172]	; 347c <prog+0x3434>
    33cc:	e5831000 	str	r1, [r3]
				n_buff = s->buff[i - 3] & 0xff; //nro de pixels repetidos.
    33d0:	e0853006 	add	r3, r5, r6
    33d4:	e5532003 	ldrb	r2, [r3, #-3]
    33d8:	e59f30a0 	ldr	r3, [pc, #160]	; 3480 <prog+0x3438>
    33dc:	e5832000 	str	r2, [r3]
				if(n_buff == 0xfa){ break_geral = 1; break; }//break total...................................................
    33e0:	e35200fa 	cmp	r2, #250	; 0xfa
    33e4:	024220f9 	subeq	r2, r2, #249	; 0xf9
    33e8:	059f3094 	ldreq	r3, [pc, #148]	; 3484 <prog+0x343c>
    33ec:	05832000 	streq	r2, [r3]
    33f0:	0a00000d 	beq	342c <carrega_img+0x2b0>
				if(flag_buff_temp == 3){	//significa que tem mais dois no buffer.
    33f4:	e3510003 	cmp	r1, #3	; 0x3
					buff_temp[0] = s->buff[i-2];
    33f8:	059f1078 	ldreq	r1, [pc, #120]	; 3478 <prog+0x3430>
    33fc:	00852006 	addeq	r2, r5, r6
    3400:	05523002 	ldreqb	r3, [r2, #-2]
    3404:	05813000 	streq	r3, [r1]
					buff_temp[1] = s->buff[i-1];
    3408:	05523001 	ldreqb	r3, [r2, #-1]
    340c:	05813004 	streq	r3, [r1, #4]
				}
				else buff_temp[0] = s->buff[i-1];	//então é apenas um pacote.
    3410:	10853006 	addne	r3, r5, r6
    3414:	15532001 	ldrneb	r2, [r3, #-1]
    3418:	159f3058 	ldrne	r3, [pc, #88]	; 3478 <prog+0x3430>
    341c:	15832000 	strne	r2, [r3]
    3420:	e59635dc 	ldr	r3, [r6, #1500]
    3424:	e1550003 	cmp	r5, r3
    3428:	baffff81 	blt	3234 <carrega_img+0xb8>
			}
		}//total do pacote vindo da internet.

	}//total_pixel

	//carrega o estado do protocolo.
	s->state = (s->mf==1) ?  ST_WAIT_RECV : ST_FINISHED_RECV;
    342c:	e5963bc0 	ldr	r3, [r6, #3008]
    3430:	e3530001 	cmp	r3, #1	; 0x1
    3434:	13a03003 	movne	r3, #3	; 0x3
    3438:	03a03002 	moveq	r3, #2	; 0x2
    343c:	e5863bd4 	str	r3, [r6, #3028]

	//configura flag_sendu para 0, significa que pacote terminou de receber.
	if(break_geral == 1) flag_sendu = 0;
    3440:	e59f303c 	ldr	r3, [pc, #60]	; 3484 <prog+0x343c>
    3444:	e5933000 	ldr	r3, [r3]
    3448:	e3530001 	cmp	r3, #1	; 0x1
    344c:	03a02000 	moveq	r2, #0	; 0x0
    3450:	059f3030 	ldreq	r3, [pc, #48]	; 3488 <prog+0x3440>
    3454:	05832000 	streq	r2, [r3]
    3458:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
    345c:	e3a03000 	mov	r3, #0	; 0x0
    3460:	e59f2014 	ldr	r2, [pc, #20]	; 347c <prog+0x3434>
    3464:	e5823000 	str	r3, [r2]
    3468:	e59f3010 	ldr	r3, [pc, #16]	; 3480 <prog+0x3438>
    346c:	e5932000 	ldr	r2, [r3]
    3470:	eaffffae 	b	3330 <carrega_img+0x1b4>
    3474:	40001740 	andmi	r1, r0, r0, asr #14
    3478:	40001744 	andmi	r1, r0, r4, asr #14
    347c:	40001758 	andmi	r1, r0, r8, asr r7
    3480:	40001750 	andmi	r1, r0, r0, asr r7
    3484:	40001754 	andmi	r1, r0, r4, asr r7
    3488:	4000175c 	andmi	r1, r0, ip, asr r7

0000348c <carrega_img_old>:
    348c:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    3490:	e1a05000 	mov	r5, r0
    3494:	e5903bc4 	ldr	r3, [r0, #3012]
    3498:	e3530000 	cmp	r3, #0	; 0x0
    349c:	1a00000f 	bne	34e0 <carrega_img_old+0x54>
    34a0:	e3a0002b 	mov	r0, #43	; 0x2b
    34a4:	ebfffdf5 	bl	2c80 <WrSPI>
    34a8:	e3a00c01 	mov	r0, #256	; 0x100
    34ac:	ebfffdf3 	bl	2c80 <WrSPI>
    34b0:	e3a04d06 	mov	r4, #384	; 0x180
    34b4:	e2844003 	add	r4, r4, #3	; 0x3
    34b8:	e1a00004 	mov	r0, r4
    34bc:	ebfffdef 	bl	2c80 <WrSPI>
    34c0:	e3a0002a 	mov	r0, #42	; 0x2a
    34c4:	ebfffded 	bl	2c80 <WrSPI>
    34c8:	e3a00c01 	mov	r0, #256	; 0x100
    34cc:	ebfffdeb 	bl	2c80 <WrSPI>
    34d0:	e1a00004 	mov	r0, r4
    34d4:	ebfffde9 	bl	2c80 <WrSPI>
    34d8:	e3a0002c 	mov	r0, #44	; 0x2c
    34dc:	ebfffde7 	bl	2c80 <WrSPI>
    34e0:	e59535dc 	ldr	r3, [r5, #1500]
    34e4:	e3530000 	cmp	r3, #0	; 0x0
    34e8:	da000007 	ble	350c <carrega_img_old+0x80>
    34ec:	e3a04000 	mov	r4, #0	; 0x0
    34f0:	e7d40005 	ldrb	r0, [r4, r5]
    34f4:	e3800c01 	orr	r0, r0, #256	; 0x100
    34f8:	ebfffde0 	bl	2c80 <WrSPI>
    34fc:	e2844001 	add	r4, r4, #1	; 0x1
    3500:	e59535dc 	ldr	r3, [r5, #1500]
    3504:	e1530004 	cmp	r3, r4
    3508:	cafffff8 	bgt	34f0 <carrega_img_old+0x64>
    350c:	e5953bc0 	ldr	r3, [r5, #3008]
    3510:	e3530001 	cmp	r3, #1	; 0x1
    3514:	13a03003 	movne	r3, #3	; 0x3
    3518:	03a03002 	moveq	r3, #2	; 0x2
    351c:	e5853bd4 	str	r3, [r5, #3028]
    3520:	e8bd8030 	ldmia	sp!, {r4, r5, pc}

00003524 <envia_msg>:

}



/**
 * \brief Carrega Mensagem vinda do protocolo para o display.
 *
 * \param s Estrutura do protocolo SFT
 */
void envia_msg(struct sftd_state *s){
    3524:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
    3528:	e24dd010 	sub	sp, sp, #16	; 0x10
    352c:	e1a07000 	mov	r7, r0
	int i;
	char a[20];
	struct txtinfo stxt;

	DEBUG_ENTER;

	//limpa display
	WriteSpiCommand(0x2b);	// PASET Linha inicial e final
    3530:	e3a0002b 	mov	r0, #43	; 0x2b
    3534:	ebfffdd1 	bl	2c80 <WrSPI>
	WriteSpiData(0);
    3538:	e3a00c01 	mov	r0, #256	; 0x100
    353c:	ebfffdcf 	bl	2c80 <WrSPI>
	WriteSpiData(131);
    3540:	e3a04d06 	mov	r4, #384	; 0x180
    3544:	e2844003 	add	r4, r4, #3	; 0x3
    3548:	e1a00004 	mov	r0, r4
    354c:	ebfffdcb 	bl	2c80 <WrSPI>
	WriteSpiCommand(0x2a);	// CASET Coluna inicial e final
    3550:	e3a0002a 	mov	r0, #42	; 0x2a
    3554:	ebfffdc9 	bl	2c80 <WrSPI>
	WriteSpiData(0);
    3558:	e3a00c01 	mov	r0, #256	; 0x100
    355c:	ebfffdc7 	bl	2c80 <WrSPI>
	WriteSpiData(131);
    3560:	e1a00004 	mov	r0, r4
    3564:	ebfffdc5 	bl	2c80 <WrSPI>
	WriteSpiCommand(0x2c);	// Write Memory
    3568:	e3a0002c 	mov	r0, #44	; 0x2c
    356c:	ebfffdc3 	bl	2c80 <WrSPI>
    3570:	e3a05000 	mov	r5, #0	; 0x0
    3574:	e3a03f7f 	mov	r3, #508	; 0x1fc
    3578:	e2834003 	add	r4, r3, #3	; 0x3
    357c:	e3a03c66 	mov	r3, #26112	; 0x6600
    3580:	e2836018 	add	r6, r3, #24	; 0x18

	for(i=0; i < 26136;){
		WriteSpiData(0xff); i++;
    3584:	e1a00004 	mov	r0, r4
    3588:	ebfffdbc 	bl	2c80 <WrSPI>
		WriteSpiData(0xff); i++;
    358c:	e1a00004 	mov	r0, r4
    3590:	ebfffdba 	bl	2c80 <WrSPI>
		WriteSpiData(0xff); i++;
    3594:	e1a00004 	mov	r0, r4
    3598:	ebfffdb8 	bl	2c80 <WrSPI>
    359c:	e2855003 	add	r5, r5, #3	; 0x3
    35a0:	e1550006 	cmp	r5, r6
    35a4:	1afffff6 	bne	3584 <envia_msg+0x60>
	}


	//Carrega ponteiro do display para o inicio dele.
	WriteSpiCommand(0x2b);	// PASET Linha inicial e final
    35a8:	e3a0002b 	mov	r0, #43	; 0x2b
    35ac:	ebfffdb3 	bl	2c80 <WrSPI>
	WriteSpiData(0);
    35b0:	e3a00c01 	mov	r0, #256	; 0x100
    35b4:	ebfffdb1 	bl	2c80 <WrSPI>
	WriteSpiData(131);
    35b8:	e3a04d06 	mov	r4, #384	; 0x180
    35bc:	e2844003 	add	r4, r4, #3	; 0x3
    35c0:	e1a00004 	mov	r0, r4
    35c4:	ebfffdad 	bl	2c80 <WrSPI>
	WriteSpiCommand(0x2a);	// CASET Coluna inicial e final
    35c8:	e3a0002a 	mov	r0, #42	; 0x2a
    35cc:	ebfffdab 	bl	2c80 <WrSPI>
	WriteSpiData(0);
    35d0:	e3a00c01 	mov	r0, #256	; 0x100
    35d4:	ebfffda9 	bl	2c80 <WrSPI>
	WriteSpiData(131);
    35d8:	e1a00004 	mov	r0, r4
    35dc:	ebfffda7 	bl	2c80 <WrSPI>
	WriteSpiCommand(0x2c);	// Write Memory
    35e0:	e3a0002c 	mov	r0, #44	; 0x2c
    35e4:	ebfffda5 	bl	2c80 <WrSPI>

	//mensagem inicial
	stxt.corfundo = 0xff0;	/* Fundo amarelo */
    35e8:	e3a06eff 	mov	r6, #4080	; 0xff0
    35ec:	e58d6000 	str	r6, [sp]
	stxt.corfrente = 0x4700;	/* Texto vermelho */
    35f0:	e3a03c47 	mov	r3, #18176	; 0x4700
    35f4:	e58d3004 	str	r3, [sp, #4]
	stxt.linha = 5;
    35f8:	e3a03005 	mov	r3, #5	; 0x5
    35fc:	e58d3008 	str	r3, [sp, #8]
	stxt.coluna = 2;
    3600:	e3a04002 	mov	r4, #2	; 0x2
    3604:	e58d400c 	str	r4, [sp, #12]
	txtattrib(&stxt);
    3608:	e1a0500d 	mov	r5, sp
    360c:	e1a0000d 	mov	r0, sp
    3610:	ebfffde8 	bl	2db8 <txtattrib>

	DEBUG_ENTER;

	lcdgr_puts(" TCC - MULT UIP "); // Escreve no display grafico
    3614:	e59f0044 	ldr	r0, [pc, #68]	; 3660 <prog+0x3618>
    3618:	ebfffe73 	bl	2fec <lcdgr_puts>

	//escreve mensagem no display.
	stxt.corfundo = 0xff0;	/* Fundo amarelo */
    361c:	e58d6000 	str	r6, [sp]
	stxt.corfrente = 0x007;	/* Texto azul */
    3620:	e3a03007 	mov	r3, #7	; 0x7
    3624:	e58d3004 	str	r3, [sp, #4]
	stxt.linha = 30;
    3628:	e2833017 	add	r3, r3, #23	; 0x17
    362c:	e58d3008 	str	r3, [sp, #8]
	stxt.coluna = 1;
    3630:	e243301d 	sub	r3, r3, #29	; 0x1d
    3634:	e58d300c 	str	r3, [sp, #12]
	txtattrib(&stxt);
    3638:	e1a0000d 	mov	r0, sp
    363c:	ebfffddd 	bl	2db8 <txtattrib>

	lcdgr_puts(s->buff);
    3640:	e1a00007 	mov	r0, r7
    3644:	ebfffe68 	bl	2fec <lcdgr_puts>

	s->state = (s->mf==1) ?  ST_WAIT_RECV : ST_FINISHED_RECV;
    3648:	e5973bc0 	ldr	r3, [r7, #3008]
    364c:	e3530001 	cmp	r3, #1	; 0x1
    3650:	13a04003 	movne	r4, #3	; 0x3
    3654:	e5874bd4 	str	r4, [r7, #3028]

	DEBUG_EXIT;

}
    3658:	e28dd010 	add	sp, sp, #16	; 0x10
    365c:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
    3660:	0001482c 	andeq	r4, r1, ip, lsr #16

00003664 <info_host_ans>:
    3664:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    3668:	e1a04000 	mov	r4, r0
    366c:	e1a02001 	mov	r2, r1
    3670:	e59f1064 	ldr	r1, [pc, #100]	; 36dc <prog+0x3694>
    3674:	ebfff8d4 	bl	19cc <sprintf>
    3678:	e2840003 	add	r0, r4, #3	; 0x3
    367c:	e59f105c 	ldr	r1, [pc, #92]	; 36e0 <prog+0x3698>
    3680:	e3a02005 	mov	r2, #5	; 0x5
    3684:	eb002282 	bl	c094 <memcpy>
    3688:	e2840008 	add	r0, r4, #8	; 0x8
    368c:	e59f1050 	ldr	r1, [pc, #80]	; 36e4 <prog+0x369c>
    3690:	e3a02002 	mov	r2, #2	; 0x2
    3694:	eb00227e 	bl	c094 <memcpy>
    3698:	e3a05003 	mov	r5, #3	; 0x3
    369c:	e284000a 	add	r0, r4, #10	; 0xa
    36a0:	e59f1040 	ldr	r1, [pc, #64]	; 36e8 <prog+0x36a0>
    36a4:	e1a02005 	mov	r2, r5
    36a8:	eb002279 	bl	c094 <memcpy>
    36ac:	e284000d 	add	r0, r4, #13	; 0xd
    36b0:	e59f1034 	ldr	r1, [pc, #52]	; 36ec <prog+0x36a4>
    36b4:	e5942bc8 	ldr	r2, [r4, #3016]
    36b8:	ebfff8c3 	bl	19cc <sprintf>
    36bc:	e2840011 	add	r0, r4, #17	; 0x11
    36c0:	e59f1028 	ldr	r1, [pc, #40]	; 36f0 <prog+0x36a8>
    36c4:	e1a02005 	mov	r2, r5
    36c8:	eb002271 	bl	c094 <memcpy>
    36cc:	e1a00004 	mov	r0, r4
    36d0:	e3a01004 	mov	r1, #4	; 0x4
    36d4:	eb0013cf 	bl	8618 <uip_send>
    36d8:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
    36dc:	00014950 	andeq	r4, r1, r0, asr r9
    36e0:	00014840 	andeq	r4, r1, r0, asr #16
    36e4:	00014848 	andeq	r4, r1, r8, asr #16
    36e8:	0001484c 	andeq	r4, r1, ip, asr #16
    36ec:	00014850 	andeq	r4, r1, r0, asr r8
    36f0:	00014854 	andeq	r4, r1, r4, asr r8

000036f4 <sft_senddata>:
    36f4:	e52de004 	str	lr, [sp, #-4]!
    36f8:	e1a03000 	mov	r3, r0
    36fc:	e2800e5e 	add	r0, r0, #1504	; 0x5e0
    3700:	e5931bbc 	ldr	r1, [r3, #3004]
    3704:	eb0013c3 	bl	8618 <uip_send>
    3708:	e49df004 	ldr	pc, [sp], #4

0000370c <sft_trata>:
    370c:	e92d41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3710:	e24dd028 	sub	sp, sp, #40	; 0x28
    3714:	e1a07000 	mov	r7, r0
    3718:	e28d0014 	add	r0, sp, #20	; 0x14
    371c:	e59f131c 	ldr	r1, [pc, #796]	; 3a40 <prog+0x39f8>
    3720:	e5972bd4 	ldr	r2, [r7, #3028]
    3724:	ebfff8a8 	bl	19cc <sprintf>
    3728:	e59fc314 	ldr	ip, [pc, #788]	; 3a44 <prog+0x39fc>
    372c:	e59c1000 	ldr	r1, [ip]
    3730:	e59f3310 	ldr	r3, [pc, #784]	; 3a48 <prog+0x3a00>
    3734:	e5831000 	str	r1, [r3]
    3738:	e59f230c 	ldr	r2, [pc, #780]	; 3a4c <prog+0x3a04>
    373c:	e5923000 	ldr	r3, [r2]
    3740:	e3530000 	cmp	r3, #0	; 0x0
    3744:	da00000f 	ble	3788 <sft_trata+0x7c>
    3748:	e59f3300 	ldr	r3, [pc, #768]	; 3a50 <prog+0x3a08>
    374c:	e1d330b0 	ldrh	r3, [r3]
    3750:	e58735dc 	str	r3, [r7, #1500]
    3754:	e5923000 	ldr	r3, [r2]
    3758:	e5873bc4 	str	r3, [r7, #3012]
    375c:	e2833001 	add	r3, r3, #1	; 0x1
    3760:	e5823000 	str	r3, [r2]
    3764:	e1a00007 	mov	r0, r7
    3768:	e59c1000 	ldr	r1, [ip]
    376c:	e59725dc 	ldr	r2, [r7, #1500]
    3770:	eb0024aa 	bl	ca20 <strncpy>
    3774:	e1a00007 	mov	r0, r7
    3778:	ebfffe7f 	bl	317c <carrega_img>
    377c:	e3a03008 	mov	r3, #8	; 0x8
    3780:	e5873bd4 	str	r3, [r7, #3028]
    3784:	ea0000aa 	b	3a34 <prog+0x39ec>
    3788:	e59f32c0 	ldr	r3, [pc, #704]	; 3a50 <prog+0x3a08>
    378c:	e1d330b0 	ldrh	r3, [r3]
    3790:	e3530005 	cmp	r3, #5	; 0x5
    3794:	9a0000a6 	bls	3a34 <prog+0x39ec>
    3798:	e28d4011 	add	r4, sp, #17	; 0x11
    379c:	e1a00004 	mov	r0, r4
    37a0:	e3a02002 	mov	r2, #2	; 0x2
    37a4:	eb00249d 	bl	ca20 <strncpy>
    37a8:	e3a06000 	mov	r6, #0	; 0x0
    37ac:	e5cd6014 	strb	r6, [sp, #20]
    37b0:	e1a00004 	mov	r0, r4
    37b4:	ebfff536 	bl	c94 <atoi>
    37b8:	e1a02000 	mov	r2, r0
    37bc:	e5870bcc 	str	r0, [r7, #3020]
    37c0:	e28d5014 	add	r5, sp, #20	; 0x14
    37c4:	e1a00005 	mov	r0, r5
    37c8:	e59f1284 	ldr	r1, [pc, #644]	; 3a54 <prog+0x3a0c>
    37cc:	ebfff87e 	bl	19cc <sprintf>
    37d0:	e59f8270 	ldr	r8, [pc, #624]	; 3a48 <prog+0x3a00>
    37d4:	e5981000 	ldr	r1, [r8]
    37d8:	e28d4006 	add	r4, sp, #6	; 0x6
    37dc:	e1a00004 	mov	r0, r4
    37e0:	e2811003 	add	r1, r1, #3	; 0x3
    37e4:	e3a02004 	mov	r2, #4	; 0x4
    37e8:	eb00248c 	bl	ca20 <strncpy>
    37ec:	e5cd600b 	strb	r6, [sp, #11]
    37f0:	e1a00004 	mov	r0, r4
    37f4:	ebfff526 	bl	c94 <atoi>
    37f8:	e1a02000 	mov	r2, r0
    37fc:	e58705dc 	str	r0, [r7, #1500]
    3800:	e1a00005 	mov	r0, r5
    3804:	e59f124c 	ldr	r1, [pc, #588]	; 3a58 <prog+0x3a10>
    3808:	ebfff86f 	bl	19cc <sprintf>
    380c:	e5981000 	ldr	r1, [r8]
    3810:	e28d400b 	add	r4, sp, #11	; 0xb
    3814:	e1a00004 	mov	r0, r4
    3818:	e2811008 	add	r1, r1, #8	; 0x8
    381c:	e3a02001 	mov	r2, #1	; 0x1
    3820:	eb00247e 	bl	ca20 <strncpy>
    3824:	e5cd600d 	strb	r6, [sp, #13]
    3828:	e1a00004 	mov	r0, r4
    382c:	ebfff518 	bl	c94 <atoi>
    3830:	e1a02000 	mov	r2, r0
    3834:	e5870bc0 	str	r0, [r7, #3008]
    3838:	e1a00005 	mov	r0, r5
    383c:	e59f1218 	ldr	r1, [pc, #536]	; 3a5c <prog+0x3a14>
    3840:	ebfff861 	bl	19cc <sprintf>
    3844:	e5981000 	ldr	r1, [r8]
    3848:	e28d4003 	add	r4, sp, #3	; 0x3
    384c:	e1a00004 	mov	r0, r4
    3850:	e281100a 	add	r1, r1, #10	; 0xa
    3854:	e3a02002 	mov	r2, #2	; 0x2
    3858:	eb002470 	bl	ca20 <strncpy>
    385c:	e5cd6006 	strb	r6, [sp, #6]
    3860:	e1a00004 	mov	r0, r4
    3864:	ebfff50a 	bl	c94 <atoi>
    3868:	e1a02000 	mov	r2, r0
    386c:	e5870bc4 	str	r0, [r7, #3012]
    3870:	e1a00005 	mov	r0, r5
    3874:	e59f11e4 	ldr	r1, [pc, #484]	; 3a60 <prog+0x3a18>
    3878:	ebfff853 	bl	19cc <sprintf>
    387c:	e5981000 	ldr	r1, [r8]
    3880:	e28d400d 	add	r4, sp, #13	; 0xd
    3884:	e1a00004 	mov	r0, r4
    3888:	e281100d 	add	r1, r1, #13	; 0xd
    388c:	e3a02003 	mov	r2, #3	; 0x3
    3890:	eb002462 	bl	ca20 <strncpy>
    3894:	e5cd6011 	strb	r6, [sp, #17]
    3898:	e1a00004 	mov	r0, r4
    389c:	ebfff4fc 	bl	c94 <atoi>
    38a0:	e1a02000 	mov	r2, r0
    38a4:	e5870bc8 	str	r0, [r7, #3016]
    38a8:	e1a00005 	mov	r0, r5
    38ac:	e59f11b0 	ldr	r1, [pc, #432]	; 3a64 <prog+0x3a1c>
    38b0:	ebfff845 	bl	19cc <sprintf>
    38b4:	e59f31ac 	ldr	r3, [pc, #428]	; 3a68 <prog+0x3a20>
    38b8:	e5933000 	ldr	r3, [r3]
    38bc:	e5930008 	ldr	r0, [r3, #8]
    38c0:	eb001ed7 	bl	b424 <fflush>
    38c4:	e59735dc 	ldr	r3, [r7, #1500]
    38c8:	e1530006 	cmp	r3, r6
    38cc:	da000008 	ble	38f4 <sft_trata+0x1e8>
    38d0:	e5981000 	ldr	r1, [r8]
    38d4:	e1a02006 	mov	r2, r6
    38d8:	e1a00003 	mov	r0, r3
    38dc:	e0823001 	add	r3, r2, r1
    38e0:	e5d33011 	ldrb	r3, [r3, #17]
    38e4:	e7c73002 	strb	r3, [r7, r2]
    38e8:	e2822001 	add	r2, r2, #1	; 0x1
    38ec:	e1500002 	cmp	r0, r2
    38f0:	cafffff9 	bgt	38dc <sft_trata+0x1d0>
    38f4:	e5973bcc 	ldr	r3, [r7, #3020]
    38f8:	e3530008 	cmp	r3, #8	; 0x8
    38fc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    3900:	ea000024 	b	3998 <prog+0x3950>
    3904:	00003928 	andeq	r3, r0, r8, lsr #18
    3908:	00003998 	muleq	r0, r8, r9
    390c:	0000393c 	andeq	r3, r0, ip, lsr r9
    3910:	00003998 	muleq	r0, r8, r9
    3914:	00003998 	muleq	r0, r8, r9
    3918:	00003954 	andeq	r3, r0, r4, asr r9
    391c:	00003968 	andeq	r3, r0, r8, ror #18
    3920:	00003998 	muleq	r0, r8, r9
    3924:	00003988 	andeq	r3, r0, r8, lsl #19
    3928:	e3a03001 	mov	r3, #1	; 0x1
    392c:	e5873bd4 	str	r3, [r7, #3028]
    3930:	e1a00007 	mov	r0, r7
    3934:	ebfffe10 	bl	317c <carrega_img>
    3938:	ea000016 	b	3998 <prog+0x3950>
    393c:	e3a03007 	mov	r3, #7	; 0x7
    3940:	e5873bd4 	str	r3, [r7, #3028]
    3944:	e1a00007 	mov	r0, r7
    3948:	e3a01002 	mov	r1, #2	; 0x2
    394c:	ebffff44 	bl	3664 <info_host_ans>
    3950:	ea000010 	b	3998 <prog+0x3950>
    3954:	e3a03001 	mov	r3, #1	; 0x1
    3958:	e5873bd4 	str	r3, [r7, #3028]
    395c:	e1a00007 	mov	r0, r7
    3960:	ebfffec9 	bl	348c <carrega_img_old>
    3964:	ea00000b 	b	3998 <prog+0x3950>
    3968:	e3a03008 	mov	r3, #8	; 0x8
    396c:	e5873bd4 	str	r3, [r7, #3028]
    3970:	e3a02001 	mov	r2, #1	; 0x1
    3974:	e59f30d0 	ldr	r3, [pc, #208]	; 3a4c <prog+0x3a04>
    3978:	e5832000 	str	r2, [r3]
    397c:	e1a00007 	mov	r0, r7
    3980:	ebfffdfd 	bl	317c <carrega_img>
    3984:	ea000003 	b	3998 <prog+0x3950>
    3988:	e3a03001 	mov	r3, #1	; 0x1
    398c:	e5873bd4 	str	r3, [r7, #3028]
    3990:	e1a00007 	mov	r0, r7
    3994:	ebfffee2 	bl	3524 <envia_msg>
    3998:	e5973bd4 	ldr	r3, [r7, #3028]
    399c:	e3530002 	cmp	r3, #2	; 0x2
    39a0:	0a000002 	beq	39b0 <prog+0x3968>
    39a4:	e3530003 	cmp	r3, #3	; 0x3
    39a8:	1a000007 	bne	39cc <prog+0x3984>
    39ac:	ea000003 	b	39c0 <prog+0x3978>
    39b0:	e1a00007 	mov	r0, r7
    39b4:	e3a01001 	mov	r1, #1	; 0x1
    39b8:	ebffff29 	bl	3664 <info_host_ans>
    39bc:	ea000002 	b	39cc <prog+0x3984>
    39c0:	e1a00007 	mov	r0, r7
    39c4:	e3a01004 	mov	r1, #4	; 0x4
    39c8:	ebffff25 	bl	3664 <info_host_ans>
    39cc:	e3e03103 	mvn	r3, #-1073741824	; 0xc0000000
    39d0:	e2433a03 	sub	r3, r3, #12288	; 0x3000
    39d4:	e5133f6b 	ldr	r3, [r3, #-3947]
    39d8:	e2134c01 	ands	r4, r3, #256	; 0x100
    39dc:	1a000014 	bne	3a34 <prog+0x39ec>
    39e0:	e59f0084 	ldr	r0, [pc, #132]	; 3a6c <prog+0x3a24>
    39e4:	eb00225b 	bl	c358 <puts>
    39e8:	e3a03007 	mov	r3, #7	; 0x7
    39ec:	e5873bd4 	str	r3, [r7, #3028]
    39f0:	e1a05004 	mov	r5, r4
    39f4:	e3a03f7f 	mov	r3, #508	; 0x1fc
    39f8:	e2834003 	add	r4, r3, #3	; 0x3
    39fc:	e3a03c66 	mov	r3, #26112	; 0x6600
    3a00:	e2836018 	add	r6, r3, #24	; 0x18
    3a04:	e1a00004 	mov	r0, r4
    3a08:	ebfffc9c 	bl	2c80 <WrSPI>
    3a0c:	e1a00004 	mov	r0, r4
    3a10:	ebfffc9a 	bl	2c80 <WrSPI>
    3a14:	e1a00004 	mov	r0, r4
    3a18:	ebfffc98 	bl	2c80 <WrSPI>
    3a1c:	e2855003 	add	r5, r5, #3	; 0x3
    3a20:	e1550006 	cmp	r5, r6
    3a24:	1afffff6 	bne	3a04 <prog+0x39bc>
    3a28:	e1a00007 	mov	r0, r7
    3a2c:	e3a01002 	mov	r1, #2	; 0x2
    3a30:	ebffff0b 	bl	3664 <info_host_ans>
    3a34:	e3a00000 	mov	r0, #0	; 0x0
    3a38:	e28dd028 	add	sp, sp, #40	; 0x28
    3a3c:	e8bd81f0 	ldmia	sp!, {r4, r5, r6, r7, r8, pc}
    3a40:	00014858 	andeq	r4, r1, r8, asr r8
    3a44:	40001844 	andmi	r1, r0, r4, asr #16
    3a48:	40000860 	andmi	r0, r0, r0, ror #16
    3a4c:	4000175c 	andmi	r1, r0, ip, asr r7
    3a50:	40001830 	andmi	r1, r0, r0, lsr r8
    3a54:	00014864 	andeq	r4, r1, r4, ror #16
    3a58:	00014870 	andeq	r4, r1, r0, ror r8
    3a5c:	0001487c 	andeq	r4, r1, ip, ror r8
    3a60:	00014884 	andeq	r4, r1, r4, lsl #17
    3a64:	00014894 	muleq	r1, r4, r8
    3a68:	40000014 	andmi	r0, r0, r4, lsl r0
    3a6c:	0001489c 	muleq	r1, ip, r8

00003a70 <sft_closed>:
    3a70:	e52de004 	str	lr, [sp, #-4]!
    3a74:	e24dd004 	sub	sp, sp, #4	; 0x4
    3a78:	e28d3004 	add	r3, sp, #4	; 0x4
    3a7c:	e5230004 	str	r0, [r3, #-4]!
    3a80:	e1a01000 	mov	r1, r0
    3a84:	e1a0000d 	mov	r0, sp
    3a88:	eb000db4 	bl	7160 <memb_free>
    3a8c:	e3a02009 	mov	r2, #9	; 0x9
    3a90:	e59d3000 	ldr	r3, [sp]
    3a94:	e5832bd4 	str	r2, [r3, #3028]
    3a98:	e28dd004 	add	sp, sp, #4	; 0x4
    3a9c:	e8bd8000 	ldmia	sp!, {pc}

00003aa0 <sftd_appcall>:
    3aa0:	e92d4010 	stmdb	sp!, {r4, lr}
    3aa4:	e59f309c 	ldr	r3, [pc, #156]	; 3b48 <prog+0x3b00>
    3aa8:	e5933000 	ldr	r3, [r3]
    3aac:	e283401c 	add	r4, r3, #28	; 0x1c
    3ab0:	e59f3094 	ldr	r3, [pc, #148]	; 3b4c <prog+0x3b04>
    3ab4:	e5d33000 	ldrb	r3, [r3]
    3ab8:	e3130040 	tst	r3, #64	; 0x40
    3abc:	13a02000 	movne	r2, #0	; 0x0
    3ac0:	15842bd4 	strne	r2, [r4, #3028]
    3ac4:	159f3084 	ldrne	r3, [pc, #132]	; 3b50 <prog+0x3b08>
    3ac8:	15832000 	strne	r2, [r3]
    3acc:	e5943bd4 	ldr	r3, [r4, #3028]
    3ad0:	e3530009 	cmp	r3, #9	; 0x9
    3ad4:	1a000005 	bne	3af0 <sftd_appcall+0x50>
    3ad8:	e2433009 	sub	r3, r3, #9	; 0x9
    3adc:	e5843bd4 	str	r3, [r4, #3028]
    3ae0:	e3a02010 	mov	r2, #16	; 0x10
    3ae4:	e59f3060 	ldr	r3, [pc, #96]	; 3b4c <prog+0x3b04>
    3ae8:	e5c32000 	strb	r2, [r3]
    3aec:	e8bd8010 	ldmia	sp!, {r4, pc}
    3af0:	e59f3054 	ldr	r3, [pc, #84]	; 3b4c <prog+0x3b04>
    3af4:	e5d33000 	ldrb	r3, [r3]
    3af8:	e3130030 	tst	r3, #48	; 0x30
    3afc:	1a000001 	bne	3b08 <sftd_appcall+0x68>
    3b00:	e3130080 	tst	r3, #128	; 0x80
    3b04:	0a000001 	beq	3b10 <sftd_appcall+0x70>
    3b08:	e1a00004 	mov	r0, r4
    3b0c:	ebffffd7 	bl	3a70 <sft_closed>
    3b10:	e59f3034 	ldr	r3, [pc, #52]	; 3b4c <prog+0x3b04>
    3b14:	e5d33000 	ldrb	r3, [r3]
    3b18:	e3130002 	tst	r3, #2	; 0x2
    3b1c:	11a00004 	movne	r0, r4
    3b20:	1bfffef9 	blne	370c <sft_trata>
    3b24:	e59f3020 	ldr	r3, [pc, #32]	; 3b4c <prog+0x3b04>
    3b28:	e5d33000 	ldrb	r3, [r3]
    3b2c:	e3130047 	tst	r3, #71	; 0x47
    3b30:	1a000001 	bne	3b3c <sftd_appcall+0x9c>
    3b34:	e3130008 	tst	r3, #8	; 0x8
    3b38:	08bd8010 	ldmeqia	sp!, {r4, pc}
    3b3c:	e1a00004 	mov	r0, r4
    3b40:	ebfffeeb 	bl	36f4 <sft_senddata>
    3b44:	e8bd8010 	ldmia	sp!, {r4, pc}
    3b48:	40001848 	andmi	r1, r0, r8, asr #16
    3b4c:	4000183c 	andmi	r1, r0, ip, lsr r8
    3b50:	4000175c 	andmi	r1, r0, ip, asr r7

00003b54 <sftd_init>:
    3b54:	e52de004 	str	lr, [sp, #-4]!
    3b58:	e3a00c2d 	mov	r0, #11520	; 0x2d00
    3b5c:	eb0011d8 	bl	82c4 <uip_listen>
    3b60:	e49df004 	ldr	pc, [sp], #4

00003b64 <add_msg_type>:
static const u8_t magic_cookie[4] = {99, 130, 83, 99};
/*---------------------------------------------------------------------------*/
static u8_t *
add_msg_type(u8_t *optptr, u8_t type)
{
    3b64:	e1a02000 	mov	r2, r0
  *optptr++ = DHCP_OPTION_MSG_TYPE;
    3b68:	e3a03035 	mov	r3, #53	; 0x35
    3b6c:	e4c03001 	strb	r3, [r0], #1
  *optptr++ = 1;
    3b70:	e2433034 	sub	r3, r3, #52	; 0x34
    3b74:	e5c23001 	strb	r3, [r2, #1]
  *optptr++ = type;
    3b78:	e5c01001 	strb	r1, [r0, #1]
  return optptr;
}
    3b7c:	e2800002 	add	r0, r0, #2	; 0x2
    3b80:	e12fff1e 	bx	lr

00003b84 <add_end>:
/*---------------------------------------------------------------------------*/
static u8_t *
add_server_id(u8_t *optptr)
{
  *optptr++ = DHCP_OPTION_SERVER_ID;
  *optptr++ = 4;
  memcpy(optptr, s.serverid, 4);
  return optptr + 4;
}
/*---------------------------------------------------------------------------*/
static u8_t *
add_req_ipaddr(u8_t *optptr)
{
  *optptr++ = DHCP_OPTION_REQ_IPADDR;
  *optptr++ = 4;
  memcpy(optptr, s.ipaddr, 4);
  return optptr + 4;
}
/*---------------------------------------------------------------------------*/
static u8_t *
add_req_options(u8_t *optptr)
{
  *optptr++ = DHCP_OPTION_REQ_LIST;
  *optptr++ = 3;
  *optptr++ = DHCP_OPTION_SUBNET_MASK;
  *optptr++ = DHCP_OPTION_ROUTER;
  *optptr++ = DHCP_OPTION_DNS_SERVER;
  return optptr;
}
/*---------------------------------------------------------------------------*/
static u8_t *
add_end(u8_t *optptr)
{
  *optptr++ = DHCP_OPTION_END;
    3b84:	e3e03000 	mvn	r3, #0	; 0x0
    3b88:	e4c03001 	strb	r3, [r0], #1
  return optptr;
}
    3b8c:	e12fff1e 	bx	lr

00003b90 <dhcpc_request>:
/*---------------------------------------------------------------------------*/
static void
create_msg(register struct dhcp_msg *m)
{
  m->op = DHCP_REQUEST;
  m->htype = DHCP_HTYPE_ETHERNET;
  m->hlen = s.mac_len;
  m->hops = 0;
  memcpy(m->xid, xid, sizeof(m->xid));
  m->secs = 0;
  m->flags = HTONS(BOOTP_BROADCAST); /*  Broadcast bit. */
  /*  uip_ipaddr_copy(m->ciaddr, uip_hostaddr);*/
  memcpy(m->ciaddr, uip_hostaddr, sizeof(m->ciaddr));
  memset(m->yiaddr, 0, sizeof(m->yiaddr));
  memset(m->siaddr, 0, sizeof(m->siaddr));
  memset(m->giaddr, 0, sizeof(m->giaddr));
  memcpy(m->chaddr, s.mac_addr, s.mac_len);
  memset(&m->chaddr[s.mac_len], 0, sizeof(m->chaddr) - s.mac_len);
#ifndef UIP_CONF_DHCP_LIGHT
  memset(m->sname, 0, sizeof(m->sname));
  memset(m->file, 0, sizeof(m->file));
#endif

  memcpy(m->options, magic_cookie, sizeof(magic_cookie));
}
/*---------------------------------------------------------------------------*/
static void
send_discover(void)
{
  u8_t *end;
  struct dhcp_msg *m = (struct dhcp_msg *)uip_appdata;

  create_msg(m);

  end = add_msg_type(&m->options[4], DHCPDISCOVER);
  end = add_req_options(end);
  end = add_end(end);

  uip_send(uip_appdata, end - (u8_t *)uip_appdata);
}
/*---------------------------------------------------------------------------*/
static void
send_request(void)
{
  u8_t *end;
  struct dhcp_msg *m = (struct dhcp_msg *)uip_appdata;

  create_msg(m);
  
  end = add_msg_type(&m->options[4], DHCPREQUEST);
  end = add_server_id(end);
  end = add_req_ipaddr(end);
  end = add_end(end);
  
  uip_send(uip_appdata, end - (u8_t *)uip_appdata);
}
/*---------------------------------------------------------------------------*/
static u8_t
parse_options(u8_t *optptr, int len)
{
  u8_t *end = optptr + len;
  u8_t type = 0;

  while(optptr < end) {
    switch(*optptr) {
    case DHCP_OPTION_SUBNET_MASK:
      memcpy(s.netmask, optptr + 2, 4);
      break;
    case DHCP_OPTION_ROUTER:
      memcpy(s.default_router, optptr + 2, 4);
      break;
    case DHCP_OPTION_DNS_SERVER:
      memcpy(s.dnsaddr, optptr + 2, 4);
      break;
    case DHCP_OPTION_MSG_TYPE:
      type = *(optptr + 2);
      break;
    case DHCP_OPTION_SERVER_ID:
      memcpy(s.serverid, optptr + 2, 4);
      break;
    case DHCP_OPTION_LEASE_TIME:
      memcpy(s.lease_time, optptr + 2, 4);
      break;
    case DHCP_OPTION_END:
      return type;
    }

    optptr += optptr[1] + 2;
  }
  return type;
}
/*---------------------------------------------------------------------------*/
static u8_t
parse_msg(void)
{
  struct dhcp_msg *m = (struct dhcp_msg *)uip_appdata;
  
  if(m->op == DHCP_REPLY &&
     memcmp(m->xid, xid, sizeof(xid)) == 0 &&
     memcmp(m->chaddr, s.mac_addr, s.mac_len) == 0) {
    memcpy(s.ipaddr, m->yiaddr, 4);
    return parse_options(&m->options[4], uip_datalen());
  }
  return 0;
}
/*---------------------------------------------------------------------------*/
static
PT_THREAD(handle_dhcp(void))
{
  PT_BEGIN(&s.pt);
  
  /* try_again:*/
  s.state = STATE_SENDING;
  s.ticks = CLOCK_SECOND;

  do {
    send_discover();
    timer_set(&s.timer, s.ticks);
    PT_WAIT_UNTIL(&s.pt, uip_newdata() || timer_expired(&s.timer));

    if(uip_newdata() && parse_msg() == DHCPOFFER) {
      s.state = STATE_OFFER_RECEIVED;
      break;
    }

    if(s.ticks < CLOCK_SECOND * 60) {
      s.ticks *= 2;
    }
  } while(s.state != STATE_OFFER_RECEIVED);
  
  s.ticks = CLOCK_SECOND;

  do {
    send_request();
    timer_set(&s.timer, s.ticks);
    PT_WAIT_UNTIL(&s.pt, uip_newdata() || timer_expired(&s.timer));

    if(uip_newdata() && parse_msg() == DHCPACK) {
      s.state = STATE_CONFIG_RECEIVED;
      break;
    }

    if(s.ticks <= CLOCK_SECOND * 10) {
      s.ticks += CLOCK_SECOND;
    } else {
      PT_RESTART(&s.pt);
    }
  } while(s.state != STATE_CONFIG_RECEIVED);
  
#if 1
  printf("Got IP address %d.%d.%d.%d\n",
	 uip_ipaddr1(s.ipaddr), uip_ipaddr2(s.ipaddr),
	 uip_ipaddr3(s.ipaddr), uip_ipaddr4(s.ipaddr));
  printf("Got netmask %d.%d.%d.%d\n",
	 uip_ipaddr1(s.netmask), uip_ipaddr2(s.netmask),
	 uip_ipaddr3(s.netmask), uip_ipaddr4(s.netmask));
  printf("Got DNS server %d.%d.%d.%d\n",
	 uip_ipaddr1(s.dnsaddr), uip_ipaddr2(s.dnsaddr),
	 uip_ipaddr3(s.dnsaddr), uip_ipaddr4(s.dnsaddr));
  printf("Got default router %d.%d.%d.%d\n",
	 uip_ipaddr1(s.default_router), uip_ipaddr2(s.default_router),
	 uip_ipaddr3(s.default_router), uip_ipaddr4(s.default_router));
  printf("Lease expires in %ld seconds\n",
	 ntohs(s.lease_time[0])*65536ul + ntohs(s.lease_time[1]));
#endif

  dhcpc_configured(&s);
  
  /*  timer_stop(&s.timer);*/

  /*
   * PT_END restarts the thread so we do this instead. Eventually we
   * should reacquire expired leases here.
   */
  while(1) {
    PT_YIELD(&s.pt);
  }

  PT_END(&s.pt);
}
/*---------------------------------------------------------------------------*/
void
dhcpc_init(const void *mac_addr, int mac_len)
{
  uip_ipaddr_t addr;
  
  s.mac_addr = mac_addr;
  s.mac_len  = mac_len;

  s.state = STATE_INITIAL;
  uip_ipaddr(addr, 255,255,255,255);
  s.conn = uip_udp_new(&addr, HTONS(DHCPC_SERVER_PORT));
  if(s.conn != NULL) {
    uip_udp_bind(s.conn, HTONS(DHCPC_CLIENT_PORT));
  }
  PT_INIT(&s.pt);
}
/*---------------------------------------------------------------------------*/
void
dhcpc_appcall(void)
{
  handle_dhcp();
}
/*---------------------------------------------------------------------------*/
void
dhcpc_request(void)
{
  u16_t ipaddr[2];
  
  if(s.state == STATE_INITIAL) {
    3b90:	e59f3014 	ldr	r3, [pc, #20]	; 3bac <prog+0x3b64>
    3b94:	e5d32004 	ldrb	r2, [r3, #4]
    3b98:	e3520000 	cmp	r2, #0	; 0x0
    uip_ipaddr(ipaddr, 0,0,0,0);
    uip_sethostaddr(ipaddr);
    3b9c:	059f300c 	ldreq	r3, [pc, #12]	; 3bb0 <prog+0x3b68>
    3ba0:	01c320b0 	streqh	r2, [r3]
    3ba4:	01c320b2 	streqh	r2, [r3, #2]
    3ba8:	e12fff1e 	bx	lr
    3bac:	40000864 	andmi	r0, r0, r4, ror #16
    3bb0:	40002e1c 	andmi	r2, r0, ip, lsl lr

00003bb4 <dhcpc_configured>:
    /*    handle_dhcp(PROCESS_EVENT_NONE, NULL);*/
  }
}
/*---------------------------------------------------------------------------*/

void
dhcpc_configured(const struct dhcpc_state *s)
{
uip_sethostaddr(s->ipaddr);
    3bb4:	e59f3038 	ldr	r3, [pc, #56]	; 3bf4 <prog+0x3bac>
    3bb8:	e1d022b8 	ldrh	r2, [r0, #40]
    3bbc:	e1c320b0 	strh	r2, [r3]
    3bc0:	e1d022ba 	ldrh	r2, [r0, #42]
    3bc4:	e1c320b2 	strh	r2, [r3, #2]
uip_setnetmask(s->netmask);
    3bc8:	e59f3028 	ldr	r3, [pc, #40]	; 3bf8 <prog+0x3bb0>
    3bcc:	e1d022bc 	ldrh	r2, [r0, #44]
    3bd0:	e1c320b0 	strh	r2, [r3]
    3bd4:	e1d022be 	ldrh	r2, [r0, #46]
    3bd8:	e1c320b2 	strh	r2, [r3, #2]
uip_setdraddr(s->default_router);
    3bdc:	e59f3018 	ldr	r3, [pc, #24]	; 3bfc <prog+0x3bb4>
    3be0:	e1d023b4 	ldrh	r2, [r0, #52]
    3be4:	e1c320b0 	strh	r2, [r3]
    3be8:	e1d003b6 	ldrh	r0, [r0, #54]
    3bec:	e1c300b2 	strh	r0, [r3, #2]

}
    3bf0:	e12fff1e 	bx	lr
    3bf4:	40002e1c 	andmi	r2, r0, ip, lsl lr
    3bf8:	40002e18 	andmi	r2, r0, r8, lsl lr
    3bfc:	40002ddc 	ldrmid	r2, [r0], -ip

00003c00 <create_msg>:
    3c00:	e92d45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
    3c04:	e1a04000 	mov	r4, r0
    3c08:	e3a03001 	mov	r3, #1	; 0x1
    3c0c:	e5c03000 	strb	r3, [r0]
    3c10:	e5c03001 	strb	r3, [r0, #1]
    3c14:	e59f70c8 	ldr	r7, [pc, #200]	; 3ce4 <prog+0x3c9c>
    3c18:	e597301c 	ldr	r3, [r7, #28]
    3c1c:	e5c03002 	strb	r3, [r0, #2]
    3c20:	e3a05000 	mov	r5, #0	; 0x0
    3c24:	e5c05003 	strb	r5, [r0, #3]
    3c28:	e3a08004 	mov	r8, #4	; 0x4
    3c2c:	e0800008 	add	r0, r0, r8
    3c30:	e59f10b0 	ldr	r1, [pc, #176]	; 3ce8 <prog+0x3ca0>
    3c34:	e1a02008 	mov	r2, r8
    3c38:	eb002115 	bl	c094 <memcpy>
    3c3c:	e1c450b8 	strh	r5, [r4, #8]
    3c40:	e3a0a080 	mov	sl, #128	; 0x80
    3c44:	e1c4a0ba 	strh	sl, [r4, #10]
    3c48:	e284000c 	add	r0, r4, #12	; 0xc
    3c4c:	e59f1098 	ldr	r1, [pc, #152]	; 3cec <prog+0x3ca4>
    3c50:	e1a02008 	mov	r2, r8
    3c54:	eb00210e 	bl	c094 <memcpy>
    3c58:	e5c45010 	strb	r5, [r4, #16]
    3c5c:	e5c45011 	strb	r5, [r4, #17]
    3c60:	e5c45012 	strb	r5, [r4, #18]
    3c64:	e5c45013 	strb	r5, [r4, #19]
    3c68:	e5c45014 	strb	r5, [r4, #20]
    3c6c:	e5c45015 	strb	r5, [r4, #21]
    3c70:	e5c45016 	strb	r5, [r4, #22]
    3c74:	e5c45017 	strb	r5, [r4, #23]
    3c78:	e5c45018 	strb	r5, [r4, #24]
    3c7c:	e5c45019 	strb	r5, [r4, #25]
    3c80:	e5c4501a 	strb	r5, [r4, #26]
    3c84:	e5c4501b 	strb	r5, [r4, #27]
    3c88:	e284601c 	add	r6, r4, #28	; 0x1c
    3c8c:	e1a00006 	mov	r0, r6
    3c90:	e2871018 	add	r1, r7, #24	; 0x18
    3c94:	e8910006 	ldmia	r1, {r1, r2}
    3c98:	eb0020fd 	bl	c094 <memcpy>
    3c9c:	e597201c 	ldr	r2, [r7, #28]
    3ca0:	e0860002 	add	r0, r6, r2
    3ca4:	e1a01005 	mov	r1, r5
    3ca8:	e2622010 	rsb	r2, r2, #16	; 0x10
    3cac:	eb002120 	bl	c134 <memset>
    3cb0:	e284002c 	add	r0, r4, #44	; 0x2c
    3cb4:	e1a01005 	mov	r1, r5
    3cb8:	e3a02040 	mov	r2, #64	; 0x40
    3cbc:	eb00211c 	bl	c134 <memset>
    3cc0:	e284006c 	add	r0, r4, #108	; 0x6c
    3cc4:	e1a01005 	mov	r1, r5
    3cc8:	e1a0200a 	mov	r2, sl
    3ccc:	eb002118 	bl	c134 <memset>
    3cd0:	e28400ec 	add	r0, r4, #236	; 0xec
    3cd4:	e59f1014 	ldr	r1, [pc, #20]	; 3cf0 <prog+0x3ca8>
    3cd8:	e1a02008 	mov	r2, r8
    3cdc:	eb0020ec 	bl	c094 <memcpy>
    3ce0:	e8bd85f0 	ldmia	sp!, {r4, r5, r6, r7, r8, sl, pc}
    3ce4:	40000864 	andmi	r0, r0, r4, ror #16
    3ce8:	000134f4 	streqd	r3, [r1], -r4
    3cec:	40002e1c 	andmi	r2, r0, ip, lsl lr
    3cf0:	000134f8 	streqd	r3, [r1], -r8

00003cf4 <parse_msg>:
    3cf4:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
    3cf8:	e59f3150 	ldr	r3, [pc, #336]	; 3e50 <prog+0x3e08>
    3cfc:	e5934000 	ldr	r4, [r3]
    3d00:	e5d43000 	ldrb	r3, [r4]
    3d04:	e3530002 	cmp	r3, #2	; 0x2
    3d08:	1a00004e 	bne	3e48 <parse_msg+0x154>
    3d0c:	e2840004 	add	r0, r4, #4	; 0x4
    3d10:	e59f113c 	ldr	r1, [pc, #316]	; 3e54 <prog+0x3e0c>
    3d14:	e3a02004 	mov	r2, #4	; 0x4
    3d18:	eb0020b7 	bl	bffc <memcmp>
    3d1c:	e3500000 	cmp	r0, #0	; 0x0
    3d20:	1a000048 	bne	3e48 <parse_msg+0x154>
    3d24:	e59f512c 	ldr	r5, [pc, #300]	; 3e58 <prog+0x3e10>
    3d28:	e284001c 	add	r0, r4, #28	; 0x1c
    3d2c:	e2851018 	add	r1, r5, #24	; 0x18
    3d30:	e8910006 	ldmia	r1, {r1, r2}
    3d34:	eb0020b0 	bl	bffc <memcmp>
    3d38:	e2506000 	subs	r6, r0, #0	; 0x0
    3d3c:	1a000041 	bne	3e48 <parse_msg+0x154>
    3d40:	e2850028 	add	r0, r5, #40	; 0x28
    3d44:	e2841010 	add	r1, r4, #16	; 0x10
    3d48:	e3a02004 	mov	r2, #4	; 0x4
    3d4c:	eb0020d0 	bl	c094 <memcpy>
    3d50:	e28440f0 	add	r4, r4, #240	; 0xf0
    3d54:	e59f3100 	ldr	r3, [pc, #256]	; 3e5c <prog+0x3e14>
    3d58:	e1d330b0 	ldrh	r3, [r3]
    3d5c:	e0845003 	add	r5, r4, r3
    3d60:	e1540005 	cmp	r4, r5
    3d64:	2a000034 	bcs	3e3c <parse_msg+0x148>
    3d68:	e3a06000 	mov	r6, #0	; 0x0
    3d6c:	e5d43000 	ldrb	r3, [r4]
    3d70:	e3530033 	cmp	r3, #51	; 0x33
    3d74:	0a000024 	beq	3e0c <parse_msg+0x118>
    3d78:	8a000006 	bhi	3d98 <parse_msg+0xa4>
    3d7c:	e3530003 	cmp	r3, #3	; 0x3
    3d80:	0a000010 	beq	3dc8 <parse_msg+0xd4>
    3d84:	e3530006 	cmp	r3, #6	; 0x6
    3d88:	0a000013 	beq	3ddc <parse_msg+0xe8>
    3d8c:	e3530001 	cmp	r3, #1	; 0x1
    3d90:	1a000024 	bne	3e28 <parse_msg+0x134>
    3d94:	ea000006 	b	3db4 <parse_msg+0xc0>
    3d98:	e3530036 	cmp	r3, #54	; 0x36
    3d9c:	0a000015 	beq	3df8 <parse_msg+0x104>
    3da0:	e35300ff 	cmp	r3, #255	; 0xff
    3da4:	0a00001d 	beq	3e20 <parse_msg+0x12c>
    3da8:	e3530035 	cmp	r3, #53	; 0x35
    3dac:	1a00001d 	bne	3e28 <parse_msg+0x134>
    3db0:	ea00000e 	b	3df0 <parse_msg+0xfc>
    3db4:	e59f00a4 	ldr	r0, [pc, #164]	; 3e60 <prog+0x3e18>
    3db8:	e2841002 	add	r1, r4, #2	; 0x2
    3dbc:	e3a02004 	mov	r2, #4	; 0x4
    3dc0:	eb0020b3 	bl	c094 <memcpy>
    3dc4:	ea000017 	b	3e28 <parse_msg+0x134>
    3dc8:	e59f0094 	ldr	r0, [pc, #148]	; 3e64 <prog+0x3e1c>
    3dcc:	e2841002 	add	r1, r4, #2	; 0x2
    3dd0:	e3a02004 	mov	r2, #4	; 0x4
    3dd4:	eb0020ae 	bl	c094 <memcpy>
    3dd8:	ea000012 	b	3e28 <parse_msg+0x134>
    3ddc:	e59f0084 	ldr	r0, [pc, #132]	; 3e68 <prog+0x3e20>
    3de0:	e2841002 	add	r1, r4, #2	; 0x2
    3de4:	e3a02004 	mov	r2, #4	; 0x4
    3de8:	eb0020a9 	bl	c094 <memcpy>
    3dec:	ea00000d 	b	3e28 <parse_msg+0x134>
    3df0:	e5d46002 	ldrb	r6, [r4, #2]
    3df4:	ea00000b 	b	3e28 <parse_msg+0x134>
    3df8:	e59f006c 	ldr	r0, [pc, #108]	; 3e6c <prog+0x3e24>
    3dfc:	e2841002 	add	r1, r4, #2	; 0x2
    3e00:	e3a02004 	mov	r2, #4	; 0x4
    3e04:	eb0020a2 	bl	c094 <memcpy>
    3e08:	ea000006 	b	3e28 <parse_msg+0x134>
    3e0c:	e59f005c 	ldr	r0, [pc, #92]	; 3e70 <prog+0x3e28>
    3e10:	e2841002 	add	r1, r4, #2	; 0x2
    3e14:	e3a02004 	mov	r2, #4	; 0x4
    3e18:	eb00209d 	bl	c094 <memcpy>
    3e1c:	ea000001 	b	3e28 <parse_msg+0x134>
    3e20:	e1a00006 	mov	r0, r6
    3e24:	ea000005 	b	3e40 <parse_msg+0x14c>
    3e28:	e5d43001 	ldrb	r3, [r4, #1]
    3e2c:	e0833004 	add	r3, r3, r4
    3e30:	e2834002 	add	r4, r3, #2	; 0x2
    3e34:	e1550004 	cmp	r5, r4
    3e38:	8affffcb 	bhi	3d6c <parse_msg+0x78>
    3e3c:	e1a00006 	mov	r0, r6
    3e40:	e20000ff 	and	r0, r0, #255	; 0xff
    3e44:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
    3e48:	e3a00000 	mov	r0, #0	; 0x0
    3e4c:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
    3e50:	40001844 	andmi	r1, r0, r4, asr #16
    3e54:	000134f4 	streqd	r3, [r1], -r4
    3e58:	40000864 	andmi	r0, r0, r4, ror #16
    3e5c:	40001830 	andmi	r1, r0, r0, lsr r8
    3e60:	40000890 	mulmi	r0, r0, r8
    3e64:	40000898 	mulmi	r0, r8, r8
    3e68:	40000894 	mulmi	r0, r4, r8
    3e6c:	40000884 	andmi	r0, r0, r4, lsl #17
    3e70:	40000888 	andmi	r0, r0, r8, lsl #17

00003e74 <dhcpc_appcall>:
    3e74:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
    3e78:	e24dd004 	sub	sp, sp, #4	; 0x4
    3e7c:	e59f33e8 	ldr	r3, [pc, #1000]	; 426c <prog+0x4224>
    3e80:	e1d320b0 	ldrh	r2, [r3]
    3e84:	e3a03c01 	mov	r3, #256	; 0x100
    3e88:	e2833003 	add	r3, r3, #3	; 0x3
    3e8c:	e1520003 	cmp	r2, r3
    3e90:	0a00002d 	beq	3f4c <dhcpc_appcall+0xd8>
    3e94:	8a000002 	bhi	3ea4 <dhcpc_appcall+0x30>
    3e98:	e3520000 	cmp	r2, #0	; 0x0
    3e9c:	0a000005 	beq	3eb8 <dhcpc_appcall+0x44>
    3ea0:	ea0000ec 	b	4258 <dhcpc_appcall+0x3e4>
    3ea4:	e3520f45 	cmp	r2, #276	; 0x114
    3ea8:	0a000068 	beq	4050 <dhcpc_appcall+0x1dc>
    3eac:	e3520f4f 	cmp	r2, #316	; 0x13c
    3eb0:	1a0000e8 	bne	4258 <dhcpc_appcall+0x3e4>
    3eb4:	ea0000e3 	b	4248 <dhcpc_appcall+0x3d4>
    3eb8:	e59f23ac 	ldr	r2, [pc, #940]	; 426c <prog+0x4224>
    3ebc:	e3a03001 	mov	r3, #1	; 0x1
    3ec0:	e5c23004 	strb	r3, [r2, #4]
    3ec4:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    3ec8:	e1c231b4 	strh	r3, [r2, #20]
    3ecc:	e59f539c 	ldr	r5, [pc, #924]	; 4270 <prog+0x4228>
    3ed0:	e5954000 	ldr	r4, [r5]
    3ed4:	e1a00004 	mov	r0, r4
    3ed8:	ebffff48 	bl	3c00 <create_msg>
    3edc:	e28400f0 	add	r0, r4, #240	; 0xf0
    3ee0:	e3a01001 	mov	r1, #1	; 0x1
    3ee4:	ebffff1e 	bl	3b64 <add_msg_type>
    3ee8:	e1a02000 	mov	r2, r0
    3eec:	e3a03037 	mov	r3, #55	; 0x37
    3ef0:	e4c23001 	strb	r3, [r2], #1
    3ef4:	e3a0c003 	mov	ip, #3	; 0x3
    3ef8:	e5c0c001 	strb	ip, [r0, #1]
    3efc:	e2821001 	add	r1, r2, #1	; 0x1
    3f00:	e2433036 	sub	r3, r3, #54	; 0x36
    3f04:	e5c23001 	strb	r3, [r2, #1]
    3f08:	e0810003 	add	r0, r1, r3
    3f0c:	e5c1c001 	strb	ip, [r1, #1]
    3f10:	e2833005 	add	r3, r3, #5	; 0x5
    3f14:	e5c03001 	strb	r3, [r0, #1]
    3f18:	e2800002 	add	r0, r0, #2	; 0x2
    3f1c:	ebffff18 	bl	3b84 <add_end>
    3f20:	e5953000 	ldr	r3, [r5]
    3f24:	e0631000 	rsb	r1, r3, r0
    3f28:	e1a00003 	mov	r0, r3
    3f2c:	eb0011b9 	bl	8618 <uip_send>
    3f30:	e59f433c 	ldr	r4, [pc, #828]	; 4274 <prog+0x422c>
    3f34:	e1a00004 	mov	r0, r4
    3f38:	e1d410b8 	ldrh	r1, [r4, #8]
    3f3c:	eb00103f 	bl	8040 <timer_set>
    3f40:	e3a03c01 	mov	r3, #256	; 0x100
    3f44:	e2833003 	add	r3, r3, #3	; 0x3
    3f48:	e14430bc 	strh	r3, [r4, #-12]
    3f4c:	e59f4324 	ldr	r4, [pc, #804]	; 4278 <prog+0x4230>
    3f50:	e5d43000 	ldrb	r3, [r4]
    3f54:	e3130002 	tst	r3, #2	; 0x2
    3f58:	1a000006 	bne	3f78 <dhcpc_appcall+0x104>
    3f5c:	e59f0310 	ldr	r0, [pc, #784]	; 4274 <prog+0x422c>
    3f60:	eb001027 	bl	8004 <timer_expired>
    3f64:	e3500000 	cmp	r0, #0	; 0x0
    3f68:	0a0000bd 	beq	4264 <dhcpc_appcall+0x3f0>
    3f6c:	e5d43000 	ldrb	r3, [r4]
    3f70:	e3130002 	tst	r3, #2	; 0x2
    3f74:	0a000004 	beq	3f8c <dhcpc_appcall+0x118>
    3f78:	ebffff5d 	bl	3cf4 <parse_msg>
    3f7c:	e3500002 	cmp	r0, #2	; 0x2
    3f80:	059f32e4 	ldreq	r3, [pc, #740]	; 426c <prog+0x4224>
    3f84:	05c30004 	streqb	r0, [r3, #4]
    3f88:	0a00000a 	beq	3fb8 <dhcpc_appcall+0x144>
    3f8c:	e59f12d8 	ldr	r1, [pc, #728]	; 426c <prog+0x4224>
    3f90:	e1d121b4 	ldrh	r2, [r1, #20]
    3f94:	e3a03cea 	mov	r3, #59904	; 0xea00
    3f98:	e283305f 	add	r3, r3, #95	; 0x5f
    3f9c:	e1520003 	cmp	r2, r3
    3fa0:	91a03082 	movls	r3, r2, lsl #1
    3fa4:	91c131b4 	strlsh	r3, [r1, #20]
    3fa8:	e59f32bc 	ldr	r3, [pc, #700]	; 426c <prog+0x4224>
    3fac:	e5d33004 	ldrb	r3, [r3, #4]
    3fb0:	e3530002 	cmp	r3, #2	; 0x2
    3fb4:	1affffc4 	bne	3ecc <dhcpc_appcall+0x58>
    3fb8:	e59f32ac 	ldr	r3, [pc, #684]	; 426c <prog+0x4224>
    3fbc:	e3a02ffa 	mov	r2, #1000	; 0x3e8
    3fc0:	e1c321b4 	strh	r2, [r3, #20]
    3fc4:	e59f72a4 	ldr	r7, [pc, #676]	; 4270 <prog+0x4228>
    3fc8:	e5974000 	ldr	r4, [r7]
    3fcc:	e1a00004 	mov	r0, r4
    3fd0:	ebffff0a 	bl	3c00 <create_msg>
    3fd4:	e28400f0 	add	r0, r4, #240	; 0xf0
    3fd8:	e3a01003 	mov	r1, #3	; 0x3
    3fdc:	ebfffee0 	bl	3b64 <add_msg_type>
    3fe0:	e1a04000 	mov	r4, r0
    3fe4:	e3a03036 	mov	r3, #54	; 0x36
    3fe8:	e4c43001 	strb	r3, [r4], #1
    3fec:	e3a05004 	mov	r5, #4	; 0x4
    3ff0:	e5c05001 	strb	r5, [r0, #1]
    3ff4:	e59f6280 	ldr	r6, [pc, #640]	; 427c <prog+0x4234>
    3ff8:	e2840001 	add	r0, r4, #1	; 0x1
    3ffc:	e1a01006 	mov	r1, r6
    4000:	e1a02005 	mov	r2, r5
    4004:	eb002022 	bl	c094 <memcpy>
    4008:	e3a03032 	mov	r3, #50	; 0x32
    400c:	e5c43005 	strb	r3, [r4, #5]
    4010:	e5c45006 	strb	r5, [r4, #6]
    4014:	e2840007 	add	r0, r4, #7	; 0x7
    4018:	e2861008 	add	r1, r6, #8	; 0x8
    401c:	e1a02005 	mov	r2, r5
    4020:	eb00201b 	bl	c094 <memcpy>
    4024:	e284000b 	add	r0, r4, #11	; 0xb
    4028:	ebfffed5 	bl	3b84 <add_end>
    402c:	e5973000 	ldr	r3, [r7]
    4030:	e0631000 	rsb	r1, r3, r0
    4034:	e1a00003 	mov	r0, r3
    4038:	eb001176 	bl	8618 <uip_send>
    403c:	e2460014 	sub	r0, r6, #20	; 0x14
    4040:	e15610bc 	ldrh	r1, [r6, #-12]
    4044:	eb000ffd 	bl	8040 <timer_set>
    4048:	e3a03f45 	mov	r3, #276	; 0x114
    404c:	e14632b0 	strh	r3, [r6, #-32]
    4050:	e59f4220 	ldr	r4, [pc, #544]	; 4278 <prog+0x4230>
    4054:	e5d43000 	ldrb	r3, [r4]
    4058:	e3130002 	tst	r3, #2	; 0x2
    405c:	1a000006 	bne	407c <dhcpc_appcall+0x208>
    4060:	e59f020c 	ldr	r0, [pc, #524]	; 4274 <prog+0x422c>
    4064:	eb000fe6 	bl	8004 <timer_expired>
    4068:	e3500000 	cmp	r0, #0	; 0x0
    406c:	0a00007c 	beq	4264 <dhcpc_appcall+0x3f0>
    4070:	e5d43000 	ldrb	r3, [r4]
    4074:	e3130002 	tst	r3, #2	; 0x2
    4078:	0a000005 	beq	4094 <dhcpc_appcall+0x220>
    407c:	ebffff1c 	bl	3cf4 <parse_msg>
    4080:	e3500005 	cmp	r0, #5	; 0x5
    4084:	03a02003 	moveq	r2, #3	; 0x3
    4088:	059f31dc 	ldreq	r3, [pc, #476]	; 426c <prog+0x4224>
    408c:	05c32004 	streqb	r2, [r3, #4]
    4090:	0a00000d 	beq	40cc <dhcpc_appcall+0x258>
    4094:	e59f11d0 	ldr	r1, [pc, #464]	; 426c <prog+0x4224>
    4098:	e1d121b4 	ldrh	r2, [r1, #20]
    409c:	e3a03c27 	mov	r3, #9984	; 0x2700
    40a0:	e2833010 	add	r3, r3, #16	; 0x10
    40a4:	e1520003 	cmp	r2, r3
    40a8:	859f31bc 	ldrhi	r3, [pc, #444]	; 426c <prog+0x4224>
    40ac:	83a02000 	movhi	r2, #0	; 0x0
    40b0:	81c320b0 	strhih	r2, [r3]
    40b4:	8a00006a 	bhi	4264 <dhcpc_appcall+0x3f0>
    40b8:	e2823ffa 	add	r3, r2, #1000	; 0x3e8
    40bc:	e1c131b4 	strh	r3, [r1, #20]
    40c0:	e5d13004 	ldrb	r3, [r1, #4]
    40c4:	e3530003 	cmp	r3, #3	; 0x3
    40c8:	1affffbd 	bne	3fc4 <dhcpc_appcall+0x150>
    40cc:	e59f4198 	ldr	r4, [pc, #408]	; 426c <prog+0x4224>
    40d0:	e1d402b8 	ldrh	r0, [r4, #40]
    40d4:	eb0010ac 	bl	838c <htons>
    40d8:	e1a07000 	mov	r7, r0
    40dc:	e1d402b8 	ldrh	r0, [r4, #40]
    40e0:	eb0010a9 	bl	838c <htons>
    40e4:	e1a06000 	mov	r6, r0
    40e8:	e1d402ba 	ldrh	r0, [r4, #42]
    40ec:	eb0010a6 	bl	838c <htons>
    40f0:	e1a05000 	mov	r5, r0
    40f4:	e1d402ba 	ldrh	r0, [r4, #42]
    40f8:	eb0010a3 	bl	838c <htons>
    40fc:	e1a07407 	mov	r7, r7, lsl #8
    4100:	e20660ff 	and	r6, r6, #255	; 0xff
    4104:	e1a05405 	mov	r5, r5, lsl #8
    4108:	e20000ff 	and	r0, r0, #255	; 0xff
    410c:	e58d0000 	str	r0, [sp]
    4110:	e59f0168 	ldr	r0, [pc, #360]	; 4280 <prog+0x4238>
    4114:	e1a01827 	mov	r1, r7, lsr #16
    4118:	e1a02006 	mov	r2, r6
    411c:	e1a03825 	mov	r3, r5, lsr #16
    4120:	eb00202b 	bl	c1d4 <printf>
    4124:	e1d402bc 	ldrh	r0, [r4, #44]
    4128:	eb001097 	bl	838c <htons>
    412c:	e1a07000 	mov	r7, r0
    4130:	e1d402bc 	ldrh	r0, [r4, #44]
    4134:	eb001094 	bl	838c <htons>
    4138:	e1a06000 	mov	r6, r0
    413c:	e1d402be 	ldrh	r0, [r4, #46]
    4140:	eb001091 	bl	838c <htons>
    4144:	e1a05000 	mov	r5, r0
    4148:	e1d402be 	ldrh	r0, [r4, #46]
    414c:	eb00108e 	bl	838c <htons>
    4150:	e1a07407 	mov	r7, r7, lsl #8
    4154:	e20660ff 	and	r6, r6, #255	; 0xff
    4158:	e1a05405 	mov	r5, r5, lsl #8
    415c:	e20000ff 	and	r0, r0, #255	; 0xff
    4160:	e58d0000 	str	r0, [sp]
    4164:	e59f0118 	ldr	r0, [pc, #280]	; 4284 <prog+0x423c>
    4168:	e1a01827 	mov	r1, r7, lsr #16
    416c:	e1a02006 	mov	r2, r6
    4170:	e1a03825 	mov	r3, r5, lsr #16
    4174:	eb002016 	bl	c1d4 <printf>
    4178:	e1d403b0 	ldrh	r0, [r4, #48]
    417c:	eb001082 	bl	838c <htons>
    4180:	e1a07000 	mov	r7, r0
    4184:	e1d403b0 	ldrh	r0, [r4, #48]
    4188:	eb00107f 	bl	838c <htons>
    418c:	e1a06000 	mov	r6, r0
    4190:	e1d403b2 	ldrh	r0, [r4, #50]
    4194:	eb00107c 	bl	838c <htons>
    4198:	e1a05000 	mov	r5, r0
    419c:	e1d403b2 	ldrh	r0, [r4, #50]
    41a0:	eb001079 	bl	838c <htons>
    41a4:	e1a07407 	mov	r7, r7, lsl #8
    41a8:	e20660ff 	and	r6, r6, #255	; 0xff
    41ac:	e1a05405 	mov	r5, r5, lsl #8
    41b0:	e20000ff 	and	r0, r0, #255	; 0xff
    41b4:	e58d0000 	str	r0, [sp]
    41b8:	e59f00c8 	ldr	r0, [pc, #200]	; 4288 <prog+0x4240>
    41bc:	e1a01827 	mov	r1, r7, lsr #16
    41c0:	e1a02006 	mov	r2, r6
    41c4:	e1a03825 	mov	r3, r5, lsr #16
    41c8:	eb002001 	bl	c1d4 <printf>
    41cc:	e1d403b4 	ldrh	r0, [r4, #52]
    41d0:	eb00106d 	bl	838c <htons>
    41d4:	e1a07000 	mov	r7, r0
    41d8:	e1d403b4 	ldrh	r0, [r4, #52]
    41dc:	eb00106a 	bl	838c <htons>
    41e0:	e1a06000 	mov	r6, r0
    41e4:	e1d403b6 	ldrh	r0, [r4, #54]
    41e8:	eb001067 	bl	838c <htons>
    41ec:	e1a05000 	mov	r5, r0
    41f0:	e1d403b6 	ldrh	r0, [r4, #54]
    41f4:	eb001064 	bl	838c <htons>
    41f8:	e1a07407 	mov	r7, r7, lsl #8
    41fc:	e20660ff 	and	r6, r6, #255	; 0xff
    4200:	e1a05405 	mov	r5, r5, lsl #8
    4204:	e20000ff 	and	r0, r0, #255	; 0xff
    4208:	e58d0000 	str	r0, [sp]
    420c:	e59f0078 	ldr	r0, [pc, #120]	; 428c <prog+0x4244>
    4210:	e1a01827 	mov	r1, r7, lsr #16
    4214:	e1a02006 	mov	r2, r6
    4218:	e1a03825 	mov	r3, r5, lsr #16
    421c:	eb001fec 	bl	c1d4 <printf>
    4220:	e1d402b4 	ldrh	r0, [r4, #36]
    4224:	eb001058 	bl	838c <htons>
    4228:	e1a05000 	mov	r5, r0
    422c:	e1d402b6 	ldrh	r0, [r4, #38]
    4230:	eb001055 	bl	838c <htons>
    4234:	e0801805 	add	r1, r0, r5, lsl #16
    4238:	e59f0050 	ldr	r0, [pc, #80]	; 4290 <prog+0x4248>
    423c:	eb001fe4 	bl	c1d4 <printf>
    4240:	e1a00004 	mov	r0, r4
    4244:	ebfffe5a 	bl	3bb4 <dhcpc_configured>
    4248:	e59f301c 	ldr	r3, [pc, #28]	; 426c <prog+0x4224>
    424c:	e3a02f4f 	mov	r2, #316	; 0x13c
    4250:	e1c320b0 	strh	r2, [r3]
    4254:	ea000002 	b	4264 <dhcpc_appcall+0x3f0>
    4258:	e59f300c 	ldr	r3, [pc, #12]	; 426c <prog+0x4224>
    425c:	e3a02000 	mov	r2, #0	; 0x0
    4260:	e1c320b0 	strh	r2, [r3]
    4264:	e28dd004 	add	sp, sp, #4	; 0x4
    4268:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
    426c:	40000864 	andmi	r0, r0, r4, ror #16
    4270:	40001844 	andmi	r1, r0, r4, asr #16
    4274:	40000870 	andmi	r0, r0, r0, ror r8
    4278:	4000183c 	andmi	r1, r0, ip, lsr r8
    427c:	40000884 	andmi	r0, r0, r4, lsl #17
    4280:	000148b8 	streqh	r4, [r1], -r8
    4284:	000148d4 	ldreqd	r4, [r1], -r4
    4288:	000148f0 	streqd	r4, [r1], -r0
    428c:	0001490c 	andeq	r4, r1, ip, lsl #18
    4290:	0001492c 	andeq	r4, r1, ip, lsr #18

00004294 <dhcpc_init>:
    4294:	e92d4010 	stmdb	sp!, {r4, lr}
    4298:	e24dd004 	sub	sp, sp, #4	; 0x4
    429c:	e59f4048 	ldr	r4, [pc, #72]	; 42ec <prog+0x42a4>
    42a0:	e5840018 	str	r0, [r4, #24]
    42a4:	e584101c 	str	r1, [r4, #28]
    42a8:	e3a03000 	mov	r3, #0	; 0x0
    42ac:	e5c43004 	strb	r3, [r4, #4]
    42b0:	e2433001 	sub	r3, r3, #1	; 0x1
    42b4:	e1cd30b0 	strh	r3, [sp]
    42b8:	e1cd30b2 	strh	r3, [sp, #2]
    42bc:	e1a0000d 	mov	r0, sp
    42c0:	e3a01c43 	mov	r1, #17152	; 0x4300
    42c4:	eb001674 	bl	9c9c <uip_udp_new>
    42c8:	e5840008 	str	r0, [r4, #8]
    42cc:	e3500000 	cmp	r0, #0	; 0x0
    42d0:	13a02b11 	movne	r2, #17408	; 0x4400
    42d4:	11c020b4 	strneh	r2, [r0, #4]
    42d8:	e59f300c 	ldr	r3, [pc, #12]	; 42ec <prog+0x42a4>
    42dc:	e3a02000 	mov	r2, #0	; 0x0
    42e0:	e1c320b0 	strh	r2, [r3]
    42e4:	e28dd004 	add	sp, sp, #4	; 0x4
    42e8:	e8bd8010 	ldmia	sp!, {r4, pc}
    42ec:	40000864 	andmi	r0, r0, r4, ror #16

000042f0 <httpd_init>:
 *             called at system boot-up.
 */
void
httpd_init(void)
{
    42f0:	e52de004 	str	lr, [sp, #-4]!
  uip_listen(HTONS(HTTP_PORT));
    42f4:	e3a00a05 	mov	r0, #20480	; 0x5000
    42f8:	eb000ff1 	bl	82c4 <uip_listen>
}
    42fc:	e49df004 	ldr	pc, [sp], #4

00004300 <send_headers>:
    4300:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
    4304:	e1a06000 	mov	r6, r0
    4308:	e1a05001 	mov	r5, r1
    430c:	e1d032bc 	ldrh	r3, [r0, #44]
    4310:	e35300cb 	cmp	r3, #203	; 0xcb
    4314:	0a000054 	beq	446c <send_headers+0x16c>
    4318:	8a00000c 	bhi	4350 <send_headers+0x50>
    431c:	e35300c2 	cmp	r3, #194	; 0xc2
    4320:	0a000015 	beq	437c <send_headers+0x7c>
    4324:	8a000004 	bhi	433c <send_headers+0x3c>
    4328:	e3530000 	cmp	r3, #0	; 0x0
    432c:	03a030c2 	moveq	r3, #194	; 0xc2
    4330:	01c032bc 	streqh	r3, [r0, #44]
    4334:	0a000010 	beq	437c <send_headers+0x7c>
    4338:	ea00009b 	b	45ac <send_headers+0x2ac>
    433c:	e35300c6 	cmp	r3, #198	; 0xc6
    4340:	0a00001d 	beq	43bc <send_headers+0xbc>
    4344:	e35300c9 	cmp	r3, #201	; 0xc9
    4348:	1a000097 	bne	45ac <send_headers+0x2ac>
    434c:	ea000033 	b	4420 <send_headers+0x120>
    4350:	e35300cf 	cmp	r3, #207	; 0xcf
    4354:	0a00006a 	beq	4504 <send_headers+0x204>
    4358:	8a000002 	bhi	4368 <send_headers+0x68>
    435c:	e35300cd 	cmp	r3, #205	; 0xcd
    4360:	1a000091 	bne	45ac <send_headers+0x2ac>
    4364:	ea000053 	b	44b8 <send_headers+0x1b8>
    4368:	e35300d1 	cmp	r3, #209	; 0xd1
    436c:	0a000079 	beq	4558 <send_headers+0x258>
    4370:	e35300d3 	cmp	r3, #211	; 0xd3
    4374:	1a00008c 	bne	45ac <send_headers+0x2ac>
    4378:	ea000081 	b	4584 <send_headers+0x284>
    437c:	e286402c 	add	r4, r6, #44	; 0x2c
    4380:	e1a00005 	mov	r0, r5
    4384:	eb0020fb 	bl	c778 <strlen>
    4388:	e1a02000 	mov	r2, r0
    438c:	e1a00004 	mov	r0, r4
    4390:	e1a01005 	mov	r1, r5
    4394:	eb000ef3 	bl	7f68 <psock_send>
    4398:	e3500000 	cmp	r0, #0	; 0x0
    439c:	0a000086 	beq	45bc <send_headers+0x2bc>
    43a0:	e286008e 	add	r0, r6, #142	; 0x8e
    43a4:	e3a0102e 	mov	r1, #46	; 0x2e
    43a8:	eb0021e1 	bl	cb34 <strrchr>
    43ac:	e2504000 	subs	r4, r0, #0	; 0x0
    43b0:	1a00000c 	bne	43e8 <send_headers+0xe8>
    43b4:	e3a030c6 	mov	r3, #198	; 0xc6
    43b8:	e1c632bc 	strh	r3, [r6, #44]
    43bc:	e286502c 	add	r5, r6, #44	; 0x2c
    43c0:	e59f41fc 	ldr	r4, [pc, #508]	; 45c4 <prog+0x457c>
    43c4:	e1a00004 	mov	r0, r4
    43c8:	eb0020ea 	bl	c778 <strlen>
    43cc:	e1a02000 	mov	r2, r0
    43d0:	e1a00005 	mov	r0, r5
    43d4:	e1a01004 	mov	r1, r4
    43d8:	eb000ee2 	bl	7f68 <psock_send>
    43dc:	e3500000 	cmp	r0, #0	; 0x0
    43e0:	1a000071 	bne	45ac <send_headers+0x2ac>
    43e4:	ea000074 	b	45bc <send_headers+0x2bc>
    43e8:	e59f01d8 	ldr	r0, [pc, #472]	; 45c8 <prog+0x4580>
    43ec:	e1a01004 	mov	r1, r4
    43f0:	e3a02005 	mov	r2, #5	; 0x5
    43f4:	eb002136 	bl	c8d4 <strncmp>
    43f8:	e3500000 	cmp	r0, #0	; 0x0
    43fc:	0a000005 	beq	4418 <send_headers+0x118>
    4400:	e59f01c4 	ldr	r0, [pc, #452]	; 45cc <prog+0x4584>
    4404:	e1a01004 	mov	r1, r4
    4408:	e3a02006 	mov	r2, #6	; 0x6
    440c:	eb002130 	bl	c8d4 <strncmp>
    4410:	e3500000 	cmp	r0, #0	; 0x0
    4414:	1a00000c 	bne	444c <send_headers+0x14c>
    4418:	e3a030c9 	mov	r3, #201	; 0xc9
    441c:	e1c632bc 	strh	r3, [r6, #44]
    4420:	e286502c 	add	r5, r6, #44	; 0x2c
    4424:	e59f41a4 	ldr	r4, [pc, #420]	; 45d0 <prog+0x4588>
    4428:	e1a00004 	mov	r0, r4
    442c:	eb0020d1 	bl	c778 <strlen>
    4430:	e1a02000 	mov	r2, r0
    4434:	e1a00005 	mov	r0, r5
    4438:	e1a01004 	mov	r1, r4
    443c:	eb000ec9 	bl	7f68 <psock_send>
    4440:	e3500000 	cmp	r0, #0	; 0x0
    4444:	1a000058 	bne	45ac <send_headers+0x2ac>
    4448:	ea00005b 	b	45bc <send_headers+0x2bc>
    444c:	e59f0180 	ldr	r0, [pc, #384]	; 45d4 <prog+0x458c>
    4450:	e1a01004 	mov	r1, r4
    4454:	e3a02004 	mov	r2, #4	; 0x4
    4458:	eb00211d 	bl	c8d4 <strncmp>
    445c:	e3500000 	cmp	r0, #0	; 0x0
    4460:	1a00000c 	bne	4498 <send_headers+0x198>
    4464:	e3a030cb 	mov	r3, #203	; 0xcb
    4468:	e1c632bc 	strh	r3, [r6, #44]
    446c:	e286502c 	add	r5, r6, #44	; 0x2c
    4470:	e59f4160 	ldr	r4, [pc, #352]	; 45d8 <prog+0x4590>
    4474:	e1a00004 	mov	r0, r4
    4478:	eb0020be 	bl	c778 <strlen>
    447c:	e1a02000 	mov	r2, r0
    4480:	e1a00005 	mov	r0, r5
    4484:	e1a01004 	mov	r1, r4
    4488:	eb000eb6 	bl	7f68 <psock_send>
    448c:	e3500000 	cmp	r0, #0	; 0x0
    4490:	1a000045 	bne	45ac <send_headers+0x2ac>
    4494:	ea000048 	b	45bc <send_headers+0x2bc>
    4498:	e59f013c 	ldr	r0, [pc, #316]	; 45dc <prog+0x4594>
    449c:	e1a01004 	mov	r1, r4
    44a0:	e3a02004 	mov	r2, #4	; 0x4
    44a4:	eb00210a 	bl	c8d4 <strncmp>
    44a8:	e3500000 	cmp	r0, #0	; 0x0
    44ac:	1a00000c 	bne	44e4 <send_headers+0x1e4>
    44b0:	e3a030cd 	mov	r3, #205	; 0xcd
    44b4:	e1c632bc 	strh	r3, [r6, #44]
    44b8:	e286502c 	add	r5, r6, #44	; 0x2c
    44bc:	e59f411c 	ldr	r4, [pc, #284]	; 45e0 <prog+0x4598>
    44c0:	e1a00004 	mov	r0, r4
    44c4:	eb0020ab 	bl	c778 <strlen>
    44c8:	e1a02000 	mov	r2, r0
    44cc:	e1a00005 	mov	r0, r5
    44d0:	e1a01004 	mov	r1, r4
    44d4:	eb000ea3 	bl	7f68 <psock_send>
    44d8:	e3500000 	cmp	r0, #0	; 0x0
    44dc:	1a000032 	bne	45ac <send_headers+0x2ac>
    44e0:	ea000035 	b	45bc <send_headers+0x2bc>
    44e4:	e59f00f8 	ldr	r0, [pc, #248]	; 45e4 <prog+0x459c>
    44e8:	e1a01004 	mov	r1, r4
    44ec:	e3a02004 	mov	r2, #4	; 0x4
    44f0:	eb0020f7 	bl	c8d4 <strncmp>
    44f4:	e3500000 	cmp	r0, #0	; 0x0
    44f8:	1a00000c 	bne	4530 <send_headers+0x230>
    44fc:	e3a030cf 	mov	r3, #207	; 0xcf
    4500:	e1c632bc 	strh	r3, [r6, #44]
    4504:	e286502c 	add	r5, r6, #44	; 0x2c
    4508:	e59f40d8 	ldr	r4, [pc, #216]	; 45e8 <prog+0x45a0>
    450c:	e1a00004 	mov	r0, r4
    4510:	eb002098 	bl	c778 <strlen>
    4514:	e1a02000 	mov	r2, r0
    4518:	e1a00005 	mov	r0, r5
    451c:	e1a01004 	mov	r1, r4
    4520:	eb000e90 	bl	7f68 <psock_send>
    4524:	e3500000 	cmp	r0, #0	; 0x0
    4528:	1a00001f 	bne	45ac <send_headers+0x2ac>
    452c:	ea000022 	b	45bc <send_headers+0x2bc>
    4530:	e59f00b4 	ldr	r0, [pc, #180]	; 45ec <prog+0x45a4>
    4534:	e1a01004 	mov	r1, r4
    4538:	e3a02004 	mov	r2, #4	; 0x4
    453c:	eb0020e4 	bl	c8d4 <strncmp>
    4540:	e3500000 	cmp	r0, #0	; 0x0
    4544:	13a030d3 	movne	r3, #211	; 0xd3
    4548:	11c632bc 	strneh	r3, [r6, #44]
    454c:	1a00000c 	bne	4584 <send_headers+0x284>
    4550:	e3a030d1 	mov	r3, #209	; 0xd1
    4554:	e1c632bc 	strh	r3, [r6, #44]
    4558:	e286502c 	add	r5, r6, #44	; 0x2c
    455c:	e59f408c 	ldr	r4, [pc, #140]	; 45f0 <prog+0x45a8>
    4560:	e1a00004 	mov	r0, r4
    4564:	eb002083 	bl	c778 <strlen>
    4568:	e1a02000 	mov	r2, r0
    456c:	e1a00005 	mov	r0, r5
    4570:	e1a01004 	mov	r1, r4
    4574:	eb000e7b 	bl	7f68 <psock_send>
    4578:	e3500000 	cmp	r0, #0	; 0x0
    457c:	1a00000a 	bne	45ac <send_headers+0x2ac>
    4580:	ea00000d 	b	45bc <send_headers+0x2bc>
    4584:	e286502c 	add	r5, r6, #44	; 0x2c
    4588:	e59f4064 	ldr	r4, [pc, #100]	; 45f4 <prog+0x45ac>
    458c:	e1a00004 	mov	r0, r4
    4590:	eb002078 	bl	c778 <strlen>
    4594:	e1a02000 	mov	r2, r0
    4598:	e1a00005 	mov	r0, r5
    459c:	e1a01004 	mov	r1, r4
    45a0:	eb000e70 	bl	7f68 <psock_send>
    45a4:	e3500000 	cmp	r0, #0	; 0x0
    45a8:	0a000003 	beq	45bc <send_headers+0x2bc>
    45ac:	e3a03000 	mov	r3, #0	; 0x0
    45b0:	e1c632bc 	strh	r3, [r6, #44]
    45b4:	e3a00002 	mov	r0, #2	; 0x2
    45b8:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
    45bc:	e3a00000 	mov	r0, #0	; 0x0
    45c0:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
    45c4:	000141f7 	streqd	r4, [r1], -r7
    45c8:	00014222 	andeq	r4, r1, r2, lsr #4
    45cc:	00014228 	andeq	r4, r1, r8, lsr #4
    45d0:	0001414f 	andeq	r4, r1, pc, asr #2
    45d4:	00014234 	andeq	r4, r1, r4, lsr r2
    45d8:	0001416b 	andeq	r4, r1, fp, ror #2
    45dc:	00014239 	andeq	r4, r1, r9, lsr r2
    45e0:	000141a2 	andeq	r4, r1, r2, lsr #3
    45e4:	0001423e 	andeq	r4, r1, lr, lsr r2
    45e8:	000141be 	streqh	r4, [r1], -lr
    45ec:	00014243 	andeq	r4, r1, r3, asr #4
    45f0:	000141da 	ldreqd	r4, [r1], -sl
    45f4:	00014132 	andeq	r4, r1, r2, lsr r1

000045f8 <send_file>:
    45f8:	e92d4010 	stmdb	sp!, {r4, lr}
    45fc:	e1a04000 	mov	r4, r0
    4600:	e1d032bc 	ldrh	r3, [r0, #44]
    4604:	e3530000 	cmp	r3, #0	; 0x0
    4608:	0a000002 	beq	4618 <send_file+0x20>
    460c:	e3530064 	cmp	r3, #100	; 0x64
    4610:	1a000012 	bne	4660 <send_file+0x68>
    4614:	ea000001 	b	4620 <send_file+0x28>
    4618:	e3a03064 	mov	r3, #100	; 0x64
    461c:	e1c432bc 	strh	r3, [r4, #44]
    4620:	e284002c 	add	r0, r4, #44	; 0x2c
    4624:	e59f1044 	ldr	r1, [pc, #68]	; 4670 <prog+0x4628>
    4628:	e1a02004 	mov	r2, r4
    462c:	eb000e1c 	bl	7ea4 <psock_generator_send>
    4630:	e3500000 	cmp	r0, #0	; 0x0
    4634:	08bd8010 	ldmeqia	sp!, {r4, pc}
    4638:	e59410ac 	ldr	r1, [r4, #172]
    463c:	e28430a8 	add	r3, r4, #168	; 0xa8
    4640:	e893000c 	ldmia	r3, {r2, r3}
    4644:	e0422003 	sub	r2, r2, r3
    4648:	e58420a8 	str	r2, [r4, #168]
    464c:	e59430a4 	ldr	r3, [r4, #164]
    4650:	e0833001 	add	r3, r3, r1
    4654:	e58430a4 	str	r3, [r4, #164]
    4658:	e3520000 	cmp	r2, #0	; 0x0
    465c:	caffffed 	bgt	4618 <send_file+0x20>
    4660:	e3a03000 	mov	r3, #0	; 0x0
    4664:	e1c432bc 	strh	r3, [r4, #44]
    4668:	e3a00002 	mov	r0, #2	; 0x2
    466c:	e8bd8010 	ldmia	sp!, {r4, pc}
    4670:	00004c00 	andeq	r4, r0, r0, lsl #24

00004674 <handle_connection>:
    4674:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
    4678:	e1a05000 	mov	r5, r0
    467c:	e1d020b4 	ldrh	r2, [r0, #4]
    4680:	e35200fd 	cmp	r2, #253	; 0xfd
    4684:	0a00000c 	beq	46bc <handle_connection+0x48>
    4688:	8a000004 	bhi	46a0 <handle_connection+0x2c>
    468c:	e3520000 	cmp	r2, #0	; 0x0
    4690:	03a030fd 	moveq	r3, #253	; 0xfd
    4694:	01c030b4 	streqh	r3, [r0, #4]
    4698:	0a000007 	beq	46bc <handle_connection+0x48>
    469c:	ea000055 	b	47f8 <handle_connection+0x184>
    46a0:	e3a03c01 	mov	r3, #256	; 0x100
    46a4:	e2833003 	add	r3, r3, #3	; 0x3
    46a8:	e1520003 	cmp	r2, r3
    46ac:	0a000016 	beq	470c <handle_connection+0x98>
    46b0:	e3520f47 	cmp	r2, #284	; 0x11c
    46b4:	1a00004f 	bne	47f8 <handle_connection+0x184>
    46b8:	ea00003d 	b	47b4 <handle_connection+0x140>
    46bc:	e2850004 	add	r0, r5, #4	; 0x4
    46c0:	e3a01020 	mov	r1, #32	; 0x20
    46c4:	eb000cfa 	bl	7ab4 <psock_readto>
    46c8:	e3500000 	cmp	r0, #0	; 0x0
    46cc:	0a00004b 	beq	4800 <handle_connection+0x18c>
    46d0:	e285005c 	add	r0, r5, #92	; 0x5c
    46d4:	e59f143c 	ldr	r1, [pc, #1084]	; 4b18 <prog+0x4ad0>
    46d8:	e3a02004 	mov	r2, #4	; 0x4
    46dc:	eb00207c 	bl	c8d4 <strncmp>
    46e0:	e3500000 	cmp	r0, #0	; 0x0
    46e4:	03a03c01 	moveq	r3, #256	; 0x100
    46e8:	02833003 	addeq	r3, r3, #3	; 0x3
    46ec:	01c530b4 	streqh	r3, [r5, #4]
    46f0:	0a000005 	beq	470c <handle_connection+0x98>
    46f4:	e3a02010 	mov	r2, #16	; 0x10
    46f8:	e59f341c 	ldr	r3, [pc, #1052]	; 4b1c <prog+0x4ad4>
    46fc:	e5c32000 	strb	r2, [r3]
    4700:	e3a03000 	mov	r3, #0	; 0x0
    4704:	e1c530b4 	strh	r3, [r5, #4]
    4708:	ea00003c 	b	4800 <handle_connection+0x18c>
    470c:	e2856004 	add	r6, r5, #4	; 0x4
    4710:	e1a00006 	mov	r0, r6
    4714:	e3a01020 	mov	r1, #32	; 0x20
    4718:	eb000ce5 	bl	7ab4 <psock_readto>
    471c:	e3500000 	cmp	r0, #0	; 0x0
    4720:	0a000036 	beq	4800 <handle_connection+0x18c>
    4724:	e5d5305c 	ldrb	r3, [r5, #92]
    4728:	e353002f 	cmp	r3, #47	; 0x2f
    472c:	0a000005 	beq	4748 <handle_connection+0xd4>
    4730:	e3a02010 	mov	r2, #16	; 0x10
    4734:	e59f33e0 	ldr	r3, [pc, #992]	; 4b1c <prog+0x4ad4>
    4738:	e5c32000 	strb	r2, [r3]
    473c:	e3a03000 	mov	r3, #0	; 0x0
    4740:	e1c530b4 	strh	r3, [r5, #4]
    4744:	ea00002d 	b	4800 <handle_connection+0x18c>
    4748:	e5d5305d 	ldrb	r3, [r5, #93]
    474c:	e3530020 	cmp	r3, #32	; 0x20
    4750:	1a000004 	bne	4768 <handle_connection+0xf4>
    4754:	e285008e 	add	r0, r5, #142	; 0x8e
    4758:	e59f13c0 	ldr	r1, [pc, #960]	; 4b20 <prog+0x4ad8>
    475c:	e3a02014 	mov	r2, #20	; 0x14
    4760:	eb0020ae 	bl	ca20 <strncpy>
    4764:	ea00000e 	b	47a4 <handle_connection+0x130>
    4768:	e1a00006 	mov	r0, r6
    476c:	eb000cba 	bl	7a5c <psock_datalen>
    4770:	e0800005 	add	r0, r0, r5
    4774:	e3a03000 	mov	r3, #0	; 0x0
    4778:	e5c0305b 	strb	r3, [r0, #91]
    477c:	e285405c 	add	r4, r5, #92	; 0x5c
    4780:	e1a00006 	mov	r0, r6
    4784:	eb000cb4 	bl	7a5c <psock_datalen>
    4788:	e1a01000 	mov	r1, r0
    478c:	e1a00004 	mov	r0, r4
    4790:	eb0001af 	bl	4e54 <cgiProcessFormInput>
    4794:	e285008e 	add	r0, r5, #142	; 0x8e
    4798:	e1a01004 	mov	r1, r4
    479c:	e3a02014 	mov	r2, #20	; 0x14
    47a0:	eb00209e 	bl	ca20 <strncpy>
    47a4:	e3a03001 	mov	r3, #1	; 0x1
    47a8:	e5c530a2 	strb	r3, [r5, #162]
    47ac:	e3a03f47 	mov	r3, #284	; 0x11c
    47b0:	e1c530b4 	strh	r3, [r5, #4]
    47b4:	e2854004 	add	r4, r5, #4	; 0x4
    47b8:	e1a00004 	mov	r0, r4
    47bc:	e3a0100a 	mov	r1, #10	; 0xa
    47c0:	eb000cbb 	bl	7ab4 <psock_readto>
    47c4:	e3500000 	cmp	r0, #0	; 0x0
    47c8:	0a00000c 	beq	4800 <handle_connection+0x18c>
    47cc:	e285005c 	add	r0, r5, #92	; 0x5c
    47d0:	e59f134c 	ldr	r1, [pc, #844]	; 4b24 <prog+0x4adc>
    47d4:	e3a02008 	mov	r2, #8	; 0x8
    47d8:	eb00203d 	bl	c8d4 <strncmp>
    47dc:	e2506000 	subs	r6, r0, #0	; 0x0
    47e0:	1afffff1 	bne	47ac <handle_connection+0x138>
    47e4:	e1a00004 	mov	r0, r4
    47e8:	eb000c9b 	bl	7a5c <psock_datalen>
    47ec:	e0800005 	add	r0, r0, r5
    47f0:	e5c0605a 	strb	r6, [r0, #90]
    47f4:	eaffffec 	b	47ac <handle_connection+0x138>
    47f8:	e3a03000 	mov	r3, #0	; 0x0
    47fc:	e1c530b4 	strh	r3, [r5, #4]
    4800:	e5d530a2 	ldrb	r3, [r5, #162]
    4804:	e3530001 	cmp	r3, #1	; 0x1
    4808:	18bd80f0 	ldmneia	sp!, {r4, r5, r6, r7, pc}
    480c:	e1d535b4 	ldrh	r3, [r5, #84]
    4810:	e35300e6 	cmp	r3, #230	; 0xe6
    4814:	0a000025 	beq	48b0 <handle_connection+0x23c>
    4818:	8a000004 	bhi	4830 <handle_connection+0x1bc>
    481c:	e3530000 	cmp	r3, #0	; 0x0
    4820:	0a000009 	beq	484c <handle_connection+0x1d8>
    4824:	e35300e4 	cmp	r3, #228	; 0xe4
    4828:	1a0000b7 	bne	4b0c <handle_connection+0x498>
    482c:	ea000018 	b	4894 <handle_connection+0x220>
    4830:	e35300ee 	cmp	r3, #238	; 0xee
    4834:	0a000034 	beq	490c <handle_connection+0x298>
    4838:	e35300f1 	cmp	r3, #241	; 0xf1
    483c:	0a0000ab 	beq	4af0 <handle_connection+0x47c>
    4840:	e35300ea 	cmp	r3, #234	; 0xea
    4844:	1a0000b0 	bne	4b0c <handle_connection+0x498>
    4848:	ea00001d 	b	48c4 <handle_connection+0x250>
    484c:	e285708e 	add	r7, r5, #142	; 0x8e
    4850:	e28560a4 	add	r6, r5, #164	; 0xa4
    4854:	e1a00007 	mov	r0, r7
    4858:	e1a01006 	mov	r1, r6
    485c:	eb0001f4 	bl	5034 <httpd_fs_open>
    4860:	e3500000 	cmp	r0, #0	; 0x0
    4864:	13a030ea 	movne	r3, #234	; 0xea
    4868:	11c535b4 	strneh	r3, [r5, #84]
    486c:	1a000014 	bne	48c4 <handle_connection+0x250>
    4870:	e59f42b0 	ldr	r4, [pc, #688]	; 4b28 <prog+0x4ae0>
    4874:	e1a00004 	mov	r0, r4
    4878:	e1a01006 	mov	r1, r6
    487c:	eb0001ec 	bl	5034 <httpd_fs_open>
    4880:	e1a00007 	mov	r0, r7
    4884:	e1a01004 	mov	r1, r4
    4888:	eb001f93 	bl	c6dc <strcpy>
    488c:	e3a030e4 	mov	r3, #228	; 0xe4
    4890:	e1c535b4 	strh	r3, [r5, #84]
    4894:	e1a00005 	mov	r0, r5
    4898:	e59f128c 	ldr	r1, [pc, #652]	; 4b2c <prog+0x4ae4>
    489c:	ebfffe97 	bl	4300 <send_headers>
    48a0:	e3500000 	cmp	r0, #0	; 0x0
    48a4:	08bd80f0 	ldmeqia	sp!, {r4, r5, r6, r7, pc}
    48a8:	e3a030e6 	mov	r3, #230	; 0xe6
    48ac:	e1c535b4 	strh	r3, [r5, #84]
    48b0:	e1a00005 	mov	r0, r5
    48b4:	ebffff4f 	bl	45f8 <send_file>
    48b8:	e3500000 	cmp	r0, #0	; 0x0
    48bc:	08bd80f0 	ldmeqia	sp!, {r4, r5, r6, r7, pc}
    48c0:	ea00008e 	b	4b00 <handle_connection+0x48c>
    48c4:	e1a00005 	mov	r0, r5
    48c8:	e59f1260 	ldr	r1, [pc, #608]	; 4b30 <prog+0x4ae8>
    48cc:	ebfffe8b 	bl	4300 <send_headers>
    48d0:	e3500000 	cmp	r0, #0	; 0x0
    48d4:	08bd80f0 	ldmeqia	sp!, {r4, r5, r6, r7, pc}
    48d8:	e285008e 	add	r0, r5, #142	; 0x8e
    48dc:	e3a0102e 	mov	r1, #46	; 0x2e
    48e0:	eb001f06 	bl	c500 <strchr>
    48e4:	e3500000 	cmp	r0, #0	; 0x0
    48e8:	0a00007e 	beq	4ae8 <handle_connection+0x474>
    48ec:	e59f1240 	ldr	r1, [pc, #576]	; 4b34 <prog+0x4aec>
    48f0:	e3a02006 	mov	r2, #6	; 0x6
    48f4:	eb001ff6 	bl	c8d4 <strncmp>
    48f8:	e3500000 	cmp	r0, #0	; 0x0
    48fc:	1a000079 	bne	4ae8 <handle_connection+0x474>
    4900:	e1c505b8 	strh	r0, [r5, #88]
    4904:	e3a030ee 	mov	r3, #238	; 0xee
    4908:	e1c535b4 	strh	r3, [r5, #84]
    490c:	e1d535b8 	ldrh	r3, [r5, #88]
    4910:	e3530090 	cmp	r3, #144	; 0x90
    4914:	0a00001e 	beq	4994 <handle_connection+0x320>
    4918:	8a000002 	bhi	4928 <handle_connection+0x2b4>
    491c:	e3530000 	cmp	r3, #0	; 0x0
    4920:	0a00006a 	beq	4ad0 <handle_connection+0x45c>
    4924:	ea00006c 	b	4adc <handle_connection+0x468>
    4928:	e3530093 	cmp	r3, #147	; 0x93
    492c:	0a00001d 	beq	49a8 <handle_connection+0x334>
    4930:	e35300b1 	cmp	r3, #177	; 0xb1
    4934:	1a000068 	bne	4adc <handle_connection+0x468>
    4938:	ea00004e 	b	4a78 <handle_connection+0x404>
    493c:	e59500a4 	ldr	r0, [r5, #164]
    4940:	e5d03000 	ldrb	r3, [r0]
    4944:	e3530025 	cmp	r3, #37	; 0x25
    4948:	1a00002d 	bne	4a04 <handle_connection+0x390>
    494c:	e5d03001 	ldrb	r3, [r0, #1]
    4950:	e3530021 	cmp	r3, #33	; 0x21
    4954:	1a00002a 	bne	4a04 <handle_connection+0x390>
    4958:	e2803003 	add	r3, r0, #3	; 0x3
    495c:	e58530b0 	str	r3, [r5, #176]
    4960:	e59520a8 	ldr	r2, [r5, #168]
    4964:	e2422003 	sub	r2, r2, #3	; 0x3
    4968:	e58520b4 	str	r2, [r5, #180]
    496c:	e5533001 	ldrb	r3, [r3, #-1]
    4970:	e353003a 	cmp	r3, #58	; 0x3a
    4974:	13a03093 	movne	r3, #147	; 0x93
    4978:	11c535b8 	strneh	r3, [r5, #88]
    497c:	1a000009 	bne	49a8 <handle_connection+0x334>
    4980:	e2800004 	add	r0, r0, #4	; 0x4
    4984:	e28510a4 	add	r1, r5, #164	; 0xa4
    4988:	eb0001a9 	bl	5034 <httpd_fs_open>
    498c:	e3a03090 	mov	r3, #144	; 0x90
    4990:	e1c535b8 	strh	r3, [r5, #88]
    4994:	e1a00005 	mov	r0, r5
    4998:	ebffff16 	bl	45f8 <send_file>
    499c:	e3500000 	cmp	r0, #0	; 0x0
    49a0:	08bd80f0 	ldmeqia	sp!, {r4, r5, r6, r7, pc}
    49a4:	ea000008 	b	49cc <handle_connection+0x358>
    49a8:	e59500b0 	ldr	r0, [r5, #176]
    49ac:	eb0000bd 	bl	4ca8 <httpd_cgi>
    49b0:	e1a03000 	mov	r3, r0
    49b4:	e1a00005 	mov	r0, r5
    49b8:	e59510b0 	ldr	r1, [r5, #176]
    49bc:	e1a0e00f 	mov	lr, pc
    49c0:	e12fff13 	bx	r3
    49c4:	e3500000 	cmp	r0, #0	; 0x0
    49c8:	08bd80f0 	ldmeqia	sp!, {r4, r5, r6, r7, pc}
    49cc:	e59540b0 	ldr	r4, [r5, #176]
    49d0:	e1a00004 	mov	r0, r4
    49d4:	e3a0100a 	mov	r1, #10	; 0xa
    49d8:	eb001ec8 	bl	c500 <strchr>
    49dc:	e2800001 	add	r0, r0, #1	; 0x1
    49e0:	e0644000 	rsb	r4, r4, r0
    49e4:	e1a04804 	mov	r4, r4, lsl #16
    49e8:	e59530b4 	ldr	r3, [r5, #180]
    49ec:	e0433824 	sub	r3, r3, r4, lsr #16
    49f0:	e58530b4 	str	r3, [r5, #180]
    49f4:	e58500b0 	str	r0, [r5, #176]
    49f8:	e58500a4 	str	r0, [r5, #164]
    49fc:	e58530a8 	str	r3, [r5, #168]
    4a00:	ea000032 	b	4ad0 <handle_connection+0x45c>
    4a04:	e59f312c 	ldr	r3, [pc, #300]	; 4b38 <prog+0x4af0>
    4a08:	e5933000 	ldr	r3, [r3]
    4a0c:	e1d331b2 	ldrh	r3, [r3, #18]
    4a10:	e1530002 	cmp	r3, r2
    4a14:	d58530ac 	strle	r3, [r5, #172]
    4a18:	c58520ac 	strgt	r2, [r5, #172]
    4a1c:	e59540a4 	ldr	r4, [r5, #164]
    4a20:	e5d41000 	ldrb	r1, [r4]
    4a24:	e3510025 	cmp	r1, #37	; 0x25
    4a28:	1a000002 	bne	4a38 <handle_connection+0x3c4>
    4a2c:	e2840001 	add	r0, r4, #1	; 0x1
    4a30:	eb001eb2 	bl	c500 <strchr>
    4a34:	ea000002 	b	4a44 <handle_connection+0x3d0>
    4a38:	e1a00004 	mov	r0, r4
    4a3c:	e3a01025 	mov	r1, #37	; 0x25
    4a40:	eb001eae 	bl	c500 <strchr>
    4a44:	e3500000 	cmp	r0, #0	; 0x0
    4a48:	0a000008 	beq	4a70 <handle_connection+0x3fc>
    4a4c:	e1500004 	cmp	r0, r4
    4a50:	0a000006 	beq	4a70 <handle_connection+0x3fc>
    4a54:	e0643000 	rsb	r3, r4, r0
    4a58:	e58530ac 	str	r3, [r5, #172]
    4a5c:	e59f20d4 	ldr	r2, [pc, #212]	; 4b38 <prog+0x4af0>
    4a60:	e5922000 	ldr	r2, [r2]
    4a64:	e1d221b2 	ldrh	r2, [r2, #18]
    4a68:	e1530002 	cmp	r3, r2
    4a6c:	a58520ac 	strge	r2, [r5, #172]
    4a70:	e3a030b1 	mov	r3, #177	; 0xb1
    4a74:	e1c535b8 	strh	r3, [r5, #88]
    4a78:	e1d532bc 	ldrh	r3, [r5, #44]
    4a7c:	e3530000 	cmp	r3, #0	; 0x0
    4a80:	03a03071 	moveq	r3, #113	; 0x71
    4a84:	01c532bc 	streqh	r3, [r5, #44]
    4a88:	0a000001 	beq	4a94 <handle_connection+0x420>
    4a8c:	e3530071 	cmp	r3, #113	; 0x71
    4a90:	1a000005 	bne	4aac <handle_connection+0x438>
    4a94:	e285002c 	add	r0, r5, #44	; 0x2c
    4a98:	e59510a4 	ldr	r1, [r5, #164]
    4a9c:	e59520ac 	ldr	r2, [r5, #172]
    4aa0:	eb000d30 	bl	7f68 <psock_send>
    4aa4:	e3500000 	cmp	r0, #0	; 0x0
    4aa8:	08bd80f0 	ldmeqia	sp!, {r4, r5, r6, r7, pc}
    4aac:	e3a03000 	mov	r3, #0	; 0x0
    4ab0:	e1c532bc 	strh	r3, [r5, #44]
    4ab4:	e59530a4 	ldr	r3, [r5, #164]
    4ab8:	e59520ac 	ldr	r2, [r5, #172]
    4abc:	e0833002 	add	r3, r3, r2
    4ac0:	e58530a4 	str	r3, [r5, #164]
    4ac4:	e59530a8 	ldr	r3, [r5, #168]
    4ac8:	e0623003 	rsb	r3, r2, r3
    4acc:	e58530a8 	str	r3, [r5, #168]
    4ad0:	e59520a8 	ldr	r2, [r5, #168]
    4ad4:	e3520000 	cmp	r2, #0	; 0x0
    4ad8:	caffff97 	bgt	493c <handle_connection+0x2c8>
    4adc:	e3a03000 	mov	r3, #0	; 0x0
    4ae0:	e1c535b8 	strh	r3, [r5, #88]
    4ae4:	ea000005 	b	4b00 <handle_connection+0x48c>
    4ae8:	e3a030f1 	mov	r3, #241	; 0xf1
    4aec:	e1c535b4 	strh	r3, [r5, #84]
    4af0:	e1a00005 	mov	r0, r5
    4af4:	ebfffebf 	bl	45f8 <send_file>
    4af8:	e3500000 	cmp	r0, #0	; 0x0
    4afc:	08bd80f0 	ldmeqia	sp!, {r4, r5, r6, r7, pc}
    4b00:	e3a02010 	mov	r2, #16	; 0x10
    4b04:	e59f3010 	ldr	r3, [pc, #16]	; 4b1c <prog+0x4ad4>
    4b08:	e5c32000 	strb	r2, [r3]
    4b0c:	e3a03000 	mov	r3, #0	; 0x0
    4b10:	e1c535b4 	strh	r3, [r5, #84]
    4b14:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
    4b18:	0001401f 	andeq	r4, r1, pc, lsl r0
    4b1c:	4000183c 	andmi	r1, r0, ip, lsr r8
    4b20:	00014064 	andeq	r4, r1, r4, rrx
    4b24:	0001407a 	andeq	r4, r1, sl, ror r0
    4b28:	00014070 	andeq	r4, r1, r0, ror r0
    4b2c:	000140d7 	ldreqd	r4, [r1], -r7
    4b30:	00014083 	andeq	r4, r1, r3, lsl #1
    4b34:	00014228 	andeq	r4, r1, r8, lsr #4
    4b38:	40001848 	andmi	r1, r0, r8, asr #16

00004b3c <httpd_appcall>:
    4b3c:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
    4b40:	e59f30b0 	ldr	r3, [pc, #176]	; 4bf8 <prog+0x4bb0>
    4b44:	e5936000 	ldr	r6, [r3]
    4b48:	e59f30ac 	ldr	r3, [pc, #172]	; 4bfc <prog+0x4bb4>
    4b4c:	e5d33000 	ldrb	r3, [r3]
    4b50:	e2137030 	ands	r7, r3, #48	; 0x30
    4b54:	18bd80f0 	ldmneia	sp!, {r4, r5, r6, r7, pc}
    4b58:	e3130080 	tst	r3, #128	; 0x80
    4b5c:	18bd80f0 	ldmneia	sp!, {r4, r5, r6, r7, pc}
    4b60:	e286501c 	add	r5, r6, #28	; 0x1c
    4b64:	e3130040 	tst	r3, #64	; 0x40
    4b68:	0a00000e 	beq	4ba8 <httpd_appcall+0x6c>
    4b6c:	e2864078 	add	r4, r6, #120	; 0x78
    4b70:	e2860020 	add	r0, r6, #32	; 0x20
    4b74:	e1a01004 	mov	r1, r4
    4b78:	e3a02031 	mov	r2, #49	; 0x31
    4b7c:	eb000c2f 	bl	7c40 <psock_init>
    4b80:	e2860048 	add	r0, r6, #72	; 0x48
    4b84:	e1a01004 	mov	r1, r4
    4b88:	e3a02031 	mov	r2, #49	; 0x31
    4b8c:	eb000c2b 	bl	7c40 <psock_init>
    4b90:	e1c575b4 	strh	r7, [r5, #84]
    4b94:	e5c570a2 	strb	r7, [r5, #162]
    4b98:	e5c6701c 	strb	r7, [r6, #28]
    4b9c:	e1a00005 	mov	r0, r5
    4ba0:	ebfffeb3 	bl	4674 <handle_connection>
    4ba4:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
    4ba8:	e3550000 	cmp	r5, #0	; 0x0
    4bac:	03a02020 	moveq	r2, #32	; 0x20
    4bb0:	059f3044 	ldreq	r3, [pc, #68]	; 4bfc <prog+0x4bb4>
    4bb4:	05c32000 	streqb	r2, [r3]
    4bb8:	08bd80f0 	ldmeqia	sp!, {r4, r5, r6, r7, pc}
    4bbc:	e3130008 	tst	r3, #8	; 0x8
    4bc0:	03a03000 	moveq	r3, #0	; 0x0
    4bc4:	05c53000 	streqb	r3, [r5]
    4bc8:	0a000007 	beq	4bec <httpd_appcall+0xb0>
    4bcc:	e5d53000 	ldrb	r3, [r5]
    4bd0:	e2833001 	add	r3, r3, #1	; 0x1
    4bd4:	e20330ff 	and	r3, r3, #255	; 0xff
    4bd8:	e5c53000 	strb	r3, [r5]
    4bdc:	e3530013 	cmp	r3, #19	; 0x13
    4be0:	83a02020 	movhi	r2, #32	; 0x20
    4be4:	859f3010 	ldrhi	r3, [pc, #16]	; 4bfc <prog+0x4bb4>
    4be8:	85c32000 	strhib	r2, [r3]
    4bec:	e1a00005 	mov	r0, r5
    4bf0:	ebfffe9f 	bl	4674 <handle_connection>
    4bf4:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
    4bf8:	40001848 	andmi	r1, r0, r8, asr #16
    4bfc:	4000183c 	andmi	r1, r0, ip, lsr r8

00004c00 <generate_part_of_file>:
    4c00:	e92d4010 	stmdb	sp!, {r4, lr}
    4c04:	e1a04000 	mov	r4, r0
    4c08:	e59020a8 	ldr	r2, [r0, #168]
    4c0c:	e59f3034 	ldr	r3, [pc, #52]	; 4c48 <prog+0x4c00>
    4c10:	e5933000 	ldr	r3, [r3]
    4c14:	e1d331b2 	ldrh	r3, [r3, #18]
    4c18:	e1530002 	cmp	r3, r2
    4c1c:	d58030ac 	strle	r3, [r0, #172]
    4c20:	c58020ac 	strgt	r2, [r0, #172]
    4c24:	e59f3020 	ldr	r3, [pc, #32]	; 4c4c <prog+0x4c04>
    4c28:	e5930000 	ldr	r0, [r3]
    4c2c:	e59410a4 	ldr	r1, [r4, #164]
    4c30:	e59420ac 	ldr	r2, [r4, #172]
    4c34:	eb001d16 	bl	c094 <memcpy>
    4c38:	e59400ac 	ldr	r0, [r4, #172]
    4c3c:	e1a00800 	mov	r0, r0, lsl #16
    4c40:	e1a00820 	mov	r0, r0, lsr #16
    4c44:	e8bd8010 	ldmia	sp!, {r4, pc}
    4c48:	40001848 	andmi	r1, r0, r8, asr #16
    4c4c:	40001844 	andmi	r1, r0, r4, asr #16

00004c50 <nullfunction>:
static
PT_THREAD(nullfunction(struct httpd_state *s, char *ptr))
{
  PSOCK_BEGIN(&s->sout);
  PSOCK_END(&s->sout);
    4c50:	e3a03000 	mov	r3, #0	; 0x0
    4c54:	e1c032bc 	strh	r3, [r0, #44]
}
    4c58:	e3a00002 	mov	r0, #2	; 0x2
    4c5c:	e12fff1e 	bx	lr

00004c60 <cgi_gettemp>:
/*---------------------------------------------------------------------------*/
httpd_cgifunction
httpd_cgi(char *name)
{
  const struct httpd_cgi_call **f;

  /* Find the matching name in the table, return the function. */
  for(f = calls; *f != NULL; ++f) {
    if(strncmp((*f)->name, name, strlen((*f)->name)) == 0) {
      return (*f)->function;
    }
  }
  return nullfunction;
}
extern unsigned char temp0, temp1, setpoint, ac_auto_on, ac_modo;

static unsigned short cgi_gettemp( void *arg )
{
    4c60:	e92d4010 	stmdb	sp!, {r4, lr}
	sprintf( uip_appdata, "%3d,%02d", (int)temp1, (int)temp0);
    4c64:	e59f402c 	ldr	r4, [pc, #44]	; 4c98 <prog+0x4c50>
    4c68:	e5940000 	ldr	r0, [r4]
    4c6c:	e59f1028 	ldr	r1, [pc, #40]	; 4c9c <prog+0x4c54>
    4c70:	e59f3028 	ldr	r3, [pc, #40]	; 4ca0 <prog+0x4c58>
    4c74:	e5d32000 	ldrb	r2, [r3]
    4c78:	e59f3024 	ldr	r3, [pc, #36]	; 4ca4 <prog+0x4c5c>
    4c7c:	e5d33000 	ldrb	r3, [r3]
    4c80:	ebfff351 	bl	19cc <sprintf>

	return strlen( uip_appdata );
    4c84:	e5940000 	ldr	r0, [r4]
    4c88:	eb001eba 	bl	c778 <strlen>
    4c8c:	e1a00800 	mov	r0, r0, lsl #16
}
    4c90:	e1a00820 	mov	r0, r0, lsr #16
    4c94:	e8bd8010 	ldmia	sp!, {r4, pc}
    4c98:	40001844 	andmi	r1, r0, r4, asr #16
    4c9c:	0001494c 	andeq	r4, r1, ip, asr #18
    4ca0:	40001694 	mulmi	r0, r4, r6
    4ca4:	40001695 	mulmi	r0, r5, r6

00004ca8 <httpd_cgi>:
    4ca8:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
    4cac:	e1a07000 	mov	r7, r0
    4cb0:	e59f304c 	ldr	r3, [pc, #76]	; 4d04 <prog+0x4cbc>
    4cb4:	e5935000 	ldr	r5, [r3]
    4cb8:	e3550000 	cmp	r5, #0	; 0x0
    4cbc:	0a00000e 	beq	4cfc <httpd_cgi+0x54>
    4cc0:	e1a06003 	mov	r6, r3
    4cc4:	e5954000 	ldr	r4, [r5]
    4cc8:	e1a00004 	mov	r0, r4
    4ccc:	eb001ea9 	bl	c778 <strlen>
    4cd0:	e1a02000 	mov	r2, r0
    4cd4:	e1a00004 	mov	r0, r4
    4cd8:	e1a01007 	mov	r1, r7
    4cdc:	eb001efc 	bl	c8d4 <strncmp>
    4ce0:	e3500000 	cmp	r0, #0	; 0x0
    4ce4:	1a000001 	bne	4cf0 <httpd_cgi+0x48>
    4ce8:	e5950004 	ldr	r0, [r5, #4]
    4cec:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
    4cf0:	e5b65004 	ldr	r5, [r6, #4]!
    4cf4:	e3550000 	cmp	r5, #0	; 0x0
    4cf8:	1afffff1 	bne	4cc4 <httpd_cgi+0x1c>
    4cfc:	e59f0004 	ldr	r0, [pc, #4]	; 4d08 <prog+0x4cc0>
    4d00:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
    4d04:	40000000 	andmi	r0, r0, r0
    4d08:	00004c50 	andeq	r4, r0, r0, asr ip

00004d0c <cgitemperature>:

static PT_THREAD(cgitemperature(struct httpd_state *s, char *ptr))
{
    4d0c:	e92d4010 	stmdb	sp!, {r4, lr}
    4d10:	e1a04000 	mov	r4, r0
  PSOCK_BEGIN(&s->sout);
    4d14:	e1d032bc 	ldrh	r3, [r0, #44]
    4d18:	e3530000 	cmp	r3, #0	; 0x0
  PSOCK_GENERATOR_SEND(&s->sout, cgi_gettemp, NULL);
    4d1c:	03a03064 	moveq	r3, #100	; 0x64
    4d20:	01c032bc 	streqh	r3, [r0, #44]
    4d24:	0a000001 	beq	4d30 <cgitemperature+0x24>
    4d28:	e3530064 	cmp	r3, #100	; 0x64
    4d2c:	1a000005 	bne	4d48 <cgitemperature+0x3c>
    4d30:	e284002c 	add	r0, r4, #44	; 0x2c
    4d34:	e59f101c 	ldr	r1, [pc, #28]	; 4d58 <prog+0x4d10>
    4d38:	e3a02000 	mov	r2, #0	; 0x0
    4d3c:	eb000c58 	bl	7ea4 <psock_generator_send>
    4d40:	e3500000 	cmp	r0, #0	; 0x0
    4d44:	08bd8010 	ldmeqia	sp!, {r4, pc}
  PSOCK_END(&s->sout);
    4d48:	e3a03000 	mov	r3, #0	; 0x0
    4d4c:	e1c432bc 	strh	r3, [r4, #44]
    4d50:	e3a00002 	mov	r0, #2	; 0x2
}
    4d54:	e8bd8010 	ldmia	sp!, {r4, pc}
    4d58:	00004c60 	andeq	r4, r0, r0, ror #24

00004d5c <http_set_sec>:

/**
 * @brief Altera ossegundos do relogio RTC
 */
void http_set_sec(char *c){
    4d5c:	e92d4010 	stmdb	sp!, {r4, lr}
    4d60:	e24dd004 	sub	sp, sp, #4	; 0x4
    4d64:	e1a04000 	mov	r4, r0
	DEBUG_HTTP(c);
    4d68:	e58d0000 	str	r0, [sp]
    4d6c:	e59f0028 	ldr	r0, [pc, #40]	; 4d9c <prog+0x4d54>
    4d70:	e59f1028 	ldr	r1, [pc, #40]	; 4da0 <prog+0x4d58>
    4d74:	e59f2028 	ldr	r2, [pc, #40]	; 4da4 <prog+0x4d5c>
    4d78:	e3a03020 	mov	r3, #32	; 0x20
    4d7c:	eb001d14 	bl	c1d4 <printf>
	RTC_SEC = atoi(c);
    4d80:	e1a00004 	mov	r0, r4
    4d84:	ebffefc2 	bl	c94 <atoi>
    4d88:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4d8c:	e2833909 	add	r3, r3, #147456	; 0x24000
    4d90:	e5830020 	str	r0, [r3, #32]
}
    4d94:	e28dd004 	add	sp, sp, #4	; 0x4
    4d98:	e8bd8010 	ldmia	sp!, {r4, pc}
    4d9c:	00014958 	andeq	r4, r1, r8, asr r9
    4da0:	00014978 	andeq	r4, r1, r8, ror r9
    4da4:	00013510 	andeq	r3, r1, r0, lsl r5

00004da8 <http_set_min>:
    4da8:	e52de004 	str	lr, [sp, #-4]!
    4dac:	ebffefb8 	bl	c94 <atoi>
    4db0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4db4:	e2833909 	add	r3, r3, #147456	; 0x24000
    4db8:	e5830024 	str	r0, [r3, #36]
    4dbc:	e49df004 	ldr	pc, [sp], #4

00004dc0 <http_set_hour>:
    4dc0:	e92d4010 	stmdb	sp!, {r4, lr}
    4dc4:	e24dd004 	sub	sp, sp, #4	; 0x4
    4dc8:	e1a04000 	mov	r4, r0
    4dcc:	e58d0000 	str	r0, [sp]
    4dd0:	e59f0028 	ldr	r0, [pc, #40]	; 4e00 <prog+0x4db8>
    4dd4:	e59f1028 	ldr	r1, [pc, #40]	; 4e04 <prog+0x4dbc>
    4dd8:	e59f2028 	ldr	r2, [pc, #40]	; 4e08 <prog+0x4dc0>
    4ddc:	e3a03011 	mov	r3, #17	; 0x11
    4de0:	eb001cfb 	bl	c1d4 <printf>
    4de4:	e1a00004 	mov	r0, r4
    4de8:	ebffefa9 	bl	c94 <atoi>
    4dec:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4df0:	e2833909 	add	r3, r3, #147456	; 0x24000
    4df4:	e5830028 	str	r0, [r3, #40]
    4df8:	e28dd004 	add	sp, sp, #4	; 0x4
    4dfc:	e8bd8010 	ldmia	sp!, {r4, pc}
    4e00:	00014958 	andeq	r4, r1, r8, asr r9
    4e04:	00014978 	andeq	r4, r1, r8, ror r9
    4e08:	00013520 	andeq	r3, r1, r0, lsr #10

00004e0c <http_set_lcd>:
    4e0c:	e92d4010 	stmdb	sp!, {r4, lr}
    4e10:	e24dd004 	sub	sp, sp, #4	; 0x4
    4e14:	e1a04000 	mov	r4, r0
    4e18:	e58d0000 	str	r0, [sp]
    4e1c:	e59f0024 	ldr	r0, [pc, #36]	; 4e48 <prog+0x4e00>
    4e20:	e59f1024 	ldr	r1, [pc, #36]	; 4e4c <prog+0x4e04>
    4e24:	e59f2024 	ldr	r2, [pc, #36]	; 4e50 <prog+0x4e08>
    4e28:	e3a03009 	mov	r3, #9	; 0x9
    4e2c:	eb001ce8 	bl	c1d4 <printf>
    4e30:	e1a00004 	mov	r0, r4
    4e34:	e3a01000 	mov	r1, #0	; 0x0
    4e38:	e1a02001 	mov	r2, r1
    4e3c:	eb000638 	bl	6724 <writeDataLcd>
    4e40:	e28dd004 	add	sp, sp, #4	; 0x4
    4e44:	e8bd8010 	ldmia	sp!, {r4, pc}
    4e48:	00014958 	andeq	r4, r1, r8, asr r9
    4e4c:	00014978 	andeq	r4, r1, r8, ror r9
    4e50:	00013530 	andeq	r3, r1, r0, lsr r5

00004e54 <cgiProcessFormInput>:


void cgiProcessFormInput( char *pcInputString, int xInputLength )
{
    4e54:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
    4e58:	e24dd068 	sub	sp, sp, #104	; 0x68
char *c, *d, *e, *pcText;
char tac_modo, tsetpoint;
char deb[100];

	DEBUG_ENTER;
	c = strstr( pcInputString, "?" );	//s
    4e5c:	e3a0103f 	mov	r1, #63	; 0x3f
    4e60:	eb001da6 	bl	c500 <strchr>
    4e64:	e1a05000 	mov	r5, r0
	sprintf(deb, "%s\n", c);
    4e68:	e28d4004 	add	r4, sp, #4	; 0x4
    4e6c:	e1a00004 	mov	r0, r4
    4e70:	e59f1124 	ldr	r1, [pc, #292]	; 4f9c <prog+0x4f54>
    4e74:	e1a02005 	mov	r2, r5
    4e78:	ebfff2d3 	bl	19cc <sprintf>
	DEBUG_HTTP(deb);
    4e7c:	e58d4000 	str	r4, [sp]
    4e80:	e59f0118 	ldr	r0, [pc, #280]	; 4fa0 <prog+0x4f58>
    4e84:	e59f1118 	ldr	r1, [pc, #280]	; 4fa4 <prog+0x4f5c>
    4e88:	e59f2118 	ldr	r2, [pc, #280]	; 4fa8 <prog+0x4f60>
    4e8c:	e3a03072 	mov	r3, #114	; 0x72
    4e90:	eb001ccf 	bl	c1d4 <printf>
    if( c )
    4e94:	e3550000 	cmp	r5, #0	; 0x0
    4e98:	0a00003c 	beq	4f90 <cgiProcessFormInput+0x13c>
    {
    	printf("\n\n");
    4e9c:	e59f0108 	ldr	r0, [pc, #264]	; 4fac <prog+0x4f64>
    4ea0:	eb001d2c 	bl	c358 <puts>
    	*c = 0x00; //terminate at the filename
    4ea4:	e3a06000 	mov	r6, #0	; 0x0
    4ea8:	e4c56001 	strb	r6, [r5], #1
    	c++;
    4eac:	e1a04005 	mov	r4, r5
        e = strstr( c, " " );
    4eb0:	e1a00005 	mov	r0, r5
    4eb4:	e3a01020 	mov	r1, #32	; 0x20
    4eb8:	eb001d90 	bl	c500 <strchr>
        if( e != NULL )
    4ebc:	e3500000 	cmp	r0, #0	; 0x0
        {
            *e = 0x00; //terminate the whole string
    4ec0:	15c06000 	strneb	r6, [r0]
        }
    	d = strstr( c, "slcd=");
    4ec4:	e1a00005 	mov	r0, r5
    4ec8:	e59f10e0 	ldr	r1, [pc, #224]	; 4fb0 <prog+0x4f68>
    4ecc:	eb001f28 	bl	cb74 <strstr>
    	if (d) {
    4ed0:	e3500000 	cmp	r0, #0	; 0x0
    4ed4:	0a00000b 	beq	4f08 <cgiProcessFormInput+0xb4>
			c=d;
			c += strlen("slcd=");
    4ed8:	e2805005 	add	r5, r0, #5	; 0x5
			d = strchr( c, '&');
    4edc:	e1a00005 	mov	r0, r5
    4ee0:	e3a01026 	mov	r1, #38	; 0x26
    4ee4:	eb001d85 	bl	c500 <strchr>
    4ee8:	e1a04000 	mov	r4, r0
			*d = '\0';
    4eec:	e3a03000 	mov	r3, #0	; 0x0
    4ef0:	e4c43001 	strb	r3, [r4], #1
			http_set_lcd(c);
    4ef4:	e1a00005 	mov	r0, r5
    4ef8:	ebffffc3 	bl	4e0c <http_set_lcd>
			printf("--[%s]--",c);
    4efc:	e59f00b0 	ldr	r0, [pc, #176]	; 4fb4 <prog+0x4f6c>
    4f00:	e1a01005 	mov	r1, r5
    4f04:	eb001cb2 	bl	c1d4 <printf>
			c=d+1;
    	}

    	d = strstr( c, "shr=");
    4f08:	e1a00004 	mov	r0, r4
    4f0c:	e59f10a4 	ldr	r1, [pc, #164]	; 4fb8 <prog+0x4f70>
    4f10:	eb001f17 	bl	cb74 <strstr>
    	if(d) {
    4f14:	e3500000 	cmp	r0, #0	; 0x0
    4f18:	0a000008 	beq	4f40 <cgiProcessFormInput+0xec>
			c=d;
			c += strlen("shr=");
    4f1c:	e2805004 	add	r5, r0, #4	; 0x4
			d = strchr( c, '&');
    4f20:	e1a00005 	mov	r0, r5
    4f24:	e3a01026 	mov	r1, #38	; 0x26
    4f28:	eb001d74 	bl	c500 <strchr>
    4f2c:	e1a04000 	mov	r4, r0
			*d = '\0';
    4f30:	e3a03000 	mov	r3, #0	; 0x0
    4f34:	e4c43001 	strb	r3, [r4], #1
			http_set_hour(c);
    4f38:	e1a00005 	mov	r0, r5
    4f3c:	ebffff9f 	bl	4dc0 <http_set_hour>
			//printf("--[%s]--",c);
			c=d+1;
    	}

    	d = strstr( c, "smin=");
    4f40:	e1a00004 	mov	r0, r4
    4f44:	e59f1070 	ldr	r1, [pc, #112]	; 4fbc <prog+0x4f74>
    4f48:	eb001f09 	bl	cb74 <strstr>
		if(d) {
    4f4c:	e3500000 	cmp	r0, #0	; 0x0
    4f50:	0a000008 	beq	4f78 <cgiProcessFormInput+0x124>
			c=d;
			c += strlen("smin=");
    4f54:	e2805005 	add	r5, r0, #5	; 0x5
			d = strchr( c, '&');
    4f58:	e1a00005 	mov	r0, r5
    4f5c:	e3a01026 	mov	r1, #38	; 0x26
    4f60:	eb001d66 	bl	c500 <strchr>
    4f64:	e1a04000 	mov	r4, r0
			*d = '\0';
    4f68:	e3a03000 	mov	r3, #0	; 0x0
    4f6c:	e4c43001 	strb	r3, [r4], #1
			http_set_min(c);
    4f70:	e1a00005 	mov	r0, r5
    4f74:	ebffff8b 	bl	4da8 <http_set_min>
			//printf("--[%s]--",c);
			c=d+1;
		}

		d = strstr( c, "ssec=");
    4f78:	e1a00004 	mov	r0, r4
    4f7c:	e59f103c 	ldr	r1, [pc, #60]	; 4fc0 <prog+0x4f78>
    4f80:	eb001efb 	bl	cb74 <strstr>
		if(d) {
    4f84:	e3500000 	cmp	r0, #0	; 0x0
			c=d;
			c += strlen("ssec=");
			http_set_sec(c);
    4f88:	12800005 	addne	r0, r0, #5	; 0x5
    4f8c:	1bffff72 	blne	4d5c <http_set_sec>
			//printf("--[%s]--",c);
		}
    }
    show_lcd_time();
    4f90:	eb0006be 	bl	6a90 <show_lcd_time>
    DEBUG_EXIT;
}
    4f94:	e28dd068 	add	sp, sp, #104	; 0x68
    4f98:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
    4f9c:	0001498c 	andeq	r4, r1, ip, lsl #19
    4fa0:	00014958 	andeq	r4, r1, r8, asr r9
    4fa4:	00014990 	muleq	r1, r0, r9
    4fa8:	000134fc 	streqd	r3, [r1], -ip
    4fac:	00014dfc 	streqd	r4, [r1], -ip
    4fb0:	000149a4 	andeq	r4, r1, r4, lsr #19
    4fb4:	000149ac 	andeq	r4, r1, ip, lsr #19
    4fb8:	000149b8 	streqh	r4, [r1], -r8
    4fbc:	000149c0 	andeq	r4, r1, r0, asr #19
    4fc0:	000149c8 	andeq	r4, r1, r8, asr #19

00004fc4 <httpd_fs_strcmp>:
  u8_t i;
  i = 0;
 loop:

  if(str2[i] == 0 ||
    4fc4:	e5d12000 	ldrb	r2, [r1]
    4fc8:	e3520000 	cmp	r2, #0	; 0x0
    4fcc:	0a000014 	beq	5024 <httpd_fs_strcmp+0x60>
    4fd0:	e5d03000 	ldrb	r3, [r0]
    4fd4:	e353000d 	cmp	r3, #13	; 0xd
    4fd8:	0a000011 	beq	5024 <httpd_fs_strcmp+0x60>
    4fdc:	e353000a 	cmp	r3, #10	; 0xa
    4fe0:	0a00000f 	beq	5024 <httpd_fs_strcmp+0x60>
     str1[i] == '\r' ||
     str1[i] == '\n') {
    return 0;
  }

  if(str1[i] != str2[i]) {
    4fe4:	e1530002 	cmp	r3, r2
    4fe8:	1a00000f 	bne	502c <httpd_fs_strcmp+0x68>
    4fec:	e3a03000 	mov	r3, #0	; 0x0
    return 1;
  }


  ++i;
    4ff0:	e2833001 	add	r3, r3, #1	; 0x1
    4ff4:	e20330ff 	and	r3, r3, #255	; 0xff
    4ff8:	e7d3c001 	ldrb	ip, [r3, r1]
    4ffc:	e35c0000 	cmp	ip, #0	; 0x0
    5000:	0a000007 	beq	5024 <httpd_fs_strcmp+0x60>
    5004:	e7d32000 	ldrb	r2, [r3, r0]
    5008:	e352000d 	cmp	r2, #13	; 0xd
    500c:	0a000004 	beq	5024 <httpd_fs_strcmp+0x60>
    5010:	e352000a 	cmp	r2, #10	; 0xa
    5014:	0a000002 	beq	5024 <httpd_fs_strcmp+0x60>
    5018:	e15c0002 	cmp	ip, r2
    501c:	1a000002 	bne	502c <httpd_fs_strcmp+0x68>
    5020:	eafffff2 	b	4ff0 <httpd_fs_strcmp+0x2c>
  goto loop;
    5024:	e3a00000 	mov	r0, #0	; 0x0
    5028:	e12fff1e 	bx	lr
    502c:	e3a00001 	mov	r0, #1	; 0x1
}
    5030:	e12fff1e 	bx	lr

00005034 <httpd_fs_open>:
/*-----------------------------------------------------------------------------------*/
int
httpd_fs_open(const char *name, struct httpd_fs_file *file)
{
    5034:	e92d45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
    5038:	e1a07000 	mov	r7, r0
    503c:	e1a08001 	mov	r8, r1
#if HTTPD_FS_STATISTICS
  u16_t i = 0;
#endif /* HTTPD_FS_STATISTICS */
  struct httpd_fsdata_file_noconst *f;

  for(f = (struct httpd_fsdata_file_noconst *)HTTPD_FS_ROOT;
    5040:	e59f5064 	ldr	r5, [pc, #100]	; 50ac <prog+0x5064>
    5044:	e3a04000 	mov	r4, #0	; 0x0
    5048:	e59fa060 	ldr	sl, [pc, #96]	; 50b0 <prog+0x5068>
    504c:	e1a03804 	mov	r3, r4, lsl #16
    5050:	e1a06823 	mov	r6, r3, lsr #16
      f != NULL;
      f = (struct httpd_fsdata_file_noconst *)f->next) {

    if(httpd_fs_strcmp(name, f->name) == 0) {
    5054:	e1a00007 	mov	r0, r7
    5058:	e5951004 	ldr	r1, [r5, #4]
    505c:	ebffffd8 	bl	4fc4 <httpd_fs_strcmp>
    5060:	e3500000 	cmp	r0, #0	; 0x0
    5064:	1a000009 	bne	5090 <httpd_fs_open+0x5c>
      file->data = f->data;
    5068:	e5953008 	ldr	r3, [r5, #8]
    506c:	e5883000 	str	r3, [r8]
      file->len = f->len;
    5070:	e595300c 	ldr	r3, [r5, #12]
    5074:	e5883004 	str	r3, [r8, #4]
#if HTTPD_FS_STATISTICS
      ++count[i];
    5078:	e1a02086 	mov	r2, r6, lsl #1
    507c:	e19230ba 	ldrh	r3, [r2, sl]
    5080:	e2833001 	add	r3, r3, #1	; 0x1
    5084:	e18230ba 	strh	r3, [r2, sl]
    5088:	e2800001 	add	r0, r0, #1	; 0x1
    508c:	e8bd85f0 	ldmia	sp!, {r4, r5, r6, r7, r8, sl, pc}
    5090:	e5953000 	ldr	r3, [r5]
    5094:	e2844001 	add	r4, r4, #1	; 0x1
    5098:	e3530000 	cmp	r3, #0	; 0x0
    509c:	11a05003 	movne	r5, r3
    50a0:	1affffe9 	bne	504c <httpd_fs_open+0x18>
    50a4:	e3a00000 	mov	r0, #0	; 0x0
#endif /* HTTPD_FS_STATISTICS */
      return 1;
    }
#if HTTPD_FS_STATISTICS
    ++i;
#endif /* HTTPD_FS_STATISTICS */

  }
  return 0;
}
    50a8:	e8bd85f0 	ldmia	sp!, {r4, r5, r6, r7, r8, sl, pc}
    50ac:	00013570 	andeq	r3, r1, r0, ror r5
    50b0:	4000089c 	mulmi	r0, ip, r8

000050b4 <httpd_fs_init>:
/*-----------------------------------------------------------------------------------*/
void
httpd_fs_init(void)
{
#if HTTPD_FS_STATISTICS
  u16_t i;
  for(i = 0; i < HTTPD_FS_NUMFILES; i++) {
    count[i] = 0;
    50b4:	e59f2010 	ldr	r2, [pc, #16]	; 50cc <prog+0x5084>
    50b8:	e3a03000 	mov	r3, #0	; 0x0
    50bc:	e1c230b0 	strh	r3, [r2]
    50c0:	e1c230b2 	strh	r3, [r2, #2]
    50c4:	e1c230b4 	strh	r3, [r2, #4]
  }
#endif /* HTTPD_FS_STATISTICS */
}
    50c8:	e12fff1e 	bx	lr
    50cc:	4000089c 	mulmi	r0, ip, r8

000050d0 <httpd_fs_count>:
/*-----------------------------------------------------------------------------------*/
#if HTTPD_FS_STATISTICS
u16_t httpd_fs_count
(char *name)
{
    50d0:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
    50d4:	e1a07000 	mov	r7, r0
  struct httpd_fsdata_file_noconst *f;
  u16_t i;

  i = 0;
  for(f = (struct httpd_fsdata_file_noconst *)HTTPD_FS_ROOT;
    50d8:	e59f4048 	ldr	r4, [pc, #72]	; 5128 <prog+0x50e0>
    50dc:	e3a05000 	mov	r5, #0	; 0x0
    50e0:	e1a03805 	mov	r3, r5, lsl #16
    50e4:	e1a06823 	mov	r6, r3, lsr #16
      f != NULL;
      f = (struct httpd_fsdata_file_noconst *)f->next) {

    if(httpd_fs_strcmp(name, f->name) == 0) {
    50e8:	e1a00007 	mov	r0, r7
    50ec:	e5941004 	ldr	r1, [r4, #4]
    50f0:	ebffffb3 	bl	4fc4 <httpd_fs_strcmp>
    50f4:	e3500000 	cmp	r0, #0	; 0x0
    50f8:	1a000003 	bne	510c <httpd_fs_count+0x3c>
      return count[i];
    50fc:	e1a02086 	mov	r2, r6, lsl #1
    5100:	e59f3024 	ldr	r3, [pc, #36]	; 512c <prog+0x50e4>
    5104:	e19200b3 	ldrh	r0, [r2, r3]
    5108:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
    510c:	e5943000 	ldr	r3, [r4]
    5110:	e2855001 	add	r5, r5, #1	; 0x1
    5114:	e3530000 	cmp	r3, #0	; 0x0
    5118:	11a04003 	movne	r4, r3
    511c:	1affffef 	bne	50e0 <httpd_fs_count+0x10>
    5120:	e3a00000 	mov	r0, #0	; 0x0
    }
    ++i;
  }
  return 0;
}
    5124:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
    5128:	00013570 	andeq	r3, r1, r0, ror r5
    512c:	4000089c 	mulmi	r0, ip, r8

00005130 <chat_communication>:
 * 	RECV_CHAT - quando esta aberto para receber dados da socket conectada a ele
 *
 * 	SEND_CHAT - pega informacao digitada na serial e envia para ele.
 */
int chat_communication(struct chat_state *s){
    5130:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
    5134:	e24dd014 	sub	sp, sp, #20	; 0x14
    5138:	e1a05000 	mov	r5, r0
	char *dest;
	char estado[20];
	int a;
	sprintf(estado,"Estado: %d\n", s->state);
    513c:	e1a0000d 	mov	r0, sp
    5140:	e59f1200 	ldr	r1, [pc, #512]	; 5348 <prog+0x5300>
    5144:	e5952000 	ldr	r2, [r5]
    5148:	ebfff21f 	bl	19cc <sprintf>
	DEBUG_INFO(estado);

	PSOCK_BEGIN(&prot);
    514c:	e59f31f8 	ldr	r3, [pc, #504]	; 534c <prog+0x5304>
    5150:	e1d330b0 	ldrh	r3, [r3]
    5154:	e353006d 	cmp	r3, #109	; 0x6d
    5158:	0a000015 	beq	51b4 <chat_communication+0x84>
    515c:	8a000002 	bhi	516c <chat_communication+0x3c>
    5160:	e3530000 	cmp	r3, #0	; 0x0
    5164:	0a000005 	beq	5180 <chat_communication+0x50>
    5168:	ea00006b 	b	531c <chat_communication+0x1ec>
    516c:	e3530089 	cmp	r3, #137	; 0x89
    5170:	0a000044 	beq	5288 <chat_communication+0x158>
    5174:	e3530091 	cmp	r3, #145	; 0x91
    5178:	1a000067 	bne	531c <chat_communication+0x1ec>
    517c:	ea000055 	b	52d8 <chat_communication+0x1a8>
	if(s->state==RECV_CHAT){
    5180:	e5953000 	ldr	r3, [r5]
    5184:	e3530001 	cmp	r3, #1	; 0x1
    5188:	1a000027 	bne	522c <chat_communication+0xfc>
//			PSOCK_WAIT_UNTIL(&prot,PSOCK_NEWDATA(&prot));//{	//verifica se tem dados armazenado.
				DEBUG_SOCK_INFO("recebendo dados.\n");
				strcpy(s->inbuff,"\n");
    518c:	e285006c 	add	r0, r5, #108	; 0x6c
    5190:	e59f11b8 	ldr	r1, [pc, #440]	; 5350 <prog+0x5308>
    5194:	e3a02002 	mov	r2, #2	; 0x2
    5198:	eb001bbd 	bl	c094 <memcpy>
				uart_puts(cabec_dest);	//monta cabecalho para origem (placa) escrever.
    519c:	e59f01b0 	ldr	r0, [pc, #432]	; 5354 <prog+0x530c>
    51a0:	e3a01000 	mov	r1, #0	; 0x0
    51a4:	ebffee99 	bl	c10 <UARTTransmitString>
				PSOCK_READTO(&prot, '\n');//fica bloqueado esperando informação até que venha o caracter \n
    51a8:	e59f319c 	ldr	r3, [pc, #412]	; 534c <prog+0x5304>
    51ac:	e3a0206d 	mov	r2, #109	; 0x6d
    51b0:	e1c320b0 	strh	r2, [r3]
    51b4:	e59f0190 	ldr	r0, [pc, #400]	; 534c <prog+0x5304>
    51b8:	e3a0100a 	mov	r1, #10	; 0xa
    51bc:	eb000a3c 	bl	7ab4 <psock_readto>
    51c0:	e3500000 	cmp	r0, #0	; 0x0
    51c4:	0a00005c 	beq	533c <chat_communication+0x20c>
//				strncpy(dest, s->inbuff, strlen(s->inbuff));
				dest = strtok(s->inbuff, "\n");
    51c8:	e285606c 	add	r6, r5, #108	; 0x6c
    51cc:	e1a00006 	mov	r0, r6
    51d0:	e59f1178 	ldr	r1, [pc, #376]	; 5350 <prog+0x5308>
    51d4:	eb001e7b 	bl	cbc8 <strtok>
    51d8:	e1a04000 	mov	r4, r0
				uart_puts(dest);	//envia para a UART os dados que vieram.
    51dc:	e3a01000 	mov	r1, #0	; 0x0
    51e0:	ebffee8a 	bl	c10 <UARTTransmitString>
				uart_putc('\n');
    51e4:	e3a0000a 	mov	r0, #10	; 0xa
    51e8:	e3a01000 	mov	r1, #0	; 0x0
    51ec:	ebffee61 	bl	b78 <UARTTransmitByte>

				if(!strcmp(dest,"quit")){
    51f0:	e1a00004 	mov	r0, r4
    51f4:	e59f115c 	ldr	r1, [pc, #348]	; 5358 <prog+0x5310>
    51f8:	eb001d03 	bl	c60c <strcmp>
    51fc:	e3500000 	cmp	r0, #0	; 0x0
					s->state = QUIT_CHAT;
    5200:	03a03003 	moveq	r3, #3	; 0x3
    5204:	05853000 	streq	r3, [r5]
    5208:	0a00002c 	beq	52c0 <chat_communication+0x190>
				}
				else {
					s->state = SEND_CHAT;
    520c:	e3a04000 	mov	r4, #0	; 0x0
    5210:	e5854000 	str	r4, [r5]
					memset(s->inbuff,'\0',strlen(s->inbuff));
    5214:	e1a00006 	mov	r0, r6
    5218:	eb001d56 	bl	c778 <strlen>
    521c:	e1a02000 	mov	r2, r0
    5220:	e1a00006 	mov	r0, r6
    5224:	e1a01004 	mov	r1, r4
    5228:	eb001bc1 	bl	c134 <memset>
				}
	//		}
	}
	//envia dados por sockets;
	if(s->state == SEND_CHAT){
    522c:	e5956000 	ldr	r6, [r5]
    5230:	e3560000 	cmp	r6, #0	; 0x0
    5234:	1a00001f 	bne	52b8 <chat_communication+0x188>
		uart_puts(cabec_or);	//monta cabecalho para origem (placa) escrever.
    5238:	e59f011c 	ldr	r0, [pc, #284]	; 535c <prog+0x5314>
    523c:	e1a01006 	mov	r1, r6
    5240:	ebffee72 	bl	c10 <UARTTransmitString>
		//do{
			UARTTakeString(s->buff, UART_CH_0);	//pega dados da uart
    5244:	e2854004 	add	r4, r5, #4	; 0x4
    5248:	e1a00004 	mov	r0, r4
    524c:	e1a01006 	mov	r1, r6
    5250:	eb0001f8 	bl	5a38 <UARTTakeString>
		//}while(strlen(s->buff)<2);//consistencia simples.
		if(!strcmp(s->buff,"quit")){
    5254:	e1a00004 	mov	r0, r4
    5258:	e59f10f8 	ldr	r1, [pc, #248]	; 5358 <prog+0x5310>
    525c:	eb001cea 	bl	c60c <strcmp>
    5260:	e3500000 	cmp	r0, #0	; 0x0
			//PSOCK_SEND_STR(&prot, "bye!!!");	//envia para a socket.
			global_chat_flag = 0;	//verifica se é para sair do chat
			s->state = QUIT_CHAT;
		}
		else {
			DEBUG_SOCK_INFO("enviando dados\n");
			PSOCK_SEND_STR(&prot, s->buff);	//envia para a socket.
    5264:	159f30e0 	ldrne	r3, [pc, #224]	; 534c <prog+0x5304>
    5268:	13a02089 	movne	r2, #137	; 0x89
    526c:	11c320b0 	strneh	r2, [r3]
    5270:	1a000004 	bne	5288 <chat_communication+0x158>
    5274:	e59f30e4 	ldr	r3, [pc, #228]	; 5360 <prog+0x5318>
    5278:	e5836000 	str	r6, [r3]
    527c:	e3a03003 	mov	r3, #3	; 0x3
    5280:	e5853000 	str	r3, [r5]
    5284:	ea00000d 	b	52c0 <chat_communication+0x190>
    5288:	e2854004 	add	r4, r5, #4	; 0x4
    528c:	e1a00004 	mov	r0, r4
    5290:	eb001d38 	bl	c778 <strlen>
    5294:	e1a02000 	mov	r2, r0
    5298:	e59f00ac 	ldr	r0, [pc, #172]	; 534c <prog+0x5304>
    529c:	e1a01004 	mov	r1, r4
    52a0:	eb000b30 	bl	7f68 <psock_send>
    52a4:	e3500000 	cmp	r0, #0	; 0x0
			DEBUG_SOCK_INFO("dados enviados\n");
			s->state = RECV_CHAT;
    52a8:	13a03001 	movne	r3, #1	; 0x1
    52ac:	15853000 	strne	r3, [r5]
    52b0:	1a000014 	bne	5308 <chat_communication+0x1d8>
    52b4:	ea000020 	b	533c <chat_communication+0x20c>
		}
	}

	if(s->state == QUIT_CHAT){
    52b8:	e3560003 	cmp	r6, #3	; 0x3
    52bc:	1a000011 	bne	5308 <chat_communication+0x1d8>
		uart_puts("bye.\n");
    52c0:	e59f009c 	ldr	r0, [pc, #156]	; 5364 <prog+0x531c>
    52c4:	e3a01000 	mov	r1, #0	; 0x0
    52c8:	ebffee50 	bl	c10 <UARTTransmitString>
		PSOCK_SEND_STR(&prot, "bye.");	//envia para a socket.
    52cc:	e59f3078 	ldr	r3, [pc, #120]	; 534c <prog+0x5304>
    52d0:	e3a02091 	mov	r2, #145	; 0x91
    52d4:	e1c320b0 	strh	r2, [r3]
    52d8:	e59f006c 	ldr	r0, [pc, #108]	; 534c <prog+0x5304>
    52dc:	e59f1084 	ldr	r1, [pc, #132]	; 5368 <prog+0x5320>
    52e0:	e3a02004 	mov	r2, #4	; 0x4
    52e4:	eb000b1f 	bl	7f68 <psock_send>
    52e8:	e3500000 	cmp	r0, #0	; 0x0
    52ec:	0a000012 	beq	533c <chat_communication+0x20c>
		global_chat_flag = 0;	//verifica se é para sair do chat
    52f0:	e3a02000 	mov	r2, #0	; 0x0
    52f4:	e59f3064 	ldr	r3, [pc, #100]	; 5360 <prog+0x5318>
    52f8:	e5832000 	str	r2, [r3]
		DEBUG_SOCK_INFO("socket finalizada.\n");
		PSOCK_CLOSE(&prot);
    52fc:	e2822010 	add	r2, r2, #16	; 0x10
    5300:	e59f3064 	ldr	r3, [pc, #100]	; 536c <prog+0x5324>
    5304:	e5c32000 	strb	r2, [r3]
		PSOCK_END(&prot);
    5308:	e59f303c 	ldr	r3, [pc, #60]	; 534c <prog+0x5304>
    530c:	e3a02000 	mov	r2, #0	; 0x0
    5310:	e1c320b0 	strh	r2, [r3]
    5314:	e3a00002 	mov	r0, #2	; 0x2
    5318:	ea000008 	b	5340 <chat_communication+0x210>
		PSOCK_CLOSE_EXIT(&prot);
    531c:	e3a03010 	mov	r3, #16	; 0x10
    5320:	e59f2044 	ldr	r2, [pc, #68]	; 536c <prog+0x5324>
    5324:	e5c23000 	strb	r3, [r2]
    5328:	e59f301c 	ldr	r3, [pc, #28]	; 534c <prog+0x5304>
    532c:	e3a02000 	mov	r2, #0	; 0x0
    5330:	e1c320b0 	strh	r2, [r3]
    5334:	e3a00001 	mov	r0, #1	; 0x1
    5338:	ea000000 	b	5340 <chat_communication+0x210>
    533c:	e3a00000 	mov	r0, #0	; 0x0
		s->state = 10;//estado nao tratado.
		fflush(stdout);
		return 0;
	}

	return 0;
}
    5340:	e28dd014 	add	sp, sp, #20	; 0x14
    5344:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
    5348:	00014858 	andeq	r4, r1, r8, asr r8
    534c:	40001664 	andmi	r1, r0, r4, ror #12
    5350:	00014dfc 	streqd	r4, [r1], -ip
    5354:	40001760 	andmi	r1, r0, r0, ror #14
    5358:	000149dc 	ldreqd	r4, [r1], -ip
    535c:	40001774 	andmi	r1, r0, r4, ror r7
    5360:	400016dc 	ldrmid	r1, [r0], -ip
    5364:	000149e4 	andeq	r4, r1, r4, ror #19
    5368:	000149ec 	andeq	r4, r1, ip, ror #19
    536c:	4000183c 	andmi	r1, r0, ip, lsr r8

00005370 <chat_appcall>:
    5370:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    5374:	e59f3038 	ldr	r3, [pc, #56]	; 53b4 <prog+0x536c>
    5378:	e5934000 	ldr	r4, [r3]
    537c:	e284501c 	add	r5, r4, #28	; 0x1c
    5380:	e59f3030 	ldr	r3, [pc, #48]	; 53b8 <prog+0x5370>
    5384:	e5d33000 	ldrb	r3, [r3]
    5388:	e3130040 	tst	r3, #64	; 0x40
    538c:	0a000005 	beq	53a8 <chat_appcall+0x38>
    5390:	e59f0024 	ldr	r0, [pc, #36]	; 53bc <prog+0x5374>
    5394:	e2841088 	add	r1, r4, #136	; 0x88
    5398:	e3a020c8 	mov	r2, #200	; 0xc8
    539c:	eb000a27 	bl	7c40 <psock_init>
    53a0:	e3a03000 	mov	r3, #0	; 0x0
    53a4:	e584301c 	str	r3, [r4, #28]
    53a8:	e1a00005 	mov	r0, r5
    53ac:	ebffff5f 	bl	5130 <chat_communication>
    53b0:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
    53b4:	40001848 	andmi	r1, r0, r8, asr #16
    53b8:	4000183c 	andmi	r1, r0, ip, lsr r8
    53bc:	40001664 	andmi	r1, r0, r4, ror #12

000053c0 <chat_init>:
    53c0:	e52de004 	str	lr, [sp, #-4]!
    53c4:	e59f301c 	ldr	r3, [pc, #28]	; 53e8 <prog+0x53a0>
    53c8:	e5933000 	ldr	r3, [r3]
    53cc:	e1a03803 	mov	r3, r3, lsl #16
    53d0:	e1a00c23 	mov	r0, r3, lsr #24
    53d4:	e1800423 	orr	r0, r0, r3, lsr #8
    53d8:	e1a00800 	mov	r0, r0, lsl #16
    53dc:	e1a00820 	mov	r0, r0, lsr #16
    53e0:	eb000bb7 	bl	82c4 <uip_listen>
    53e4:	e49df004 	ldr	pc, [sp], #4
    53e8:	400016c4 	andmi	r1, r0, r4, asr #13

000053ec <chat_start>:
    53ec:	e92d4010 	stmdb	sp!, {r4, lr}
    53f0:	e59f4024 	ldr	r4, [pc, #36]	; 541c <prog+0x53d4>
    53f4:	e59f0024 	ldr	r0, [pc, #36]	; 5420 <prog+0x53d8>
    53f8:	e59f1024 	ldr	r1, [pc, #36]	; 5424 <prog+0x53dc>
    53fc:	e5942000 	ldr	r2, [r4]
    5400:	ebfff171 	bl	19cc <sprintf>
    5404:	e59f001c 	ldr	r0, [pc, #28]	; 5428 <prog+0x53e0>
    5408:	e59f101c 	ldr	r1, [pc, #28]	; 542c <prog+0x53e4>
    540c:	e5942000 	ldr	r2, [r4]
    5410:	ebfff16d 	bl	19cc <sprintf>
    5414:	ebffffe9 	bl	53c0 <chat_init>
    5418:	e8bd8010 	ldmia	sp!, {r4, pc}
    541c:	400016c4 	andmi	r1, r0, r4, asr #13
    5420:	40001774 	andmi	r1, r0, r4, ror r7
    5424:	000149f4 	streqd	r4, [r1], -r4
    5428:	40001760 	andmi	r1, r0, r0, ror #14
    542c:	00014a00 	andeq	r4, r1, r0, lsl #20

00005430 <set_eth_addr>:

/**
 * @brief Configura enderecos iniciais da rede.
 */
void set_eth_addr(void){
    5430:	e52de004 	str	lr, [sp, #-4]!
	set_IpDefault();
    5434:	eb0001c3 	bl	5b48 <set_IpDefault>
	set_GatewayDefault();
    5438:	eb0001b0 	bl	5b00 <set_GatewayDefault>
	set_MaskDefault();
    543c:	eb00019e 	bl	5abc <set_MaskDefault>
}
    5440:	e49df004 	ldr	pc, [sp], #4

00005444 <ENET_Send>:
    5444:	e52de004 	str	lr, [sp, #-4]!
    5448:	ebfff49d 	bl	26c4 <RequestSend>
    544c:	e59f0030 	ldr	r0, [pc, #48]	; 5484 <prog+0x543c>
    5450:	e3a01036 	mov	r1, #54	; 0x36
    5454:	ebfff4ae 	bl	2714 <CopyToFrame_EMAC>
    5458:	e59f3028 	ldr	r3, [pc, #40]	; 5488 <prog+0x5440>
    545c:	e1d310b0 	ldrh	r1, [r3]
    5460:	e3510036 	cmp	r1, #54	; 0x36
    5464:	859f3020 	ldrhi	r3, [pc, #32]	; 548c <prog+0x5444>
    5468:	85930000 	ldrhi	r0, [r3]
    546c:	82411036 	subhi	r1, r1, #54	; 0x36
    5470:	8bfff4a7 	blhi	2714 <CopyToFrame_EMAC>
    5474:	e59f300c 	ldr	r3, [pc, #12]	; 5488 <prog+0x5440>
    5478:	e1d300b0 	ldrh	r0, [r3]
    547c:	ebfff4b2 	bl	274c <DoSend_EMAC>
    5480:	e49df004 	ldr	pc, [sp], #4
    5484:	40002e20 	andmi	r2, r0, r0, lsr #28
    5488:	40001830 	andmi	r1, r0, r0, lsr r8
    548c:	40001844 	andmi	r1, r0, r4, asr #16

00005490 <ethernet_task>:
    5490:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
    5494:	e59f4154 	ldr	r4, [pc, #340]	; 55f0 <prog+0x55a8>
    5498:	e1a00004 	mov	r0, r4
    549c:	ebfff475 	bl	2678 <uiGetEMACRxData>
    54a0:	e1a00800 	mov	r0, r0, lsl #16
    54a4:	e1a00820 	mov	r0, r0, lsr #16
    54a8:	e59f6144 	ldr	r6, [pc, #324]	; 55f4 <prog+0x55ac>
    54ac:	e1c600b0 	strh	r0, [r6]
    54b0:	e3500000 	cmp	r0, #0	; 0x0
    54b4:	0a00001f 	beq	5538 <ethernet_task+0xa8>
    54b8:	e1a05004 	mov	r5, r4
    54bc:	e5d4400c 	ldrb	r4, [r4, #12]
    54c0:	e5d5300d 	ldrb	r3, [r5, #13]
    54c4:	e1844403 	orr	r4, r4, r3, lsl #8
    54c8:	e3a00b02 	mov	r0, #2048	; 0x800
    54cc:	eb000bae 	bl	838c <htons>
    54d0:	e1540000 	cmp	r4, r0
    54d4:	1a000008 	bne	54fc <ethernet_task+0x6c>
    54d8:	eb00084d 	bl	7614 <uip_arp_ipin>
    54dc:	e3a00001 	mov	r0, #1	; 0x1
    54e0:	eb000c5d 	bl	865c <uip_process>
    54e4:	e1d630b0 	ldrh	r3, [r6]
    54e8:	e3530000 	cmp	r3, #0	; 0x0
    54ec:	08bd8070 	ldmeqia	sp!, {r4, r5, r6, pc}
    54f0:	eb000869 	bl	769c <uip_arp_out>
    54f4:	ebffffd2 	bl	5444 <ENET_Send>
    54f8:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
    54fc:	e5d5400c 	ldrb	r4, [r5, #12]
    5500:	e5d5300d 	ldrb	r3, [r5, #13]
    5504:	e1844403 	orr	r4, r4, r3, lsl #8
    5508:	e3a00b02 	mov	r0, #2048	; 0x800
    550c:	e2800006 	add	r0, r0, #6	; 0x6
    5510:	eb000b9d 	bl	838c <htons>
    5514:	e1540000 	cmp	r4, r0
    5518:	18bd8070 	ldmneia	sp!, {r4, r5, r6, pc}
    551c:	eb0007d7 	bl	7480 <uip_arp_arpin>
    5520:	e59f30cc 	ldr	r3, [pc, #204]	; 55f4 <prog+0x55ac>
    5524:	e1d330b0 	ldrh	r3, [r3]
    5528:	e3530000 	cmp	r3, #0	; 0x0
    552c:	08bd8070 	ldmeqia	sp!, {r4, r5, r6, pc}
    5530:	ebffffc3 	bl	5444 <ENET_Send>
    5534:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
    5538:	e59f40b8 	ldr	r4, [pc, #184]	; 55f8 <prog+0x55b0>
    553c:	e1a00004 	mov	r0, r4
    5540:	eb000aaf 	bl	8004 <timer_expired>
    5544:	e3500000 	cmp	r0, #0	; 0x0
    5548:	08bd8070 	ldmeqia	sp!, {r4, r5, r6, pc}
    554c:	e1a00004 	mov	r0, r4
    5550:	eb000aa7 	bl	7ff4 <timer_reset>
    5554:	e59f40a0 	ldr	r4, [pc, #160]	; 55fc <prog+0x55b4>
    5558:	e59f50a0 	ldr	r5, [pc, #160]	; 5600 <prog+0x55b8>
    555c:	e5854000 	str	r4, [r5]
    5560:	e3a00002 	mov	r0, #2	; 0x2
    5564:	eb000c3c 	bl	865c <uip_process>
    5568:	e59f3084 	ldr	r3, [pc, #132]	; 55f4 <prog+0x55ac>
    556c:	e1d330b0 	ldrh	r3, [r3]
    5570:	e3530000 	cmp	r3, #0	; 0x0
    5574:	0a000001 	beq	5580 <ethernet_task+0xf0>
    5578:	eb000847 	bl	769c <uip_arp_out>
    557c:	ebffffb0 	bl	5444 <ENET_Send>
    5580:	e2844088 	add	r4, r4, #136	; 0x88
    5584:	e59f3078 	ldr	r3, [pc, #120]	; 5604 <prog+0x55bc>
    5588:	e1530004 	cmp	r3, r4
    558c:	1afffff2 	bne	555c <ethernet_task+0xcc>
    5590:	e59f4070 	ldr	r4, [pc, #112]	; 5608 <prog+0x55c0>
    5594:	e59f5070 	ldr	r5, [pc, #112]	; 560c <prog+0x55c4>
    5598:	e5854000 	str	r4, [r5]
    559c:	e3a00005 	mov	r0, #5	; 0x5
    55a0:	eb000c2d 	bl	865c <uip_process>
    55a4:	e59f3048 	ldr	r3, [pc, #72]	; 55f4 <prog+0x55ac>
    55a8:	e1d330b0 	ldrh	r3, [r3]
    55ac:	e3530000 	cmp	r3, #0	; 0x0
    55b0:	0a000001 	beq	55bc <ethernet_task+0x12c>
    55b4:	eb000838 	bl	769c <uip_arp_out>
    55b8:	ebffffa1 	bl	5444 <ENET_Send>
    55bc:	e2844044 	add	r4, r4, #68	; 0x44
    55c0:	e59f3048 	ldr	r3, [pc, #72]	; 5610 <prog+0x55c8>
    55c4:	e1530004 	cmp	r3, r4
    55c8:	1afffff2 	bne	5598 <ethernet_task+0x108>
    55cc:	e59f4040 	ldr	r4, [pc, #64]	; 5614 <prog+0x55cc>
    55d0:	e1a00004 	mov	r0, r4
    55d4:	eb000a8a 	bl	8004 <timer_expired>
    55d8:	e3500000 	cmp	r0, #0	; 0x0
    55dc:	08bd8070 	ldmeqia	sp!, {r4, r5, r6, pc}
    55e0:	e1a00004 	mov	r0, r4
    55e4:	eb000a82 	bl	7ff4 <timer_reset>
    55e8:	eb0008bf 	bl	78ec <uip_arp_timer>
    55ec:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
    55f0:	40002e20 	andmi	r2, r0, r0, lsr #28
    55f4:	40001830 	andmi	r1, r0, r0, lsr r8
    55f8:	40001790 	mulmi	r0, r0, r7
    55fc:	4000184c 	andmi	r1, r0, ip, asr #16
    5600:	40001848 	andmi	r1, r0, r8, asr #16
    5604:	40002d8c 	andmi	r2, r0, ip, lsl #27
    5608:	40003400 	andmi	r3, r0, r0, lsl #8
    560c:	40001840 	andmi	r1, r0, r0, asr #16
    5610:	400036a8 	andmi	r3, r0, r8, lsr #13
    5614:	40001788 	andmi	r1, r0, r8, lsl #15

00005618 <clock_time>:
    5618:	e52de004 	str	lr, [sp, #-4]!
    561c:	ebfff125 	bl	1ab8 <T0Get>
    5620:	e49df004 	ldr	pc, [sp], #4

00005624 <clock_init>:
    5624:	e52de004 	str	lr, [sp, #-4]!
    5628:	e3a00001 	mov	r0, #1	; 0x1
    562c:	ebfff104 	bl	1a44 <T0Init>
    5630:	e49df004 	ldr	pc, [sp], #4

00005634 <clock_reset>:
    5634:	e52de004 	str	lr, [sp, #-4]!
    5638:	e3a00001 	mov	r0, #1	; 0x1
    563c:	ebfff100 	bl	1a44 <T0Init>
    5640:	ebfff117 	bl	1aa4 <T0Start>
    5644:	e49df004 	ldr	pc, [sp], #4

00005648 <clock_start>:
    5648:	e52de004 	str	lr, [sp, #-4]!
    564c:	ebfff114 	bl	1aa4 <T0Start>
    5650:	e49df004 	ldr	pc, [sp], #4

00005654 <ethernet_init>:
    5654:	e52de004 	str	lr, [sp, #-4]!
    5658:	e24dd008 	sub	sp, sp, #8	; 0x8
    565c:	e3a03000 	mov	r3, #0	; 0x0
    5660:	e5cd3002 	strb	r3, [sp, #2]
    5664:	e2433043 	sub	r3, r3, #67	; 0x43
    5668:	e5cd3003 	strb	r3, [sp, #3]
    566c:	e2833076 	add	r3, r3, #118	; 0x76
    5670:	e5cd3004 	strb	r3, [sp, #4]
    5674:	e2433031 	sub	r3, r3, #49	; 0x31
    5678:	e5cd3005 	strb	r3, [sp, #5]
    567c:	e2833062 	add	r3, r3, #98	; 0x62
    5680:	e5cd3006 	strb	r3, [sp, #6]
    5684:	e2433040 	sub	r3, r3, #64	; 0x40
    5688:	e5cd3007 	strb	r3, [sp, #7]
    568c:	ebffffe4 	bl	5624 <clock_init>
    5690:	ebffffec 	bl	5648 <clock_start>
    5694:	e59f00d0 	ldr	r0, [pc, #208]	; 576c <prog+0x5724>
    5698:	e3a01ffa 	mov	r1, #1000	; 0x3e8
    569c:	eb000a67 	bl	8040 <timer_set>
    56a0:	e59f00c8 	ldr	r0, [pc, #200]	; 5770 <prog+0x5728>
    56a4:	e3a01c27 	mov	r1, #9984	; 0x2700
    56a8:	e2811010 	add	r1, r1, #16	; 0x10
    56ac:	eb000a63 	bl	8040 <timer_set>
    56b0:	eb000abc 	bl	81a8 <uip_init>
    56b4:	ebffff5d 	bl	5430 <set_eth_addr>
    56b8:	e28d0002 	add	r0, sp, #2	; 0x2
    56bc:	e3a01006 	mov	r1, #6	; 0x6
    56c0:	ebfffaf3 	bl	4294 <dhcpc_init>
    56c4:	ebfff53d 	bl	2bc0 <services_init>
    56c8:	ea000001 	b	56d4 <ethernet_init+0x80>
    56cc:	e3a00064 	mov	r0, #100	; 0x64
    56d0:	ebfff0fc 	bl	1ac8 <delayMs>
    56d4:	ebfff42f 	bl	2798 <Init_EMAC>
    56d8:	e3500001 	cmp	r0, #1	; 0x1
    56dc:	1afffffa 	bne	56cc <ethernet_init+0x78>
    56e0:	e10f3000 	mrs	r3, CPSR
    56e4:	e3833080 	orr	r3, r3, #128	; 0x80
    56e8:	e129f003 	msr	CPSR_fc, r3
    56ec:	e3a03eff 	mov	r3, #4080	; 0xff0
    56f0:	e283300f 	add	r3, r3, #15	; 0xf
    56f4:	e1833a83 	orr	r3, r3, r3, lsl #21
    56f8:	e3a020dd 	mov	r2, #221	; 0xdd
    56fc:	e503201b 	str	r2, [r3, #-27]
    5700:	e24220de 	sub	r2, r2, #222	; 0xde
    5704:	e5123ff3 	ldr	r3, [r2, #-4083]
    5708:	e3c33602 	bic	r3, r3, #2097152	; 0x200000
    570c:	e5023ff3 	str	r3, [r2, #-4083]
    5710:	e5123fef 	ldr	r3, [r2, #-4079]
    5714:	e3833602 	orr	r3, r3, #2097152	; 0x200000
    5718:	e5023fef 	str	r3, [r2, #-4079]
    571c:	e59f3050 	ldr	r3, [pc, #80]	; 5774 <prog+0x572c>
    5720:	e5023eab 	str	r3, [r2, #-3755]
    5724:	e59f204c 	ldr	r2, [pc, #76]	; 5778 <prog+0x5730>
    5728:	e5dd3002 	ldrb	r3, [sp, #2]
    572c:	e5c23000 	strb	r3, [r2]
    5730:	e5dd3003 	ldrb	r3, [sp, #3]
    5734:	e5c23001 	strb	r3, [r2, #1]
    5738:	e5dd3004 	ldrb	r3, [sp, #4]
    573c:	e5c23002 	strb	r3, [r2, #2]
    5740:	e5dd3005 	ldrb	r3, [sp, #5]
    5744:	e5c23003 	strb	r3, [r2, #3]
    5748:	e5dd3006 	ldrb	r3, [sp, #6]
    574c:	e5c23004 	strb	r3, [r2, #4]
    5750:	e5dd3007 	ldrb	r3, [sp, #7]
    5754:	e5c23005 	strb	r3, [r2, #5]
    5758:	e10f3000 	mrs	r3, CPSR
    575c:	e3c33080 	bic	r3, r3, #128	; 0x80
    5760:	e129f003 	msr	CPSR_fc, r3
    5764:	e28dd008 	add	sp, sp, #8	; 0x8
    5768:	e8bd8000 	ldmia	sp!, {pc}
    576c:	40001790 	mulmi	r0, r0, r7
    5770:	40001788 	andmi	r1, r0, r8, lsl #15
    5774:	00002b1c 	andeq	r2, r0, ip, lsl fp
    5778:	40001554 	andmi	r1, r0, r4, asr r5

0000577c <lcd_putc>:
 *
 * \param dado Caracter a ser enviado para o display.
 */
void lcd_putc(int dado)
{
    577c:	e92d4030 	stmdb	sp!, {r4, r5, lr}
	  FIO4SET = lcd_rs;
    5780:	e3e04103 	mvn	r4, #-1073741824	; 0xc0000000
    5784:	e2444a03 	sub	r4, r4, #12288	; 0x3000
    5788:	e3a03402 	mov	r3, #33554432	; 0x2000000
    578c:	e5043f67 	str	r3, [r4, #-3943]
	  FIO3CLR = lcd_dados;//LIMPA OS DADOS
    5790:	e3a030ff 	mov	r3, #255	; 0xff
    5794:	e5043f83 	str	r3, [r4, #-3971]
	  FIO3SET = dado;
    5798:	e5040f87 	str	r0, [r4, #-3975]
	  FIO4SET = lcd_en;
    579c:	e3a05401 	mov	r5, #16777216	; 0x1000000
    57a0:	e5045f67 	str	r5, [r4, #-3943]
	  //espera_1ms(1);   //AGUARDA UM SEGUNDO.
	  delay_1us(1);
    57a4:	e3a00001 	mov	r0, #1	; 0x1
    57a8:	ebfff107 	bl	1bcc <delay_1us>
	  FIO4CLR = lcd_en;
    57ac:	e5045f63 	str	r5, [r4, #-3939]
	  //espera_1ms(1);	 //AGUARDA UM SEGUNDO
	  delay_1us(1);
    57b0:	e3a00001 	mov	r0, #1	; 0x1
    57b4:	ebfff104 	bl	1bcc <delay_1us>
}
    57b8:	e8bd8030 	ldmia	sp!, {r4, r5, pc}

000057bc <lcd_string>:

/**
 * @brief Limpa todos os dados do display.
 *
 */
void lcd_clr(void)
{
	lcd_command(0x01);
}

/**
 * \brief Escreve uma string de dados passados por parametro.
 *
 * \param str String como a mensagem a ser transmitida.
 */
void lcd_string(char *str)
{
    57bc:	e92d4010 	stmdb	sp!, {r4, lr}
    57c0:	e1a03000 	mov	r3, r0
	while(*str) lcd_putc(*str++);
    57c4:	e5d00000 	ldrb	r0, [r0]
    57c8:	e3500000 	cmp	r0, #0	; 0x0
    57cc:	08bd8010 	ldmeqia	sp!, {r4, pc}
    57d0:	e1a04003 	mov	r4, r3
    57d4:	ebffffe8 	bl	577c <lcd_putc>
    57d8:	e5f40001 	ldrb	r0, [r4, #1]!
    57dc:	e3500000 	cmp	r0, #0	; 0x0
    57e0:	1afffffb 	bne	57d4 <lcd_string+0x18>
    57e4:	e8bd8010 	ldmia	sp!, {r4, pc}

000057e8 <lcd_command>:
    57e8:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    57ec:	e3e04103 	mvn	r4, #-1073741824	; 0xc0000000
    57f0:	e2444a03 	sub	r4, r4, #12288	; 0x3000
    57f4:	e3a03402 	mov	r3, #33554432	; 0x2000000
    57f8:	e5043f63 	str	r3, [r4, #-3939]
    57fc:	e3a030ff 	mov	r3, #255	; 0xff
    5800:	e5043f83 	str	r3, [r4, #-3971]
    5804:	e5040f87 	str	r0, [r4, #-3975]
    5808:	e3a05401 	mov	r5, #16777216	; 0x1000000
    580c:	e5045f67 	str	r5, [r4, #-3943]
    5810:	e3a00001 	mov	r0, #1	; 0x1
    5814:	ebfff0ec 	bl	1bcc <delay_1us>
    5818:	e5045f63 	str	r5, [r4, #-3939]
    581c:	e3a00001 	mov	r0, #1	; 0x1
    5820:	ebfff0e9 	bl	1bcc <delay_1us>
    5824:	e8bd8030 	ldmia	sp!, {r4, r5, pc}

00005828 <init_lcd>:
}


void lcd_string_old(char *str)
{
	//while(*str) lcd_putc(*str++);
	int qtd, i=0;

	qtd = strlen(str);
	for(i=0;i<qtd;i++)
	{
	   lcd_putc(str[i]);
	}

}

/**
 * \brief Posiciona o cursorno display.
 *
 * \param linha Linha onde o curso e para ficar.
 * \param coluna Coluna onde o curso tem que estar.
 */
void lcd_goto(int linha, int coluna)
{
	//0x80 a 0x8f - para acessar a primeira linhas e as colunas de 0 a f.
	//0xC0 a 0xcf - para acessar a segunda linhae as colunas de 0 a f.
	if(linha <=1) lcd_command(0x80 + coluna);
	else lcd_command(0XC0 + coluna);
}

/**
 * \brief Inicialia o display de lcd
 */
void init_lcd(void)
{
    5828:	e52de004 	str	lr, [sp, #-4]!
	FIO4DIR = lcd_en + lcd_rs + lcd_rw;	//DIR -> TODOS OS BITS EM UM, SIGNIFICA A PORTA ONDE VAI ESTAR MEXENDO;
    582c:	e3e02103 	mvn	r2, #-1073741824	; 0xc0000000
    5830:	e2422a03 	sub	r2, r2, #12288	; 0x3000
    5834:	e3a03443 	mov	r3, #1124073472	; 0x43000000
    5838:	e5023f7f 	str	r3, [r2, #-3967]
	FIO3DIR = lcd_dados;
    583c:	e3a030ff 	mov	r3, #255	; 0xff
    5840:	e5023f9f 	str	r3, [r2, #-3999]
    FIO4CLR = lcd_en + lcd_rw; //configura inicializa os comandos em zero
    5844:	e3a03441 	mov	r3, #1090519040	; 0x41000000
    5848:	e5023f63 	str	r3, [r2, #-3939]
    delay_1us(1);
    584c:	e3a00001 	mov	r0, #1	; 0x1
    5850:	ebfff0dd 	bl	1bcc <delay_1us>

	lcd_command(0x38);
    5854:	e3a00038 	mov	r0, #56	; 0x38
    5858:	ebffffe2 	bl	57e8 <lcd_command>
	lcd_command(0x0e);
    585c:	e3a0000e 	mov	r0, #14	; 0xe
    5860:	ebffffe0 	bl	57e8 <lcd_command>
	lcd_command(0x06);
    5864:	e3a00006 	mov	r0, #6	; 0x6
    5868:	ebffffde 	bl	57e8 <lcd_command>
	lcd_command(0x01);
    586c:	e3a00001 	mov	r0, #1	; 0x1
    5870:	ebffffdc 	bl	57e8 <lcd_command>
}
    5874:	e49df004 	ldr	pc, [sp], #4

00005878 <lcd_goto>:
    5878:	e52de004 	str	lr, [sp, #-4]!
    587c:	e3500001 	cmp	r0, #1	; 0x1
    5880:	ca000002 	bgt	5890 <lcd_goto+0x18>
    5884:	e2810080 	add	r0, r1, #128	; 0x80
    5888:	ebffffd6 	bl	57e8 <lcd_command>
    588c:	e49df004 	ldr	pc, [sp], #4
    5890:	e28100c0 	add	r0, r1, #192	; 0xc0
    5894:	ebffffd3 	bl	57e8 <lcd_command>
    5898:	e49df004 	ldr	pc, [sp], #4

0000589c <lcd_clr>:
    589c:	e52de004 	str	lr, [sp, #-4]!
    58a0:	e3a00001 	mov	r0, #1	; 0x1
    58a4:	ebffffcf 	bl	57e8 <lcd_command>
    58a8:	e49df004 	ldr	pc, [sp], #4

000058ac <lcd_string_old>:
    58ac:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
    58b0:	e1a06000 	mov	r6, r0
    58b4:	eb001baf 	bl	c778 <strlen>
    58b8:	e2505000 	subs	r5, r0, #0	; 0x0
    58bc:	d8bd8070 	ldmleia	sp!, {r4, r5, r6, pc}
    58c0:	e3a04000 	mov	r4, #0	; 0x0
    58c4:	e7d40006 	ldrb	r0, [r4, r6]
    58c8:	ebffffab 	bl	577c <lcd_putc>
    58cc:	e2844001 	add	r4, r4, #1	; 0x1
    58d0:	e1550004 	cmp	r5, r4
    58d4:	1afffffa 	bne	58c4 <lcd_string_old+0x18>
    58d8:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}

000058dc <unknown_cmd>:
 * Funcao que imprime mensagem de comando desconhecido.
 *
 */
static void unknown_cmd(char *str)
{
    58dc:	e92d4010 	stmdb	sp!, {r4, lr}
    58e0:	e24dd064 	sub	sp, sp, #100	; 0x64
    58e4:	e1a02000 	mov	r2, r0
	char buff[100];
  if(strlen(str) > 0) {
    58e8:	e5d03000 	ldrb	r3, [r0]
    58ec:	e3530000 	cmp	r3, #0	; 0x0
    58f0:	0a000006 	beq	5910 <unknown_cmd+0x34>
    sprintf(buff, "\nUnknown command: %s\n", str);
    58f4:	e1a0400d 	mov	r4, sp
    58f8:	e1a0000d 	mov	r0, sp
    58fc:	e59f1014 	ldr	r1, [pc, #20]	; 5918 <prog+0x58d0>
    5900:	ebfff031 	bl	19cc <sprintf>
    strcpy(msg_dest, buff);
    5904:	e59f0010 	ldr	r0, [pc, #16]	; 591c <prog+0x58d4>
    5908:	e1a0100d 	mov	r1, sp
    590c:	eb001b72 	bl	c6dc <strcpy>
  }
}
    5910:	e28dd064 	add	sp, sp, #100	; 0x64
    5914:	e8bd8010 	ldmia	sp!, {r4, pc}
    5918:	00014a08 	andeq	r4, r1, r8, lsl #20
    591c:	400009fc 	strmid	r0, [r0], -ip

00005920 <UARTTakeStringAsync>:


/** @} */



/**
 * @brief Pega mensagem da serial assincrono.
 *
 * Pega os dados digitados na CLI ate que venha uma nova linha.
 * Não é bloqueante.
 *
 * @param str string para o retorno do comando digitado
 * @param channel Canal que sera usado pela serial.
 *
 * @return 0 - se Ok, -1 se buffer ainda não esta completo.
 *
 */
int UARTTakeStringAsync(char *str, char channel)
{
    5920:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
    5924:	e1a07000 	mov	r7, r0
    5928:	e20140ff 	and	r4, r1, #255	; 0xff
	char vd = 0xff, i;
//	char tp[MAX_COMMAND_SIZE]="\0";
	char cond = '\n';

	vd = UARTReceiveByte(channel);
    592c:	e1a00004 	mov	r0, r4
    5930:	ebffec71 	bl	afc <UARTReceiveByte>
    5934:	e1a05000 	mov	r5, r0

	if(buff_cmd_counter == 0){
    5938:	e59f30e4 	ldr	r3, [pc, #228]	; 5a24 <prog+0x59dc>
    593c:	e5936000 	ldr	r6, [r3]
    5940:	e3560000 	cmp	r6, #0	; 0x0
    5944:	1a000014 	bne	599c <UARTTakeStringAsync+0x7c>
		//verifica se o comando é seta para cima. Se sim, retorna o comando anterior.
		if(vd == 0x01b){
    5948:	e350001b 	cmp	r0, #27	; 0x1b
			vd = UARTReceiveByte(channel);
			printf("*");
			//if(buff_cmd !=NULL){
			 if(vd = 0x5b){
				uart_puts(buff_cmd);
				strcpy(str, buff_cmd);
				return 0;
    594c:	159f30d4 	ldrne	r3, [pc, #212]	; 5a28 <prog+0x59e0>
    5950:	13a01000 	movne	r1, #0	; 0x0
    5954:	159f20d0 	ldrne	r2, [pc, #208]	; 5a2c <prog+0x59e4>
    5958:	1a00000c 	bne	5990 <UARTTakeStringAsync+0x70>
    595c:	e1a00004 	mov	r0, r4
    5960:	ebffec65 	bl	afc <UARTReceiveByte>
    5964:	e3a0002a 	mov	r0, #42	; 0x2a
    5968:	eb001a5a 	bl	c2d8 <putchar>
    596c:	e59f40b4 	ldr	r4, [pc, #180]	; 5a28 <prog+0x59e0>
    5970:	e1a00004 	mov	r0, r4
    5974:	e1a01006 	mov	r1, r6
    5978:	ebffeca4 	bl	c10 <UARTTransmitString>
    597c:	e1a00007 	mov	r0, r7
    5980:	e1a01004 	mov	r1, r4
    5984:	eb001b54 	bl	c6dc <strcpy>
    5988:	e1a00006 	mov	r0, r6
    598c:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
			}
		}
		//senão limpa buffer
		for(i=0;i<MAX_COMMAND_SIZE;i++)	buff_cmd[i]='\0';
    5990:	e4c31001 	strb	r1, [r3], #1
    5994:	e1530002 	cmp	r3, r2
    5998:	1afffffc 	bne	5990 <UARTTakeStringAsync+0x70>
	}

	//senão é um comando de fim de linha.
	if(vd == cond || vd == 0x0D){
    599c:	e355000d 	cmp	r5, #13	; 0xd
    59a0:	1355000a 	cmpne	r5, #10	; 0xa
    59a4:	1a00000d 	bne	59e0 <UARTTakeStringAsync+0xc0>
		DEBUG_ENTER;
		sprintf(buff_cmd, "%s\0", buff_cmd,vd);
    59a8:	e59f4078 	ldr	r4, [pc, #120]	; 5a28 <prog+0x59e0>
    59ac:	e1a00004 	mov	r0, r4
    59b0:	e59f1078 	ldr	r1, [pc, #120]	; 5a30 <prog+0x59e8>
    59b4:	e1a02004 	mov	r2, r4
    59b8:	e1a03005 	mov	r3, r5
    59bc:	ebfff002 	bl	19cc <sprintf>
		strcpy(str, buff_cmd);
    59c0:	e1a00007 	mov	r0, r7
    59c4:	e1a01004 	mov	r1, r4
    59c8:	eb001b43 	bl	c6dc <strcpy>
		buff_cmd_counter = 0;
    59cc:	e3a02000 	mov	r2, #0	; 0x0
    59d0:	e59f304c 	ldr	r3, [pc, #76]	; 5a24 <prog+0x59dc>
    59d4:	e5832000 	str	r2, [r3]
    59d8:	e1a00002 	mov	r0, r2
    59dc:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
		return 0;
	}

	//verifica se não foi digitado enter.
	else if (vd != cond){
    59e0:	e355000a 	cmp	r5, #10	; 0xa
    59e4:	03a00000 	moveq	r0, #0	; 0x0
    59e8:	08bd80f0 	ldmeqia	sp!, {r4, r5, r6, r7, pc}
		uart_putc(vd);
    59ec:	e1a00005 	mov	r0, r5
    59f0:	e3a01000 	mov	r1, #0	; 0x0
    59f4:	ebffec5f 	bl	b78 <UARTTransmitByte>
		sprintf(buff_cmd, "%s%c", buff_cmd,vd);
    59f8:	e59f2028 	ldr	r2, [pc, #40]	; 5a28 <prog+0x59e0>
    59fc:	e1a00002 	mov	r0, r2
    5a00:	e59f102c 	ldr	r1, [pc, #44]	; 5a34 <prog+0x59ec>
    5a04:	e1a03005 	mov	r3, r5
    5a08:	ebffefef 	bl	19cc <sprintf>
		//buff_cmd[buff_cmd_counter] == vd;
		buff_cmd_counter++;
    5a0c:	e59f2010 	ldr	r2, [pc, #16]	; 5a24 <prog+0x59dc>
    5a10:	e5923000 	ldr	r3, [r2]
    5a14:	e2833001 	add	r3, r3, #1	; 0x1
    5a18:	e5823000 	str	r3, [r2]
    5a1c:	e3e00000 	mvn	r0, #0	; 0x0
		return -1;
	}

	return 0;
}
    5a20:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
    5a24:	400008a4 	andmi	r0, r0, r4, lsr #17
    5a28:	40001798 	mulmi	r0, r8, r7
    5a2c:	4000182e 	andmi	r1, r0, lr, lsr #16
    5a30:	00014254 	andeq	r4, r1, r4, asr r2
    5a34:	00014a20 	andeq	r4, r1, r0, lsr #20

00005a38 <UARTTakeString>:
    5a38:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
    5a3c:	e24dd098 	sub	sp, sp, #152	; 0x98
    5a40:	e1a07000 	mov	r7, r0
    5a44:	e20160ff 	and	r6, r1, #255	; 0xff
    5a48:	e59f3064 	ldr	r3, [pc, #100]	; 5ab4 <prog+0x5a6c>
    5a4c:	e1d330b0 	ldrh	r3, [r3]
    5a50:	e1cd30b2 	strh	r3, [sp, #2]
    5a54:	e28d0004 	add	r0, sp, #4	; 0x4
    5a58:	e3a01000 	mov	r1, #0	; 0x0
    5a5c:	e3a02094 	mov	r2, #148	; 0x94
    5a60:	eb0019b3 	bl	c134 <memset>
    5a64:	e28d5002 	add	r5, sp, #2	; 0x2
    5a68:	e1a00006 	mov	r0, r6
    5a6c:	ebffec22 	bl	afc <UARTReceiveByte>
    5a70:	e1a04000 	mov	r4, r0
    5a74:	e20000ff 	and	r0, r0, #255	; 0xff
    5a78:	e3a01000 	mov	r1, #0	; 0x0
    5a7c:	ebffec3d 	bl	b78 <UARTTransmitByte>
    5a80:	e354000a 	cmp	r4, #10	; 0xa
    5a84:	0a000005 	beq	5aa0 <UARTTakeString+0x68>
    5a88:	e1a00005 	mov	r0, r5
    5a8c:	e59f1024 	ldr	r1, [pc, #36]	; 5ab8 <prog+0x5a70>
    5a90:	e1a02005 	mov	r2, r5
    5a94:	e1a03004 	mov	r3, r4
    5a98:	ebffefcb 	bl	19cc <sprintf>
    5a9c:	eafffff1 	b	5a68 <UARTTakeString+0x30>
    5aa0:	e1a00007 	mov	r0, r7
    5aa4:	e28d1002 	add	r1, sp, #2	; 0x2
    5aa8:	eb001b0b 	bl	c6dc <strcpy>
    5aac:	e28dd098 	add	sp, sp, #152	; 0x98
    5ab0:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
    5ab4:	00014258 	andeq	r4, r1, r8, asr r2
    5ab8:	00014a20 	andeq	r4, r1, r0, lsr #20

00005abc <set_MaskDefault>:
    5abc:	e52de004 	str	lr, [sp, #-4]!
    5ac0:	e3a020ff 	mov	r2, #255	; 0xff
    5ac4:	e59f3024 	ldr	r3, [pc, #36]	; 5af0 <prog+0x5aa8>
    5ac8:	e1c320b0 	strh	r2, [r3]
    5acc:	e59f3020 	ldr	r3, [pc, #32]	; 5af4 <prog+0x5aac>
    5ad0:	e1c320b0 	strh	r2, [r3]
    5ad4:	e59f301c 	ldr	r3, [pc, #28]	; 5af8 <prog+0x5ab0>
    5ad8:	e1c320b0 	strh	r2, [r3]
    5adc:	e59f3018 	ldr	r3, [pc, #24]	; 5afc <prog+0x5ab4>
    5ae0:	e3a02000 	mov	r2, #0	; 0x0
    5ae4:	e1c320b0 	strh	r2, [r3]
    5ae8:	eb00018c 	bl	6120 <set_Mask>
    5aec:	e49df004 	ldr	pc, [sp], #4
    5af0:	400016bc 	strmih	r1, [r0], -ip
    5af4:	40001690 	mulmi	r0, r0, r6
    5af8:	40001696 	mulmi	r0, r6, r6
    5afc:	400016c8 	andmi	r1, r0, r8, asr #13

00005b00 <set_GatewayDefault>:
    5b00:	e52de004 	str	lr, [sp, #-4]!
    5b04:	e59f302c 	ldr	r3, [pc, #44]	; 5b38 <prog+0x5af0>
    5b08:	e3a020c0 	mov	r2, #192	; 0xc0
    5b0c:	e1c320b0 	strh	r2, [r3]
    5b10:	e59f3024 	ldr	r3, [pc, #36]	; 5b3c <prog+0x5af4>
    5b14:	e3a020a8 	mov	r2, #168	; 0xa8
    5b18:	e1c320b0 	strh	r2, [r3]
    5b1c:	e3a02001 	mov	r2, #1	; 0x1
    5b20:	e59f3018 	ldr	r3, [pc, #24]	; 5b40 <prog+0x5af8>
    5b24:	e1c320b0 	strh	r2, [r3]
    5b28:	e59f3014 	ldr	r3, [pc, #20]	; 5b44 <prog+0x5afc>
    5b2c:	e1c320b0 	strh	r2, [r3]
    5b30:	eb000161 	bl	60bc <set_Gateway>
    5b34:	e49df004 	ldr	pc, [sp], #4
    5b38:	40001658 	andmi	r1, r0, r8, asr r6
    5b3c:	40001660 	andmi	r1, r0, r0, ror #12
    5b40:	400016be 	strmih	r1, [r0], -lr
    5b44:	400016e0 	andmi	r1, r0, r0, ror #13

00005b48 <set_IpDefault>:
    5b48:	e52de004 	str	lr, [sp, #-4]!
    5b4c:	e59f2024 	ldr	r2, [pc, #36]	; 5b78 <prog+0x5b30>
    5b50:	e3a030c0 	mov	r3, #192	; 0xc0
    5b54:	e5823000 	str	r3, [r2]
    5b58:	e2433018 	sub	r3, r3, #24	; 0x18
    5b5c:	e5823004 	str	r3, [r2, #4]
    5b60:	e24330a7 	sub	r3, r3, #167	; 0xa7
    5b64:	e5823008 	str	r3, [r2, #8]
    5b68:	e283300c 	add	r3, r3, #12	; 0xc
    5b6c:	e582300c 	str	r3, [r2, #12]
    5b70:	eb000132 	bl	6040 <set_IP>
    5b74:	e49df004 	ldr	pc, [sp], #4
    5b78:	400016cc 	andmi	r1, r0, ip, asr #13

00005b7c <cmdExec>:
    5b7c:	e92d4010 	stmdb	sp!, {r4, lr}
    5b80:	e1a03000 	mov	r3, r0
    5b84:	e59f0058 	ldr	r0, [pc, #88]	; 5be4 <prog+0x5b9c>
    5b88:	e1a0e00f 	mov	lr, pc
    5b8c:	e12fff13 	bx	r3
    5b90:	e3500001 	cmp	r0, #1	; 0x1
    5b94:	1a000007 	bne	5bb8 <cmdExec+0x3c>
    5b98:	e59f4048 	ldr	r4, [pc, #72]	; 5be8 <prog+0x5ba0>
    5b9c:	e1a00004 	mov	r0, r4
    5ba0:	eb001af4 	bl	c778 <strlen>
    5ba4:	e0800004 	add	r0, r0, r4
    5ba8:	e59f103c 	ldr	r1, [pc, #60]	; 5bec <prog+0x5ba4>
    5bac:	e3a0200f 	mov	r2, #15	; 0xf
    5bb0:	eb001937 	bl	c094 <memcpy>
    5bb4:	e8bd8010 	ldmia	sp!, {r4, pc}
    5bb8:	e59f4028 	ldr	r4, [pc, #40]	; 5be8 <prog+0x5ba0>
    5bbc:	e1a00004 	mov	r0, r4
    5bc0:	e59f1028 	ldr	r1, [pc, #40]	; 5bf0 <prog+0x5ba8>
    5bc4:	eb001a28 	bl	c46c <strcat>
    5bc8:	e1a00004 	mov	r0, r4
    5bcc:	eb001ae9 	bl	c778 <strlen>
    5bd0:	e0800004 	add	r0, r0, r4
    5bd4:	e59f1018 	ldr	r1, [pc, #24]	; 5bf4 <prog+0x5bac>
    5bd8:	e3a02002 	mov	r2, #2	; 0x2
    5bdc:	eb00192c 	bl	c094 <memcpy>
    5be0:	e8bd8010 	ldmia	sp!, {r4, pc}
    5be4:	400008ac 	andmi	r0, r0, ip, lsr #17
    5be8:	400009fc 	strmid	r0, [r0], -ip
    5bec:	00014a28 	andeq	r4, r1, r8, lsr #20
    5bf0:	40000932 	andmi	r0, r0, r2, lsr r9
    5bf4:	00014dfc 	streqd	r4, [r1], -ip

00005bf8 <ExecCommand>:
    5bf8:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    5bfc:	e1a05000 	mov	r5, r0
    5c00:	e59f4040 	ldr	r4, [pc, #64]	; 5c48 <prog+0x5c00>
    5c04:	e1a00004 	mov	r0, r4
    5c08:	e59f103c 	ldr	r1, [pc, #60]	; 5c4c <prog+0x5c04>
    5c0c:	e3a02002 	mov	r2, #2	; 0x2
    5c10:	eb00191f 	bl	c094 <memcpy>
    5c14:	e1a00004 	mov	r0, r4
    5c18:	e59f1030 	ldr	r1, [pc, #48]	; 5c50 <prog+0x5c08>
    5c1c:	eb001a12 	bl	c46c <strcat>
    5c20:	e1a00004 	mov	r0, r4
    5c24:	eb001ad3 	bl	c778 <strlen>
    5c28:	e0800004 	add	r0, r0, r4
    5c2c:	e59f1020 	ldr	r1, [pc, #32]	; 5c54 <prog+0x5c0c>
    5c30:	e3a02003 	mov	r2, #3	; 0x3
    5c34:	eb001916 	bl	c094 <memcpy>
    5c38:	e5950000 	ldr	r0, [r5]
    5c3c:	ebffffce 	bl	5b7c <cmdExec>
    5c40:	e3a00000 	mov	r0, #0	; 0x0
    5c44:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
    5c48:	400009fc 	strmid	r0, [r0], -ip
    5c4c:	00014dfc 	streqd	r4, [r1], -ip
    5c50:	400008b0 	strmih	r0, [r0], -r0
    5c54:	00014a38 	andeq	r4, r1, r8, lsr sl

00005c58 <mount_token>:
    5c58:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
    5c5c:	e1a06000 	mov	r6, r0
    5c60:	e59f4194 	ldr	r4, [pc, #404]	; 5dfc <prog+0x5db4>
    5c64:	e3a0501e 	mov	r5, #30	; 0x1e
    5c68:	e1a00004 	mov	r0, r4
    5c6c:	e3a01000 	mov	r1, #0	; 0x0
    5c70:	e1a02005 	mov	r2, r5
    5c74:	eb00192e 	bl	c134 <memset>
    5c78:	e0840005 	add	r0, r4, r5
    5c7c:	e3a01000 	mov	r1, #0	; 0x0
    5c80:	e1a02005 	mov	r2, r5
    5c84:	eb00192a 	bl	c134 <memset>
    5c88:	e2840082 	add	r0, r4, #130	; 0x82
    5c8c:	e3a01000 	mov	r1, #0	; 0x0
    5c90:	e1a02005 	mov	r2, r5
    5c94:	eb001926 	bl	c134 <memset>
    5c98:	e1a00006 	mov	r0, r6
    5c9c:	eb001ab5 	bl	c778 <strlen>
    5ca0:	e21050ff 	ands	r5, r0, #255	; 0xff
    5ca4:	0a000052 	beq	5df4 <mount_token+0x19c>
    5ca8:	e3a04000 	mov	r4, #0	; 0x0
    5cac:	e7d60004 	ldrb	r0, [r6, r4]
    5cb0:	eb001bfd 	bl	ccac <toupper>
    5cb4:	e7c60004 	strb	r0, [r6, r4]
    5cb8:	e2843001 	add	r3, r4, #1	; 0x1
    5cbc:	e20340ff 	and	r4, r3, #255	; 0xff
    5cc0:	e1550004 	cmp	r5, r4
    5cc4:	1afffff8 	bne	5cac <mount_token+0x54>
    5cc8:	e1a00006 	mov	r0, r6
    5ccc:	e59f112c 	ldr	r1, [pc, #300]	; 5e00 <prog+0x5db8>
    5cd0:	eb001bbc 	bl	cbc8 <strtok>
    5cd4:	e1a06000 	mov	r6, r0
    5cd8:	e59f1124 	ldr	r1, [pc, #292]	; 5e04 <prog+0x5dbc>
    5cdc:	eb001a4a 	bl	c60c <strcmp>
    5ce0:	e3500000 	cmp	r0, #0	; 0x0
    5ce4:	059f311c 	ldreq	r3, [pc, #284]	; 5e08 <prog+0x5dc0>
    5ce8:	05830000 	streq	r0, [r3]
    5cec:	0a00001f 	beq	5d70 <mount_token+0x118>
    5cf0:	e1a00006 	mov	r0, r6
    5cf4:	e59f1110 	ldr	r1, [pc, #272]	; 5e0c <prog+0x5dc4>
    5cf8:	eb001a43 	bl	c60c <strcmp>
    5cfc:	e3500000 	cmp	r0, #0	; 0x0
    5d00:	03a02001 	moveq	r2, #1	; 0x1
    5d04:	059f30fc 	ldreq	r3, [pc, #252]	; 5e08 <prog+0x5dc0>
    5d08:	05832000 	streq	r2, [r3]
    5d0c:	0a000017 	beq	5d70 <mount_token+0x118>
    5d10:	e1a00006 	mov	r0, r6
    5d14:	e59f10f4 	ldr	r1, [pc, #244]	; 5e10 <prog+0x5dc8>
    5d18:	eb001a3b 	bl	c60c <strcmp>
    5d1c:	e3500000 	cmp	r0, #0	; 0x0
    5d20:	03a02002 	moveq	r2, #2	; 0x2
    5d24:	059f30dc 	ldreq	r3, [pc, #220]	; 5e08 <prog+0x5dc0>
    5d28:	05832000 	streq	r2, [r3]
    5d2c:	0a00000f 	beq	5d70 <mount_token+0x118>
    5d30:	e1a00006 	mov	r0, r6
    5d34:	e59f10d8 	ldr	r1, [pc, #216]	; 5e14 <prog+0x5dcc>
    5d38:	eb001a33 	bl	c60c <strcmp>
    5d3c:	e3500000 	cmp	r0, #0	; 0x0
    5d40:	03a02003 	moveq	r2, #3	; 0x3
    5d44:	059f30bc 	ldreq	r3, [pc, #188]	; 5e08 <prog+0x5dc0>
    5d48:	05832000 	streq	r2, [r3]
    5d4c:	0a000007 	beq	5d70 <mount_token+0x118>
    5d50:	e1a00006 	mov	r0, r6
    5d54:	e59f10bc 	ldr	r1, [pc, #188]	; 5e18 <prog+0x5dd0>
    5d58:	eb001a2b 	bl	c60c <strcmp>
    5d5c:	e3500000 	cmp	r0, #0	; 0x0
    5d60:	1a000023 	bne	5df4 <mount_token+0x19c>
    5d64:	e3a02004 	mov	r2, #4	; 0x4
    5d68:	e59f3098 	ldr	r3, [pc, #152]	; 5e08 <prog+0x5dc0>
    5d6c:	e5832000 	str	r2, [r3]
    5d70:	e3a00000 	mov	r0, #0	; 0x0
    5d74:	e59f1084 	ldr	r1, [pc, #132]	; 5e00 <prog+0x5db8>
    5d78:	eb001b92 	bl	cbc8 <strtok>
    5d7c:	e1a01000 	mov	r1, r0
    5d80:	e59f4080 	ldr	r4, [pc, #128]	; 5e08 <prog+0x5dc0>
    5d84:	e5943000 	ldr	r3, [r4]
    5d88:	e2433003 	sub	r3, r3, #3	; 0x3
    5d8c:	e3530001 	cmp	r3, #1	; 0x1
    5d90:	8a00000b 	bhi	5dc4 <mount_token+0x16c>
    5d94:	e2840022 	add	r0, r4, #34	; 0x22
    5d98:	e1a02005 	mov	r2, r5
    5d9c:	eb001b1f 	bl	ca20 <strncpy>
    5da0:	e2844004 	add	r4, r4, #4	; 0x4
    5da4:	e1a00006 	mov	r0, r6
    5da8:	eb001a72 	bl	c778 <strlen>
    5dac:	e1a02000 	mov	r2, r0
    5db0:	e1a00004 	mov	r0, r4
    5db4:	e1a01006 	mov	r1, r6
    5db8:	eb001b18 	bl	ca20 <strncpy>
    5dbc:	e3a00000 	mov	r0, #0	; 0x0
    5dc0:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
    5dc4:	e59f4030 	ldr	r4, [pc, #48]	; 5dfc <prog+0x5db4>
    5dc8:	e1a00004 	mov	r0, r4
    5dcc:	e1a02005 	mov	r2, r5
    5dd0:	eb001b12 	bl	ca20 <strncpy>
    5dd4:	e3a00000 	mov	r0, #0	; 0x0
    5dd8:	e59f1020 	ldr	r1, [pc, #32]	; 5e00 <prog+0x5db8>
    5ddc:	eb001b79 	bl	cbc8 <strtok>
    5de0:	e1a01000 	mov	r1, r0
    5de4:	e284001e 	add	r0, r4, #30	; 0x1e
    5de8:	eb001a3b 	bl	c6dc <strcpy>
    5dec:	e3a00000 	mov	r0, #0	; 0x0
    5df0:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
    5df4:	e3e00000 	mvn	r0, #0	; 0x0
    5df8:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
    5dfc:	400008b0 	strmih	r0, [r0], -r0
    5e00:	00014720 	andeq	r4, r1, r0, lsr #14
    5e04:	00014a3c 	andeq	r4, r1, ip, lsr sl
    5e08:	400008ac 	andmi	r0, r0, ip, lsr #17
    5e0c:	00014a40 	andeq	r4, r1, r0, asr #20
    5e10:	00014a44 	andeq	r4, r1, r4, asr #20
    5e14:	00014a4c 	andeq	r4, r1, ip, asr #20
    5e18:	00014a54 	andeq	r4, r1, r4, asr sl

00005e1c <CLI_Builder>:
    5e1c:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
    5e20:	e24dd0cc 	sub	sp, sp, #204	; 0xcc
    5e24:	e1a05000 	mov	r5, r0
    5e28:	e1a07001 	mov	r7, r1
    5e2c:	e59f31e8 	ldr	r3, [pc, #488]	; 601c <prog+0x5fd4>
    5e30:	e5934000 	ldr	r4, [r3]
    5e34:	e59f31e4 	ldr	r3, [pc, #484]	; 6020 <prog+0x5fd8>
    5e38:	e5834000 	str	r4, [r3]
    5e3c:	e59f01e0 	ldr	r0, [pc, #480]	; 6024 <prog+0x5fdc>
    5e40:	e59f11e0 	ldr	r1, [pc, #480]	; 6028 <prog+0x5fe0>
    5e44:	e3a02002 	mov	r2, #2	; 0x2
    5e48:	eb001891 	bl	c094 <memcpy>
    5e4c:	e1a00005 	mov	r0, r5
    5e50:	eb001a48 	bl	c778 <strlen>
    5e54:	e3500002 	cmp	r0, #2	; 0x2
    5e58:	93e06000 	mvnls	r6, #0	; 0x0
    5e5c:	9a00006b 	bls	6010 <CLI_Builder+0x1f4>
    5e60:	e1a00005 	mov	r0, r5
    5e64:	ebffff7b 	bl	5c58 <mount_token>
    5e68:	e3500000 	cmp	r0, #0	; 0x0
    5e6c:	aa000006 	bge	5e8c <CLI_Builder+0x70>
    5e70:	e1a00005 	mov	r0, r5
    5e74:	ebfffe98 	bl	58dc <unknown_cmd>
    5e78:	e1a00007 	mov	r0, r7
    5e7c:	e59f11a0 	ldr	r1, [pc, #416]	; 6024 <prog+0x5fdc>
    5e80:	eb001a15 	bl	c6dc <strcpy>
    5e84:	e3e06000 	mvn	r6, #0	; 0x0
    5e88:	ea000060 	b	6010 <CLI_Builder+0x1f4>
    5e8c:	e59f3198 	ldr	r3, [pc, #408]	; 602c <prog+0x5fe4>
    5e90:	e5933000 	ldr	r3, [r3]
    5e94:	e3530002 	cmp	r3, #2	; 0x2
    5e98:	1a000027 	bne	5f3c <CLI_Builder+0x120>
    5e9c:	e59f318c 	ldr	r3, [pc, #396]	; 6030 <prog+0x5fe8>
    5ea0:	e1d330b0 	ldrh	r3, [r3]
    5ea4:	e1cd30b0 	strh	r3, [sp]
    5ea8:	e28d0002 	add	r0, sp, #2	; 0x2
    5eac:	e3a01000 	mov	r1, #0	; 0x0
    5eb0:	e3a020c6 	mov	r2, #198	; 0xc6
    5eb4:	eb00189e 	bl	c134 <memset>
    5eb8:	e284200c 	add	r2, r4, #12	; 0xc
    5ebc:	e59f315c 	ldr	r3, [pc, #348]	; 6020 <prog+0x5fd8>
    5ec0:	e5832000 	str	r2, [r3]
    5ec4:	e59f0158 	ldr	r0, [pc, #344]	; 6024 <prog+0x5fdc>
    5ec8:	e59f1164 	ldr	r1, [pc, #356]	; 6034 <prog+0x5fec>
    5ecc:	e3a02027 	mov	r2, #39	; 0x27
    5ed0:	eb00186f 	bl	c094 <memcpy>
    5ed4:	e5942004 	ldr	r2, [r4, #4]
    5ed8:	e3520000 	cmp	r2, #0	; 0x0
    5edc:	0a000011 	beq	5f28 <CLI_Builder+0x10c>
    5ee0:	e1a0500d 	mov	r5, sp
    5ee4:	e59f6134 	ldr	r6, [pc, #308]	; 6020 <prog+0x5fd8>
    5ee8:	e1a0000d 	mov	r0, sp
    5eec:	e59f1144 	ldr	r1, [pc, #324]	; 6038 <prog+0x5ff0>
    5ef0:	e5943008 	ldr	r3, [r4, #8]
    5ef4:	ebffeeb4 	bl	19cc <sprintf>
    5ef8:	e1a0000d 	mov	r0, sp
    5efc:	eb001a1d 	bl	c778 <strlen>
    5f00:	e1a02000 	mov	r2, r0
    5f04:	e59f0118 	ldr	r0, [pc, #280]	; 6024 <prog+0x5fdc>
    5f08:	e1a0100d 	mov	r1, sp
    5f0c:	eb001a3d 	bl	c808 <strncat>
    5f10:	e5964000 	ldr	r4, [r6]
    5f14:	e284300c 	add	r3, r4, #12	; 0xc
    5f18:	e5863000 	str	r3, [r6]
    5f1c:	e5942004 	ldr	r2, [r4, #4]
    5f20:	e3520000 	cmp	r2, #0	; 0x0
    5f24:	1affffef 	bne	5ee8 <CLI_Builder+0xcc>
    5f28:	e1a00007 	mov	r0, r7
    5f2c:	e59f10f0 	ldr	r1, [pc, #240]	; 6024 <prog+0x5fdc>
    5f30:	eb0019e9 	bl	c6dc <strcpy>
    5f34:	e3a06000 	mov	r6, #0	; 0x0
    5f38:	ea000034 	b	6010 <CLI_Builder+0x1f4>
    5f3c:	e59f30dc 	ldr	r3, [pc, #220]	; 6020 <prog+0x5fd8>
    5f40:	e5934000 	ldr	r4, [r3]
    5f44:	e58d40c8 	str	r4, [sp, #200]
    5f48:	e5945004 	ldr	r5, [r4, #4]
    5f4c:	e3550000 	cmp	r5, #0	; 0x0
    5f50:	1a000006 	bne	5f70 <CLI_Builder+0x154>
    5f54:	e59f00e0 	ldr	r0, [pc, #224]	; 603c <prog+0x5ff4>
    5f58:	ebfffe5f 	bl	58dc <unknown_cmd>
    5f5c:	e1a00007 	mov	r0, r7
    5f60:	e59f10bc 	ldr	r1, [pc, #188]	; 6024 <prog+0x5fdc>
    5f64:	eb0019dc 	bl	c6dc <strcpy>
    5f68:	e3e06000 	mvn	r6, #0	; 0x0
    5f6c:	ea000027 	b	6010 <CLI_Builder+0x1f4>
    5f70:	e1a00005 	mov	r0, r5
    5f74:	e59f10c0 	ldr	r1, [pc, #192]	; 603c <prog+0x5ff4>
    5f78:	eb0019a3 	bl	c60c <strcmp>
    5f7c:	e3500000 	cmp	r0, #0	; 0x0
    5f80:	0a000008 	beq	5fa8 <CLI_Builder+0x18c>
    5f84:	e59f2094 	ldr	r2, [pc, #148]	; 6020 <prog+0x5fd8>
    5f88:	e5924000 	ldr	r4, [r2]
    5f8c:	e58d40c8 	str	r4, [sp, #200]
    5f90:	e284300c 	add	r3, r4, #12	; 0xc
    5f94:	e5823000 	str	r3, [r2]
    5f98:	e5945004 	ldr	r5, [r4, #4]
    5f9c:	e3550000 	cmp	r5, #0	; 0x0
    5fa0:	0affffeb 	beq	5f54 <CLI_Builder+0x138>
    5fa4:	eafffff1 	b	5f70 <CLI_Builder+0x154>
    5fa8:	e1a00004 	mov	r0, r4
    5fac:	ebffff11 	bl	5bf8 <ExecCommand>
    5fb0:	e1a06000 	mov	r6, r0
    5fb4:	e59f4068 	ldr	r4, [pc, #104]	; 6024 <prog+0x5fdc>
    5fb8:	e1a00007 	mov	r0, r7
    5fbc:	e1a01004 	mov	r1, r4
    5fc0:	eb0019c5 	bl	c6dc <strcpy>
    5fc4:	e1a00004 	mov	r0, r4
    5fc8:	e1a01004 	mov	r1, r4
    5fcc:	eb000463 	bl	7160 <memb_free>
    5fd0:	e59f4054 	ldr	r4, [pc, #84]	; 602c <prog+0x5fe4>
    5fd4:	e1a00004 	mov	r0, r4
    5fd8:	e2841086 	add	r1, r4, #134	; 0x86
    5fdc:	eb00045f 	bl	7160 <memb_free>
    5fe0:	e1a00004 	mov	r0, r4
    5fe4:	e2841004 	add	r1, r4, #4	; 0x4
    5fe8:	eb00045c 	bl	7160 <memb_free>
    5fec:	e1a00004 	mov	r0, r4
    5ff0:	e2841022 	add	r1, r4, #34	; 0x22
    5ff4:	eb000459 	bl	7160 <memb_free>
    5ff8:	e1a00004 	mov	r0, r4
    5ffc:	e5941000 	ldr	r1, [r4]
    6000:	eb000456 	bl	7160 <memb_free>
    6004:	e28d00c8 	add	r0, sp, #200	; 0xc8
    6008:	e1a01005 	mov	r1, r5
    600c:	eb000453 	bl	7160 <memb_free>
    6010:	e1a00006 	mov	r0, r6
    6014:	e28dd0cc 	add	sp, sp, #204	; 0xcc
    6018:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
    601c:	00014374 	andeq	r4, r1, r4, ror r3
    6020:	400008a8 	andmi	r0, r0, r8, lsr #17
    6024:	400009fc 	strmid	r0, [r0], -ip
    6028:	00014720 	andeq	r4, r1, r0, lsr #14
    602c:	400008ac 	andmi	r0, r0, ip, lsr #17
    6030:	00014258 	andeq	r4, r1, r8, asr r2
    6034:	00014a58 	andeq	r4, r1, r8, asr sl
    6038:	00014a80 	andeq	r4, r1, r0, lsl #21
    603c:	400008b0 	strmih	r0, [r0], -r0

00006040 <set_IP>:

	uip_ipaddr_t xIPAddr;
	char buff[40];

	uipIP_ADDR0 = vectorAddrIPv4[0];
    6040:	e59f205c 	ldr	r2, [pc, #92]	; 60a4 <prog+0x605c>
    6044:	e592c000 	ldr	ip, [r2]
    6048:	e59f3058 	ldr	r3, [pc, #88]	; 60a8 <prog+0x6060>
    604c:	e583c000 	str	ip, [r3]
	uipIP_ADDR1 = vectorAddrIPv4[1];
    6050:	e5921004 	ldr	r1, [r2, #4]
    6054:	e59f3050 	ldr	r3, [pc, #80]	; 60ac <prog+0x6064>
    6058:	e5831000 	str	r1, [r3]
	uipIP_ADDR2 = vectorAddrIPv4[2];
    605c:	e5920008 	ldr	r0, [r2, #8]
    6060:	e59f3048 	ldr	r3, [pc, #72]	; 60b0 <prog+0x6068>
    6064:	e5830000 	str	r0, [r3]
	uipIP_ADDR3 = vectorAddrIPv4[3];
    6068:	e592200c 	ldr	r2, [r2, #12]
    606c:	e59f3040 	ldr	r3, [pc, #64]	; 60b4 <prog+0x606c>
    6070:	e5832000 	str	r2, [r3]

//	ethernet_init();
	DEBUG_CLI("\nconfig IP");

	uip_ipaddr( xIPAddr, uipIP_ADDR0, uipIP_ADDR1, uipIP_ADDR2, uipIP_ADDR3 );
    6074:	e181140c 	orr	r1, r1, ip, lsl #8
    6078:	e1a01801 	mov	r1, r1, lsl #16
    607c:	e1822400 	orr	r2, r2, r0, lsl #8
    6080:	e1a02802 	mov	r2, r2, lsl #16
	uip_sethostaddr( xIPAddr );
    6084:	e59f002c 	ldr	r0, [pc, #44]	; 60b8 <prog+0x6070>
    6088:	e1a03c21 	mov	r3, r1, lsr #24
    608c:	e1833421 	orr	r3, r3, r1, lsr #8
    6090:	e1c030b0 	strh	r3, [r0]
    6094:	e1a03c22 	mov	r3, r2, lsr #24
    6098:	e1833422 	orr	r3, r3, r2, lsr #8
    609c:	e1c030b2 	strh	r3, [r0, #2]
}
    60a0:	e12fff1e 	bx	lr
    60a4:	400016cc 	andmi	r1, r0, ip, asr #13
    60a8:	400016e4 	andmi	r1, r0, r4, ror #13
    60ac:	40001698 	mulmi	r0, r8, r6
    60b0:	4000165c 	andmi	r1, r0, ip, asr r6
    60b4:	4000168c 	andmi	r1, r0, ip, lsl #13
    60b8:	40002e1c 	andmi	r2, r0, ip, lsl lr

000060bc <set_Gateway>:

/**
 * @brief Funcao que retorna o endereco IP.
 *
 * Funcao que faz leitura do endereco de IP.
 *
 * @return Retorna o endereco de IP em uma string no formato xx.xx.xx.xx
 */
char* get_IP(void){
	char buff[30];
	uip_ipaddr_t xIPAddr;

	uip_gethostaddr(xIPAddr);
	sprintf(buff,"%d.%d.%d.%d", uip_ipaddr1(xIPAddr), uip_ipaddr2(xIPAddr),
								uip_ipaddr3(xIPAddr), uip_ipaddr4(xIPAddr));

	return buff;
}

/**
 * @brief Funcao que permite ver o endereco MAC
 *
 * Faz leitrura do endereco MAC do Kit
 * Funcao de leitura apenas.
 *
 * @return RET_OK para execucao com sucesso da funcao
 */
break_t do_MAC(str_t* tp){
	char buff[20];
	if(tp->tipo == SET)
		strcpy(tp->resp, "Apenas comando de GET.");
	else if (tp->tipo == GET){
		sprintf(buff, "%d:%d:%d:%d:%d:%d", uipMAC_ADDR0, uipMAC_ADDR1, uipMAC_ADDR2,uipMAC_ADDR3,
				uipMAC_ADDR4,uipMAC_ADDR5);
	}
	return RET_OK;
}

/**
 * @brief Funcao da CLI para configuracao do IP
 *
 * Funcao para ler ou alterar o endereco de IP.
 *
 * @param tp Estrutura com os dados para interpretacao do comando.
 * @return RET_OK para execucao com sucesso da funcao ou RET_ERROR
 */
break_t do_IP(str_t* tp){
	char* buff="\0";
	char arq[20];
	char dest[30];

	DEBUG_CLI("Return IP address");

	if(tp->tipo == SET){	//tipo SET
		strcpy(arq,tp->value);
		if(strlen(arq)<=0) return RET_ERROR;
		buff = strtok(arq, " ,.");
		vectorAddrIPv4[0] = atoi(buff);
		buff = strtok(NULL, " ,.");
		vectorAddrIPv4[1] = atoi(buff);
		buff = strtok(NULL, " ,.");
		vectorAddrIPv4[2] = atoi(buff);
		buff = strtok(NULL, " ,.");
		vectorAddrIPv4[3] = atoi(buff);
		set_IP();
		sprintf(dest,"set to %d.%d.%d.%d",uipIP_ADDR0, uipIP_ADDR1, uipIP_ADDR2, uipIP_ADDR3);
		strcpy(tp->resp, dest);
		//tp->resp = dest;
	}
	else {	//get
		sprintf(dest,"%s", get_IP());
		strcpy(tp->resp, dest);
		DEBUG_CLI(tp->resp);
		//sprintf(tp->resp,"%s", get_IP());
	}
	return RET_OK;

}


/**
 * @brief Escreve dados no LCD
 *
 * Permite escrever uma mensagem no display de LCD.
 *
 * @param data Mensagem para ser mostrada no display
 * @param col Coluna onde o cursor deve estar.
 * @param linha Linha onde o cursor deve estar.
 * @return RET_OK para execucao com sucesso da funcao ou RET_ERROR
 */
void writeDataLcd(char* data, int col, int linha)
{
	char dest[20];
	lcd_clr();
	sprintf(dest,"Coluna: %d linha: %d",col, linha);
	DEBUG_CLI(dest);
	lcd_goto(linha, col);
	lcd_string(data);
}

/**
 * @brief Permite escrever uma mensagem no LCD
 *
 * Escreve mensagem no display 16x2
 * Funcao permite apenas comandos de SET.
 *
 * @param tp Estrutura com os dados para interpretacao do comando.
 * @return RET_OK para execucao com sucesso da funcao ou RET_ERROR
 */
break_t do_lcd(str_t* tp){
	char arq[40], msg[16];//16 é o maximo para a linha
	char* buff="\0";
	int posX = 0, posY = 0;

	DEBUG_CLI("do_lcd");
	if(tp->tipo == SET){	//tipo SET
			strcpy(arq,tp->value);
			if(strlen(arq)<=0) return RET_ERROR;
			buff = strtok(arq, ";"); //mensagem para aparecer no display
			strcpy(msg, buff);
			buff = strtok(NULL, " ,.");
			posX = atoi(buff);
			if (posX > 16 || posX < 0) return RET_ERROR;
			buff = strtok(NULL, " ,.");
			posY = atoi(buff);
			if (posY > 2 || posY < 0) return RET_ERROR;
			writeDataLcd(msg, posX, posY);
			strcpy(tp->resp,"Dados Escritos com sucesso.");
		}
		else {	//get
			strcpy(tp->resp, "Apenas comando de SET.");
			DEBUG_CLI(tp->resp);
			//sprintf(tp->resp,"%s", get_IP());
		}
		return RET_OK;
}


/**
 *
 */
void out_data(char * data){
	if(OUT_UART) uart_puts(data);
	else if(OUT_TELNET) shell_output(data,"");
}

/**
 * @brief Funcao para alterar o GATEWAY do kit.
 *
 * Permite alterar o endereco do gateway de rede.
 * obs: realizar esta alteracao apenas quando estiver conectado via serial.
 *
 */
void set_Gateway(void){
	uip_ipaddr_t xIPAddr;

	DEBUG_CLI("config Gateway");
	uip_ipaddr( xIPAddr, uip_GAT0, uip_GAT1, uip_GAT2, uip_GAT3);
    60bc:	e59f3048 	ldr	r3, [pc, #72]	; 610c <prog+0x60c4>
    60c0:	e1d320b0 	ldrh	r2, [r3]
    60c4:	e59f3044 	ldr	r3, [pc, #68]	; 6110 <prog+0x60c8>
    60c8:	e1d310b0 	ldrh	r1, [r3]
    60cc:	e1811402 	orr	r1, r1, r2, lsl #8
    60d0:	e1a01801 	mov	r1, r1, lsl #16
    60d4:	e59f3038 	ldr	r3, [pc, #56]	; 6114 <prog+0x60cc>
    60d8:	e1d300b0 	ldrh	r0, [r3]
    60dc:	e59f3034 	ldr	r3, [pc, #52]	; 6118 <prog+0x60d0>
    60e0:	e1d320b0 	ldrh	r2, [r3]
    60e4:	e1822400 	orr	r2, r2, r0, lsl #8
    60e8:	e1a02802 	mov	r2, r2, lsl #16
	uip_setdraddr(xIPAddr);
    60ec:	e59f0028 	ldr	r0, [pc, #40]	; 611c <prog+0x60d4>
    60f0:	e1a03c21 	mov	r3, r1, lsr #24
    60f4:	e1833421 	orr	r3, r3, r1, lsr #8
    60f8:	e1c030b0 	strh	r3, [r0]
    60fc:	e1a03c22 	mov	r3, r2, lsr #24
    6100:	e1833422 	orr	r3, r3, r2, lsr #8
    6104:	e1c030b2 	strh	r3, [r0, #2]
}
    6108:	e12fff1e 	bx	lr
    610c:	40001658 	andmi	r1, r0, r8, asr r6
    6110:	40001660 	andmi	r1, r0, r0, ror #12
    6114:	400016be 	strmih	r1, [r0], -lr
    6118:	400016e0 	andmi	r1, r0, r0, ror #13
    611c:	40002ddc 	ldrmid	r2, [r0], -ip

00006120 <set_Mask>:

/**
 * @brief Funcao da CLI paraconfiguracao do Gateway
 *
 * Funcao permite ler e alterar endereco do gateway
 *
 * @param tp Estrutura com os dados para interpretacao do comando.
 * @return RET_OK para execucao com sucesso da funcao ou RET_ERROR
 */
break_t do_gateway(str_t* tp){
	char* buff="\0";
	char arq[20];
	char dest[30];
	int end[4];
	uip_ipaddr_t xGtAddr;

	DEBUG_CLI("Return Gateway");

	if(tp->tipo == SET){	//tipo SET
		strcpy(arq,tp->value);
		if(strlen(arq)<=0) return RET_ERROR;
		buff = strtok(arq, " ,.");
		uip_GAT0 = atoi(buff);
		buff = strtok(NULL, " ,.");
		uip_GAT1 = atoi(buff);
		buff = strtok(NULL, " ,.");
		uip_GAT2 = atoi(buff);
		buff = strtok(NULL, " ,.");
		uip_GAT3 = atoi(buff);
		set_Gateway();
		sprintf(dest,"set to %d.%d.%d.%d",uip_GAT0, uip_GAT1, uip_GAT2, uip_GAT3);
		strcpy(tp->resp, dest);
		//tp->resp = dest;
	}
	else {	//get
		uip_getdraddr(xGtAddr);
		sprintf(dest,"%d.%d.%d.%d", uip_ipaddr1(xGtAddr), uip_ipaddr2(xGtAddr),
									uip_ipaddr3(xGtAddr), uip_ipaddr4(xGtAddr));
		strcpy(tp->resp, dest);
		DEBUG_CLI(tp->resp);
		//sprintf(tp->resp,"%s", get_IP());
	}
	return RET_OK;

}

/**
 * @brief Permite alterar a mascara de rede
 *
 */
void set_Mask(void){
	uip_ipaddr_t xIPAddr;

	DEBUG_CLI("config Mask");
	uip_ipaddr( xIPAddr, uip_Mask0, uip_Mask1, uip_Mask2, uip_Mask3);
    6120:	e59f3048 	ldr	r3, [pc, #72]	; 6170 <prog+0x6128>
    6124:	e1d320b0 	ldrh	r2, [r3]
    6128:	e59f3044 	ldr	r3, [pc, #68]	; 6174 <prog+0x612c>
    612c:	e1d310b0 	ldrh	r1, [r3]
    6130:	e1811402 	orr	r1, r1, r2, lsl #8
    6134:	e1a01801 	mov	r1, r1, lsl #16
    6138:	e59f3038 	ldr	r3, [pc, #56]	; 6178 <prog+0x6130>
    613c:	e1d300b0 	ldrh	r0, [r3]
    6140:	e59f3034 	ldr	r3, [pc, #52]	; 617c <prog+0x6134>
    6144:	e1d320b0 	ldrh	r2, [r3]
    6148:	e1822400 	orr	r2, r2, r0, lsl #8
    614c:	e1a02802 	mov	r2, r2, lsl #16
	uip_setnetmask(xIPAddr);
    6150:	e59f0028 	ldr	r0, [pc, #40]	; 6180 <prog+0x6138>
    6154:	e1a03c21 	mov	r3, r1, lsr #24
    6158:	e1833421 	orr	r3, r3, r1, lsr #8
    615c:	e1c030b0 	strh	r3, [r0]
    6160:	e1a03c22 	mov	r3, r2, lsr #24
    6164:	e1833422 	orr	r3, r3, r2, lsr #8
    6168:	e1c030b2 	strh	r3, [r0, #2]

}
    616c:	e12fff1e 	bx	lr
    6170:	400016bc 	strmih	r1, [r0], -ip
    6174:	40001690 	mulmi	r0, r0, r6
    6178:	40001696 	mulmi	r0, r6, r6
    617c:	400016c8 	andmi	r1, r0, r8, asr #13
    6180:	40002e18 	andmi	r2, r0, r8, lsl lr

00006184 <do_ftp>:

/**
 * @brief Funcao da CLi para configuracao da mascara de rede
 *
 * Funcao permite ler ou alterar o endereco de mascara.
 *
 * @param tp Estrutura com os dados para interpretacao do comando.
 * @return RET_OK para execucao com sucesso da funcao ou RET_ERROR
 */
break_t do_mask(str_t* tp){
	char* buff="\0";
	char arq[20];
	char dest[30];
	int end[4];
	uip_ipaddr_t xMaskAddr;

	DEBUG_CLI("Return Mask");

	if(tp->tipo == SET){	//tipo SET
		strcpy(arq,tp->value);
		if(strlen(arq)<=0) return RET_ERROR;
		buff = strtok(arq, " ,.");
		uip_Mask0 = atoi(buff);
		buff = strtok(NULL, " ,.");
		uip_Mask1 = atoi(buff);
		buff = strtok(NULL, " ,.");
		uip_Mask2 = atoi(buff);
		buff = strtok(NULL, " ,.");
		uip_Mask3 = atoi(buff);
		set_Gateway();
		sprintf(dest,"set to %d.%d.%d.%d", uip_Mask0, uip_Mask1, uip_Mask2, uip_Mask3);
		strcpy(tp->resp, dest);
		//tp->resp = dest;
	}
	else {	//get

		uip_getnetmask(xMaskAddr);
		sprintf(dest,"%d.%d.%d.%d", uip_ipaddr1(xMaskAddr), uip_ipaddr2(xMaskAddr),
									uip_ipaddr3(xMaskAddr), uip_ipaddr4(xMaskAddr));
		strcpy(tp->resp, dest);
		DEBUG_CLI(tp->resp);
		//sprintf(tp->resp,"%s", get_IP());
	}
	return RET_OK;

}

/**
 * @brief Funcao da CLI que retorna enderecos da rede.
 *
 * Funcao que permite gera como retorno o endereco de Mascara, Gateway e IP.
 */
break_t do_configIp(str_t* tp){
	char* buff="\0";
	char arq[20];
	char dest[80];
	int end[4];

	DEBUG_CLI("Return network info");

	if(tp->tipo == SET){	//tipo SET
		sprintf(dest,"Just get command.");
		strcpy(tp->resp, dest);
		//tp->resp = dest;
	}
	else {	//get
		sprintf(arq,"\nMask: %d.%d.%d.%d", uip_Mask0, uip_Mask1, uip_Mask2, uip_Mask3);
		strcpy(dest, arq);
		sprintf(arq,"\nGateway: %d.%d.%d.%d", uip_GAT0, uip_GAT1, uip_GAT2, uip_GAT3);
		strcat(dest, arq);
		sprintf(dest,"\nIP:  %d.%d.%d.%d",uipIP_ADDR0, uipIP_ADDR1, uipIP_ADDR2, uipIP_ADDR3);
		strcat(dest, arq);
		strcpy(tp->resp, dest);
		DEBUG_CLI(tp->resp);
		//sprintf(tp->resp,"%s", get_IP());
	}
	return RET_OK;

}



/**
 * @brief Funcao para conectar como FTP Client
 *
 * Funcao para conexao como FTP Client
 *
 * Descontinuado pois o kit possui pouca memória para armazenamento de arquivo para transmissao.
 *
 * @param tp Estrutura com os dados para interpretacao do comando.
 * @return RET_OK para execucao com sucesso da funcao ou RET_ERROR
 */
break_t do_ftp(str_t* tp){
    6184:	e52de004 	str	lr, [sp, #-4]!

	strcpy(tp->resp, "Servico Indisponivel");
    6188:	e2800086 	add	r0, r0, #134	; 0x86
    618c:	e59f100c 	ldr	r1, [pc, #12]	; 61a0 <prog+0x6158>
    6190:	e3a02015 	mov	r2, #21	; 0x15
    6194:	eb0017be 	bl	c094 <memcpy>

#if 0
	char* end_ip='\0';

	unsigned char TSTflag = 0;
	struct uip_conn* ftp_conn = NULL;
	arn_CHAR srvSystType[MAX_SRV_SYSTTYPE];
	ftp_cmd_status_t stst;
	DEBUG_FTP("ftp client CLI");

	end_ip = tp->value;

	/* modelo de comunicação ftp client, realizado tendo como base exemplo utilizado por
	 * Fabio Giovagnini <fabio.giovagnini@aurion-tech.com>
	 * Serviço implementado para validar multiplas aplicações rodando em paralelo.
	 *
	 * Enviando o arquivo SendFile_FTP.txt, composto pelo vetor de caracteres
	 * presente no array MSG, em file_send.h
	 * */
	while(TSTflag != 7 || TSTflag >= 200){
		//printf("ststs - %d", stst);
		if (TSTflag == 0) {
			stst = ftp_connect(end_ip,21,&ftp_conn);
			TSTflag = 7;
			if (stst == ftpcs_FAILED) {TSTflag = 201; break;}
			if (stst == ftpcs_SUCCESS) {TSTflag = 1; break;}
			}
		else if (TSTflag == 1) {
			DEBUG_FTP("ftp login..");
			stst = ftp_login(ftp_conn,"mtgm");
			DEBUG_FTP(" . ok");
			if (stst == ftpcs_PASSWORD_REQ) {TSTflag = 10; break;}
			if (stst == ftpcs_FAILED) {TSTflag = 202; break;}
			if (stst == ftpcs_SUCCESS) {TSTflag = 2; break;}
			}
		else if (TSTflag == 2) {
			DEBUG_FTP("ftp syst..");
			stst = ftp_syst(ftp_conn,srvSystType);
			DEBUG_FTP("ftp ok..");
			if (stst == ftpcs_FAILED) {TSTflag = 203; break;}
			if (stst == ftpcs_SUCCESS) {TSTflag = 3; break;}
			}
		else if (TSTflag == 3) {
			stst = ftp_port(ftp_conn,5001);
			if (stst == ftpcs_FAILED) {TSTflag = 204; break;}
			if (stst == ftpcs_SUCCESS) {TSTflag = 4; break;}
			}
		else if (TSTflag == 4) {
			stst = ftp_send(ftp_conn,"SendFile_FTP.txt",(arn_uCHAR*)MSG,strlen(MSG));
			if (stst == ftpcs_FAILED) {TSTflag = 205; break;}
			if (stst == ftpcs_SUCCESS) {TSTflag = 5; break;}
			}
		else if (TSTflag == 5) {
			stst = ftp_quit(ftp_conn);
			if (stst == ftpcs_FAILED) {TSTflag = 206; break;}
			if (stst == ftpcs_SUCCESS) {TSTflag = 6; break;}
			}
		else if (TSTflag == 6) {
			ftp_conn = 0;
			TSTflag = 7;
			}
		else if (TSTflag == 10) {
			stst = ftp_password(ftp_conn,"mtgm");
			if (stst == ftpcs_FAILED) {TSTflag = 210; break;}
			if (stst == ftpcs_SUCCESS) {TSTflag = 2; break;}
			}
	}

#endif

	return RET_OK;
}
    6198:	e3a00000 	mov	r0, #0	; 0x0
    619c:	e49df004 	ldr	pc, [sp], #4
    61a0:	00014c50 	andeq	r4, r1, r0, asr ip

000061a4 <do_get_temperature>:
    61a4:	e52de004 	str	lr, [sp, #-4]!
    61a8:	e2800086 	add	r0, r0, #134	; 0x86
    61ac:	e59f100c 	ldr	r1, [pc, #12]	; 61c0 <prog+0x6178>
    61b0:	e3a0200e 	mov	r2, #14	; 0xe
    61b4:	eb0017b6 	bl	c094 <memcpy>
    61b8:	e3a00000 	mov	r0, #0	; 0x0
    61bc:	e49df004 	ldr	pc, [sp], #4
    61c0:	00014c68 	andeq	r4, r1, r8, ror #24

000061c4 <do_MAC>:
    61c4:	e52de004 	str	lr, [sp, #-4]!
    61c8:	e24dd024 	sub	sp, sp, #36	; 0x24
    61cc:	e5902000 	ldr	r2, [r0]
    61d0:	e3520001 	cmp	r2, #1	; 0x1
    61d4:	1a000004 	bne	61ec <do_MAC+0x28>
    61d8:	e2800086 	add	r0, r0, #134	; 0x86
    61dc:	e59f104c 	ldr	r1, [pc, #76]	; 6230 <prog+0x61e8>
    61e0:	e2822016 	add	r2, r2, #22	; 0x16
    61e4:	eb0017aa 	bl	c094 <memcpy>
    61e8:	ea00000d 	b	6224 <do_MAC+0x60>
    61ec:	e3520000 	cmp	r2, #0	; 0x0
    61f0:	1a00000b 	bne	6224 <do_MAC+0x60>
    61f4:	e3a03033 	mov	r3, #51	; 0x33
    61f8:	e58d3000 	str	r3, [sp]
    61fc:	e2433031 	sub	r3, r3, #49	; 0x31
    6200:	e58d3004 	str	r3, [sp, #4]
    6204:	e2833062 	add	r3, r3, #98	; 0x62
    6208:	e58d3008 	str	r3, [sp, #8]
    620c:	e2433040 	sub	r3, r3, #64	; 0x40
    6210:	e58d300c 	str	r3, [sp, #12]
    6214:	e28d0010 	add	r0, sp, #16	; 0x10
    6218:	e59f1014 	ldr	r1, [pc, #20]	; 6234 <prog+0x61ec>
    621c:	e2833099 	add	r3, r3, #153	; 0x99
    6220:	ebffede9 	bl	19cc <sprintf>
    6224:	e3a00000 	mov	r0, #0	; 0x0
    6228:	e28dd024 	add	sp, sp, #36	; 0x24
    622c:	e8bd8000 	ldmia	sp!, {pc}
    6230:	00014c78 	andeq	r4, r1, r8, ror ip
    6234:	00014c90 	muleq	r1, r0, ip

00006238 <do_configIp>:
    6238:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
    623c:	e24dd06c 	sub	sp, sp, #108	; 0x6c
    6240:	e1a06000 	mov	r6, r0
    6244:	e5903000 	ldr	r3, [r0]
    6248:	e3530001 	cmp	r3, #1	; 0x1
    624c:	1a000008 	bne	6274 <do_configIp+0x3c>
    6250:	e28d4008 	add	r4, sp, #8	; 0x8
    6254:	e1a00004 	mov	r0, r4
    6258:	e59f10f4 	ldr	r1, [pc, #244]	; 6354 <prog+0x630c>
    625c:	e3a02012 	mov	r2, #18	; 0x12
    6260:	eb00178b 	bl	c094 <memcpy>
    6264:	e2860086 	add	r0, r6, #134	; 0x86
    6268:	e1a01004 	mov	r1, r4
    626c:	eb00191a 	bl	c6dc <strcpy>
    6270:	ea000034 	b	6348 <do_configIp+0x110>
    6274:	e28d5058 	add	r5, sp, #88	; 0x58
    6278:	e59f30d8 	ldr	r3, [pc, #216]	; 6358 <prog+0x6310>
    627c:	e1d320b0 	ldrh	r2, [r3]
    6280:	e59f30d4 	ldr	r3, [pc, #212]	; 635c <prog+0x6314>
    6284:	e1d330b0 	ldrh	r3, [r3]
    6288:	e59f10d0 	ldr	r1, [pc, #208]	; 6360 <prog+0x6318>
    628c:	e1d110b0 	ldrh	r1, [r1]
    6290:	e58d1000 	str	r1, [sp]
    6294:	e59f10c8 	ldr	r1, [pc, #200]	; 6364 <prog+0x631c>
    6298:	e1d110b0 	ldrh	r1, [r1]
    629c:	e58d1004 	str	r1, [sp, #4]
    62a0:	e1a00005 	mov	r0, r5
    62a4:	e59f10bc 	ldr	r1, [pc, #188]	; 6368 <prog+0x6320>
    62a8:	ebffedc7 	bl	19cc <sprintf>
    62ac:	e28d4008 	add	r4, sp, #8	; 0x8
    62b0:	e1a00004 	mov	r0, r4
    62b4:	e1a01005 	mov	r1, r5
    62b8:	eb001907 	bl	c6dc <strcpy>
    62bc:	e59f30a8 	ldr	r3, [pc, #168]	; 636c <prog+0x6324>
    62c0:	e1d320b0 	ldrh	r2, [r3]
    62c4:	e59f30a4 	ldr	r3, [pc, #164]	; 6370 <prog+0x6328>
    62c8:	e1d330b0 	ldrh	r3, [r3]
    62cc:	e59f10a0 	ldr	r1, [pc, #160]	; 6374 <prog+0x632c>
    62d0:	e1d110b0 	ldrh	r1, [r1]
    62d4:	e58d1000 	str	r1, [sp]
    62d8:	e59f1098 	ldr	r1, [pc, #152]	; 6378 <prog+0x6330>
    62dc:	e1d110b0 	ldrh	r1, [r1]
    62e0:	e58d1004 	str	r1, [sp, #4]
    62e4:	e1a00005 	mov	r0, r5
    62e8:	e59f108c 	ldr	r1, [pc, #140]	; 637c <prog+0x6334>
    62ec:	ebffedb6 	bl	19cc <sprintf>
    62f0:	e1a00004 	mov	r0, r4
    62f4:	e1a01005 	mov	r1, r5
    62f8:	eb00185b 	bl	c46c <strcat>
    62fc:	e59f307c 	ldr	r3, [pc, #124]	; 6380 <prog+0x6338>
    6300:	e5932000 	ldr	r2, [r3]
    6304:	e59f3078 	ldr	r3, [pc, #120]	; 6384 <prog+0x633c>
    6308:	e5933000 	ldr	r3, [r3]
    630c:	e59f1074 	ldr	r1, [pc, #116]	; 6388 <prog+0x6340>
    6310:	e5911000 	ldr	r1, [r1]
    6314:	e58d1000 	str	r1, [sp]
    6318:	e59f106c 	ldr	r1, [pc, #108]	; 638c <prog+0x6344>
    631c:	e5911000 	ldr	r1, [r1]
    6320:	e58d1004 	str	r1, [sp, #4]
    6324:	e1a00004 	mov	r0, r4
    6328:	e59f1060 	ldr	r1, [pc, #96]	; 6390 <prog+0x6348>
    632c:	ebffeda6 	bl	19cc <sprintf>
    6330:	e1a00004 	mov	r0, r4
    6334:	e1a01005 	mov	r1, r5
    6338:	eb00184b 	bl	c46c <strcat>
    633c:	e2860086 	add	r0, r6, #134	; 0x86
    6340:	e1a01004 	mov	r1, r4
    6344:	eb0018e4 	bl	c6dc <strcpy>
    6348:	e3a00000 	mov	r0, #0	; 0x0
    634c:	e28dd06c 	add	sp, sp, #108	; 0x6c
    6350:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
    6354:	00014ca4 	andeq	r4, r1, r4, lsr #25
    6358:	400016bc 	strmih	r1, [r0], -ip
    635c:	40001690 	mulmi	r0, r0, r6
    6360:	40001696 	mulmi	r0, r6, r6
    6364:	400016c8 	andmi	r1, r0, r8, asr #13
    6368:	00014cb8 	streqh	r4, [r1], -r8
    636c:	40001658 	andmi	r1, r0, r8, asr r6
    6370:	40001660 	andmi	r1, r0, r0, ror #12
    6374:	400016be 	strmih	r1, [r0], -lr
    6378:	400016e0 	andmi	r1, r0, r0, ror #13
    637c:	00014ccc 	andeq	r4, r1, ip, asr #25
    6380:	400016e4 	andmi	r1, r0, r4, ror #13
    6384:	40001698 	mulmi	r0, r8, r6
    6388:	4000165c 	andmi	r1, r0, ip, asr r6
    638c:	4000168c 	andmi	r1, r0, ip, lsl #13
    6390:	00014ce4 	andeq	r4, r1, r4, ror #25

00006394 <do_mask>:
    6394:	e92d45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
    6398:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    639c:	e1a0a000 	mov	sl, r0
    63a0:	e5904000 	ldr	r4, [r0]
    63a4:	e3540001 	cmp	r4, #1	; 0x1
    63a8:	1a00002f 	bne	646c <do_mask+0xd8>
    63ac:	e28d0028 	add	r0, sp, #40	; 0x28
    63b0:	e28a1022 	add	r1, sl, #34	; 0x22
    63b4:	eb0018c8 	bl	c6dc <strcpy>
    63b8:	e5dd3028 	ldrb	r3, [sp, #40]
    63bc:	e3530000 	cmp	r3, #0	; 0x0
    63c0:	01a00004 	moveq	r0, r4
    63c4:	0a000047 	beq	64e8 <do_mask+0x154>
    63c8:	e59f4120 	ldr	r4, [pc, #288]	; 64f0 <prog+0x64a8>
    63cc:	e28d0028 	add	r0, sp, #40	; 0x28
    63d0:	e1a01004 	mov	r1, r4
    63d4:	eb0019fb 	bl	cbc8 <strtok>
    63d8:	ebffea2d 	bl	c94 <atoi>
    63dc:	e59f8110 	ldr	r8, [pc, #272]	; 64f4 <prog+0x64ac>
    63e0:	e1c800b0 	strh	r0, [r8]
    63e4:	e3a00000 	mov	r0, #0	; 0x0
    63e8:	e1a01004 	mov	r1, r4
    63ec:	eb0019f5 	bl	cbc8 <strtok>
    63f0:	ebffea27 	bl	c94 <atoi>
    63f4:	e59f70fc 	ldr	r7, [pc, #252]	; 64f8 <prog+0x64b0>
    63f8:	e1c700b0 	strh	r0, [r7]
    63fc:	e3a00000 	mov	r0, #0	; 0x0
    6400:	e1a01004 	mov	r1, r4
    6404:	eb0019ef 	bl	cbc8 <strtok>
    6408:	ebffea21 	bl	c94 <atoi>
    640c:	e59f50e8 	ldr	r5, [pc, #232]	; 64fc <prog+0x64b4>
    6410:	e1c500b0 	strh	r0, [r5]
    6414:	e3a00000 	mov	r0, #0	; 0x0
    6418:	e1a01004 	mov	r1, r4
    641c:	eb0019e9 	bl	cbc8 <strtok>
    6420:	ebffea1b 	bl	c94 <atoi>
    6424:	e59f40d4 	ldr	r4, [pc, #212]	; 6500 <prog+0x64b8>
    6428:	e1c400b0 	strh	r0, [r4]
    642c:	ebffff22 	bl	60bc <set_Gateway>
    6430:	e28d600a 	add	r6, sp, #10	; 0xa
    6434:	e1d820b0 	ldrh	r2, [r8]
    6438:	e1d730b0 	ldrh	r3, [r7]
    643c:	e1d510b0 	ldrh	r1, [r5]
    6440:	e58d1000 	str	r1, [sp]
    6444:	e1d410b0 	ldrh	r1, [r4]
    6448:	e58d1004 	str	r1, [sp, #4]
    644c:	e1a00006 	mov	r0, r6
    6450:	e59f10ac 	ldr	r1, [pc, #172]	; 6504 <prog+0x64bc>
    6454:	ebffed5c 	bl	19cc <sprintf>
    6458:	e28a0086 	add	r0, sl, #134	; 0x86
    645c:	e1a01006 	mov	r1, r6
    6460:	eb00189d 	bl	c6dc <strcpy>
    6464:	e3a00000 	mov	r0, #0	; 0x0
    6468:	ea00001e 	b	64e8 <do_mask+0x154>
    646c:	e59f3094 	ldr	r3, [pc, #148]	; 6508 <prog+0x64c0>
    6470:	e1d370b2 	ldrh	r7, [r3, #2]
    6474:	e1d340b0 	ldrh	r4, [r3]
    6478:	e1a00004 	mov	r0, r4
    647c:	eb0007c2 	bl	838c <htons>
    6480:	e1a06000 	mov	r6, r0
    6484:	e1a00004 	mov	r0, r4
    6488:	eb0007bf 	bl	838c <htons>
    648c:	e1a05000 	mov	r5, r0
    6490:	e1a00007 	mov	r0, r7
    6494:	eb0007bc 	bl	838c <htons>
    6498:	e1a04000 	mov	r4, r0
    649c:	e1a00007 	mov	r0, r7
    64a0:	eb0007b9 	bl	838c <htons>
    64a4:	e28d700a 	add	r7, sp, #10	; 0xa
    64a8:	e1a06406 	mov	r6, r6, lsl #8
    64ac:	e20550ff 	and	r5, r5, #255	; 0xff
    64b0:	e1a04404 	mov	r4, r4, lsl #8
    64b4:	e1a04824 	mov	r4, r4, lsr #16
    64b8:	e58d4000 	str	r4, [sp]
    64bc:	e20000ff 	and	r0, r0, #255	; 0xff
    64c0:	e58d0004 	str	r0, [sp, #4]
    64c4:	e1a00007 	mov	r0, r7
    64c8:	e59f103c 	ldr	r1, [pc, #60]	; 650c <prog+0x64c4>
    64cc:	e1a02826 	mov	r2, r6, lsr #16
    64d0:	e1a03005 	mov	r3, r5
    64d4:	ebffed3c 	bl	19cc <sprintf>
    64d8:	e28a0086 	add	r0, sl, #134	; 0x86
    64dc:	e1a01007 	mov	r1, r7
    64e0:	eb00187d 	bl	c6dc <strcpy>
    64e4:	e3a00000 	mov	r0, #0	; 0x0
    64e8:	e28dd03c 	add	sp, sp, #60	; 0x3c
    64ec:	e8bd85f0 	ldmia	sp!, {r4, r5, r6, r7, r8, sl, pc}
    64f0:	00014cf8 	streqd	r4, [r1], -r8
    64f4:	400016bc 	strmih	r1, [r0], -ip
    64f8:	40001690 	mulmi	r0, r0, r6
    64fc:	40001696 	mulmi	r0, r6, r6
    6500:	400016c8 	andmi	r1, r0, r8, asr #13
    6504:	00014cfc 	streqd	r4, [r1], -ip
    6508:	40002e18 	andmi	r2, r0, r8, lsl lr
    650c:	00014d10 	andeq	r4, r1, r0, lsl sp

00006510 <do_gateway>:
    6510:	e92d45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
    6514:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    6518:	e1a0a000 	mov	sl, r0
    651c:	e5904000 	ldr	r4, [r0]
    6520:	e3540001 	cmp	r4, #1	; 0x1
    6524:	1a00002f 	bne	65e8 <do_gateway+0xd8>
    6528:	e28d0028 	add	r0, sp, #40	; 0x28
    652c:	e28a1022 	add	r1, sl, #34	; 0x22
    6530:	eb001869 	bl	c6dc <strcpy>
    6534:	e5dd3028 	ldrb	r3, [sp, #40]
    6538:	e3530000 	cmp	r3, #0	; 0x0
    653c:	01a00004 	moveq	r0, r4
    6540:	0a000047 	beq	6664 <do_gateway+0x154>
    6544:	e59f4120 	ldr	r4, [pc, #288]	; 666c <prog+0x6624>
    6548:	e28d0028 	add	r0, sp, #40	; 0x28
    654c:	e1a01004 	mov	r1, r4
    6550:	eb00199c 	bl	cbc8 <strtok>
    6554:	ebffe9ce 	bl	c94 <atoi>
    6558:	e59f8110 	ldr	r8, [pc, #272]	; 6670 <prog+0x6628>
    655c:	e1c800b0 	strh	r0, [r8]
    6560:	e3a00000 	mov	r0, #0	; 0x0
    6564:	e1a01004 	mov	r1, r4
    6568:	eb001996 	bl	cbc8 <strtok>
    656c:	ebffe9c8 	bl	c94 <atoi>
    6570:	e59f70fc 	ldr	r7, [pc, #252]	; 6674 <prog+0x662c>
    6574:	e1c700b0 	strh	r0, [r7]
    6578:	e3a00000 	mov	r0, #0	; 0x0
    657c:	e1a01004 	mov	r1, r4
    6580:	eb001990 	bl	cbc8 <strtok>
    6584:	ebffe9c2 	bl	c94 <atoi>
    6588:	e59f50e8 	ldr	r5, [pc, #232]	; 6678 <prog+0x6630>
    658c:	e1c500b0 	strh	r0, [r5]
    6590:	e3a00000 	mov	r0, #0	; 0x0
    6594:	e1a01004 	mov	r1, r4
    6598:	eb00198a 	bl	cbc8 <strtok>
    659c:	ebffe9bc 	bl	c94 <atoi>
    65a0:	e59f40d4 	ldr	r4, [pc, #212]	; 667c <prog+0x6634>
    65a4:	e1c400b0 	strh	r0, [r4]
    65a8:	ebfffec3 	bl	60bc <set_Gateway>
    65ac:	e28d600a 	add	r6, sp, #10	; 0xa
    65b0:	e1d820b0 	ldrh	r2, [r8]
    65b4:	e1d730b0 	ldrh	r3, [r7]
    65b8:	e1d510b0 	ldrh	r1, [r5]
    65bc:	e58d1000 	str	r1, [sp]
    65c0:	e1d410b0 	ldrh	r1, [r4]
    65c4:	e58d1004 	str	r1, [sp, #4]
    65c8:	e1a00006 	mov	r0, r6
    65cc:	e59f10ac 	ldr	r1, [pc, #172]	; 6680 <prog+0x6638>
    65d0:	ebffecfd 	bl	19cc <sprintf>
    65d4:	e28a0086 	add	r0, sl, #134	; 0x86
    65d8:	e1a01006 	mov	r1, r6
    65dc:	eb00183e 	bl	c6dc <strcpy>
    65e0:	e3a00000 	mov	r0, #0	; 0x0
    65e4:	ea00001e 	b	6664 <do_gateway+0x154>
    65e8:	e59f3094 	ldr	r3, [pc, #148]	; 6684 <prog+0x663c>
    65ec:	e1d370b2 	ldrh	r7, [r3, #2]
    65f0:	e1d340b0 	ldrh	r4, [r3]
    65f4:	e1a00004 	mov	r0, r4
    65f8:	eb000763 	bl	838c <htons>
    65fc:	e1a06000 	mov	r6, r0
    6600:	e1a00004 	mov	r0, r4
    6604:	eb000760 	bl	838c <htons>
    6608:	e1a05000 	mov	r5, r0
    660c:	e1a00007 	mov	r0, r7
    6610:	eb00075d 	bl	838c <htons>
    6614:	e1a04000 	mov	r4, r0
    6618:	e1a00007 	mov	r0, r7
    661c:	eb00075a 	bl	838c <htons>
    6620:	e28d700a 	add	r7, sp, #10	; 0xa
    6624:	e1a06406 	mov	r6, r6, lsl #8
    6628:	e20550ff 	and	r5, r5, #255	; 0xff
    662c:	e1a04404 	mov	r4, r4, lsl #8
    6630:	e1a04824 	mov	r4, r4, lsr #16
    6634:	e58d4000 	str	r4, [sp]
    6638:	e20000ff 	and	r0, r0, #255	; 0xff
    663c:	e58d0004 	str	r0, [sp, #4]
    6640:	e1a00007 	mov	r0, r7
    6644:	e59f103c 	ldr	r1, [pc, #60]	; 6688 <prog+0x6640>
    6648:	e1a02826 	mov	r2, r6, lsr #16
    664c:	e1a03005 	mov	r3, r5
    6650:	ebffecdd 	bl	19cc <sprintf>
    6654:	e28a0086 	add	r0, sl, #134	; 0x86
    6658:	e1a01007 	mov	r1, r7
    665c:	eb00181e 	bl	c6dc <strcpy>
    6660:	e3a00000 	mov	r0, #0	; 0x0
    6664:	e28dd03c 	add	sp, sp, #60	; 0x3c
    6668:	e8bd85f0 	ldmia	sp!, {r4, r5, r6, r7, r8, sl, pc}
    666c:	00014cf8 	streqd	r4, [r1], -r8
    6670:	40001658 	andmi	r1, r0, r8, asr r6
    6674:	40001660 	andmi	r1, r0, r0, ror #12
    6678:	400016be 	strmih	r1, [r0], -lr
    667c:	400016e0 	andmi	r1, r0, r0, ror #13
    6680:	00014cfc 	streqd	r4, [r1], -ip
    6684:	40002ddc 	ldrmid	r2, [r0], -ip
    6688:	00014d10 	andeq	r4, r1, r0, lsl sp

0000668c <get_IP>:
    668c:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
    6690:	e24dd028 	sub	sp, sp, #40	; 0x28
    6694:	e59f3070 	ldr	r3, [pc, #112]	; 670c <prog+0x66c4>
    6698:	e1d370b2 	ldrh	r7, [r3, #2]
    669c:	e1d340b0 	ldrh	r4, [r3]
    66a0:	e1a00004 	mov	r0, r4
    66a4:	eb000738 	bl	838c <htons>
    66a8:	e1a06000 	mov	r6, r0
    66ac:	e1a00004 	mov	r0, r4
    66b0:	eb000735 	bl	838c <htons>
    66b4:	e1a05000 	mov	r5, r0
    66b8:	e1a00007 	mov	r0, r7
    66bc:	eb000732 	bl	838c <htons>
    66c0:	e1a04000 	mov	r4, r0
    66c4:	e1a00007 	mov	r0, r7
    66c8:	eb00072f 	bl	838c <htons>
    66cc:	e28d700a 	add	r7, sp, #10	; 0xa
    66d0:	e1a06406 	mov	r6, r6, lsl #8
    66d4:	e20550ff 	and	r5, r5, #255	; 0xff
    66d8:	e1a04404 	mov	r4, r4, lsl #8
    66dc:	e1a04824 	mov	r4, r4, lsr #16
    66e0:	e58d4000 	str	r4, [sp]
    66e4:	e20000ff 	and	r0, r0, #255	; 0xff
    66e8:	e58d0004 	str	r0, [sp, #4]
    66ec:	e1a00007 	mov	r0, r7
    66f0:	e59f1018 	ldr	r1, [pc, #24]	; 6710 <prog+0x66c8>
    66f4:	e1a02826 	mov	r2, r6, lsr #16
    66f8:	e1a03005 	mov	r3, r5
    66fc:	ebffecb2 	bl	19cc <sprintf>
    6700:	e1a00007 	mov	r0, r7
    6704:	e28dd028 	add	sp, sp, #40	; 0x28
    6708:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
    670c:	40002e1c 	andmi	r2, r0, ip, lsl lr
    6710:	00014d10 	andeq	r4, r1, r0, lsl sp

00006714 <out_data>:
    6714:	e52de004 	str	lr, [sp, #-4]!
    6718:	e3a01000 	mov	r1, #0	; 0x0
    671c:	ebffe93b 	bl	c10 <UARTTransmitString>
    6720:	e49df004 	ldr	pc, [sp], #4

00006724 <writeDataLcd>:
    6724:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
    6728:	e24dd014 	sub	sp, sp, #20	; 0x14
    672c:	e1a06000 	mov	r6, r0
    6730:	e1a05001 	mov	r5, r1
    6734:	e1a04002 	mov	r4, r2
    6738:	ebfffc57 	bl	589c <lcd_clr>
    673c:	e1a0000d 	mov	r0, sp
    6740:	e59f1024 	ldr	r1, [pc, #36]	; 676c <prog+0x6724>
    6744:	e1a02005 	mov	r2, r5
    6748:	e1a03004 	mov	r3, r4
    674c:	ebffec9e 	bl	19cc <sprintf>
    6750:	e1a00004 	mov	r0, r4
    6754:	e1a01005 	mov	r1, r5
    6758:	ebfffc46 	bl	5878 <lcd_goto>
    675c:	e1a00006 	mov	r0, r6
    6760:	ebfffc15 	bl	57bc <lcd_string>
    6764:	e28dd014 	add	sp, sp, #20	; 0x14
    6768:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
    676c:	00014d1c 	andeq	r4, r1, ip, lsl sp

00006770 <do_lcd>:
    6770:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
    6774:	e24dd038 	sub	sp, sp, #56	; 0x38
    6778:	e1a04000 	mov	r4, r0
    677c:	e5903000 	ldr	r3, [r0]
    6780:	e3530001 	cmp	r3, #1	; 0x1
    6784:	1a000025 	bne	6820 <do_lcd+0xb0>
    6788:	e28d5010 	add	r5, sp, #16	; 0x10
    678c:	e1a00005 	mov	r0, r5
    6790:	e2841022 	add	r1, r4, #34	; 0x22
    6794:	eb0017d0 	bl	c6dc <strcpy>
    6798:	e5dd3010 	ldrb	r3, [sp, #16]
    679c:	e3530000 	cmp	r3, #0	; 0x0
    67a0:	0a000024 	beq	6838 <do_lcd+0xc8>
    67a4:	e1a00005 	mov	r0, r5
    67a8:	e59f1094 	ldr	r1, [pc, #148]	; 6844 <prog+0x67fc>
    67ac:	eb001905 	bl	cbc8 <strtok>
    67b0:	e1a01000 	mov	r1, r0
    67b4:	e1a0700d 	mov	r7, sp
    67b8:	e1a0000d 	mov	r0, sp
    67bc:	eb0017c6 	bl	c6dc <strcpy>
    67c0:	e59f6080 	ldr	r6, [pc, #128]	; 6848 <prog+0x6800>
    67c4:	e3a00000 	mov	r0, #0	; 0x0
    67c8:	e1a01006 	mov	r1, r6
    67cc:	eb0018fd 	bl	cbc8 <strtok>
    67d0:	ebffe92f 	bl	c94 <atoi>
    67d4:	e1a05000 	mov	r5, r0
    67d8:	e3500010 	cmp	r0, #16	; 0x10
    67dc:	8a000015 	bhi	6838 <do_lcd+0xc8>
    67e0:	e3a00000 	mov	r0, #0	; 0x0
    67e4:	e1a01006 	mov	r1, r6
    67e8:	eb0018f6 	bl	cbc8 <strtok>
    67ec:	ebffe928 	bl	c94 <atoi>
    67f0:	e1a02000 	mov	r2, r0
    67f4:	e3500002 	cmp	r0, #2	; 0x2
    67f8:	8a00000e 	bhi	6838 <do_lcd+0xc8>
    67fc:	e1a0000d 	mov	r0, sp
    6800:	e1a01005 	mov	r1, r5
    6804:	ebffffc6 	bl	6724 <writeDataLcd>
    6808:	e2840086 	add	r0, r4, #134	; 0x86
    680c:	e59f1038 	ldr	r1, [pc, #56]	; 684c <prog+0x6804>
    6810:	e3a0201c 	mov	r2, #28	; 0x1c
    6814:	eb00161e 	bl	c094 <memcpy>
    6818:	e3a00000 	mov	r0, #0	; 0x0
    681c:	ea000006 	b	683c <do_lcd+0xcc>
    6820:	e2800086 	add	r0, r0, #134	; 0x86
    6824:	e59f1024 	ldr	r1, [pc, #36]	; 6850 <prog+0x6808>
    6828:	e3a02017 	mov	r2, #23	; 0x17
    682c:	eb001618 	bl	c094 <memcpy>
    6830:	e3a00000 	mov	r0, #0	; 0x0
    6834:	ea000000 	b	683c <do_lcd+0xcc>
    6838:	e3a00001 	mov	r0, #1	; 0x1
    683c:	e28dd038 	add	sp, sp, #56	; 0x38
    6840:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
    6844:	00014d34 	andeq	r4, r1, r4, lsr sp
    6848:	00014cf8 	streqd	r4, [r1], -r8
    684c:	00014d38 	andeq	r4, r1, r8, lsr sp
    6850:	00014d54 	andeq	r4, r1, r4, asr sp

00006854 <do_IP>:
    6854:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
    6858:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    685c:	e1a06000 	mov	r6, r0
    6860:	e5904000 	ldr	r4, [r0]
    6864:	e3540001 	cmp	r4, #1	; 0x1
    6868:	1a000030 	bne	6930 <do_IP+0xdc>
    686c:	e28d0028 	add	r0, sp, #40	; 0x28
    6870:	e2861022 	add	r1, r6, #34	; 0x22
    6874:	eb001798 	bl	c6dc <strcpy>
    6878:	e5dd3028 	ldrb	r3, [sp, #40]
    687c:	e3530000 	cmp	r3, #0	; 0x0
    6880:	01a00004 	moveq	r0, r4
    6884:	0a000032 	beq	6954 <do_IP+0x100>
    6888:	e59f50cc 	ldr	r5, [pc, #204]	; 695c <prog+0x6914>
    688c:	e28d0028 	add	r0, sp, #40	; 0x28
    6890:	e1a01005 	mov	r1, r5
    6894:	eb0018cb 	bl	cbc8 <strtok>
    6898:	ebffe8fd 	bl	c94 <atoi>
    689c:	e59f40bc 	ldr	r4, [pc, #188]	; 6960 <prog+0x6918>
    68a0:	e5840000 	str	r0, [r4]
    68a4:	e3a00000 	mov	r0, #0	; 0x0
    68a8:	e1a01005 	mov	r1, r5
    68ac:	eb0018c5 	bl	cbc8 <strtok>
    68b0:	ebffe8f7 	bl	c94 <atoi>
    68b4:	e5840004 	str	r0, [r4, #4]
    68b8:	e3a00000 	mov	r0, #0	; 0x0
    68bc:	e1a01005 	mov	r1, r5
    68c0:	eb0018c0 	bl	cbc8 <strtok>
    68c4:	ebffe8f2 	bl	c94 <atoi>
    68c8:	e5840008 	str	r0, [r4, #8]
    68cc:	e3a00000 	mov	r0, #0	; 0x0
    68d0:	e1a01005 	mov	r1, r5
    68d4:	eb0018bb 	bl	cbc8 <strtok>
    68d8:	ebffe8ed 	bl	c94 <atoi>
    68dc:	e584000c 	str	r0, [r4, #12]
    68e0:	ebfffdd6 	bl	6040 <set_IP>
    68e4:	e28d400a 	add	r4, sp, #10	; 0xa
    68e8:	e59f3074 	ldr	r3, [pc, #116]	; 6964 <prog+0x691c>
    68ec:	e5932000 	ldr	r2, [r3]
    68f0:	e59f3070 	ldr	r3, [pc, #112]	; 6968 <prog+0x6920>
    68f4:	e5933000 	ldr	r3, [r3]
    68f8:	e59f106c 	ldr	r1, [pc, #108]	; 696c <prog+0x6924>
    68fc:	e5911000 	ldr	r1, [r1]
    6900:	e58d1000 	str	r1, [sp]
    6904:	e59f1064 	ldr	r1, [pc, #100]	; 6970 <prog+0x6928>
    6908:	e5911000 	ldr	r1, [r1]
    690c:	e58d1004 	str	r1, [sp, #4]
    6910:	e1a00004 	mov	r0, r4
    6914:	e59f1058 	ldr	r1, [pc, #88]	; 6974 <prog+0x692c>
    6918:	ebffec2b 	bl	19cc <sprintf>
    691c:	e2860086 	add	r0, r6, #134	; 0x86
    6920:	e1a01004 	mov	r1, r4
    6924:	eb00176c 	bl	c6dc <strcpy>
    6928:	e3a00000 	mov	r0, #0	; 0x0
    692c:	ea000008 	b	6954 <do_IP+0x100>
    6930:	ebffff55 	bl	668c <get_IP>
    6934:	e1a01000 	mov	r1, r0
    6938:	e28d400a 	add	r4, sp, #10	; 0xa
    693c:	e1a00004 	mov	r0, r4
    6940:	eb001765 	bl	c6dc <strcpy>
    6944:	e2860086 	add	r0, r6, #134	; 0x86
    6948:	e1a01004 	mov	r1, r4
    694c:	eb001762 	bl	c6dc <strcpy>
    6950:	e3a00000 	mov	r0, #0	; 0x0
    6954:	e28dd03c 	add	sp, sp, #60	; 0x3c
    6958:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
    695c:	00014cf8 	streqd	r4, [r1], -r8
    6960:	400016cc 	andmi	r1, r0, ip, asr #13
    6964:	400016e4 	andmi	r1, r0, r4, ror #13
    6968:	40001698 	mulmi	r0, r8, r6
    696c:	4000165c 	andmi	r1, r0, ip, asr r6
    6970:	4000168c 	andmi	r1, r0, ip, lsl #13
    6974:	00014cfc 	streqd	r4, [r1], -ip

00006978 <set_lcd_init>:
    6978:	e92d4010 	stmdb	sp!, {r4, lr}
    697c:	e24dd020 	sub	sp, sp, #32	; 0x20
    6980:	ebfffbc5 	bl	589c <lcd_clr>
    6984:	e3a00001 	mov	r0, #1	; 0x1
    6988:	e3a01000 	mov	r1, #0	; 0x0
    698c:	ebfffbb9 	bl	5878 <lcd_goto>
    6990:	e59f0024 	ldr	r0, [pc, #36]	; 69bc <prog+0x6974>
    6994:	ebfffb88 	bl	57bc <lcd_string>
    6998:	ebffff3b 	bl	668c <get_IP>
    699c:	e1a01000 	mov	r1, r0
    69a0:	e28d4002 	add	r4, sp, #2	; 0x2
    69a4:	e1a00004 	mov	r0, r4
    69a8:	eb00174b 	bl	c6dc <strcpy>
    69ac:	e1a00004 	mov	r0, r4
    69b0:	ebfffb81 	bl	57bc <lcd_string>
    69b4:	e28dd020 	add	sp, sp, #32	; 0x20
    69b8:	e8bd8010 	ldmia	sp!, {r4, pc}
    69bc:	00014d6c 	andeq	r4, r1, ip, ror #26

000069c0 <do_init>:
    69c0:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    69c4:	e2804086 	add	r4, r0, #134	; 0x86
    69c8:	e3a0502d 	mov	r5, #45	; 0x2d
    69cc:	e1a00004 	mov	r0, r4
    69d0:	e59f1040 	ldr	r1, [pc, #64]	; 6a18 <prog+0x69d0>
    69d4:	e1a02005 	mov	r2, r5
    69d8:	eb0015ad 	bl	c094 <memcpy>
    69dc:	e1a00004 	mov	r0, r4
    69e0:	eb001764 	bl	c778 <strlen>
    69e4:	e0800004 	add	r0, r0, r4
    69e8:	e59f102c 	ldr	r1, [pc, #44]	; 6a1c <prog+0x69d4>
    69ec:	e1a02005 	mov	r2, r5
    69f0:	eb0015a7 	bl	c094 <memcpy>
    69f4:	e1a00004 	mov	r0, r4
    69f8:	eb00175e 	bl	c778 <strlen>
    69fc:	e0800004 	add	r0, r0, r4
    6a00:	e59f1018 	ldr	r1, [pc, #24]	; 6a20 <prog+0x69d8>
    6a04:	e3a0202e 	mov	r2, #46	; 0x2e
    6a08:	eb0015a1 	bl	c094 <memcpy>
    6a0c:	ebffffd9 	bl	6978 <set_lcd_init>
    6a10:	e3a00000 	mov	r0, #0	; 0x0
    6a14:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
    6a18:	00014d70 	andeq	r4, r1, r0, ror sp
    6a1c:	00014da0 	andeq	r4, r1, r0, lsr #27
    6a20:	00014dd0 	ldreqd	r4, [r1], -r0

00006a24 <do_chat>:
    6a24:	e92d4010 	stmdb	sp!, {r4, lr}
    6a28:	e24dd014 	sub	sp, sp, #20	; 0x14
    6a2c:	e3a02001 	mov	r2, #1	; 0x1
    6a30:	e59f3048 	ldr	r3, [pc, #72]	; 6a80 <prog+0x6a38>
    6a34:	e5832000 	str	r2, [r3]
    6a38:	e2900022 	adds	r0, r0, #34	; 0x22
    6a3c:	01a00002 	moveq	r0, r2
    6a40:	0a00000c 	beq	6a78 <do_chat+0x54>
    6a44:	ebffe892 	bl	c94 <atoi>
    6a48:	e1a04000 	mov	r4, r0
    6a4c:	e1a0000d 	mov	r0, sp
    6a50:	e59f102c 	ldr	r1, [pc, #44]	; 6a84 <prog+0x6a3c>
    6a54:	e1a02004 	mov	r2, r4
    6a58:	ebffebdb 	bl	19cc <sprintf>
    6a5c:	e59f3024 	ldr	r3, [pc, #36]	; 6a88 <prog+0x6a40>
    6a60:	e5834000 	str	r4, [r3]
    6a64:	ebfffa60 	bl	53ec <chat_start>
    6a68:	e59f001c 	ldr	r0, [pc, #28]	; 6a8c <prog+0x6a44>
    6a6c:	e3a01000 	mov	r1, #0	; 0x0
    6a70:	ebffe866 	bl	c10 <UARTTransmitString>
    6a74:	e3a00000 	mov	r0, #0	; 0x0
    6a78:	e28dd014 	add	sp, sp, #20	; 0x14
    6a7c:	e8bd8010 	ldmia	sp!, {r4, pc}
    6a80:	400016dc 	ldrmid	r1, [r0], -ip
    6a84:	00014e00 	andeq	r4, r1, r0, lsl #28
    6a88:	400016c4 	andmi	r1, r0, r4, asr #13
    6a8c:	00014e0c 	andeq	r4, r1, ip, lsl #28

00006a90 <show_lcd_time>:
    6a90:	e92d4010 	stmdb	sp!, {r4, lr}
    6a94:	e24dd024 	sub	sp, sp, #36	; 0x24
    6a98:	e28d0004 	add	r0, sp, #4	; 0x4
    6a9c:	ebffecb5 	bl	1d78 <RTCGetTime>
    6aa0:	e59d3004 	ldr	r3, [sp, #4]
    6aa4:	e58d3000 	str	r3, [sp]
    6aa8:	e1a00004 	mov	r0, r4
    6aac:	e59f1024 	ldr	r1, [pc, #36]	; 6ad8 <prog+0x6a90>
    6ab0:	e59d200c 	ldr	r2, [sp, #12]
    6ab4:	e59d3008 	ldr	r3, [sp, #8]
    6ab8:	ebffebc3 	bl	19cc <sprintf>
    6abc:	e3a00002 	mov	r0, #2	; 0x2
    6ac0:	e3a01000 	mov	r1, #0	; 0x0
    6ac4:	ebfffb6b 	bl	5878 <lcd_goto>
    6ac8:	e1a00004 	mov	r0, r4
    6acc:	ebfffb3a 	bl	57bc <lcd_string>
    6ad0:	e28dd024 	add	sp, sp, #36	; 0x24
    6ad4:	e8bd8010 	ldmia	sp!, {r4, pc}
    6ad8:	00014e1c 	andeq	r4, r1, ip, lsl lr

00006adc <shell_quit>:
/*---------------------------------------------------------------------------*/
void
shell_quit(char *str)
{
  s.state = STATE_CLOSE;
    6adc:	e3a02006 	mov	r2, #6	; 0x6
    6ae0:	e59f3004 	ldr	r3, [pc, #4]	; 6aec <prog+0x6aa4>
    6ae4:	e5c3206a 	strb	r2, [r3, #106]
}
    6ae8:	e12fff1e 	bx	lr
    6aec:	400011f0 	strmid	r1, [r0], -r0

00006af0 <dealloc_line>:
    6af0:	e52de004 	str	lr, [sp, #-4]!
    6af4:	e1a01000 	mov	r1, r0
    6af8:	e59f0004 	ldr	r0, [pc, #4]	; 6b04 <prog+0x6abc>
    6afc:	eb000197 	bl	7160 <memb_free>
    6b00:	e49df004 	ldr	pc, [sp], #4
    6b04:	40000008 	andmi	r0, r0, r8

00006b08 <sendline>:
/*---------------------------------------------------------------------------*/
static void
sendline(char *line)
{
    6b08:	e52de004 	str	lr, [sp, #-4]!
  static unsigned int i;
  
  for(i = 0; i < TELNETD_CONF_NUMLINES; ++i) {
    6b0c:	e3a02000 	mov	r2, #0	; 0x0
    6b10:	e59f3054 	ldr	r3, [pc, #84]	; 6b6c <prog+0x6b24>
    6b14:	e5832000 	str	r2, [r3]
    6b18:	e1a0c002 	mov	ip, r2
    6b1c:	e59f104c 	ldr	r1, [pc, #76]	; 6b70 <prog+0x6b28>
    if(s.lines[i] == NULL) {
    6b20:	e5913000 	ldr	r3, [r1]
    6b24:	e3530000 	cmp	r3, #0	; 0x0
    6b28:	1a000004 	bne	6b40 <sendline+0x38>
    6b2c:	e59f3038 	ldr	r3, [pc, #56]	; 6b6c <prog+0x6b24>
    6b30:	e5832000 	str	r2, [r3]
      s.lines[i] = line;
    6b34:	e59f3034 	ldr	r3, [pc, #52]	; 6b70 <prog+0x6b28>
    6b38:	e783010c 	str	r0, [r3, ip, lsl #2]
    6b3c:	e49df004 	ldr	pc, [sp], #4
    6b40:	e28c2001 	add	r2, ip, #1	; 0x1
    6b44:	e2811004 	add	r1, r1, #4	; 0x4
    6b48:	e3520010 	cmp	r2, #16	; 0x10
    6b4c:	11a0c002 	movne	ip, r2
    6b50:	1afffff2 	bne	6b20 <sendline+0x18>
    6b54:	e59f3010 	ldr	r3, [pc, #16]	; 6b6c <prog+0x6b24>
    6b58:	e5832000 	str	r2, [r3]
      break;
    }
  }
  if(i == TELNETD_CONF_NUMLINES) {
    6b5c:	e3520010 	cmp	r2, #16	; 0x10
    6b60:	149df004 	ldrne	pc, [sp], #4
    dealloc_line(line);
    6b64:	ebffffe1 	bl	6af0 <dealloc_line>
    6b68:	e49df004 	ldr	pc, [sp], #4
    6b6c:	400011d8 	ldrmid	r1, [r0], -r8
    6b70:	400011f0 	strmid	r1, [r0], -r0

00006b74 <alloc_line>:
    6b74:	e52de004 	str	lr, [sp, #-4]!
    6b78:	e59f0004 	ldr	r0, [pc, #4]	; 6b84 <prog+0x6b3c>
    6b7c:	eb00015b 	bl	70f0 <memb_alloc>
    6b80:	e49df004 	ldr	pc, [sp], #4
    6b84:	40000008 	andmi	r0, r0, r8

00006b88 <sendopt>:
  }
}
/*---------------------------------------------------------------------------*/
void
shell_prompt(char *str)
{
  char *line;
  line = alloc_line();
  if(line != NULL) {
    strncpy(line, str, TELNETD_CONF_LINELEN);
    /*    petsciiconv_toascii(line, TELNETD_CONF_LINELEN);*/
    sendline(line);
  }
}
/*---------------------------------------------------------------------------*/
void
shell_output(char *str1, char *str2)
{
  static unsigned len;
  char *line;

  line = alloc_line();
  if(line != NULL) {
    len = strlen(str1);
    strncpy(line, str1, TELNETD_CONF_LINELEN);
    if(len < TELNETD_CONF_LINELEN) {
      strncpy(line + len, str2, TELNETD_CONF_LINELEN - len);
    }
    len = strlen(line);
    if(len < TELNETD_CONF_LINELEN - 2) {
      line[len] = ISO_cr;
      line[len+1] = ISO_nl;
      line[len+2] = 0;
    }
    /*    petsciiconv_toascii(line, TELNETD_CONF_LINELEN);*/
    sendline(line);
  }
}
/*---------------------------------------------------------------------------*/
void
telnetd_init(void)
{
  uip_listen(HTONS(TELNET_PORT));
  memb_init(&linemem);
  shell_init();
}
/*---------------------------------------------------------------------------*/
static void
acked(void)
{
  static unsigned int i;
  
  while(s.numsent > 0) {
    dealloc_line(s.lines[0]);
    for(i = 1; i < TELNETD_CONF_NUMLINES; ++i) {
      s.lines[i - 1] = s.lines[i];
    }
    s.lines[TELNETD_CONF_NUMLINES - 1] = NULL;
    --s.numsent;
  }
}
/*---------------------------------------------------------------------------*/
static void
senddata(void)
{
  static char *bufptr, *lineptr;
  static int buflen, linelen;
  
  bufptr = uip_appdata;
  buflen = 0;
  for(s.numsent = 0; s.numsent < TELNETD_CONF_NUMLINES &&
        s.lines[s.numsent] != NULL ; ++s.numsent) {
    lineptr = s.lines[s.numsent];
    linelen = strlen(lineptr);
    if(linelen > TELNETD_CONF_LINELEN) {
      linelen = TELNETD_CONF_LINELEN;
    }
    if(buflen + linelen < uip_mss()) {
      memcpy(bufptr, lineptr, linelen);
      bufptr += linelen;
      buflen += linelen;
    } else {
      break;
    }
  }
  uip_send(uip_appdata, buflen);

}
/*---------------------------------------------------------------------------*/
static void
closed(void)
{
  static unsigned int i;
  
  for(i = 0; i < TELNETD_CONF_NUMLINES; ++i) {
    if(s.lines[i] != NULL) {
      dealloc_line(s.lines[i]);
    }
  }
}
/*---------------------------------------------------------------------------*/
static void
get_char(u8_t c)
{
  if(c == ISO_cr) {
    return;
  }
  
  s.buf[(int)s.bufptr] = c;
  if(s.buf[(int)s.bufptr] == ISO_nl ||
     s.bufptr == sizeof(s.buf) - 1) {
    if(s.bufptr > 0) {
      s.buf[(int)s.bufptr] = 0;
      /*      petsciiconv_topetscii(s.buf, TELNETD_CONF_LINELEN);*/
    }
    shell_input(s.buf); /////////////////////////////////////////////////////////////////////
    s.bufptr = 0;
  } else {
    ++s.bufptr;
  }
}
/*---------------------------------------------------------------------------*/
static void
sendopt(u8_t option, u8_t value)
{
    6b88:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    6b8c:	e20040ff 	and	r4, r0, #255	; 0xff
    6b90:	e20150ff 	and	r5, r1, #255	; 0xff
  char *line;
  line = alloc_line();
    6b94:	ebfffff6 	bl	6b74 <alloc_line>
  if(line != NULL) {
    6b98:	e2502000 	subs	r2, r0, #0	; 0x0
    6b9c:	08bd8030 	ldmeqia	sp!, {r4, r5, pc}
    line[0] = TELNET_IAC;
    6ba0:	e3e03000 	mvn	r3, #0	; 0x0
    6ba4:	e5c23000 	strb	r3, [r2]
    line[1] = option;
    6ba8:	e5c24001 	strb	r4, [r2, #1]
    line[2] = value;
    6bac:	e5c25002 	strb	r5, [r2, #2]
    line[3] = 0;
    6bb0:	e2833001 	add	r3, r3, #1	; 0x1
    6bb4:	e5c23003 	strb	r3, [r2, #3]
    sendline(line);
    6bb8:	ebffffd2 	bl	6b08 <sendline>
    6bbc:	e8bd8030 	ldmia	sp!, {r4, r5, pc}

00006bc0 <get_char>:
    6bc0:	e92d4010 	stmdb	sp!, {r4, lr}
    6bc4:	e20000ff 	and	r0, r0, #255	; 0xff
    6bc8:	e350000d 	cmp	r0, #13	; 0xd
    6bcc:	08bd8010 	ldmeqia	sp!, {r4, pc}
    6bd0:	e59f3060 	ldr	r3, [pc, #96]	; 6c38 <prog+0x6bf0>
    6bd4:	e5d32068 	ldrb	r2, [r3, #104]
    6bd8:	e0823003 	add	r3, r2, r3
    6bdc:	e5c30040 	strb	r0, [r3, #64]
    6be0:	e1a01002 	mov	r1, r2
    6be4:	e5d33040 	ldrb	r3, [r3, #64]
    6be8:	e353000a 	cmp	r3, #10	; 0xa
    6bec:	0a000005 	beq	6c08 <get_char+0x48>
    6bf0:	e3520027 	cmp	r2, #39	; 0x27
    6bf4:	12822001 	addne	r2, r2, #1	; 0x1
    6bf8:	159f3038 	ldrne	r3, [pc, #56]	; 6c38 <prog+0x6bf0>
    6bfc:	15c32068 	strneb	r2, [r3, #104]
    6c00:	18bd8010 	ldmneia	sp!, {r4, pc}
    6c04:	ea000001 	b	6c10 <get_char+0x50>
    6c08:	e3520000 	cmp	r2, #0	; 0x0
    6c0c:	0a000003 	beq	6c20 <get_char+0x60>
    6c10:	e59f3020 	ldr	r3, [pc, #32]	; 6c38 <prog+0x6bf0>
    6c14:	e0813003 	add	r3, r1, r3
    6c18:	e3a02000 	mov	r2, #0	; 0x0
    6c1c:	e5c32040 	strb	r2, [r3, #64]
    6c20:	e59f4014 	ldr	r4, [pc, #20]	; 6c3c <prog+0x6bf4>
    6c24:	e1a00004 	mov	r0, r4
    6c28:	eb000179 	bl	7214 <shell_input>
    6c2c:	e3a03000 	mov	r3, #0	; 0x0
    6c30:	e5c43028 	strb	r3, [r4, #40]
    6c34:	e8bd8010 	ldmia	sp!, {r4, pc}
    6c38:	400011f0 	strmid	r1, [r0], -r0
    6c3c:	40001230 	andmi	r1, r0, r0, lsr r2

00006c40 <telnetd_appcall>:
  }
}
/*---------------------------------------------------------------------------*/
static void
newdata(void)
{
  u16_t len;
  u8_t c;
  char *dataptr;
    
  
  len = uip_datalen();
  dataptr = (char *)uip_appdata;
  
  while(len > 0 && s.bufptr < sizeof(s.buf)) {
    c = *dataptr;
    ++dataptr;
    --len;
    switch(s.state) {
    case STATE_IAC:
      if(c == TELNET_IAC) {
        get_char(c);
        s.state = STATE_NORMAL;
      } else {
        switch(c) {
        case TELNET_WILL:
          s.state = STATE_WILL;
          break;
        case TELNET_WONT:
          s.state = STATE_WONT;
          break;
        case TELNET_DO:
          s.state = STATE_DO;
          break;
        case TELNET_DONT:
          s.state = STATE_DONT;
          break;
        default:
          s.state = STATE_NORMAL;
          break;
        }
      }
      break;
    case STATE_WILL:
      /* Reply with a DONT */
      sendopt(TELNET_DONT, c);
      s.state = STATE_NORMAL;
      break;
      
    case STATE_WONT:
      /* Reply with a DONT */
      sendopt(TELNET_DONT, c);
      s.state = STATE_NORMAL;
      break;
    case STATE_DO:
      /* Reply with a WONT */
      sendopt(TELNET_WONT, c);
      s.state = STATE_NORMAL;
      break;
    case STATE_DONT:
      /* Reply with a WONT */
      sendopt(TELNET_WONT, c);
      s.state = STATE_NORMAL;
      break;
    case STATE_NORMAL:
      if(c == TELNET_IAC) {
        s.state = STATE_IAC;
      } else {
        get_char(c);
      }
      break;
    }

    
  }
  
}
/*---------------------------------------------------------------------------*/
void
telnetd_appcall(void)
{
    6c40:	e92d41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  static unsigned int i;

  DEBUG_ENTER;

  if(uip_connected()) {
    6c44:	e59f3390 	ldr	r3, [pc, #912]	; 6fdc <prog+0x6f94>
    6c48:	e5d33000 	ldrb	r3, [r3]
    6c4c:	e3130040 	tst	r3, #64	; 0x40
    6c50:	0a00000f 	beq	6c94 <telnetd_appcall+0x54>
    /*    tcp_markconn(uip_conn, &s);*/
    for(i = 0; i < TELNETD_CONF_NUMLINES; ++i) {
    6c54:	e3a02000 	mov	r2, #0	; 0x0
    6c58:	e59f3380 	ldr	r3, [pc, #896]	; 6fe0 <prog+0x6f98>
    6c5c:	e5832000 	str	r2, [r3]
    6c60:	e59f137c 	ldr	r1, [pc, #892]	; 6fe4 <prog+0x6f9c>
    6c64:	e1a00002 	mov	r0, r2
    6c68:	e59f3378 	ldr	r3, [pc, #888]	; 6fe8 <prog+0x6fa0>
      s.lines[i] = NULL;
    6c6c:	e4810004 	str	r0, [r1], #4
    6c70:	e1510003 	cmp	r1, r3
    6c74:	1afffffc 	bne	6c6c <telnetd_appcall+0x2c>
    6c78:	e3a03010 	mov	r3, #16	; 0x10
    6c7c:	e59f235c 	ldr	r2, [pc, #860]	; 6fe0 <prog+0x6f98>
    6c80:	e5823000 	str	r3, [r2]
    }
    s.bufptr = 0;
    6c84:	e2413040 	sub	r3, r1, #64	; 0x40
    6c88:	e5c30068 	strb	r0, [r3, #104]
    s.state = STATE_NORMAL;
    6c8c:	e5c3006a 	strb	r0, [r3, #106]

    shell_start();
    6c90:	eb000174 	bl	7268 <shell_start>
  }

  if(s.state == STATE_CLOSE) {
    6c94:	e59f2348 	ldr	r2, [pc, #840]	; 6fe4 <prog+0x6f9c>
    6c98:	e5d2306a 	ldrb	r3, [r2, #106]
    6c9c:	e3530006 	cmp	r3, #6	; 0x6
    6ca0:	1a000005 	bne	6cbc <telnetd_appcall+0x7c>
    s.state = STATE_NORMAL;
    6ca4:	e2433006 	sub	r3, r3, #6	; 0x6
    6ca8:	e5c2306a 	strb	r3, [r2, #106]
    uip_close();
    6cac:	e3a02010 	mov	r2, #16	; 0x10
    6cb0:	e59f3324 	ldr	r3, [pc, #804]	; 6fdc <prog+0x6f94>
    6cb4:	e5c32000 	strb	r2, [r3]
    6cb8:	e8bd81f0 	ldmia	sp!, {r4, r5, r6, r7, r8, pc}
    return;
  }
  
  if(uip_closed() ||
    6cbc:	e59f3318 	ldr	r3, [pc, #792]	; 6fdc <prog+0x6f94>
    6cc0:	e5d33000 	ldrb	r3, [r3]
    6cc4:	e3130030 	tst	r3, #48	; 0x30
    6cc8:	1a000001 	bne	6cd4 <telnetd_appcall+0x94>
    6ccc:	e3130080 	tst	r3, #128	; 0x80
    6cd0:	0a00000c 	beq	6d08 <telnetd_appcall+0xc8>
    6cd4:	e3a02000 	mov	r2, #0	; 0x0
    6cd8:	e59f330c 	ldr	r3, [pc, #780]	; 6fec <prog+0x6fa4>
    6cdc:	e5832000 	str	r2, [r3]
    6ce0:	e59f52fc 	ldr	r5, [pc, #764]	; 6fe4 <prog+0x6f9c>
    6ce4:	e1a04003 	mov	r4, r3
    6ce8:	e7950102 	ldr	r0, [r5, r2, lsl #2]
    6cec:	e3500000 	cmp	r0, #0	; 0x0
    6cf0:	1bffff7e 	blne	6af0 <dealloc_line>
    6cf4:	e5943000 	ldr	r3, [r4]
    6cf8:	e2832001 	add	r2, r3, #1	; 0x1
    6cfc:	e5842000 	str	r2, [r4]
    6d00:	e352000f 	cmp	r2, #15	; 0xf
    6d04:	9afffff7 	bls	6ce8 <telnetd_appcall+0xa8>
     uip_aborted() ||
     uip_timedout()) {
    closed();
  }
  
  if(uip_acked()) {
    6d08:	e59f32cc 	ldr	r3, [pc, #716]	; 6fdc <prog+0x6f94>
    6d0c:	e5d33000 	ldrb	r3, [r3]
    6d10:	e3130001 	tst	r3, #1	; 0x1
    6d14:	0a00001a 	beq	6d84 <telnetd_appcall+0x144>
    6d18:	e59f32c4 	ldr	r3, [pc, #708]	; 6fe4 <prog+0x6f9c>
    6d1c:	e5d33069 	ldrb	r3, [r3, #105]
    6d20:	e3530000 	cmp	r3, #0	; 0x0
    6d24:	0a000016 	beq	6d84 <telnetd_appcall+0x144>
    6d28:	e59f62b4 	ldr	r6, [pc, #692]	; 6fe4 <prog+0x6f9c>
    6d2c:	e59f72bc 	ldr	r7, [pc, #700]	; 6ff0 <prog+0x6fa8>
    6d30:	e59f52b0 	ldr	r5, [pc, #688]	; 6fe8 <prog+0x6fa0>
    6d34:	e1a04006 	mov	r4, r6
    6d38:	e4940004 	ldr	r0, [r4], #4
    6d3c:	ebffff6b 	bl	6af0 <dealloc_line>
    6d40:	e3a03001 	mov	r3, #1	; 0x1
    6d44:	e5873000 	str	r3, [r7]
    6d48:	e5943000 	ldr	r3, [r4]
    6d4c:	e5043004 	str	r3, [r4, #-4]
    6d50:	e2844004 	add	r4, r4, #4	; 0x4
    6d54:	e1540005 	cmp	r4, r5
    6d58:	1afffffa 	bne	6d48 <telnetd_appcall+0x108>
    6d5c:	e3a03010 	mov	r3, #16	; 0x10
    6d60:	e5873000 	str	r3, [r7]
    6d64:	e2433010 	sub	r3, r3, #16	; 0x10
    6d68:	e586303c 	str	r3, [r6, #60]
    6d6c:	e5d63069 	ldrb	r3, [r6, #105]
    6d70:	e2433001 	sub	r3, r3, #1	; 0x1
    6d74:	e20330ff 	and	r3, r3, #255	; 0xff
    6d78:	e5c63069 	strb	r3, [r6, #105]
    6d7c:	e3530000 	cmp	r3, #0	; 0x0
    6d80:	1affffeb 	bne	6d34 <telnetd_appcall+0xf4>
    acked();
  }
  
  if(uip_newdata()) {
    6d84:	e59f3250 	ldr	r3, [pc, #592]	; 6fdc <prog+0x6f94>
    6d88:	e5d33000 	ldrb	r3, [r3]
    6d8c:	e3130002 	tst	r3, #2	; 0x2
    6d90:	0a000052 	beq	6ee0 <prog+0x6e98>
    6d94:	e59f3258 	ldr	r3, [pc, #600]	; 6ff4 <prog+0x6fac>
    6d98:	e1d340b0 	ldrh	r4, [r3]
    6d9c:	e59f3254 	ldr	r3, [pc, #596]	; 6ff8 <prog+0x6fb0>
    6da0:	e5932000 	ldr	r2, [r3]
    6da4:	e3540000 	cmp	r4, #0	; 0x0
    6da8:	0a00004c 	beq	6ee0 <prog+0x6e98>
    6dac:	e59f3230 	ldr	r3, [pc, #560]	; 6fe4 <prog+0x6f9c>
    6db0:	e5d33068 	ldrb	r3, [r3, #104]
    6db4:	e3530027 	cmp	r3, #39	; 0x27
    6db8:	8a000048 	bhi	6ee0 <prog+0x6e98>
    6dbc:	e1a07002 	mov	r7, r2
    6dc0:	e3a06000 	mov	r6, #0	; 0x0
    6dc4:	e59f5218 	ldr	r5, [pc, #536]	; 6fe4 <prog+0x6f9c>
    6dc8:	e1a08006 	mov	r8, r6
    6dcc:	e7d61007 	ldrb	r1, [r6, r7]
    6dd0:	e2443001 	sub	r3, r4, #1	; 0x1
    6dd4:	e1a03803 	mov	r3, r3, lsl #16
    6dd8:	e1a04823 	mov	r4, r3, lsr #16
    6ddc:	e5d5306a 	ldrb	r3, [r5, #106]
    6de0:	e3530005 	cmp	r3, #5	; 0x5
    6de4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    6de8:	ea000036 	b	6ec8 <prog+0x6e80>
    6dec:	00006eb4 	streqh	r6, [r0], -r4
    6df0:	00006e04 	andeq	r6, r0, r4, lsl #28
    6df4:	00006e74 	andeq	r6, r0, r4, ror lr
    6df8:	00006e84 	andeq	r6, r0, r4, lsl #29
    6dfc:	00006e94 	muleq	r0, r4, lr
    6e00:	00006ea4 	andeq	r6, r0, r4, lsr #29
    6e04:	e35100ff 	cmp	r1, #255	; 0xff
    6e08:	1a000003 	bne	6e1c <prog+0x6dd4>
    6e0c:	e1a00001 	mov	r0, r1
    6e10:	ebffff6a 	bl	6bc0 <get_char>
    6e14:	e5c5806a 	strb	r8, [r5, #106]
    6e18:	ea00002a 	b	6ec8 <prog+0x6e80>
    6e1c:	e24130fb 	sub	r3, r1, #251	; 0xfb
    6e20:	e3530003 	cmp	r3, #3	; 0x3
    6e24:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    6e28:	ea00000f 	b	6e6c <prog+0x6e24>
    6e2c:	00006e3c 	andeq	r6, r0, ip, lsr lr
    6e30:	00006e48 	andeq	r6, r0, r8, asr #28
    6e34:	00006e54 	andeq	r6, r0, r4, asr lr
    6e38:	00006e60 	andeq	r6, r0, r0, ror #28
    6e3c:	e3a03002 	mov	r3, #2	; 0x2
    6e40:	e5c5306a 	strb	r3, [r5, #106]
    6e44:	ea00001f 	b	6ec8 <prog+0x6e80>
    6e48:	e3a03003 	mov	r3, #3	; 0x3
    6e4c:	e5c5306a 	strb	r3, [r5, #106]
    6e50:	ea00001c 	b	6ec8 <prog+0x6e80>
    6e54:	e3a03004 	mov	r3, #4	; 0x4
    6e58:	e5c5306a 	strb	r3, [r5, #106]
    6e5c:	ea000019 	b	6ec8 <prog+0x6e80>
    6e60:	e3a03005 	mov	r3, #5	; 0x5
    6e64:	e5c5306a 	strb	r3, [r5, #106]
    6e68:	ea000016 	b	6ec8 <prog+0x6e80>
    6e6c:	e5c5806a 	strb	r8, [r5, #106]
    6e70:	ea000014 	b	6ec8 <prog+0x6e80>
    6e74:	e3a000fe 	mov	r0, #254	; 0xfe
    6e78:	ebffff42 	bl	6b88 <sendopt>
    6e7c:	e5c5806a 	strb	r8, [r5, #106]
    6e80:	ea000010 	b	6ec8 <prog+0x6e80>
    6e84:	e3a000fe 	mov	r0, #254	; 0xfe
    6e88:	ebffff3e 	bl	6b88 <sendopt>
    6e8c:	e5c5806a 	strb	r8, [r5, #106]
    6e90:	ea00000c 	b	6ec8 <prog+0x6e80>
    6e94:	e3a000fc 	mov	r0, #252	; 0xfc
    6e98:	ebffff3a 	bl	6b88 <sendopt>
    6e9c:	e5c5806a 	strb	r8, [r5, #106]
    6ea0:	ea000008 	b	6ec8 <prog+0x6e80>
    6ea4:	e3a000fc 	mov	r0, #252	; 0xfc
    6ea8:	ebffff36 	bl	6b88 <sendopt>
    6eac:	e5c5806a 	strb	r8, [r5, #106]
    6eb0:	ea000004 	b	6ec8 <prog+0x6e80>
    6eb4:	e35100ff 	cmp	r1, #255	; 0xff
    6eb8:	03a03001 	moveq	r3, #1	; 0x1
    6ebc:	05c5306a 	streqb	r3, [r5, #106]
    6ec0:	11a00001 	movne	r0, r1
    6ec4:	1bffff3d 	blne	6bc0 <get_char>
    6ec8:	e3540000 	cmp	r4, #0	; 0x0
    6ecc:	0a000003 	beq	6ee0 <prog+0x6e98>
    6ed0:	e2866001 	add	r6, r6, #1	; 0x1
    6ed4:	e5d53068 	ldrb	r3, [r5, #104]
    6ed8:	e3530027 	cmp	r3, #39	; 0x27
    6edc:	9affffba 	bls	6dcc <telnetd_appcall+0x18c>
    newdata();
  }
  
  if(uip_rexmit() ||
    6ee0:	e59f30f4 	ldr	r3, [pc, #244]	; 6fdc <prog+0x6f94>
    6ee4:	e5d33000 	ldrb	r3, [r3]
    6ee8:	e3130047 	tst	r3, #71	; 0x47
    6eec:	1a000001 	bne	6ef8 <prog+0x6eb0>
    6ef0:	e3130008 	tst	r3, #8	; 0x8
    6ef4:	08bd81f0 	ldmeqia	sp!, {r4, r5, r6, r7, r8, pc}
    6ef8:	e59f30f8 	ldr	r3, [pc, #248]	; 6ff8 <prog+0x6fb0>
    6efc:	e5932000 	ldr	r2, [r3]
    6f00:	e59f30f4 	ldr	r3, [pc, #244]	; 6ffc <prog+0x6fb4>
    6f04:	e5832000 	str	r2, [r3]
    6f08:	e3a02000 	mov	r2, #0	; 0x0
    6f0c:	e59f30ec 	ldr	r3, [pc, #236]	; 7000 <prog+0x6fb8>
    6f10:	e5832000 	str	r2, [r3]
    6f14:	e59f30c8 	ldr	r3, [pc, #200]	; 6fe4 <prog+0x6f9c>
    6f18:	e5c32069 	strb	r2, [r3, #105]
    6f1c:	e1a08003 	mov	r8, r3
    6f20:	e59f70d4 	ldr	r7, [pc, #212]	; 6ffc <prog+0x6fb4>
    6f24:	ea000023 	b	6fb8 <prog+0x6f70>
    6f28:	e59f30d4 	ldr	r3, [pc, #212]	; 7004 <prog+0x6fbc>
    6f2c:	e5834000 	str	r4, [r3]
    6f30:	e1a00004 	mov	r0, r4
    6f34:	eb00160f 	bl	c778 <strlen>
    6f38:	e59f20c8 	ldr	r2, [pc, #200]	; 7008 <prog+0x6fc0>
    6f3c:	e5820000 	str	r0, [r2]
    6f40:	e3500028 	cmp	r0, #40	; 0x28
    6f44:	c3a03028 	movgt	r3, #40	; 0x28
    6f48:	c5823000 	strgt	r3, [r2]
    6f4c:	e59f60b4 	ldr	r6, [pc, #180]	; 7008 <prog+0x6fc0>
    6f50:	e596c000 	ldr	ip, [r6]
    6f54:	e59f50a4 	ldr	r5, [pc, #164]	; 7000 <prog+0x6fb8>
    6f58:	e5952000 	ldr	r2, [r5]
    6f5c:	e08c2002 	add	r2, ip, r2
    6f60:	e59f30a4 	ldr	r3, [pc, #164]	; 700c <prog+0x6fc4>
    6f64:	e5933000 	ldr	r3, [r3]
    6f68:	e1d331b2 	ldrh	r3, [r3, #18]
    6f6c:	e1520003 	cmp	r2, r3
    6f70:	aa000013 	bge	6fc4 <prog+0x6f7c>
    6f74:	e5970000 	ldr	r0, [r7]
    6f78:	e1a01004 	mov	r1, r4
    6f7c:	e1a0200c 	mov	r2, ip
    6f80:	eb001443 	bl	c094 <memcpy>
    6f84:	e5962000 	ldr	r2, [r6]
    6f88:	e5973000 	ldr	r3, [r7]
    6f8c:	e0833002 	add	r3, r3, r2
    6f90:	e5873000 	str	r3, [r7]
    6f94:	e5953000 	ldr	r3, [r5]
    6f98:	e0822003 	add	r2, r2, r3
    6f9c:	e5852000 	str	r2, [r5]
    6fa0:	e5d83069 	ldrb	r3, [r8, #105]
    6fa4:	e2833001 	add	r3, r3, #1	; 0x1
    6fa8:	e20320ff 	and	r2, r3, #255	; 0xff
    6fac:	e5c82069 	strb	r2, [r8, #105]
    6fb0:	e352000f 	cmp	r2, #15	; 0xf
    6fb4:	8a000002 	bhi	6fc4 <prog+0x6f7c>
    6fb8:	e7984102 	ldr	r4, [r8, r2, lsl #2]
    6fbc:	e3540000 	cmp	r4, #0	; 0x0
    6fc0:	1affffd8 	bne	6f28 <prog+0x6ee0>
    6fc4:	e59f302c 	ldr	r3, [pc, #44]	; 6ff8 <prog+0x6fb0>
    6fc8:	e5930000 	ldr	r0, [r3]
    6fcc:	e59f302c 	ldr	r3, [pc, #44]	; 7000 <prog+0x6fb8>
    6fd0:	e5931000 	ldr	r1, [r3]
    6fd4:	eb00058f 	bl	8618 <uip_send>
    6fd8:	e8bd81f0 	ldmia	sp!, {r4, r5, r6, r7, r8, pc}
    6fdc:	4000183c 	andmi	r1, r0, ip, lsr r8
    6fe0:	400011cc 	andmi	r1, r0, ip, asr #3
    6fe4:	400011f0 	strmid	r1, [r0], -r0
    6fe8:	40001230 	andmi	r1, r0, r0, lsr r2
    6fec:	400011d0 	ldrmid	r1, [r0], -r0
    6ff0:	400011d4 	ldrmid	r1, [r0], -r4
    6ff4:	40001830 	andmi	r1, r0, r0, lsr r8
    6ff8:	40001844 	andmi	r1, r0, r4, asr #16
    6ffc:	400011e8 	andmi	r1, r0, r8, ror #3
    7000:	400011e0 	andmi	r1, r0, r0, ror #3
    7004:	400011e4 	andmi	r1, r0, r4, ror #3
    7008:	400011dc 	ldrmid	r1, [r0], -ip
    700c:	40001848 	andmi	r1, r0, r8, asr #16

00007010 <telnetd_init>:
    7010:	e52de004 	str	lr, [sp, #-4]!
    7014:	e3a00c17 	mov	r0, #5888	; 0x1700
    7018:	eb0004a9 	bl	82c4 <uip_listen>
    701c:	e59f0008 	ldr	r0, [pc, #8]	; 702c <prog+0x6fe4>
    7020:	eb00006e 	bl	71e0 <memb_init>
    7024:	eb0000a3 	bl	72b8 <shell_init>
    7028:	e49df004 	ldr	pc, [sp], #4
    702c:	40000008 	andmi	r0, r0, r8

00007030 <shell_output>:
    7030:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
    7034:	e1a06000 	mov	r6, r0
    7038:	e1a07001 	mov	r7, r1
    703c:	ebfffecc 	bl	6b74 <alloc_line>
    7040:	e2505000 	subs	r5, r0, #0	; 0x0
    7044:	08bd80f0 	ldmeqia	sp!, {r4, r5, r6, r7, pc}
    7048:	e1a00006 	mov	r0, r6
    704c:	eb0015c9 	bl	c778 <strlen>
    7050:	e59f4068 	ldr	r4, [pc, #104]	; 70c0 <prog+0x7078>
    7054:	e5840000 	str	r0, [r4]
    7058:	e1a00005 	mov	r0, r5
    705c:	e1a01006 	mov	r1, r6
    7060:	e3a02028 	mov	r2, #40	; 0x28
    7064:	eb00166d 	bl	ca20 <strncpy>
    7068:	e5944000 	ldr	r4, [r4]
    706c:	e3540027 	cmp	r4, #39	; 0x27
    7070:	90850004 	addls	r0, r5, r4
    7074:	91a01007 	movls	r1, r7
    7078:	92642028 	rsbls	r2, r4, #40	; 0x28
    707c:	9b001667 	blls	ca20 <strncpy>
    7080:	e1a00005 	mov	r0, r5
    7084:	eb0015bb 	bl	c778 <strlen>
    7088:	e59f3030 	ldr	r3, [pc, #48]	; 70c0 <prog+0x7078>
    708c:	e5830000 	str	r0, [r3]
    7090:	e3500025 	cmp	r0, #37	; 0x25
    7094:	8a000006 	bhi	70b4 <shell_output+0x84>
    7098:	e3a0300d 	mov	r3, #13	; 0xd
    709c:	e7c53000 	strb	r3, [r5, r0]
    70a0:	e0852000 	add	r2, r5, r0
    70a4:	e2433003 	sub	r3, r3, #3	; 0x3
    70a8:	e5c23001 	strb	r3, [r2, #1]
    70ac:	e243300a 	sub	r3, r3, #10	; 0xa
    70b0:	e5c23002 	strb	r3, [r2, #2]
    70b4:	e1a00005 	mov	r0, r5
    70b8:	ebfffe92 	bl	6b08 <sendline>
    70bc:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
    70c0:	400011ec 	andmi	r1, r0, ip, ror #3

000070c4 <shell_prompt>:
    70c4:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    70c8:	e1a04000 	mov	r4, r0
    70cc:	ebfffea8 	bl	6b74 <alloc_line>
    70d0:	e2505000 	subs	r5, r0, #0	; 0x0
    70d4:	08bd8030 	ldmeqia	sp!, {r4, r5, pc}
    70d8:	e1a01004 	mov	r1, r4
    70dc:	e3a02028 	mov	r2, #40	; 0x28
    70e0:	eb00164e 	bl	ca20 <strncpy>
    70e4:	e1a00005 	mov	r0, r5
    70e8:	ebfffe86 	bl	6b08 <sendline>
    70ec:	e8bd8030 	ldmia	sp!, {r4, r5, pc}

000070f0 <memb_alloc>:
}
/*---------------------------------------------------------------------------*/
void *
memb_alloc(struct memb_blocks *m)
{
    70f0:	e52de004 	str	lr, [sp, #-4]!
    70f4:	e1a0e000 	mov	lr, r0
  int i;

  for(i = 0; i < m->num; ++i) {
    70f8:	e1d0c0b2 	ldrh	ip, [r0, #2]
    70fc:	e35c0000 	cmp	ip, #0	; 0x0
    7100:	da000014 	ble	7158 <memb_alloc+0x68>
    if(m->count[i] == 0) {
    7104:	e5902004 	ldr	r2, [r0, #4]
    7108:	e5d23000 	ldrb	r3, [r2]
    710c:	e3530000 	cmp	r3, #0	; 0x0
    7110:	01a00003 	moveq	r0, r3
    7114:	0a000005 	beq	7130 <memb_alloc+0x40>
    7118:	ea00000a 	b	7148 <memb_alloc+0x58>
    711c:	e0821000 	add	r1, r2, r0
    7120:	e7d03002 	ldrb	r3, [r0, r2]
    7124:	e3530000 	cmp	r3, #0	; 0x0
    7128:	1a000007 	bne	714c <memb_alloc+0x5c>
    712c:	e1a02001 	mov	r2, r1
      /* If this block was unused, we increase the reference count to
         indicate that it now is used and return a pointer to the
         memory block. */
      ++(m->count[i]);
    7130:	e3a03001 	mov	r3, #1	; 0x1
    7134:	e5c23000 	strb	r3, [r2]
      return (void *)((char *)m->mem + (i * m->size));
    7138:	e1de20b0 	ldrh	r2, [lr]
    713c:	e59e3008 	ldr	r3, [lr, #8]
    7140:	e0203092 	mla	r0, r2, r0, r3
    7144:	e49df004 	ldr	pc, [sp], #4
    7148:	e3a00000 	mov	r0, #0	; 0x0
    714c:	e2800001 	add	r0, r0, #1	; 0x1
    7150:	e15c0000 	cmp	ip, r0
    7154:	1afffff0 	bne	711c <memb_alloc+0x2c>
    7158:	e3a00000 	mov	r0, #0	; 0x0
    }
  }

  /* No free block was found, so we return NULL to indicate failure to
     allocate block. */
  return NULL;
}
    715c:	e49df004 	ldr	pc, [sp], #4

00007160 <memb_free>:
/*---------------------------------------------------------------------------*/
char
memb_free(struct memb_blocks *m, void *ptr)
{
    7160:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    7164:	e1a05000 	mov	r5, r0
  int i;
  char *ptr2;

  /* Walk through the list of blocks and try to find the block to
     which the pointer "ptr" points to. */
  ptr2 = (char *)m->mem;
    7168:	e5903008 	ldr	r3, [r0, #8]
  for(i = 0; i < m->num; ++i) {
    716c:	e1d040b2 	ldrh	r4, [r0, #2]
    7170:	e3540000 	cmp	r4, #0	; 0x0
    7174:	da000017 	ble	71d8 <memb_free+0x78>

    if(ptr2 == (char *)ptr) {
    7178:	e1a00001 	mov	r0, r1
    717c:	e1530001 	cmp	r3, r1
    7180:	03a0e000 	moveq	lr, #0	; 0x0
    7184:	0a000004 	beq	719c <memb_free+0x3c>
    7188:	ea00000b 	b	71bc <memb_free+0x5c>
    718c:	e0822001 	add	r2, r2, r1
    7190:	e06c3002 	rsb	r3, ip, r2
    7194:	e1500003 	cmp	r0, r3
    7198:	1a00000b 	bne	71cc <memb_free+0x6c>
      /* We've found to block to which "ptr" points so we decrease the
         reference count and return the new value of it. */
      if(m->count[i] > 0) {
    719c:	e5952004 	ldr	r2, [r5, #4]
    71a0:	e7de3002 	ldrb	r3, [lr, r2]
    71a4:	e3530000 	cmp	r3, #0	; 0x0
        /* Make sure that we don't deallocate free memory. */
        --(m->count[i]);
    71a8:	12433001 	subne	r3, r3, #1	; 0x1
    71ac:	17ce3002 	strneb	r3, [lr, r2]
      }
      return m->count[i];
    71b0:	e5953004 	ldr	r3, [r5, #4]
    71b4:	e7de0003 	ldrb	r0, [lr, r3]
    71b8:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
    }
    ptr2 += m->size;
    71bc:	e1d5c0b0 	ldrh	ip, [r5]
    71c0:	e1a0100c 	mov	r1, ip
    71c4:	e083200c 	add	r2, r3, ip
    71c8:	e3a0e000 	mov	lr, #0	; 0x0
    71cc:	e28ee001 	add	lr, lr, #1	; 0x1
    71d0:	e154000e 	cmp	r4, lr
    71d4:	1affffec 	bne	718c <memb_free+0x2c>
    71d8:	e3a000ff 	mov	r0, #255	; 0xff
  }
  return -1;
}
    71dc:	e8bd8030 	ldmia	sp!, {r4, r5, pc}

000071e0 <memb_init>:
    71e0:	e92d4010 	stmdb	sp!, {r4, lr}
    71e4:	e1a04000 	mov	r4, r0
    71e8:	e5900004 	ldr	r0, [r0, #4]
    71ec:	e3a01000 	mov	r1, #0	; 0x0
    71f0:	e1d420b2 	ldrh	r2, [r4, #2]
    71f4:	eb0013ce 	bl	c134 <memset>
    71f8:	e1d420b0 	ldrh	r2, [r4]
    71fc:	e1d430b2 	ldrh	r3, [r4, #2]
    7200:	e5940008 	ldr	r0, [r4, #8]
    7204:	e3a01000 	mov	r1, #0	; 0x0
    7208:	e0020293 	mul	r2, r3, r2
    720c:	eb0013c8 	bl	c134 <memset>
    7210:	e8bd8010 	ldmia	sp!, {r4, pc}

00007214 <shell_input>:
}
/*---------------------------------------------------------------------------*/
void
shell_input(char *cmd)
{
    7214:	e92d4010 	stmdb	sp!, {r4, lr}
    7218:	e1a04000 	mov	r4, r0
	char *buff;
  //parse(cmd, parsetab);
	if(!strcmp(cmd,"quit")) shell_quit(cmd);
    721c:	e59f1038 	ldr	r1, [pc, #56]	; 725c <prog+0x7214>
    7220:	eb0014f9 	bl	c60c <strcmp>
    7224:	e3500000 	cmp	r0, #0	; 0x0
    7228:	1a000002 	bne	7238 <shell_input+0x24>
    722c:	e1a00004 	mov	r0, r4
    7230:	ebfffe29 	bl	6adc <shell_quit>
    7234:	e8bd8010 	ldmia	sp!, {r4, pc}
	else {
	  CLI_Builder(cmd, buff);
    7238:	e1a00004 	mov	r0, r4
    723c:	e1a01004 	mov	r1, r4
    7240:	ebfffaf5 	bl	5e1c <CLI_Builder>
	  shell_output(buff,"\n");
    7244:	e1a00004 	mov	r0, r4
    7248:	e59f1010 	ldr	r1, [pc, #16]	; 7260 <prog+0x7218>
    724c:	ebffff77 	bl	7030 <shell_output>
	  shell_prompt(CLI_PROMPT);
    7250:	e59f000c 	ldr	r0, [pc, #12]	; 7264 <prog+0x721c>
    7254:	ebffff9a 	bl	70c4 <shell_prompt>
    7258:	e8bd8010 	ldmia	sp!, {r4, pc}
    725c:	000149dc 	ldreqd	r4, [r1], -ip
    7260:	00014dfc 	streqd	r4, [r1], -ip
    7264:	000147bc 	streqh	r4, [r1], -ip

00007268 <shell_start>:
    7268:	e92d4010 	stmdb	sp!, {r4, lr}
    726c:	e1a00004 	mov	r0, r4
    7270:	ebfffdd2 	bl	69c0 <do_init>
    7274:	e59f402c 	ldr	r4, [pc, #44]	; 72a8 <prog+0x7260>
    7278:	e2840086 	add	r0, r4, #134	; 0x86
    727c:	e1a01004 	mov	r1, r4
    7280:	ebffff6a 	bl	7030 <shell_output>
    7284:	e59f0020 	ldr	r0, [pc, #32]	; 72ac <prog+0x7264>
    7288:	e1a01004 	mov	r1, r4
    728c:	ebffff67 	bl	7030 <shell_output>
    7290:	e59f0018 	ldr	r0, [pc, #24]	; 72b0 <prog+0x7268>
    7294:	e1a01004 	mov	r1, r4
    7298:	ebffff64 	bl	7030 <shell_output>
    729c:	e59f0010 	ldr	r0, [pc, #16]	; 72b4 <prog+0x726c>
    72a0:	ebffff87 	bl	70c4 <shell_prompt>
    72a4:	e8bd8010 	ldmia	sp!, {r4, pc}
    72a8:	000148ec 	andeq	r4, r1, ip, ror #17
    72ac:	00014e28 	andeq	r4, r1, r8, lsr #28
    72b0:	00014e3c 	andeq	r4, r1, ip, lsr lr
    72b4:	000147bc 	streqh	r4, [r1], -ip

000072b8 <shell_init>:
    72b8:	e92d4010 	stmdb	sp!, {r4, lr}
    72bc:	e1a00004 	mov	r0, r4
    72c0:	ebfffdbe 	bl	69c0 <do_init>
    72c4:	e2840086 	add	r0, r4, #134	; 0x86
    72c8:	e59f1004 	ldr	r1, [pc, #4]	; 72d4 <prog+0x728c>
    72cc:	ebffff57 	bl	7030 <shell_output>
    72d0:	e8bd8010 	ldmia	sp!, {r4, pc}
    72d4:	000148ec 	andeq	r4, r1, ip, ror #17

000072d8 <uip_arp_update>:
}
/*-----------------------------------------------------------------------------------*/
static void
uip_arp_update(u16_t *ipaddr, struct uip_eth_addr *ethaddr)
{
    72d8:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
    72dc:	e1a05000 	mov	r5, r0
    72e0:	e1a07001 	mov	r7, r1
  register struct arp_entry *tabptr;
  /* Walk through the ARP mapping table and try to find an entry to
     update. If none is found, the IP -> MAC address mapping is
     inserted in the ARP table. */
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    72e4:	e3a02000 	mov	r2, #0	; 0x0
    72e8:	e59f317c 	ldr	r3, [pc, #380]	; 746c <prog+0x7424>
    72ec:	e5c32000 	strb	r2, [r3]
    72f0:	e3a0c001 	mov	ip, #1	; 0x1
    72f4:	e59f4174 	ldr	r4, [pc, #372]	; 7470 <prog+0x7428>

    tabptr = &arp_table[i];
    /* Only check those entries that are actually in use. */
    if(tabptr->ipaddr[0] != 0 &&
    72f8:	e1d410b0 	ldrh	r1, [r4]
    72fc:	e3510000 	cmp	r1, #0	; 0x0
    7300:	0a000012 	beq	7350 <uip_arp_update+0x78>
    7304:	e1d400b2 	ldrh	r0, [r4, #2]
    7308:	e3500000 	cmp	r0, #0	; 0x0
    730c:	0a00000f 	beq	7350 <uip_arp_update+0x78>
       tabptr->ipaddr[1] != 0) {

      /* Check if the source IP address of the incoming packet matches
         the IP address in this ARP table entry. */
      if(ipaddr[0] == tabptr->ipaddr[0] &&
    7310:	e1d530b0 	ldrh	r3, [r5]
    7314:	e1530001 	cmp	r3, r1
    7318:	1a00000c 	bne	7350 <uip_arp_update+0x78>
    731c:	e1d530b2 	ldrh	r3, [r5, #2]
    7320:	e1530000 	cmp	r3, r0
    7324:	1a000009 	bne	7350 <uip_arp_update+0x78>
    7328:	e59f313c 	ldr	r3, [pc, #316]	; 746c <prog+0x7424>
    732c:	e5c32000 	strb	r2, [r3]
	 ipaddr[1] == tabptr->ipaddr[1]) {
	
	/* An old entry found, update this and return. */
	memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
    7330:	e2840004 	add	r0, r4, #4	; 0x4
    7334:	e1a01007 	mov	r1, r7
    7338:	e3a02006 	mov	r2, #6	; 0x6
    733c:	eb001354 	bl	c094 <memcpy>
	tabptr->time = arptime;
    7340:	e59f312c 	ldr	r3, [pc, #300]	; 7474 <prog+0x742c>
    7344:	e5d33000 	ldrb	r3, [r3]
    7348:	e5c4300a 	strb	r3, [r4, #10]
    734c:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}

	return;
    7350:	e28c3001 	add	r3, ip, #1	; 0x1
    7354:	e20330ff 	and	r3, r3, #255	; 0xff
    7358:	e284400c 	add	r4, r4, #12	; 0xc
    735c:	e3530009 	cmp	r3, #9	; 0x9
    7360:	11a0200c 	movne	r2, ip
    7364:	11a0c003 	movne	ip, r3
    7368:	1affffe2 	bne	72f8 <uip_arp_update+0x20>
      }
    }
  }

  /* If we get here, no existing ARP table entry was found, so we
     create one. */

  /* First, we try to find an unused entry in the ARP table. */
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    736c:	e3a02000 	mov	r2, #0	; 0x0
    7370:	e59f30f4 	ldr	r3, [pc, #244]	; 746c <prog+0x7424>
    7374:	e5c32000 	strb	r2, [r3]
    7378:	e1a00002 	mov	r0, r2
    737c:	e59f10ec 	ldr	r1, [pc, #236]	; 7470 <prog+0x7428>
    7380:	e1a04001 	mov	r4, r1
    tabptr = &arp_table[i];
    if(tabptr->ipaddr[0] == 0 &&
    7384:	e5913000 	ldr	r3, [r1]
    7388:	e3530000 	cmp	r3, #0	; 0x0
    738c:	059f30d8 	ldreq	r3, [pc, #216]	; 746c <prog+0x7424>
    7390:	05c30000 	streqb	r0, [r3]
    7394:	0a000028 	beq	743c <uip_arp_update+0x164>
    7398:	e2823001 	add	r3, r2, #1	; 0x1
    739c:	e20320ff 	and	r2, r3, #255	; 0xff
    73a0:	e281100c 	add	r1, r1, #12	; 0xc
    73a4:	e3520008 	cmp	r2, #8	; 0x8
    73a8:	11a00002 	movne	r0, r2
    73ac:	1afffff3 	bne	7380 <uip_arp_update+0xa8>
    73b0:	e59f10b4 	ldr	r1, [pc, #180]	; 746c <prog+0x7424>
    73b4:	e5c12000 	strb	r2, [r1]
       tabptr->ipaddr[1] == 0) {
      break;
    }
  }

  /* If no unused entry is found, we try to find the oldest entry and
     throw it away. */
  if(i == UIP_ARPTAB_SIZE) {
    73b8:	e3520008 	cmp	r2, #8	; 0x8
    73bc:	1a00001e 	bne	743c <uip_arp_update+0x164>
    tmpage = 0;
    73c0:	e2422008 	sub	r2, r2, #8	; 0x8
    73c4:	e59f30ac 	ldr	r3, [pc, #172]	; 7478 <prog+0x7430>
    73c8:	e5c32000 	strb	r2, [r3]
    c = 0;
    73cc:	e59f30a8 	ldr	r3, [pc, #168]	; 747c <prog+0x7434>
    73d0:	e5c32000 	strb	r2, [r3]
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    73d4:	e5c12000 	strb	r2, [r1]
      tabptr = &arp_table[i];
      if(arptime - tabptr->time > tmpage) {
    73d8:	e59f3094 	ldr	r3, [pc, #148]	; 7474 <prog+0x742c>
    73dc:	e5d36000 	ldrb	r6, [r3]
    73e0:	e1a04006 	mov	r4, r6
    73e4:	e59fc084 	ldr	ip, [pc, #132]	; 7470 <prog+0x7428>
    73e8:	e1a0e002 	mov	lr, r2
    73ec:	e1a00002 	mov	r0, r2
    73f0:	e5dc100a 	ldrb	r1, [ip, #10]
    73f4:	e0613004 	rsb	r3, r1, r4
    73f8:	e153000e 	cmp	r3, lr
	tmpage = arptime - tabptr->time;
    73fc:	c0613006 	rsbgt	r3, r1, r6
    7400:	c203e0ff 	andgt	lr, r3, #255	; 0xff
    7404:	c20020ff 	andgt	r2, r0, #255	; 0xff
    7408:	e2800001 	add	r0, r0, #1	; 0x1
    740c:	e28cc00c 	add	ip, ip, #12	; 0xc
    7410:	e3500008 	cmp	r0, #8	; 0x8
    7414:	1afffff5 	bne	73f0 <uip_arp_update+0x118>
    7418:	e59f305c 	ldr	r3, [pc, #92]	; 747c <prog+0x7434>
    741c:	e5c32000 	strb	r2, [r3]
    7420:	e59f3050 	ldr	r3, [pc, #80]	; 7478 <prog+0x7430>
    7424:	e5c3e000 	strb	lr, [r3]
	c = i;
      }
    }
    i = c;
    7428:	e59f303c 	ldr	r3, [pc, #60]	; 746c <prog+0x7424>
    742c:	e5c32000 	strb	r2, [r3]
    tabptr = &arp_table[i];
    7430:	e0822082 	add	r2, r2, r2, lsl #1
    7434:	e59f3034 	ldr	r3, [pc, #52]	; 7470 <prog+0x7428>
    7438:	e0834102 	add	r4, r3, r2, lsl #2
  }

  /* Now, i is the ARP table entry which we will fill with the new
     information. */
  memcpy(tabptr->ipaddr, ipaddr, 4);
    743c:	e1a00004 	mov	r0, r4
    7440:	e1a01005 	mov	r1, r5
    7444:	e3a02004 	mov	r2, #4	; 0x4
    7448:	eb001311 	bl	c094 <memcpy>
  memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
    744c:	e2840004 	add	r0, r4, #4	; 0x4
    7450:	e1a01007 	mov	r1, r7
    7454:	e3a02006 	mov	r2, #6	; 0x6
    7458:	eb00130d 	bl	c094 <memcpy>
  tabptr->time = arptime;
    745c:	e59f3010 	ldr	r3, [pc, #16]	; 7474 <prog+0x742c>
    7460:	e5d33000 	ldrb	r3, [r3]
    7464:	e5c4300a 	strb	r3, [r4, #10]
    7468:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
    746c:	40001550 	andmi	r1, r0, r0, asr r5
    7470:	400014ec 	andmi	r1, r0, ip, ror #9
    7474:	40001552 	andmi	r1, r0, r2, asr r5
    7478:	40001553 	andmi	r1, r0, r3, asr r5
    747c:	40001551 	andmi	r1, r0, r1, asr r5

00007480 <uip_arp_arpin>:
}
/*-----------------------------------------------------------------------------------*/
/**
 * ARP processing for incoming IP packets
 *
 * This function should be called by the device driver when an IP
 * packet has been received. The function will check if the address is
 * in the ARP cache, and if so the ARP cache entry will be
 * refreshed. If no ARP cache entry was found, a new one is created.
 *
 * This function expects an IP packet with a prepended Ethernet header
 * in the uip_buf[] buffer, and the length of the packet in the global
 * variable uip_len.
 */
/*-----------------------------------------------------------------------------------*/
#if 1
void
uip_arp_ipin(void)
{
  uip_len -= sizeof(struct uip_eth_hdr);
	
  /* Only insert/update an entry if the source IP address of the
     incoming IP packet comes from a host on the local network. */
  if((IPBUF->srcipaddr[0] & uip_netmask[0]) !=
     (uip_hostaddr[0] & uip_netmask[0])) {
    return;
  }
  if((IPBUF->srcipaddr[1] & uip_netmask[1]) !=
     (uip_hostaddr[1] & uip_netmask[1])) {
    return;
  }
  uip_arp_update(IPBUF->srcipaddr, &(IPBUF->ethhdr.src));

  return;
}
#endif /* 0 */
/*-----------------------------------------------------------------------------------*/
/**
 * ARP processing for incoming ARP packets.
 *
 * This function should be called by the device driver when an ARP
 * packet has been received. The function will act differently
 * depending on the ARP packet type: if it is a reply for a request
 * that we previously sent out, the ARP cache will be filled in with
 * the values from the ARP reply. If the incoming ARP packet is an ARP
 * request for our IP address, an ARP reply packet is created and put
 * into the uip_buf[] buffer.
 *
 * When the function returns, the value of the global variable uip_len
 * indicates whether the device driver should send out a packet or
 * not. If uip_len is zero, no packet should be sent. If uip_len is
 * non-zero, it contains the length of the outbound packet that is
 * present in the uip_buf[] buffer.
 *
 * This function expects an ARP packet with a prepended Ethernet
 * header in the uip_buf[] buffer, and the length of the packet in the
 * global variable uip_len.
 */
/*-----------------------------------------------------------------------------------*/
void
uip_arp_arpin(void)
{
    7480:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  if(uip_len < sizeof(struct arp_hdr)) {
    7484:	e59f2178 	ldr	r2, [pc, #376]	; 7604 <prog+0x75bc>
    7488:	e1d230b0 	ldrh	r3, [r2]
    748c:	e3530029 	cmp	r3, #41	; 0x29
    uip_len = 0;
    7490:	93a03000 	movls	r3, #0	; 0x0
    7494:	91c230b0 	strlsh	r3, [r2]
    7498:	98bd8ff0 	ldmlsia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return;
  }
  uip_len = 0;
    749c:	e59f3160 	ldr	r3, [pc, #352]	; 7604 <prog+0x75bc>
    74a0:	e3a02000 	mov	r2, #0	; 0x0
    74a4:	e1c320b0 	strh	r2, [r3]

  switch(BUF->opcode) {
    74a8:	e59fa158 	ldr	sl, [pc, #344]	; 7608 <prog+0x75c0>
    74ac:	e5da2014 	ldrb	r2, [sl, #20]
    74b0:	e5da3015 	ldrb	r3, [sl, #21]
    74b4:	e1823403 	orr	r3, r2, r3, lsl #8
    74b8:	e3530c01 	cmp	r3, #256	; 0x100
    74bc:	0a000002 	beq	74cc <uip_arp_arpin+0x4c>
    74c0:	e3530c02 	cmp	r3, #512	; 0x200
    74c4:	18bd8ff0 	ldmneia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    74c8:	ea00003f 	b	75cc <uip_arp_arpin+0x14c>
  case HTONS(ARP_REQUEST):
    /* ARP request. If it asked for our address, we send out a
       reply. */
    if(uip_ipaddr_cmp(BUF->dipaddr, uip_hostaddr)) {
    74cc:	e59f9134 	ldr	r9, [pc, #308]	; 7608 <prog+0x75c0>
    74d0:	e59fb134 	ldr	fp, [pc, #308]	; 760c <prog+0x75c4>
    74d4:	e1d922b6 	ldrh	r2, [r9, #38]
    74d8:	e1db30b0 	ldrh	r3, [fp]
    74dc:	e1520003 	cmp	r2, r3
    74e0:	18bd8ff0 	ldmneia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    74e4:	e1d922b8 	ldrh	r2, [r9, #40]
    74e8:	e1db30b2 	ldrh	r3, [fp, #2]
    74ec:	e1520003 	cmp	r2, r3
    74f0:	18bd8ff0 	ldmneia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      /* First, we register the one who made the request in our ARP
	 table, since it is likely that we will do more communication
	 with this host in the future. */
      uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
    74f4:	e2894016 	add	r4, r9, #22	; 0x16
    74f8:	e289001c 	add	r0, r9, #28	; 0x1c
    74fc:	e1a01004 	mov	r1, r4
    7500:	ebffff74 	bl	72d8 <uip_arp_update>

      /* The reply opcode is 2. */
      BUF->opcode = HTONS(2);
    7504:	e3a07000 	mov	r7, #0	; 0x0
    7508:	e5ca7014 	strb	r7, [sl, #20]
    750c:	e3873002 	orr	r3, r7, #2	; 0x2
    7510:	e5ca3015 	strb	r3, [sl, #21]

      memcpy(BUF->dhwaddr.addr, BUF->shwaddr.addr, 6);
    7514:	e2898020 	add	r8, r9, #32	; 0x20
    7518:	e3a06006 	mov	r6, #6	; 0x6
    751c:	e1a00008 	mov	r0, r8
    7520:	e1a01004 	mov	r1, r4
    7524:	e1a02006 	mov	r2, r6
    7528:	eb0012d9 	bl	c094 <memcpy>
      memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
    752c:	e59f50dc 	ldr	r5, [pc, #220]	; 7610 <prog+0x75c8>
    7530:	e1a00004 	mov	r0, r4
    7534:	e1a01005 	mov	r1, r5
    7538:	e1a02006 	mov	r2, r6
    753c:	eb0012d4 	bl	c094 <memcpy>
      memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
    7540:	e0890006 	add	r0, r9, r6
    7544:	e1a01005 	mov	r1, r5
    7548:	e1a02006 	mov	r2, r6
    754c:	eb0012d0 	bl	c094 <memcpy>
      memcpy(BUF->ethhdr.dest.addr, BUF->dhwaddr.addr, 6);
    7550:	e1a00009 	mov	r0, r9
    7554:	e1a01008 	mov	r1, r8
    7558:	e1a02006 	mov	r2, r6
    755c:	eb0012cc 	bl	c094 <memcpy>

      BUF->dipaddr[0] = BUF->sipaddr[0];
    7560:	e5da301c 	ldrb	r3, [sl, #28]
    7564:	e5da201d 	ldrb	r2, [sl, #29]
    7568:	e1833402 	orr	r3, r3, r2, lsl #8
    756c:	e5ca3026 	strb	r3, [sl, #38]
    7570:	e1a03423 	mov	r3, r3, lsr #8
    7574:	e5ca3027 	strb	r3, [sl, #39]
      BUF->dipaddr[1] = BUF->sipaddr[1];
    7578:	e5da301e 	ldrb	r3, [sl, #30]
    757c:	e5da201f 	ldrb	r2, [sl, #31]
    7580:	e1833402 	orr	r3, r3, r2, lsl #8
    7584:	e5ca3028 	strb	r3, [sl, #40]
    7588:	e1a03423 	mov	r3, r3, lsr #8
    758c:	e5ca3029 	strb	r3, [sl, #41]
      BUF->sipaddr[0] = uip_hostaddr[0];
    7590:	e5db3000 	ldrb	r3, [fp]
    7594:	e5ca301c 	strb	r3, [sl, #28]
    7598:	e5db3001 	ldrb	r3, [fp, #1]
    759c:	e5ca301d 	strb	r3, [sl, #29]
      BUF->sipaddr[1] = uip_hostaddr[1];
    75a0:	e5db3002 	ldrb	r3, [fp, #2]
    75a4:	e5ca301e 	strb	r3, [sl, #30]
    75a8:	e5db3003 	ldrb	r3, [fp, #3]
    75ac:	e5ca301f 	strb	r3, [sl, #31]

      BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
    75b0:	e3877008 	orr	r7, r7, #8	; 0x8
    75b4:	e5ca700c 	strb	r7, [sl, #12]
    75b8:	e5ca600d 	strb	r6, [sl, #13]
      uip_len = sizeof(struct arp_hdr);
    75bc:	e59f3040 	ldr	r3, [pc, #64]	; 7604 <prog+0x75bc>
    75c0:	e3a0202a 	mov	r2, #42	; 0x2a
    75c4:	e1c320b0 	strh	r2, [r3]
    75c8:	e8bd8ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }
    break;
  case HTONS(ARP_REPLY):
    /* ARP reply. We insert or update the ARP table if it was meant
       for us. */
    if(uip_ipaddr_cmp(BUF->dipaddr, uip_hostaddr)) {
    75cc:	e59f1034 	ldr	r1, [pc, #52]	; 7608 <prog+0x75c0>
    75d0:	e59f0034 	ldr	r0, [pc, #52]	; 760c <prog+0x75c4>
    75d4:	e1d122b6 	ldrh	r2, [r1, #38]
    75d8:	e1d030b0 	ldrh	r3, [r0]
    75dc:	e1520003 	cmp	r2, r3
    75e0:	18bd8ff0 	ldmneia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    75e4:	e1d122b8 	ldrh	r2, [r1, #40]
    75e8:	e1d030b2 	ldrh	r3, [r0, #2]
    75ec:	e1520003 	cmp	r2, r3
    75f0:	18bd8ff0 	ldmneia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
    75f4:	e281001c 	add	r0, r1, #28	; 0x1c
    75f8:	e2811016 	add	r1, r1, #22	; 0x16
    75fc:	ebffff35 	bl	72d8 <uip_arp_update>
    7600:	e8bd8ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7604:	40001830 	andmi	r1, r0, r0, lsr r8
    7608:	40002e20 	andmi	r2, r0, r0, lsr #28
    760c:	40002e1c 	andmi	r2, r0, ip, lsl lr
    7610:	40001554 	andmi	r1, r0, r4, asr r5

00007614 <uip_arp_ipin>:
    7614:	e52de004 	str	lr, [sp, #-4]!
    7618:	e59f206c 	ldr	r2, [pc, #108]	; 768c <prog+0x7644>
    761c:	e1d230b0 	ldrh	r3, [r2]
    7620:	e243300e 	sub	r3, r3, #14	; 0xe
    7624:	e1c230b0 	strh	r3, [r2]
    7628:	e59fc060 	ldr	ip, [pc, #96]	; 7690 <prog+0x7648>
    762c:	e59fe060 	ldr	lr, [pc, #96]	; 7694 <prog+0x764c>
    7630:	e1de10b0 	ldrh	r1, [lr]
    7634:	e5dc201a 	ldrb	r2, [ip, #26]
    7638:	e5dc301b 	ldrb	r3, [ip, #27]
    763c:	e1822403 	orr	r2, r2, r3, lsl #8
    7640:	e59f0050 	ldr	r0, [pc, #80]	; 7698 <prog+0x7650>
    7644:	e1d030b0 	ldrh	r3, [r0]
    7648:	e0012002 	and	r2, r1, r2
    764c:	e0011003 	and	r1, r1, r3
    7650:	e1520001 	cmp	r2, r1
    7654:	149df004 	ldrne	pc, [sp], #4
    7658:	e1de10b2 	ldrh	r1, [lr, #2]
    765c:	e5dc301c 	ldrb	r3, [ip, #28]
    7660:	e5dc201d 	ldrb	r2, [ip, #29]
    7664:	e1833402 	orr	r3, r3, r2, lsl #8
    7668:	e1d020b2 	ldrh	r2, [r0, #2]
    766c:	e0013003 	and	r3, r1, r3
    7670:	e0011002 	and	r1, r1, r2
    7674:	e1530001 	cmp	r3, r1
    7678:	149df004 	ldrne	pc, [sp], #4
    767c:	e28c001a 	add	r0, ip, #26	; 0x1a
    7680:	e28c1006 	add	r1, ip, #6	; 0x6
    7684:	ebffff13 	bl	72d8 <uip_arp_update>
    7688:	e49df004 	ldr	pc, [sp], #4
    768c:	40001830 	andmi	r1, r0, r0, lsr r8
    7690:	40002e20 	andmi	r2, r0, r0, lsr #28
    7694:	40002e18 	andmi	r2, r0, r8, lsl lr
    7698:	40002e1c 	andmi	r2, r0, ip, lsl lr

0000769c <uip_arp_out>:
    }
    break;
  }

  return;
}
/*-----------------------------------------------------------------------------------*/
/**
 * Prepend Ethernet header to an outbound IP packet and see if we need
 * to send out an ARP request.
 *
 * This function should be called before sending out an IP packet. The
 * function checks the destination IP address of the IP packet to see
 * what Ethernet MAC address that should be used as a destination MAC
 * address on the Ethernet.
 *
 * If the destination IP address is in the local network (determined
 * by logical ANDing of netmask and our IP address), the function
 * checks the ARP cache to see if an entry for the destination IP
 * address is found. If so, an Ethernet header is prepended and the
 * function returns. If no ARP cache entry is found for the
 * destination IP address, the packet in the uip_buf[] is replaced by
 * an ARP request packet for the IP address. The IP packet is dropped
 * and it is assumed that they higher level protocols (e.g., TCP)
 * eventually will retransmit the dropped packet.
 *
 * If the destination IP address is not on the local network, the IP
 * address of the default router is used instead.
 *
 * When the function returns, a packet is present in the uip_buf[]
 * buffer, and the length of the packet is in the global variable
 * uip_len.
 */
/*-----------------------------------------------------------------------------------*/
void
uip_arp_out(void)
{
    769c:	e92d45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
  struct arp_entry *tabptr;

  /* Find the destination IP address in the ARP table and construct
     the Ethernet header. If the destination IP addres isn't on the
     local network, we use the default router's IP address instead.

     If not ARP table entry is found, we overwrite the original IP
     packet with an ARP request for the IP address. */

  /* First check if destination is a local broadcast. */
  if(uip_ipaddr_cmp(IPBUF->destipaddr, broadcast_ipaddr)) {
    76a0:	e59fa218 	ldr	sl, [pc, #536]	; 78c0 <prog+0x7878>
    76a4:	e1da01be 	ldrh	r0, [sl, #30]
    76a8:	e3a03801 	mov	r3, #65536	; 0x10000
    76ac:	e2433001 	sub	r3, r3, #1	; 0x1
    76b0:	e1500003 	cmp	r0, r3
    76b4:	1a000007 	bne	76d8 <uip_arp_out+0x3c>
    76b8:	e1da32b0 	ldrh	r3, [sl, #32]
    76bc:	e1530000 	cmp	r3, r0
    76c0:	1a000004 	bne	76d8 <uip_arp_out+0x3c>
    memcpy(IPBUF->ethhdr.dest.addr, broadcast_ethaddr.addr, 6);
    76c4:	e1a0000a 	mov	r0, sl
    76c8:	e59f11f4 	ldr	r1, [pc, #500]	; 78c4 <prog+0x787c>
    76cc:	e3a02006 	mov	r2, #6	; 0x6
    76d0:	eb00126f 	bl	c094 <memcpy>
    76d4:	ea00006b 	b	7888 <uip_arp_out+0x1ec>
  } else {
    /* Check if the destination address is on the local network. */
    if(!uip_ipaddr_maskcmp(IPBUF->destipaddr, uip_hostaddr, uip_netmask)) {
    76d8:	e59fe1e8 	ldr	lr, [pc, #488]	; 78c8 <prog+0x7880>
    76dc:	e1de30b0 	ldrh	r3, [lr]
    76e0:	e59fc1e4 	ldr	ip, [pc, #484]	; 78cc <prog+0x7884>
    76e4:	e1dc20b0 	ldrh	r2, [ip]
    76e8:	e0001003 	and	r1, r0, r3
    76ec:	e0033002 	and	r3, r3, r2
    76f0:	e1510003 	cmp	r1, r3
    76f4:	1a00000a 	bne	7724 <uip_arp_out+0x88>
    76f8:	e59f31c0 	ldr	r3, [pc, #448]	; 78c0 <prog+0x7878>
    76fc:	e1d342b0 	ldrh	r4, [r3, #32]
    7700:	e1de30b2 	ldrh	r3, [lr, #2]
    7704:	e1dc20b2 	ldrh	r2, [ip, #2]
    7708:	e0041003 	and	r1, r4, r3
    770c:	e0033002 	and	r3, r3, r2
    7710:	e1510003 	cmp	r1, r3
      /* Destination address was not on the local network, so we need to
	 use the default router's IP address instead of the destination
	 address when determining the MAC address. */
      uip_ipaddr_copy(ipaddr, uip_draddr);
    } else {
      /* Else, we use the destination IP address. */
      uip_ipaddr_copy(ipaddr, IPBUF->destipaddr);
    7714:	059f31b4 	ldreq	r3, [pc, #436]	; 78d0 <prog+0x7888>
    7718:	01c300b0 	streqh	r0, [r3]
    771c:	01c340b2 	streqh	r4, [r3, #2]
    7720:	0a000005 	beq	773c <uip_arp_out+0xa0>
    7724:	e59f21a4 	ldr	r2, [pc, #420]	; 78d0 <prog+0x7888>
    7728:	e59f31a4 	ldr	r3, [pc, #420]	; 78d4 <prog+0x788c>
    772c:	e1d310b0 	ldrh	r1, [r3]
    7730:	e1c210b0 	strh	r1, [r2]
    7734:	e1d330b2 	ldrh	r3, [r3, #2]
    7738:	e1c230b2 	strh	r3, [r2, #2]
    }

    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    773c:	e3a03000 	mov	r3, #0	; 0x0
    7740:	e59f2190 	ldr	r2, [pc, #400]	; 78d8 <prog+0x7890>
    7744:	e5c23000 	strb	r3, [r2]
      tabptr = &arp_table[i];
      if(uip_ipaddr_cmp(ipaddr, tabptr->ipaddr)) {
    7748:	e59f2180 	ldr	r2, [pc, #384]	; 78d0 <prog+0x7888>
    774c:	e1d2c0b0 	ldrh	ip, [r2]
    7750:	e1d2e0b2 	ldrh	lr, [r2, #2]
    7754:	e1a08003 	mov	r8, r3
    7758:	e1a00003 	mov	r0, r3
    775c:	e59f2178 	ldr	r2, [pc, #376]	; 78dc <prog+0x7894>
    7760:	e1a01002 	mov	r1, r2
    7764:	e1d230b0 	ldrh	r3, [r2]
    7768:	e153000c 	cmp	r3, ip
    776c:	1a000002 	bne	777c <uip_arp_out+0xe0>
    7770:	e1d230b2 	ldrh	r3, [r2, #2]
    7774:	e153000e 	cmp	r3, lr
    7778:	0a00003c 	beq	7870 <uip_arp_out+0x1d4>
    777c:	e2803001 	add	r3, r0, #1	; 0x1
    7780:	e20380ff 	and	r8, r3, #255	; 0xff
    7784:	e282200c 	add	r2, r2, #12	; 0xc
    7788:	e3580008 	cmp	r8, #8	; 0x8
    778c:	11a00008 	movne	r0, r8
    7790:	1afffff2 	bne	7760 <uip_arp_out+0xc4>
    7794:	e59f313c 	ldr	r3, [pc, #316]	; 78d8 <prog+0x7890>
    7798:	e5c38000 	strb	r8, [r3]
	break;
      }
    }

    if(i == UIP_ARPTAB_SIZE) {
    779c:	e3580008 	cmp	r8, #8	; 0x8
    77a0:	1a000034 	bne	7878 <uip_arp_out+0x1dc>
      /* The destination address was not in our ARP table, so we
	 overwrite the IP packet with an ARP request. */

      memset(BUF->ethhdr.dest.addr, 0xff, 6);
    77a4:	e59f4114 	ldr	r4, [pc, #276]	; 78c0 <prog+0x7878>
    77a8:	e1a00004 	mov	r0, r4
    77ac:	e3a010ff 	mov	r1, #255	; 0xff
    77b0:	e3a02006 	mov	r2, #6	; 0x6
    77b4:	eb00125e 	bl	c134 <memset>
      memset(BUF->dhwaddr.addr, 0x00, 6);
    77b8:	e3a05000 	mov	r5, #0	; 0x0
    77bc:	e5c45020 	strb	r5, [r4, #32]
    77c0:	e5c45021 	strb	r5, [r4, #33]
    77c4:	e5c45022 	strb	r5, [r4, #34]
    77c8:	e5c45023 	strb	r5, [r4, #35]
    77cc:	e5c45024 	strb	r5, [r4, #36]
    77d0:	e5c45025 	strb	r5, [r4, #37]
      memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
    77d4:	e59f6104 	ldr	r6, [pc, #260]	; 78e0 <prog+0x7898>
    77d8:	e3a07006 	mov	r7, #6	; 0x6
    77dc:	e0840007 	add	r0, r4, r7
    77e0:	e1a01006 	mov	r1, r6
    77e4:	e1a02007 	mov	r2, r7
    77e8:	eb001229 	bl	c094 <memcpy>
      memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
    77ec:	e2840016 	add	r0, r4, #22	; 0x16
    77f0:	e1a01006 	mov	r1, r6
    77f4:	e1a02007 	mov	r2, r7
    77f8:	eb001225 	bl	c094 <memcpy>

      uip_ipaddr_copy(BUF->dipaddr, ipaddr);
    77fc:	e59f30cc 	ldr	r3, [pc, #204]	; 78d0 <prog+0x7888>
    7800:	e1d320b0 	ldrh	r2, [r3]
    7804:	e1ca22b6 	strh	r2, [sl, #38]
    7808:	e1d330b2 	ldrh	r3, [r3, #2]
    780c:	e1c432b8 	strh	r3, [r4, #40]
      uip_ipaddr_copy(BUF->sipaddr, uip_hostaddr);
    7810:	e59f30b4 	ldr	r3, [pc, #180]	; 78cc <prog+0x7884>
    7814:	e1d310b0 	ldrh	r1, [r3]
    7818:	e1ca11bc 	strh	r1, [sl, #28]
    781c:	e1d330b2 	ldrh	r3, [r3, #2]
    7820:	e1c431be 	strh	r3, [r4, #30]
      BUF->opcode = HTONS(ARP_REQUEST); /* ARP request. */
    7824:	e5c45014 	strb	r5, [r4, #20]
    7828:	e3853001 	orr	r3, r5, #1	; 0x1
    782c:	e5c43015 	strb	r3, [r4, #21]
      BUF->hwtype = HTONS(ARP_HWTYPE_ETH);
    7830:	e5c4500e 	strb	r5, [r4, #14]
    7834:	e5c4300f 	strb	r3, [r4, #15]
      BUF->protocol = HTONS(UIP_ETHTYPE_IP);
    7838:	e5c48010 	strb	r8, [r4, #16]
    783c:	e5c45011 	strb	r5, [r4, #17]
      BUF->hwlen = 6;
    7840:	e5c47012 	strb	r7, [r4, #18]
      BUF->protolen = 4;
    7844:	e3a03004 	mov	r3, #4	; 0x4
    7848:	e5c43013 	strb	r3, [r4, #19]
      BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
    784c:	e5c4800c 	strb	r8, [r4, #12]
    7850:	e5c4700d 	strb	r7, [r4, #13]

      uip_appdata = &uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN];
    7854:	e2844036 	add	r4, r4, #54	; 0x36
    7858:	e59f3084 	ldr	r3, [pc, #132]	; 78e4 <prog+0x789c>
    785c:	e5834000 	str	r4, [r3]

      uip_len = sizeof(struct arp_hdr);
    7860:	e59f3080 	ldr	r3, [pc, #128]	; 78e8 <prog+0x78a0>
    7864:	e3a0202a 	mov	r2, #42	; 0x2a
    7868:	e1c320b0 	strh	r2, [r3]
    786c:	e8bd85f0 	ldmia	sp!, {r4, r5, r6, r7, r8, sl, pc}
      return;
    7870:	e59f3060 	ldr	r3, [pc, #96]	; 78d8 <prog+0x7890>
    7874:	e5c38000 	strb	r8, [r3]
    }

    /* Build an ethernet header. */
    memcpy(IPBUF->ethhdr.dest.addr, tabptr->ethaddr.addr, 6);
    7878:	e59f0040 	ldr	r0, [pc, #64]	; 78c0 <prog+0x7878>
    787c:	e2811004 	add	r1, r1, #4	; 0x4
    7880:	e3a02006 	mov	r2, #6	; 0x6
    7884:	eb001202 	bl	c094 <memcpy>
  }
  memcpy(IPBUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
    7888:	e59f4030 	ldr	r4, [pc, #48]	; 78c0 <prog+0x7878>
    788c:	e2840006 	add	r0, r4, #6	; 0x6
    7890:	e59f1048 	ldr	r1, [pc, #72]	; 78e0 <prog+0x7898>
    7894:	e3a02006 	mov	r2, #6	; 0x6
    7898:	eb0011fd 	bl	c094 <memcpy>

  IPBUF->ethhdr.type = HTONS(UIP_ETHTYPE_IP);
    789c:	e3a02000 	mov	r2, #0	; 0x0
    78a0:	e3823008 	orr	r3, r2, #8	; 0x8
    78a4:	e5c4300c 	strb	r3, [r4, #12]
    78a8:	e5c4200d 	strb	r2, [r4, #13]

  uip_len += sizeof(struct uip_eth_hdr);
    78ac:	e59f2034 	ldr	r2, [pc, #52]	; 78e8 <prog+0x78a0>
    78b0:	e1d230b0 	ldrh	r3, [r2]
    78b4:	e283300e 	add	r3, r3, #14	; 0xe
    78b8:	e1c230b0 	strh	r3, [r2]
    78bc:	e8bd85f0 	ldmia	sp!, {r4, r5, r6, r7, r8, sl, pc}
    78c0:	40002e20 	andmi	r2, r0, r0, lsr #28
    78c4:	00014418 	andeq	r4, r1, r8, lsl r4
    78c8:	40002e18 	andmi	r2, r0, r8, lsl lr
    78cc:	40002e1c 	andmi	r2, r0, ip, lsl lr
    78d0:	4000154c 	andmi	r1, r0, ip, asr #10
    78d4:	40002ddc 	ldrmid	r2, [r0], -ip
    78d8:	40001550 	andmi	r1, r0, r0, asr r5
    78dc:	400014ec 	andmi	r1, r0, ip, ror #9
    78e0:	40001554 	andmi	r1, r0, r4, asr r5
    78e4:	40001844 	andmi	r1, r0, r4, asr #16
    78e8:	40001830 	andmi	r1, r0, r0, lsr r8

000078ec <uip_arp_timer>:
    78ec:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    78f0:	e59f2074 	ldr	r2, [pc, #116]	; 796c <prog+0x7924>
    78f4:	e5d23000 	ldrb	r3, [r2]
    78f8:	e2833001 	add	r3, r3, #1	; 0x1
    78fc:	e5c23000 	strb	r3, [r2]
    7900:	e3a02000 	mov	r2, #0	; 0x0
    7904:	e59f3064 	ldr	r3, [pc, #100]	; 7970 <prog+0x7928>
    7908:	e5c32000 	strb	r2, [r3]
    790c:	e59fc060 	ldr	ip, [pc, #96]	; 7974 <prog+0x792c>
    7910:	e59f3054 	ldr	r3, [pc, #84]	; 796c <prog+0x7924>
    7914:	e5d34000 	ldrb	r4, [r3]
    7918:	e1a05002 	mov	r5, r2
    791c:	e59fe04c 	ldr	lr, [pc, #76]	; 7970 <prog+0x7928>
    7920:	e0823082 	add	r3, r2, r2, lsl #1
    7924:	e1a01103 	mov	r1, r3, lsl #2
    7928:	e081000c 	add	r0, r1, ip
    792c:	e19120bc 	ldrh	r2, [r1, ip]
    7930:	e1d030b2 	ldrh	r3, [r0, #2]
    7934:	e1922003 	orrs	r2, r2, r3
    7938:	0a000004 	beq	7950 <uip_arp_timer+0x64>
    793c:	e5d0300a 	ldrb	r3, [r0, #10]
    7940:	e0633004 	rsb	r3, r3, r4
    7944:	e3530077 	cmp	r3, #119	; 0x77
    7948:	c18150bc 	strgth	r5, [r1, ip]
    794c:	c1c050b2 	strgth	r5, [r0, #2]
    7950:	e5de3000 	ldrb	r3, [lr]
    7954:	e2833001 	add	r3, r3, #1	; 0x1
    7958:	e20320ff 	and	r2, r3, #255	; 0xff
    795c:	e5ce2000 	strb	r2, [lr]
    7960:	e3520007 	cmp	r2, #7	; 0x7
    7964:	9affffed 	bls	7920 <uip_arp_timer+0x34>
    7968:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
    796c:	40001552 	andmi	r1, r0, r2, asr r5
    7970:	40001550 	andmi	r1, r0, r0, asr r5
    7974:	400014ec 	andmi	r1, r0, ip, ror #9

00007978 <uip_arp_init>:
    7978:	e3a02000 	mov	r2, #0	; 0x0
    797c:	e59f303c 	ldr	r3, [pc, #60]	; 79c0 <prog+0x7978>
    7980:	e5c32000 	strb	r2, [r3]
    7984:	e59fc038 	ldr	ip, [pc, #56]	; 79c4 <prog+0x797c>
    7988:	e1a00002 	mov	r0, r2
    798c:	e1a01003 	mov	r1, r3
    7990:	e0823082 	add	r3, r2, r2, lsl #1
    7994:	e1a03103 	mov	r3, r3, lsl #2
    7998:	e083200c 	add	r2, r3, ip
    799c:	e18300bc 	strh	r0, [r3, ip]
    79a0:	e1c200b2 	strh	r0, [r2, #2]
    79a4:	e5d13000 	ldrb	r3, [r1]
    79a8:	e2833001 	add	r3, r3, #1	; 0x1
    79ac:	e20320ff 	and	r2, r3, #255	; 0xff
    79b0:	e5c12000 	strb	r2, [r1]
    79b4:	e3520007 	cmp	r2, #7	; 0x7
    79b8:	9afffff4 	bls	7990 <uip_arp_init+0x18>
    79bc:	e12fff1e 	bx	lr
    79c0:	40001550 	andmi	r1, r0, r0, asr r5
    79c4:	400014ec 	andmi	r1, r0, ip, ror #9

000079c8 <buf_setup>:
static void
buf_setup(struct psock_buf *buf,
	  u8_t *bufptr, u16_t bufsize)
{
  buf->ptr = bufptr;
    79c8:	e5801000 	str	r1, [r0]
  buf->left = bufsize;
    79cc:	e1c020b4 	strh	r2, [r0, #4]
}
    79d0:	e12fff1e 	bx	lr

000079d4 <data_acked>:
/*---------------------------------------------------------------------------*/
static u8_t
buf_bufdata(struct psock_buf *buf, u16_t len,
	    u8_t **dataptr, u16_t *datalen)
{
  ( void ) len;
  if(*datalen < buf->left) {
    memcpy(buf->ptr, *dataptr, *datalen);
    buf->ptr += *datalen;
    buf->left -= *datalen;
    *dataptr += *datalen;
    *datalen = 0;
    return BUF_NOT_FULL;
  } else if(*datalen == buf->left) {
    memcpy(buf->ptr, *dataptr, *datalen);
    buf->ptr += *datalen;
    buf->left = 0;
    *dataptr += *datalen;
    *datalen = 0;
    return BUF_FULL;
  } else {
    memcpy(buf->ptr, *dataptr, buf->left);
    buf->ptr += buf->left;
    *datalen -= buf->left;
    *dataptr += buf->left;
    buf->left = 0;
    return BUF_FULL;
  }
}
/*---------------------------------------------------------------------------*/
static u8_t
buf_bufto(register struct psock_buf *buf, u8_t endmarker,
	  register u8_t **dataptr, register u16_t *datalen)
{
  u8_t c;
  while(buf->left > 0 && *datalen > 0) {
    c = *buf->ptr = **dataptr;
    ++*dataptr;
    ++buf->ptr;
    --*datalen;
    --buf->left;
    
    if(c == endmarker) {
      return BUF_FOUND;
    }
  }

  if(*datalen == 0) {
    return BUF_NOT_FOUND;
  }

  while(*datalen > 0) {
    c = **dataptr;
    --*datalen;
    ++*dataptr;
    
    if(c == endmarker) {
      return BUF_FOUND | BUF_FULL;
    }
  }
  
  return BUF_FULL;
}
/*---------------------------------------------------------------------------*/
static char
send_data(register struct psock *s)
{
  if(s->state != STATE_DATA_SENT || uip_rexmit()) {
    if(s->sendlen > uip_mss()) {
      uip_send(s->sendptr, uip_mss());
    } else {
      uip_send(s->sendptr, s->sendlen);
    }
    s->state = STATE_DATA_SENT;
    return 1;
  }
  return 0;
}
/*---------------------------------------------------------------------------*/
static char
data_acked(register struct psock *s)
{
  if(s->state == STATE_DATA_SENT && uip_acked()) {
    79d4:	e5d03024 	ldrb	r3, [r0, #36]
    79d8:	e3530006 	cmp	r3, #6	; 0x6
    79dc:	1a00001a 	bne	7a4c <data_acked+0x78>
    79e0:	e59f306c 	ldr	r3, [pc, #108]	; 7a54 <prog+0x7a0c>
    79e4:	e5d33000 	ldrb	r3, [r3]
    79e8:	e3130001 	tst	r3, #1	; 0x1
    79ec:	0a000016 	beq	7a4c <data_acked+0x78>
    if(s->sendlen > uip_mss()) {
    79f0:	e1d021b4 	ldrh	r2, [r0, #20]
    79f4:	e59f105c 	ldr	r1, [pc, #92]	; 7a58 <prog+0x7a10>
    79f8:	e5913000 	ldr	r3, [r1]
    79fc:	e1d331b2 	ldrh	r3, [r3, #18]
    7a00:	e1520003 	cmp	r2, r3
    7a04:	9a000007 	bls	7a28 <data_acked+0x54>
      s->sendlen -= uip_mss();
    7a08:	e0633002 	rsb	r3, r3, r2
    7a0c:	e1c031b4 	strh	r3, [r0, #20]
      s->sendptr += uip_mss();
    7a10:	e5913000 	ldr	r3, [r1]
    7a14:	e1d321b2 	ldrh	r2, [r3, #18]
    7a18:	e5903008 	ldr	r3, [r0, #8]
    7a1c:	e0833002 	add	r3, r3, r2
    7a20:	e5803008 	str	r3, [r0, #8]
    7a24:	ea000004 	b	7a3c <data_acked+0x68>
    } else {
      s->sendptr += s->sendlen;
    7a28:	e5903008 	ldr	r3, [r0, #8]
    7a2c:	e0833002 	add	r3, r3, r2
    7a30:	e5803008 	str	r3, [r0, #8]
      s->sendlen = 0;
    7a34:	e3a03000 	mov	r3, #0	; 0x0
    7a38:	e1c031b4 	strh	r3, [r0, #20]
    }
    s->state = STATE_ACKED;
    7a3c:	e3a03001 	mov	r3, #1	; 0x1
    7a40:	e5c03024 	strb	r3, [r0, #36]
    7a44:	e1a00003 	mov	r0, r3
    7a48:	e12fff1e 	bx	lr
    return 1;
    7a4c:	e3a00000 	mov	r0, #0	; 0x0
  }
  return 0;
}
    7a50:	e12fff1e 	bx	lr
    7a54:	4000183c 	andmi	r1, r0, ip, lsr r8
    7a58:	40001848 	andmi	r1, r0, r8, asr #16

00007a5c <psock_datalen>:
/*---------------------------------------------------------------------------*/
PT_THREAD(psock_send(register struct psock *s, const char *buf,
		     unsigned int len))
{
//  DEBUG_ENTER;
  PT_BEGIN(&s->psockpt);

  /* If there is no data to send, we exit immediately. */
  if(len == 0) {
    PT_EXIT(&s->psockpt);
  }

  /* Save the length of and a pointer to the data that is to be
     sent. */
  s->sendptr = (unsigned char*)buf;
  s->sendlen = len;

  s->state = STATE_NONE;

  /* We loop here until all data is sent. The s->sendlen variable is
     updated by the data_sent() function. */
//  	 DEBUG_INFO("data sending...");
  while(s->sendlen > 0) {

    /*
     * The condition for this PT_WAIT_UNTIL is a little tricky: the
     * protothread will wait here until all data has been acknowledged
     * (data_acked() returns true) and until all data has been sent
     * (send_data() returns true). The two functions data_acked() and
     * send_data() must be called in succession to ensure that all
     * data is sent. Therefore the & operator is used instead of the
     * && operator, which would cause only the data_acked() function
     * to be called when it returns false.
     */
    PT_WAIT_UNTIL(&s->psockpt, data_acked(s) & send_data(s));
  }

  s->state = STATE_NONE;
  
  PT_END(&s->psockpt);

//  DEBUG_EXIT;
}
/*---------------------------------------------------------------------------*/
PT_THREAD(psock_generator_send(register struct psock *s,
			       unsigned short (*generate)(void *), void *arg))
{
  PT_BEGIN(&s->psockpt);

  /* Ensure that there is a generator function to call. */
  if(generate == NULL) {
    PT_EXIT(&s->psockpt);
  }

  /* Call the generator function to generate the data in the
     uip_appdata buffer. */
  s->sendlen = generate(arg);
  s->sendptr = uip_appdata;

  s->state = STATE_NONE;  
  do {
    /* Call the generator function again if we are called to perform a
       retransmission. */
    if(uip_rexmit()) {
      generate(arg);
    }
    /* Wait until all data is sent and acknowledged. */
    PT_WAIT_UNTIL(&s->psockpt, data_acked(s) & send_data(s));
  } while(s->sendlen > 0);
  
  s->state = STATE_NONE;
  
  PT_END(&s->psockpt);
}
/*---------------------------------------------------------------------------*/
u16_t
psock_datalen(struct psock *psock)
{
    7a5c:	e1a03000 	mov	r3, r0
    7a60:	e5900020 	ldr	r0, [r0, #32]
    7a64:	e1d331bc 	ldrh	r3, [r3, #28]
    7a68:	e0630000 	rsb	r0, r3, r0
    7a6c:	e1a00800 	mov	r0, r0, lsl #16
  return psock->bufsize - psock->buf.left;
}
    7a70:	e1a00820 	mov	r0, r0, lsr #16
    7a74:	e12fff1e 	bx	lr

00007a78 <psock_newdata>:
/*---------------------------------------------------------------------------*/
char
psock_newdata(struct psock *s)
{
  if(s->readlen > 0) {
    7a78:	e1d031b6 	ldrh	r3, [r0, #22]
    7a7c:	e3530000 	cmp	r3, #0	; 0x0
    7a80:	13a00001 	movne	r0, #1	; 0x1
    7a84:	112fff1e 	bxne	lr
    /* There is data in the uip_appdata buffer that has not yet been
       read with the PSOCK_READ functions. */
    return 1;
  } else if(s->state == STATE_READ) {
    7a88:	e5d03024 	ldrb	r3, [r0, #36]
    7a8c:	e3530002 	cmp	r3, #2	; 0x2
    /* All data in uip_appdata buffer already consumed. */
    s->state = STATE_BLOCKED_NEWDATA;
    7a90:	02833001 	addeq	r3, r3, #1	; 0x1
    7a94:	05c03024 	streqb	r3, [r0, #36]
    7a98:	03a00000 	moveq	r0, #0	; 0x0
    return 0;
    7a9c:	159f300c 	ldrne	r3, [pc, #12]	; 7ab0 <prog+0x7a68>
    7aa0:	15d33000 	ldrneb	r3, [r3]
    7aa4:	11a030a3 	movne	r3, r3, lsr #1
    7aa8:	12030001 	andne	r0, r3, #1	; 0x1
  } else if(uip_newdata()) {
    /* There is new data that has not been consumed. */
    return 1;
  } else {
    /* There is no new data. */
    return 0;
  }
}
    7aac:	e12fff1e 	bx	lr
    7ab0:	4000183c 	andmi	r1, r0, ip, lsr r8

00007ab4 <psock_readto>:
/*---------------------------------------------------------------------------*/
PT_THREAD(psock_readto(register struct psock *psock, unsigned char c))
{
    7ab4:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    7ab8:	e1a04000 	mov	r4, r0
    7abc:	e20150ff 	and	r5, r1, #255	; 0xff
  PT_BEGIN(&psock->psockpt);
    7ac0:	e1d020b4 	ldrh	r2, [r0, #4]
    7ac4:	e3520000 	cmp	r2, #0	; 0x0
    7ac8:	0a000004 	beq	7ae0 <psock_readto+0x2c>
    7acc:	e3a03e12 	mov	r3, #288	; 0x120
    7ad0:	e2833002 	add	r3, r3, #2	; 0x2
    7ad4:	e1520003 	cmp	r2, r3
    7ad8:	1a000047 	bne	7bfc <psock_readto+0x148>
    7adc:	ea00000b 	b	7b10 <psock_readto+0x5c>

  buf_setup(&psock->buf, (unsigned char*)psock->bufptr, psock->bufsize);
    7ae0:	e5902020 	ldr	r2, [r0, #32]
    7ae4:	e1a02802 	mov	r2, r2, lsl #16
    7ae8:	e2800018 	add	r0, r0, #24	; 0x18
    7aec:	e5941010 	ldr	r1, [r4, #16]
    7af0:	e1a02822 	mov	r2, r2, lsr #16
    7af4:	ebffffb3 	bl	79c8 <buf_setup>
  
  /* XXX: Should add buf_checkmarker() before do{} loop, if
     incoming data has been handled while waiting for a write. */

  do {
    if(psock->readlen == 0) {
    7af8:	e1d431b6 	ldrh	r3, [r4, #22]
    7afc:	e3530000 	cmp	r3, #0	; 0x0
    7b00:	1a00000e 	bne	7b40 <psock_readto+0x8c>
      PT_WAIT_UNTIL(&psock->psockpt, psock_newdata(psock));
    7b04:	e2833e12 	add	r3, r3, #288	; 0x120
    7b08:	e2833002 	add	r3, r3, #2	; 0x2
    7b0c:	e1c430b4 	strh	r3, [r4, #4]
    7b10:	e1a00004 	mov	r0, r4
    7b14:	ebffffd7 	bl	7a78 <psock_newdata>
    7b18:	e3500000 	cmp	r0, #0	; 0x0
    7b1c:	08bd8030 	ldmeqia	sp!, {r4, r5, pc}
      psock->state = STATE_READ;
    7b20:	e3a03002 	mov	r3, #2	; 0x2
    7b24:	e5c43024 	strb	r3, [r4, #36]
      psock->readptr = (u8_t *)uip_appdata;
    7b28:	e59f3108 	ldr	r3, [pc, #264]	; 7c38 <prog+0x7bf0>
    7b2c:	e5933000 	ldr	r3, [r3]
    7b30:	e584300c 	str	r3, [r4, #12]
      psock->readlen = uip_datalen();
    7b34:	e59f3100 	ldr	r3, [pc, #256]	; 7c3c <prog+0x7bf4>
    7b38:	e1d330b0 	ldrh	r3, [r3]
    7b3c:	e1c431b6 	strh	r3, [r4, #22]
    7b40:	e2841018 	add	r1, r4, #24	; 0x18
    7b44:	e205e0ff 	and	lr, r5, #255	; 0xff
    7b48:	e284c00c 	add	ip, r4, #12	; 0xc
    7b4c:	e2840016 	add	r0, r4, #22	; 0x16
    7b50:	ea000011 	b	7b9c <psock_readto+0xe8>
    7b54:	e59c3000 	ldr	r3, [ip]
    7b58:	e5d32000 	ldrb	r2, [r3]
    7b5c:	e5913000 	ldr	r3, [r1]
    7b60:	e5c32000 	strb	r2, [r3]
    7b64:	e59c3000 	ldr	r3, [ip]
    7b68:	e2833001 	add	r3, r3, #1	; 0x1
    7b6c:	e58c3000 	str	r3, [ip]
    7b70:	e5913000 	ldr	r3, [r1]
    7b74:	e2833001 	add	r3, r3, #1	; 0x1
    7b78:	e5813000 	str	r3, [r1]
    7b7c:	e1d030b0 	ldrh	r3, [r0]
    7b80:	e2433001 	sub	r3, r3, #1	; 0x1
    7b84:	e1c030b0 	strh	r3, [r0]
    7b88:	e1d130b4 	ldrh	r3, [r1, #4]
    7b8c:	e2433001 	sub	r3, r3, #1	; 0x1
    7b90:	e1c130b4 	strh	r3, [r1, #4]
    7b94:	e15e0002 	cmp	lr, r2
    7b98:	0a00001d 	beq	7c14 <psock_readto+0x160>
    7b9c:	e1d130b4 	ldrh	r3, [r1, #4]
    7ba0:	e3530000 	cmp	r3, #0	; 0x0
    7ba4:	0a000003 	beq	7bb8 <psock_readto+0x104>
    7ba8:	e1d030b0 	ldrh	r3, [r0]
    7bac:	e3530000 	cmp	r3, #0	; 0x0
    7bb0:	1affffe7 	bne	7b54 <psock_readto+0xa0>
    7bb4:	eaffffcf 	b	7af8 <psock_readto+0x44>
    7bb8:	e1d030b0 	ldrh	r3, [r0]
    7bbc:	e3530000 	cmp	r3, #0	; 0x0
    7bc0:	0affffcc 	beq	7af8 <psock_readto+0x44>
    7bc4:	ea000010 	b	7c0c <psock_readto+0x158>
    7bc8:	e59c3000 	ldr	r3, [ip]
    7bcc:	e5d32000 	ldrb	r2, [r3]
    7bd0:	e2413001 	sub	r3, r1, #1	; 0x1
    7bd4:	e1c030b0 	strh	r3, [r0]
    7bd8:	e59c3000 	ldr	r3, [ip]
    7bdc:	e2833001 	add	r3, r3, #1	; 0x1
    7be0:	e58c3000 	str	r3, [ip]
    7be4:	e15e0002 	cmp	lr, r2
    7be8:	0a000009 	beq	7c14 <psock_readto+0x160>
    7bec:	e1d010b0 	ldrh	r1, [r0]
    7bf0:	e3510000 	cmp	r1, #0	; 0x0
    7bf4:	0affffbf 	beq	7af8 <psock_readto+0x44>
    7bf8:	eafffff2 	b	7bc8 <psock_readto+0x114>
    }
  } while((buf_bufto(&psock->buf, c,
		     &psock->readptr,
		     &psock->readlen) & BUF_FOUND) == 0);
  
  if(psock_datalen(psock) == 0) {
    psock->state = STATE_NONE;
    PT_RESTART(&psock->psockpt);
  }
  PT_END(&psock->psockpt);
    7bfc:	e3a03000 	mov	r3, #0	; 0x0
    7c00:	e1c430b4 	strh	r3, [r4, #4]
    7c04:	e3a00002 	mov	r0, #2	; 0x2
    7c08:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
    7c0c:	e1d010b0 	ldrh	r1, [r0]
    7c10:	eaffffec 	b	7bc8 <psock_readto+0x114>
    7c14:	e1a00004 	mov	r0, r4
    7c18:	ebffff8f 	bl	7a5c <psock_datalen>
    7c1c:	e3500000 	cmp	r0, #0	; 0x0
    7c20:	03a03000 	moveq	r3, #0	; 0x0
    7c24:	05c43024 	streqb	r3, [r4, #36]
    7c28:	01c430b4 	streqh	r3, [r4, #4]
    7c2c:	01a00003 	moveq	r0, r3
    7c30:	08bd8030 	ldmeqia	sp!, {r4, r5, pc}
    7c34:	eafffff0 	b	7bfc <psock_readto+0x148>
    7c38:	40001844 	andmi	r1, r0, r4, asr #16
    7c3c:	40001830 	andmi	r1, r0, r0, lsr r8

00007c40 <psock_init>:
}
/*---------------------------------------------------------------------------*/
PT_THREAD(psock_readbuf(register struct psock *psock))
{
  PT_BEGIN(&psock->psockpt);

  buf_setup(&psock->buf, (unsigned char * ) psock->bufptr, psock->bufsize);
  
  /* XXX: Should add buf_checkmarker() before do{} loop, if
     incoming data has been handled while waiting for a write. */

  do {
    if(psock->readlen == 0) {
      PT_WAIT_UNTIL(&psock->psockpt, psock_newdata(psock));
      printf("Waited for newdata\n");
      psock->state = STATE_READ;
      psock->readptr = (u8_t *)uip_appdata;
      psock->readlen = uip_datalen();
    }
  } while(buf_bufdata(&psock->buf, psock->bufsize,
			 &psock->readptr,
			 &psock->readlen) != BUF_FULL);

  if(psock_datalen(psock) == 0) {
    psock->state = STATE_NONE;
    PT_RESTART(&psock->psockpt);
  }
  PT_END(&psock->psockpt);
}
/*---------------------------------------------------------------------------*/
void
psock_init(register struct psock *psock, char *buffer, unsigned int buffersize)
{
    7c40:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    7c44:	e1a04000 	mov	r4, r0
  psock->state = STATE_NONE;
    7c48:	e3a05000 	mov	r5, #0	; 0x0
    7c4c:	e5c05024 	strb	r5, [r0, #36]
  psock->readlen = 0;
    7c50:	e1c051b6 	strh	r5, [r0, #22]
  psock->bufptr = buffer;
    7c54:	e5801010 	str	r1, [r0, #16]
  psock->bufsize = buffersize;
    7c58:	e5802020 	str	r2, [r0, #32]
  buf_setup(&psock->buf, (unsigned char*) buffer, buffersize);
    7c5c:	e1a02802 	mov	r2, r2, lsl #16
    7c60:	e2800018 	add	r0, r0, #24	; 0x18
    7c64:	e1a02822 	mov	r2, r2, lsr #16
    7c68:	ebffff56 	bl	79c8 <buf_setup>
  PT_INIT(&psock->pt);
    7c6c:	e1c450b0 	strh	r5, [r4]
  PT_INIT(&psock->psockpt);
    7c70:	e1c450b4 	strh	r5, [r4, #4]
}
    7c74:	e8bd8030 	ldmia	sp!, {r4, r5, pc}

00007c78 <psock_readbuf>:
    7c78:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
    7c7c:	e1a04000 	mov	r4, r0
    7c80:	e1d020b4 	ldrh	r2, [r0, #4]
    7c84:	e3520000 	cmp	r2, #0	; 0x0
    7c88:	0a000004 	beq	7ca0 <psock_readbuf+0x28>
    7c8c:	e3a03f4f 	mov	r3, #316	; 0x13c
    7c90:	e2833001 	add	r3, r3, #1	; 0x1
    7c94:	e1520003 	cmp	r2, r3
    7c98:	1a000056 	bne	7df8 <psock_readbuf+0x180>
    7c9c:	ea00000b 	b	7cd0 <psock_readbuf+0x58>
    7ca0:	e5902020 	ldr	r2, [r0, #32]
    7ca4:	e1a02802 	mov	r2, r2, lsl #16
    7ca8:	e2800018 	add	r0, r0, #24	; 0x18
    7cac:	e5941010 	ldr	r1, [r4, #16]
    7cb0:	e1a02822 	mov	r2, r2, lsr #16
    7cb4:	ebffff43 	bl	79c8 <buf_setup>
    7cb8:	e1d431b6 	ldrh	r3, [r4, #22]
    7cbc:	e3530000 	cmp	r3, #0	; 0x0
    7cc0:	1a000010 	bne	7d08 <psock_readbuf+0x90>
    7cc4:	e2833f4f 	add	r3, r3, #316	; 0x13c
    7cc8:	e2833001 	add	r3, r3, #1	; 0x1
    7ccc:	e1c430b4 	strh	r3, [r4, #4]
    7cd0:	e1a00004 	mov	r0, r4
    7cd4:	ebffff67 	bl	7a78 <psock_newdata>
    7cd8:	e3500000 	cmp	r0, #0	; 0x0
    7cdc:	08bd80f0 	ldmeqia	sp!, {r4, r5, r6, r7, pc}
    7ce0:	e59f0144 	ldr	r0, [pc, #324]	; 7e2c <prog+0x7de4>
    7ce4:	eb00119b 	bl	c358 <puts>
    7ce8:	e3a03002 	mov	r3, #2	; 0x2
    7cec:	e5c43024 	strb	r3, [r4, #36]
    7cf0:	e59f3138 	ldr	r3, [pc, #312]	; 7e30 <prog+0x7de8>
    7cf4:	e5933000 	ldr	r3, [r3]
    7cf8:	e584300c 	str	r3, [r4, #12]
    7cfc:	e59f3130 	ldr	r3, [pc, #304]	; 7e34 <prog+0x7dec>
    7d00:	e1d330b0 	ldrh	r3, [r3]
    7d04:	e1c431b6 	strh	r3, [r4, #22]
    7d08:	e2845018 	add	r5, r4, #24	; 0x18
    7d0c:	e284600c 	add	r6, r4, #12	; 0xc
    7d10:	e2847016 	add	r7, r4, #22	; 0x16
    7d14:	e1d421b6 	ldrh	r2, [r4, #22]
    7d18:	e1d530b4 	ldrh	r3, [r5, #4]
    7d1c:	e1520003 	cmp	r2, r3
    7d20:	2a000010 	bcs	7d68 <psock_readbuf+0xf0>
    7d24:	e5940018 	ldr	r0, [r4, #24]
    7d28:	e594100c 	ldr	r1, [r4, #12]
    7d2c:	eb0010d8 	bl	c094 <memcpy>
    7d30:	e1d421b6 	ldrh	r2, [r4, #22]
    7d34:	e5943018 	ldr	r3, [r4, #24]
    7d38:	e0833002 	add	r3, r3, r2
    7d3c:	e5843018 	str	r3, [r4, #24]
    7d40:	e1d530b4 	ldrh	r3, [r5, #4]
    7d44:	e0623003 	rsb	r3, r2, r3
    7d48:	e1c530b4 	strh	r3, [r5, #4]
    7d4c:	e1d421b6 	ldrh	r2, [r4, #22]
    7d50:	e594300c 	ldr	r3, [r4, #12]
    7d54:	e0833002 	add	r3, r3, r2
    7d58:	e584300c 	str	r3, [r4, #12]
    7d5c:	e3a03000 	mov	r3, #0	; 0x0
    7d60:	e1c431b6 	strh	r3, [r4, #22]
    7d64:	eaffffd3 	b	7cb8 <psock_readbuf+0x40>
    7d68:	e1520003 	cmp	r2, r3
    7d6c:	1a00000f 	bne	7db0 <psock_readbuf+0x138>
    7d70:	e5950000 	ldr	r0, [r5]
    7d74:	e5961000 	ldr	r1, [r6]
    7d78:	e1a02003 	mov	r2, r3
    7d7c:	eb0010c4 	bl	c094 <memcpy>
    7d80:	e1d720b0 	ldrh	r2, [r7]
    7d84:	e5953000 	ldr	r3, [r5]
    7d88:	e0833002 	add	r3, r3, r2
    7d8c:	e5853000 	str	r3, [r5]
    7d90:	e3a01000 	mov	r1, #0	; 0x0
    7d94:	e1c510b4 	strh	r1, [r5, #4]
    7d98:	e1d720b0 	ldrh	r2, [r7]
    7d9c:	e5963000 	ldr	r3, [r6]
    7da0:	e0833002 	add	r3, r3, r2
    7da4:	e5863000 	str	r3, [r6]
    7da8:	e1c710b0 	strh	r1, [r7]
    7dac:	ea000015 	b	7e08 <psock_readbuf+0x190>
    7db0:	e5950000 	ldr	r0, [r5]
    7db4:	e5961000 	ldr	r1, [r6]
    7db8:	e1a02003 	mov	r2, r3
    7dbc:	eb0010b4 	bl	c094 <memcpy>
    7dc0:	e1d520b4 	ldrh	r2, [r5, #4]
    7dc4:	e5953000 	ldr	r3, [r5]
    7dc8:	e0833002 	add	r3, r3, r2
    7dcc:	e5853000 	str	r3, [r5]
    7dd0:	e1d730b0 	ldrh	r3, [r7]
    7dd4:	e0623003 	rsb	r3, r2, r3
    7dd8:	e1c730b0 	strh	r3, [r7]
    7ddc:	e1d520b4 	ldrh	r2, [r5, #4]
    7de0:	e5963000 	ldr	r3, [r6]
    7de4:	e0833002 	add	r3, r3, r2
    7de8:	e5863000 	str	r3, [r6]
    7dec:	e3a03000 	mov	r3, #0	; 0x0
    7df0:	e1c530b4 	strh	r3, [r5, #4]
    7df4:	ea000003 	b	7e08 <psock_readbuf+0x190>
    7df8:	e3a03000 	mov	r3, #0	; 0x0
    7dfc:	e1c430b4 	strh	r3, [r4, #4]
    7e00:	e3a00002 	mov	r0, #2	; 0x2
    7e04:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
    7e08:	e1a00004 	mov	r0, r4
    7e0c:	ebffff12 	bl	7a5c <psock_datalen>
    7e10:	e3500000 	cmp	r0, #0	; 0x0
    7e14:	03a03000 	moveq	r3, #0	; 0x0
    7e18:	05c43024 	streqb	r3, [r4, #36]
    7e1c:	01c430b4 	streqh	r3, [r4, #4]
    7e20:	01a00003 	moveq	r0, r3
    7e24:	08bd80f0 	ldmeqia	sp!, {r4, r5, r6, r7, pc}
    7e28:	eafffff2 	b	7df8 <psock_readbuf+0x180>
    7e2c:	00014e58 	andeq	r4, r1, r8, asr lr
    7e30:	40001844 	andmi	r1, r0, r4, asr #16
    7e34:	40001830 	andmi	r1, r0, r0, lsr r8

00007e38 <send_data>:
    7e38:	e92d4010 	stmdb	sp!, {r4, lr}
    7e3c:	e1a04000 	mov	r4, r0
    7e40:	e5d03024 	ldrb	r3, [r0, #36]
    7e44:	e3530006 	cmp	r3, #6	; 0x6
    7e48:	1a000003 	bne	7e5c <send_data+0x24>
    7e4c:	e59f3048 	ldr	r3, [pc, #72]	; 7e9c <prog+0x7e54>
    7e50:	e5d33000 	ldrb	r3, [r3]
    7e54:	e2130004 	ands	r0, r3, #4	; 0x4
    7e58:	08bd8010 	ldmeqia	sp!, {r4, pc}
    7e5c:	e1d421b4 	ldrh	r2, [r4, #20]
    7e60:	e59f3038 	ldr	r3, [pc, #56]	; 7ea0 <prog+0x7e58>
    7e64:	e5933000 	ldr	r3, [r3]
    7e68:	e1d311b2 	ldrh	r1, [r3, #18]
    7e6c:	e1520001 	cmp	r2, r1
    7e70:	9a000002 	bls	7e80 <send_data+0x48>
    7e74:	e5940008 	ldr	r0, [r4, #8]
    7e78:	eb0001e6 	bl	8618 <uip_send>
    7e7c:	ea000002 	b	7e8c <send_data+0x54>
    7e80:	e5940008 	ldr	r0, [r4, #8]
    7e84:	e1a01002 	mov	r1, r2
    7e88:	eb0001e2 	bl	8618 <uip_send>
    7e8c:	e3a03006 	mov	r3, #6	; 0x6
    7e90:	e5c43024 	strb	r3, [r4, #36]
    7e94:	e3a00001 	mov	r0, #1	; 0x1
    7e98:	e8bd8010 	ldmia	sp!, {r4, pc}
    7e9c:	4000183c 	andmi	r1, r0, ip, lsr r8
    7ea0:	40001848 	andmi	r1, r0, r8, asr #16

00007ea4 <psock_generator_send>:
    7ea4:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
    7ea8:	e1a05000 	mov	r5, r0
    7eac:	e1a06001 	mov	r6, r1
    7eb0:	e1a07002 	mov	r7, r2
    7eb4:	e1d030b4 	ldrh	r3, [r0, #4]
    7eb8:	e3530000 	cmp	r3, #0	; 0x0
    7ebc:	0a000002 	beq	7ecc <psock_generator_send+0x28>
    7ec0:	e35300f5 	cmp	r3, #245	; 0xf5
    7ec4:	1a000021 	bne	7f50 <psock_generator_send+0xac>
    7ec8:	ea000014 	b	7f20 <psock_generator_send+0x7c>
    7ecc:	e3510000 	cmp	r1, #0	; 0x0
    7ed0:	01c010b4 	streqh	r1, [r0, #4]
    7ed4:	03a00001 	moveq	r0, #1	; 0x1
    7ed8:	08bd80f0 	ldmeqia	sp!, {r4, r5, r6, r7, pc}
    7edc:	e1a00002 	mov	r0, r2
    7ee0:	e1a0e00f 	mov	lr, pc
    7ee4:	e12fff11 	bx	r1
    7ee8:	e1c501b4 	strh	r0, [r5, #20]
    7eec:	e59f306c 	ldr	r3, [pc, #108]	; 7f60 <prog+0x7f18>
    7ef0:	e5933000 	ldr	r3, [r3]
    7ef4:	e5853008 	str	r3, [r5, #8]
    7ef8:	e3a03000 	mov	r3, #0	; 0x0
    7efc:	e5c53024 	strb	r3, [r5, #36]
    7f00:	e59f305c 	ldr	r3, [pc, #92]	; 7f64 <prog+0x7f1c>
    7f04:	e5d33000 	ldrb	r3, [r3]
    7f08:	e3130004 	tst	r3, #4	; 0x4
    7f0c:	11a00007 	movne	r0, r7
    7f10:	11a0e00f 	movne	lr, pc
    7f14:	112fff16 	bxne	r6
    7f18:	e3a030f5 	mov	r3, #245	; 0xf5
    7f1c:	e1c530b4 	strh	r3, [r5, #4]
    7f20:	e1a00005 	mov	r0, r5
    7f24:	ebfffeaa 	bl	79d4 <data_acked>
    7f28:	e1a04000 	mov	r4, r0
    7f2c:	e1a00005 	mov	r0, r5
    7f30:	ebffffc0 	bl	7e38 <send_data>
    7f34:	e0044000 	and	r4, r4, r0
    7f38:	e21400ff 	ands	r0, r4, #255	; 0xff
    7f3c:	08bd80f0 	ldmeqia	sp!, {r4, r5, r6, r7, pc}
    7f40:	e1d531b4 	ldrh	r3, [r5, #20]
    7f44:	e3530000 	cmp	r3, #0	; 0x0
    7f48:	1affffec 	bne	7f00 <psock_generator_send+0x5c>
    7f4c:	e5c53024 	strb	r3, [r5, #36]
    7f50:	e3a03000 	mov	r3, #0	; 0x0
    7f54:	e1c530b4 	strh	r3, [r5, #4]
    7f58:	e3a00002 	mov	r0, #2	; 0x2
    7f5c:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
    7f60:	40001844 	andmi	r1, r0, r4, asr #16
    7f64:	4000183c 	andmi	r1, r0, ip, lsr r8

00007f68 <psock_send>:
    7f68:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    7f6c:	e1a05000 	mov	r5, r0
    7f70:	e1d030b4 	ldrh	r3, [r0, #4]
    7f74:	e3530000 	cmp	r3, #0	; 0x0
    7f78:	0a000002 	beq	7f88 <psock_send+0x20>
    7f7c:	e35300d4 	cmp	r3, #212	; 0xd4
    7f80:	1a000017 	bne	7fe4 <psock_send+0x7c>
    7f84:	ea000008 	b	7fac <psock_send+0x44>
    7f88:	e3520000 	cmp	r2, #0	; 0x0
    7f8c:	01c020b4 	streqh	r2, [r0, #4]
    7f90:	03a00001 	moveq	r0, #1	; 0x1
    7f94:	15851008 	strne	r1, [r5, #8]
    7f98:	11c521b4 	strneh	r2, [r5, #20]
    7f9c:	13a03000 	movne	r3, #0	; 0x0
    7fa0:	15c53024 	strneb	r3, [r5, #36]
    7fa4:	08bd8030 	ldmeqia	sp!, {r4, r5, pc}
    7fa8:	ea000007 	b	7fcc <psock_send+0x64>
    7fac:	e1a00005 	mov	r0, r5
    7fb0:	ebfffe87 	bl	79d4 <data_acked>
    7fb4:	e1a04000 	mov	r4, r0
    7fb8:	e1a00005 	mov	r0, r5
    7fbc:	ebffff9d 	bl	7e38 <send_data>
    7fc0:	e0044000 	and	r4, r4, r0
    7fc4:	e21400ff 	ands	r0, r4, #255	; 0xff
    7fc8:	08bd8030 	ldmeqia	sp!, {r4, r5, pc}
    7fcc:	e1d531b4 	ldrh	r3, [r5, #20]
    7fd0:	e3530000 	cmp	r3, #0	; 0x0
    7fd4:	13a030d4 	movne	r3, #212	; 0xd4
    7fd8:	11c530b4 	strneh	r3, [r5, #4]
    7fdc:	1afffff2 	bne	7fac <psock_send+0x44>
    7fe0:	e5c53024 	strb	r3, [r5, #36]
    7fe4:	e3a03000 	mov	r3, #0	; 0x0
    7fe8:	e1c530b4 	strh	r3, [r5, #4]
    7fec:	e3a00002 	mov	r0, #2	; 0x2
    7ff0:	e8bd8030 	ldmia	sp!, {r4, r5, pc}

00007ff4 <timer_reset>:
 */
void
timer_reset(struct timer *t)
{
  t->start += t->interval;
    7ff4:	e890000c 	ldmia	r0, {r2, r3}
    7ff8:	e0823003 	add	r3, r2, r3
    7ffc:	e5803000 	str	r3, [r0]
}
    8000:	e12fff1e 	bx	lr

00008004 <timer_expired>:
/*---------------------------------------------------------------------------*/
/**
 * Restart the timer from the current point in time
 *
 * This function restarts a timer with the same interval that was
 * given to the timer_set() function. The timer will start at the
 * current time.
 *
 * \note A periodic timer will drift if this function is used to reset
 * it. For preioric timers, use the timer_reset() function instead.
 *
 * \param t A pointer to the timer.
 *
 * \sa timer_reset()
 */
void
timer_restart(struct timer *t)
{
  t->start = clock_time();
}
/*---------------------------------------------------------------------------*/
/**
 * Check if a timer has expired.
 *
 * This function tests if a timer has expired and returns true or
 * false depending on its status.
 *
 * \param t A pointer to the timer
 *
 * \return Non-zero if the timer has expired, zero otherwise.
 *
 */
int
timer_expired(struct timer *t)
{
    8004:	e92d4010 	stmdb	sp!, {r4, lr}
    8008:	e1a04000 	mov	r4, r0
  return (clock_time_t)(clock_time() - t->start) >= (clock_time_t)t->interval;
    800c:	ebfff581 	bl	5618 <clock_time>
    8010:	e5943000 	ldr	r3, [r4]
    8014:	e0633000 	rsb	r3, r3, r0
    8018:	e5940004 	ldr	r0, [r4, #4]
}
    801c:	e1530000 	cmp	r3, r0
    8020:	33a00000 	movcc	r0, #0	; 0x0
    8024:	23a00001 	movcs	r0, #1	; 0x1
    8028:	e8bd8010 	ldmia	sp!, {r4, pc}

0000802c <timer_restart>:
    802c:	e92d4010 	stmdb	sp!, {r4, lr}
    8030:	e1a04000 	mov	r4, r0
    8034:	ebfff577 	bl	5618 <clock_time>
    8038:	e5840000 	str	r0, [r4]
    803c:	e8bd8010 	ldmia	sp!, {r4, pc}

00008040 <timer_set>:
    8040:	e92d4010 	stmdb	sp!, {r4, lr}
    8044:	e1a04000 	mov	r4, r0
    8048:	e5801004 	str	r1, [r0, #4]
    804c:	ebfff571 	bl	5618 <clock_time>
    8050:	e5840000 	str	r0, [r4]
    8054:	e8bd8010 	ldmia	sp!, {r4, pc}

00008058 <uip_setipid>:
static u16_t ipid;           /* Ths ipid variable is an increasing
				number that is used for the IP ID
				field. */

void uip_setipid(u16_t id) { ipid = id; }
    8058:	e59f3004 	ldr	r3, [pc, #4]	; 8064 <prog+0x801c>
    805c:	e1c300b0 	strh	r0, [r3]
    8060:	e12fff1e 	bx	lr
    8064:	4000155a 	andmi	r1, r0, sl, asr r5

00008068 <uip_add32>:

static u8_t iss[4];          /* The iss variable is used for the TCP
				initial sequence number. */

#if UIP_ACTIVE_OPEN
static u16_t lastport;       /* Keeps track of the last port used for
				a new connection. */
#endif /* UIP_ACTIVE_OPEN */

/* Temporary variables. */
u8_t uip_acc32[4];
static u8_t c, opt;
static u16_t tmp16;

/* Structures and definitions. */
#define TCP_FIN 0x01
#define TCP_SYN 0x02
#define TCP_RST 0x04
#define TCP_PSH 0x08
#define TCP_ACK 0x10
#define TCP_URG 0x20
#define TCP_CTL 0x3f

#define TCP_OPT_END     0   /* End of TCP options list */
#define TCP_OPT_NOOP    1   /* "No-operation" TCP option */
#define TCP_OPT_MSS     2   /* Maximum segment size TCP option */

#define TCP_OPT_MSS_LEN 4   /* Length of TCP MSS option. */

#define ICMP_ECHO_REPLY 0
#define ICMP_ECHO       8

#define ICMP6_ECHO_REPLY             129
#define ICMP6_ECHO                   128
#define ICMP6_NEIGHBOR_SOLICITATION  135
#define ICMP6_NEIGHBOR_ADVERTISEMENT 136

#define ICMP6_FLAG_S (1 << 6)

#define ICMP6_OPTION_SOURCE_LINK_ADDRESS 1
#define ICMP6_OPTION_TARGET_LINK_ADDRESS 2


/* Macros. */
#define BUF ((struct uip_tcpip_hdr *)&uip_buf[UIP_LLH_LEN])
#define FBUF ((struct uip_tcpip_hdr *)&uip_reassbuf[0])
#define ICMPBUF ((struct uip_icmpip_hdr *)&uip_buf[UIP_LLH_LEN])
#define UDPBUF ((struct uip_udpip_hdr *)&uip_buf[UIP_LLH_LEN])


#if UIP_STATISTICS == 1
struct uip_stats uip_stat;
#define UIP_STAT(s) s
#else
#define UIP_STAT(s)
#endif /* UIP_STATISTICS == 1 */

#if UIP_LOGGING == 1
#include <stdio.h>
void uip_log(char *msg);
#define UIP_LOG(m) uip_log(m)
#else
#define UIP_LOG(m)
#endif /* UIP_LOGGING == 1 */

#if ! UIP_ARCH_ADD32
void
uip_add32(u8_t *op32, u16_t op16)
{
    8068:	e1a01801 	mov	r1, r1, lsl #16
    806c:	e1a0c821 	mov	ip, r1, lsr #16
  uip_acc32[3] = op32[3] + (op16 & 0xff);
    8070:	e59f20a4 	ldr	r2, [pc, #164]	; 811c <prog+0x80d4>
    8074:	e5d03003 	ldrb	r3, [r0, #3]
    8078:	e083300c 	add	r3, r3, ip
    807c:	e5c23003 	strb	r3, [r2, #3]
  uip_acc32[2] = op32[2] + (op16 >> 8);
    8080:	e1a01c21 	mov	r1, r1, lsr #24
    8084:	e5d03002 	ldrb	r3, [r0, #2]
    8088:	e0833001 	add	r3, r3, r1
    808c:	e5c23002 	strb	r3, [r2, #2]
  uip_acc32[1] = op32[1];
    8090:	e5d03001 	ldrb	r3, [r0, #1]
    8094:	e5c23001 	strb	r3, [r2, #1]
  uip_acc32[0] = op32[0];
    8098:	e5d03000 	ldrb	r3, [r0]
    809c:	e5c23000 	strb	r3, [r2]

  if(uip_acc32[2] < (op16 >> 8)) {
    80a0:	e5d23002 	ldrb	r3, [r2, #2]
    80a4:	e1530001 	cmp	r3, r1
    80a8:	2a000007 	bcs	80cc <uip_add32+0x64>
    ++uip_acc32[1];
    80ac:	e5d23001 	ldrb	r3, [r2, #1]
    80b0:	e2833001 	add	r3, r3, #1	; 0x1
    80b4:	e20330ff 	and	r3, r3, #255	; 0xff
    80b8:	e5c23001 	strb	r3, [r2, #1]
    if(uip_acc32[1] == 0) {
    80bc:	e3530000 	cmp	r3, #0	; 0x0
      ++uip_acc32[0];
    80c0:	05d23000 	ldreqb	r3, [r2]
    80c4:	02833001 	addeq	r3, r3, #1	; 0x1
    80c8:	05c23000 	streqb	r3, [r2]
    }
  }


  if(uip_acc32[3] < (op16 & 0xff)) {
    80cc:	e59f1048 	ldr	r1, [pc, #72]	; 811c <prog+0x80d4>
    80d0:	e5d12003 	ldrb	r2, [r1, #3]
    80d4:	e20c30ff 	and	r3, ip, #255	; 0xff
    80d8:	e1520003 	cmp	r2, r3
    80dc:	a12fff1e 	bxge	lr
    ++uip_acc32[2];
    80e0:	e5d13002 	ldrb	r3, [r1, #2]
    80e4:	e2833001 	add	r3, r3, #1	; 0x1
    80e8:	e20330ff 	and	r3, r3, #255	; 0xff
    80ec:	e5c13002 	strb	r3, [r1, #2]
    if(uip_acc32[2] == 0) {
    80f0:	e3530000 	cmp	r3, #0	; 0x0
    80f4:	112fff1e 	bxne	lr
      ++uip_acc32[1];
    80f8:	e5d13001 	ldrb	r3, [r1, #1]
    80fc:	e2833001 	add	r3, r3, #1	; 0x1
    8100:	e20330ff 	and	r3, r3, #255	; 0xff
    8104:	e5c13001 	strb	r3, [r1, #1]
      if(uip_acc32[1] == 0) {
    8108:	e3530000 	cmp	r3, #0	; 0x0
	++uip_acc32[0];
    810c:	05d13000 	ldreqb	r3, [r1]
    8110:	02833001 	addeq	r3, r3, #1	; 0x1
    8114:	05c13000 	streqb	r3, [r1]
    8118:	e12fff1e 	bx	lr
    811c:	40001838 	andmi	r1, r0, r8, lsr r8

00008120 <chksum>:
      }
    }
  }
}

#endif /* UIP_ARCH_ADD32 */

#if ! UIP_ARCH_CHKSUM
/*---------------------------------------------------------------------------*/
static u16_t
chksum(u16_t sum, const u8_t *data, u16_t len)
{
    8120:	e1a00800 	mov	r0, r0, lsl #16
    8124:	e1a00820 	mov	r0, r0, lsr #16
    8128:	e1a02802 	mov	r2, r2, lsl #16
  u16_t t;
  const u8_t *dataptr;
  const u8_t *last_byte;

  dataptr = data;
  last_byte = data + len - 1;
    812c:	e0812822 	add	r2, r1, r2, lsr #16
    8130:	e242c001 	sub	ip, r2, #1	; 0x1

  while(dataptr < last_byte) {	/* At least two more bytes */
    8134:	e151000c 	cmp	r1, ip
    8138:	2a00000e 	bcs	8178 <chksum+0x58>
    t = (dataptr[0] << 8) + dataptr[1];
    813c:	e5d13000 	ldrb	r3, [r1]
    8140:	e5d12001 	ldrb	r2, [r1, #1]
    8144:	e0822403 	add	r2, r2, r3, lsl #8
    8148:	e1a02802 	mov	r2, r2, lsl #16
    814c:	e1a02822 	mov	r2, r2, lsr #16
    sum += t;
    8150:	e0823000 	add	r3, r2, r0
    8154:	e1a03803 	mov	r3, r3, lsl #16
    8158:	e1a00823 	mov	r0, r3, lsr #16
    if(sum < t) {
    815c:	e1520000 	cmp	r2, r0
      sum++;		/* carry */
    8160:	82803001 	addhi	r3, r0, #1	; 0x1
    8164:	81a03803 	movhi	r3, r3, lsl #16
    8168:	81a00823 	movhi	r0, r3, lsr #16
    }
    dataptr += 2;
    816c:	e2811002 	add	r1, r1, #2	; 0x2
    8170:	e15c0001 	cmp	ip, r1
    8174:	8afffff0 	bhi	813c <chksum+0x1c>
  }

  if(dataptr == last_byte) {
    8178:	e15c0001 	cmp	ip, r1
    817c:	112fff1e 	bxne	lr
    t = (dataptr[0] << 8) + 0;
    8180:	e5dc2000 	ldrb	r2, [ip]
    8184:	e1a02402 	mov	r2, r2, lsl #8
    sum += t;
    8188:	e0823000 	add	r3, r2, r0
    818c:	e1a03803 	mov	r3, r3, lsl #16
    8190:	e1a00823 	mov	r0, r3, lsr #16
    if(sum < t) {
    8194:	e1520000 	cmp	r2, r0
      sum++;		/* carry */
    8198:	82803001 	addhi	r3, r0, #1	; 0x1
    819c:	81a03803 	movhi	r3, r3, lsl #16
    81a0:	81a00823 	movhi	r0, r3, lsr #16
    }
  }

  /* Return sum in host byte order. */
  return sum;
}
    81a4:	e12fff1e 	bx	lr

000081a8 <uip_init>:
/*---------------------------------------------------------------------------*/
u16_t
uip_chksum(u16_t *data, u16_t len)
{
  return htons(chksum(0, (u8_t *)data, len));
}
/*---------------------------------------------------------------------------*/
#ifndef UIP_ARCH_IPCHKSUM
u16_t
uip_ipchksum(void)
{
  u16_t sum;

  sum = chksum(0, &uip_buf[UIP_LLH_LEN], UIP_IPH_LEN);
//  DEBUG_PRINTF("uip_ipchksum: sum 0x%04x\n", sum);
  return (sum == 0) ? 0xffff : htons(sum);
}
#endif
/*---------------------------------------------------------------------------*/
static u16_t
upper_layer_chksum(u8_t proto)
{
  u16_t upper_layer_len;
  u16_t sum;

#if UIP_CONF_IPV6
  upper_layer_len = (((u16_t)(BUF->len[0]) << 8) + BUF->len[1]);
#else /* UIP_CONF_IPV6 */
  upper_layer_len = (((u16_t)(BUF->len[0]) << 8) + BUF->len[1]) - UIP_IPH_LEN;
#endif /* UIP_CONF_IPV6 */

  /* First sum pseudoheader. */

  /* IP protocol and length fields. This addition cannot carry. */
  sum = upper_layer_len + proto;
  /* Sum IP source and destination addresses. */
  sum = chksum(sum, (u8_t *)&BUF->srcipaddr[0], 2 * sizeof(uip_ipaddr_t));

  /* Sum TCP header and data. */
  sum = chksum(sum, &uip_buf[UIP_IPH_LEN + UIP_LLH_LEN],
	       upper_layer_len);

  return (sum == 0) ? 0xffff : htons(sum);
}
/*---------------------------------------------------------------------------*/
#if UIP_CONF_IPV6
u16_t
uip_icmp6chksum(void)
{
  return upper_layer_chksum(UIP_PROTO_ICMP6);

}
#endif /* UIP_CONF_IPV6 */
/*---------------------------------------------------------------------------*/
u16_t
uip_tcpchksum(void)
{
  return upper_layer_chksum(UIP_PROTO_TCP);
}
/*---------------------------------------------------------------------------*/
#if UIP_UDP_CHECKSUMS
u16_t
uip_udpchksum(void)
{
  return upper_layer_chksum(UIP_PROTO_UDP);
}
#endif /* UIP_UDP_CHECKSUMS */
#endif /* UIP_ARCH_CHKSUM */
/*---------------------------------------------------------------------------*/
void
uip_init(void)
{
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
    81a8:	e3a02000 	mov	r2, #0	; 0x0
    81ac:	e59f3080 	ldr	r3, [pc, #128]	; 8234 <prog+0x81ec>
    81b0:	e5c32000 	strb	r2, [r3]
    81b4:	e59f307c 	ldr	r3, [pc, #124]	; 8238 <prog+0x81f0>
    81b8:	e1a01002 	mov	r1, r2
    81bc:	e59f2078 	ldr	r2, [pc, #120]	; 823c <prog+0x81f4>
    uip_listenports[c] = 0;
    81c0:	e0c310b2 	strh	r1, [r3], #2
    81c4:	e1530002 	cmp	r3, r2
    81c8:	1afffffc 	bne	81c0 <uip_init+0x18>
  }
  for(c = 0; c < UIP_CONNS; ++c) {
    81cc:	e3a02000 	mov	r2, #0	; 0x0
    81d0:	e59f305c 	ldr	r3, [pc, #92]	; 8234 <prog+0x81ec>
    81d4:	e5c32000 	strb	r2, [r3]
    81d8:	e59f3060 	ldr	r3, [pc, #96]	; 8240 <prog+0x81f8>
    81dc:	e3a01000 	mov	r1, #0	; 0x0
    81e0:	e59f205c 	ldr	r2, [pc, #92]	; 8244 <prog+0x81fc>
    uip_conns[c].tcpstateflags = UIP_CLOSED;
    81e4:	e5c31019 	strb	r1, [r3, #25]
    81e8:	e2833088 	add	r3, r3, #136	; 0x88
    81ec:	e1530002 	cmp	r3, r2
    81f0:	1afffffb 	bne	81e4 <uip_init+0x3c>
  }
#if UIP_ACTIVE_OPEN
  lastport = 1024;
    81f4:	e59f304c 	ldr	r3, [pc, #76]	; 8248 <prog+0x8200>
    81f8:	e3a02b01 	mov	r2, #1024	; 0x400
    81fc:	e1c320b0 	strh	r2, [r3]
#endif /* UIP_ACTIVE_OPEN */

#if UIP_UDP
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    8200:	e59f302c 	ldr	r3, [pc, #44]	; 8234 <prog+0x81ec>
    8204:	e5c31000 	strb	r1, [r3]
    8208:	e59f303c 	ldr	r3, [pc, #60]	; 824c <prog+0x8204>
    820c:	e3a01000 	mov	r1, #0	; 0x0
    8210:	e59f2038 	ldr	r2, [pc, #56]	; 8250 <prog+0x8208>
    uip_udp_conns[c].lport = 0;
    8214:	e1c310b4 	strh	r1, [r3, #4]
    8218:	e2833044 	add	r3, r3, #68	; 0x44
    821c:	e1530002 	cmp	r3, r2
    8220:	1afffffb 	bne	8214 <uip_init+0x6c>
    8224:	e3a0200a 	mov	r2, #10	; 0xa
    8228:	e59f3004 	ldr	r3, [pc, #4]	; 8234 <prog+0x81ec>
    822c:	e5c32000 	strb	r2, [r3]
  }
#endif /* UIP_UDP */


  /* IPv4 initialization. */
#if UIP_FIXEDADDR == 0
  /*  uip_hostaddr[0] = uip_hostaddr[1] = 0;*/
#endif /* UIP_FIXEDADDR */

}
    8230:	e12fff1e 	bx	lr
    8234:	40001562 	andmi	r1, r0, r2, ror #10
    8238:	40002d8c 	andmi	r2, r0, ip, lsl #27
    823c:	40002ddc 	ldrmid	r2, [r0], -ip
    8240:	4000184c 	andmi	r1, r0, ip, asr #16
    8244:	40002d8c 	andmi	r2, r0, ip, lsl #27
    8248:	40001560 	andmi	r1, r0, r0, ror #10
    824c:	40003400 	andmi	r3, r0, r0, lsl #8
    8250:	400036a8 	andmi	r3, r0, r8, lsr #13

00008254 <uip_unlisten>:
/*---------------------------------------------------------------------------*/
#if UIP_ACTIVE_OPEN
struct uip_conn *
uip_connect(uip_ipaddr_t *ripaddr, u16_t rport)
{
  register struct uip_conn *conn, *cconn;

  /* Find an unused local port. */
 again:
  ++lastport;

  if(lastport >= 32000) {
    lastport = 4096;
  }

  /* Check if this port is already in use, and if so try to find
     another one. */
  for(c = 0; c < UIP_CONNS; ++c) {
    conn = &uip_conns[c];
    if(conn->tcpstateflags != UIP_CLOSED &&
       conn->lport == htons(lastport)) {
      goto again;
    }
  }

  conn = 0;
  for(c = 0; c < UIP_CONNS; ++c) {
    cconn = &uip_conns[c];
    if(cconn->tcpstateflags == UIP_CLOSED) {
      conn = cconn;
      break;
    }
    if(cconn->tcpstateflags == UIP_TIME_WAIT) {
      if(conn == 0 ||
	 cconn->timer > conn->timer) {
	conn = cconn;
      }
    }
  }

  if(conn == 0) {
    return 0;
  }

  conn->tcpstateflags = UIP_SYN_SENT;

  conn->snd_nxt[0] = iss[0];
  conn->snd_nxt[1] = iss[1];
  conn->snd_nxt[2] = iss[2];
  conn->snd_nxt[3] = iss[3];

  conn->initialmss = conn->mss = UIP_TCP_MSS;

  conn->len = 1;   /* TCP length of the SYN is one. */
  conn->nrtx = 0;
  conn->timer = 1; /* Send the SYN next time around. */
  conn->rto = UIP_RTO;
  conn->sa = 0;
  conn->sv = 16;   /* Initial value of the RTT variance. */
  conn->lport = htons(lastport);
  conn->rport = rport;
  uip_ipaddr_copy(&conn->ripaddr, ripaddr);

  return conn;
}
#endif /* UIP_ACTIVE_OPEN */
/*---------------------------------------------------------------------------*/
#if UIP_UDP
struct uip_udp_conn *
uip_udp_new(uip_ipaddr_t *ripaddr, u16_t rport)
{
  register struct uip_udp_conn *conn;

  /* Find an unused local port. */
 again:
  ++lastport;

  if(lastport >= 32000) {
    lastport = 4096;
  }

  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    if(uip_udp_conns[c].lport == htons(lastport)) {
      goto again;
    }
  }


  conn = 0;
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    if(uip_udp_conns[c].lport == 0) {
      conn = &uip_udp_conns[c];
      break;
    }
  }

  if(conn == 0) {
    return 0;
  }

  conn->lport = HTONS(lastport);
  conn->rport = rport;
  if(ripaddr == NULL) {
    memset(conn->ripaddr, 0, sizeof(uip_ipaddr_t));
  } else {
    uip_ipaddr_copy(&conn->ripaddr, ripaddr);
  }
  conn->ttl = UIP_TTL;

  return conn;
}
#endif /* UIP_UDP */
/*---------------------------------------------------------------------------*/
void
uip_unlisten(u16_t port)
{
    8254:	e1a00800 	mov	r0, r0, lsl #16
    8258:	e1a00820 	mov	r0, r0, lsr #16
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
    825c:	e3a02000 	mov	r2, #0	; 0x0
    8260:	e59f3054 	ldr	r3, [pc, #84]	; 82bc <prog+0x8274>
    8264:	e5c32000 	strb	r2, [r3]
    8268:	e1a0c002 	mov	ip, r2
    826c:	e59f104c 	ldr	r1, [pc, #76]	; 82c0 <prog+0x8278>
    if(uip_listenports[c] == port) {
    8270:	e1d130b0 	ldrh	r3, [r1]
    8274:	e1530000 	cmp	r3, r0
    8278:	1a000006 	bne	8298 <uip_unlisten+0x44>
    827c:	e59f3038 	ldr	r3, [pc, #56]	; 82bc <prog+0x8274>
    8280:	e5c3c000 	strb	ip, [r3]
      uip_listenports[c] = 0;
    8284:	e1a02082 	mov	r2, r2, lsl #1
    8288:	e59f3030 	ldr	r3, [pc, #48]	; 82c0 <prog+0x8278>
    828c:	e3a01000 	mov	r1, #0	; 0x0
    8290:	e18210b3 	strh	r1, [r2, r3]
    8294:	e12fff1e 	bx	lr
      return;
    8298:	e2823001 	add	r3, r2, #1	; 0x1
    829c:	e203c0ff 	and	ip, r3, #255	; 0xff
    82a0:	e1a02003 	mov	r2, r3
    82a4:	e2811002 	add	r1, r1, #2	; 0x2
    82a8:	e3530028 	cmp	r3, #40	; 0x28
    82ac:	1affffef 	bne	8270 <uip_unlisten+0x1c>
    82b0:	e59f3004 	ldr	r3, [pc, #4]	; 82bc <prog+0x8274>
    82b4:	e5c3c000 	strb	ip, [r3]
    82b8:	e12fff1e 	bx	lr
    82bc:	40001562 	andmi	r1, r0, r2, ror #10
    82c0:	40002d8c 	andmi	r2, r0, ip, lsl #27

000082c4 <uip_listen>:
    }
  }
}
/*---------------------------------------------------------------------------*/
void
uip_listen(u16_t port)
{
    82c4:	e1a00800 	mov	r0, r0, lsl #16
    82c8:	e1a00820 	mov	r0, r0, lsr #16
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
    82cc:	e3a02000 	mov	r2, #0	; 0x0
    82d0:	e59f3050 	ldr	r3, [pc, #80]	; 8328 <prog+0x82e0>
    82d4:	e5c32000 	strb	r2, [r3]
    82d8:	e1a0c002 	mov	ip, r2
    82dc:	e59f1048 	ldr	r1, [pc, #72]	; 832c <prog+0x82e4>
    if(uip_listenports[c] == 0) {
    82e0:	e1d130b0 	ldrh	r3, [r1]
    82e4:	e3530000 	cmp	r3, #0	; 0x0
    82e8:	1a000005 	bne	8304 <uip_listen+0x40>
    82ec:	e59f3034 	ldr	r3, [pc, #52]	; 8328 <prog+0x82e0>
    82f0:	e5c3c000 	strb	ip, [r3]
      uip_listenports[c] = port;
    82f4:	e1a02082 	mov	r2, r2, lsl #1
    82f8:	e59f302c 	ldr	r3, [pc, #44]	; 832c <prog+0x82e4>
    82fc:	e18200b3 	strh	r0, [r2, r3]
    8300:	e12fff1e 	bx	lr
      return;
    8304:	e2823001 	add	r3, r2, #1	; 0x1
    8308:	e203c0ff 	and	ip, r3, #255	; 0xff
    830c:	e1a02003 	mov	r2, r3
    8310:	e2811002 	add	r1, r1, #2	; 0x2
    8314:	e3530028 	cmp	r3, #40	; 0x28
    8318:	1afffff0 	bne	82e0 <uip_listen+0x1c>
    831c:	e59f3004 	ldr	r3, [pc, #4]	; 8328 <prog+0x82e0>
    8320:	e5c3c000 	strb	ip, [r3]
    8324:	e12fff1e 	bx	lr
    8328:	40001562 	andmi	r1, r0, r2, ror #10
    832c:	40002d8c 	andmi	r2, r0, ip, lsl #27

00008330 <uip_add_rcv_nxt>:
    }
  }
}
/*---------------------------------------------------------------------------*/
/* XXX: IP fragment reassembly: not well-tested. */

#if UIP_REASSEMBLY && !UIP_CONF_IPV6
#define UIP_REASS_BUFSIZE (UIP_BUFSIZE - UIP_LLH_LEN)
static u8_t uip_reassbuf[UIP_REASS_BUFSIZE];
static u8_t uip_reassbitmap[UIP_REASS_BUFSIZE / (8 * 8)];
static const u8_t bitmap_bits[8] = {0xff, 0x7f, 0x3f, 0x1f,
				    0x0f, 0x07, 0x03, 0x01};
static u16_t uip_reasslen;
static u8_t uip_reassflags;
#define UIP_REASS_FLAG_LASTFRAG 0x01
static u8_t uip_reasstmr;

#define IP_MF   0x20

static u8_t
uip_reass(void)
{
  u16_t offset, len;
  u16_t i;

  /* If ip_reasstmr is zero, no packet is present in the buffer, so we
     write the IP header of the fragment into the reassembly
     buffer. The timer is updated with the maximum age. */
  if(uip_reasstmr == 0) {
    memcpy(uip_reassbuf, &BUF->vhl, UIP_IPH_LEN);
    uip_reasstmr = UIP_REASS_MAXAGE;
    uip_reassflags = 0;
    /* Clear the bitmap. */
    memset(uip_reassbitmap, 0, sizeof(uip_reassbitmap));
  }

  /* Check if the incoming fragment matches the one currently present
     in the reasembly buffer. If so, we proceed with copying the
     fragment into the buffer. */
  if(BUF->srcipaddr[0] == FBUF->srcipaddr[0] &&
     BUF->srcipaddr[1] == FBUF->srcipaddr[1] &&
     BUF->destipaddr[0] == FBUF->destipaddr[0] &&
     BUF->destipaddr[1] == FBUF->destipaddr[1] &&
     BUF->ipid[0] == FBUF->ipid[0] &&
     BUF->ipid[1] == FBUF->ipid[1]) {

    len = (BUF->len[0] << 8) + BUF->len[1] - (BUF->vhl & 0x0f) * 4;
    offset = (((BUF->ipoffset[0] & 0x3f) << 8) + BUF->ipoffset[1]) * 8;

    /* If the offset or the offset + fragment length overflows the
       reassembly buffer, we discard the entire packet. */
    if(offset > UIP_REASS_BUFSIZE ||
       offset + len > UIP_REASS_BUFSIZE) {
      uip_reasstmr = 0;
      goto nullreturn;
    }

    /* Copy the fragment into the reassembly buffer, at the right
       offset. */
    memcpy(&uip_reassbuf[UIP_IPH_LEN + offset],
	   (char *)BUF + (int)((BUF->vhl & 0x0f) * 4),
	   len);

    /* Update the bitmap. */
    if(offset / (8 * 8) == (offset + len) / (8 * 8)) {
      /* If the two endpoints are in the same byte, we only update
	 that byte. */
	
      uip_reassbitmap[offset / (8 * 8)] |=
	     bitmap_bits[(offset / 8 ) & 7] &
	     ~bitmap_bits[((offset + len) / 8 ) & 7];
    } else {
      /* If the two endpoints are in different bytes, we update the
	 bytes in the endpoints and fill the stuff inbetween with
	 0xff. */
      uip_reassbitmap[offset / (8 * 8)] |=
	bitmap_bits[(offset / 8 ) & 7];
      for(i = 1 + offset / (8 * 8); i < (offset + len) / (8 * 8); ++i) {
	uip_reassbitmap[i] = 0xff;
      }
      uip_reassbitmap[(offset + len) / (8 * 8)] |=
	~bitmap_bits[((offset + len) / 8 ) & 7];
    }

    /* If this fragment has the More Fragments flag set to zero, we
       know that this is the last fragment, so we can calculate the
       size of the entire packet. We also set the
       IP_REASS_FLAG_LASTFRAG flag to indicate that we have received
       the final fragment. */

    if((BUF->ipoffset[0] & IP_MF) == 0) {
      uip_reassflags |= UIP_REASS_FLAG_LASTFRAG;
      uip_reasslen = offset + len;
    }

    /* Finally, we check if we have a full packet in the buffer. We do
       this by checking if we have the last fragment and if all bits
       in the bitmap are set. */
    if(uip_reassflags & UIP_REASS_FLAG_LASTFRAG) {
      /* Check all bytes up to and including all but the last byte in
	 the bitmap. */
      for(i = 0; i < uip_reasslen / (8 * 8) - 1; ++i) {
	if(uip_reassbitmap[i] != 0xff) {
	  goto nullreturn;
	}
      }
      /* Check the last byte in the bitmap. It should contain just the
	 right amount of bits. */
      if(uip_reassbitmap[uip_reasslen / (8 * 8)] !=
	 (u8_t)~bitmap_bits[uip_reasslen / 8 & 7]) {
	goto nullreturn;
      }

      /* If we have come this far, we have a full packet in the
	 buffer, so we allocate a pbuf and copy the packet into it. We
	 also reset the timer. */
      uip_reasstmr = 0;
      memcpy(BUF, FBUF, uip_reasslen);

      /* Pretend to be a "normal" (i.e., not fragmented) IP packet
	 from now on. */
      BUF->ipoffset[0] = BUF->ipoffset[1] = 0;
      BUF->len[0] = uip_reasslen >> 8;
      BUF->len[1] = uip_reasslen & 0xff;
      BUF->ipchksum = 0;
      BUF->ipchksum = ~(uip_ipchksum());

      return uip_reasslen;
    }
  }

 nullreturn:
  return 0;
}
#endif /* UIP_REASSEMBLY */
/*---------------------------------------------------------------------------*/
static void
uip_add_rcv_nxt(u16_t n)
{
    8330:	e92d4010 	stmdb	sp!, {r4, lr}
    8334:	e1a01800 	mov	r1, r0, lsl #16
  uip_add32(uip_conn->rcv_nxt, n);
    8338:	e59f4044 	ldr	r4, [pc, #68]	; 8384 <prog+0x833c>
    833c:	e5940000 	ldr	r0, [r4]
    8340:	e2800008 	add	r0, r0, #8	; 0x8
    8344:	e1a01821 	mov	r1, r1, lsr #16
    8348:	ebffff46 	bl	8068 <uip_add32>
  uip_conn->rcv_nxt[0] = uip_acc32[0];
    834c:	e5941000 	ldr	r1, [r4]
    8350:	e59f2030 	ldr	r2, [pc, #48]	; 8388 <prog+0x8340>
    8354:	e5d23000 	ldrb	r3, [r2]
    8358:	e5c13008 	strb	r3, [r1, #8]
  uip_conn->rcv_nxt[1] = uip_acc32[1];
    835c:	e5941000 	ldr	r1, [r4]
    8360:	e5d23001 	ldrb	r3, [r2, #1]
    8364:	e5c13009 	strb	r3, [r1, #9]
  uip_conn->rcv_nxt[2] = uip_acc32[2];
    8368:	e5941000 	ldr	r1, [r4]
    836c:	e5d23002 	ldrb	r3, [r2, #2]
    8370:	e5c1300a 	strb	r3, [r1, #10]
  uip_conn->rcv_nxt[3] = uip_acc32[3];
    8374:	e5941000 	ldr	r1, [r4]
    8378:	e5d23003 	ldrb	r3, [r2, #3]
    837c:	e5c1300b 	strb	r3, [r1, #11]
}
    8380:	e8bd8010 	ldmia	sp!, {r4, pc}
    8384:	40001848 	andmi	r1, r0, r8, asr #16
    8388:	40001838 	andmi	r1, r0, r8, lsr r8

0000838c <htons>:
/*---------------------------------------------------------------------------*/
void
uip_process(u8_t flag)
{
  register struct uip_conn *uip_connr = uip_conn;
  char data_ip[2000];

#if UIP_UDP
  if(flag == UIP_UDP_SEND_CONN) {
    goto udp_send;
  }
#endif /* UIP_UDP */

//  DEBUG_ENTER;

  sprintf(data_ip, "\nPorta requerente: %x\n",uip_connr->lport);
//  DEBUG_INFO(data_ip);

  uip_sappdata = uip_appdata = &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN];

  /* Check if we were invoked because of a poll request for a
     particular connection. */
  if(flag == UIP_POLL_REQUEST) {
    if((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED &&
       !uip_outstanding(uip_connr)) {
	uip_flags = UIP_POLL;
	UIP_APPCALL();
	goto appsend;
    }
    goto drop;

    /* Check if we were invoked because of the perodic timer fireing. */
  } else if(flag == UIP_TIMER) {
#if UIP_REASSEMBLY
    if(uip_reasstmr != 0) {
      --uip_reasstmr;
    }
#endif /* UIP_REASSEMBLY */
    /* Increase the initial sequence number. */
    if(++iss[3] == 0) {
      if(++iss[2] == 0) {
	if(++iss[1] == 0) {
	  ++iss[0];
	}
      }
    }

    /* Reset the length variables. */
    uip_len = 0;
    uip_slen = 0;

    /* Check if the connection is in a state in which we simply wait
       for the connection to time out. If so, we increase the
       connection's timer and remove the connection if it times
       out. */
    if(uip_connr->tcpstateflags == UIP_TIME_WAIT ||
       uip_connr->tcpstateflags == UIP_FIN_WAIT_2) {
      ++(uip_connr->timer);
      if(uip_connr->timer == UIP_TIME_WAIT_TIMEOUT) {
	uip_connr->tcpstateflags = UIP_CLOSED;
      }
    } else if(uip_connr->tcpstateflags != UIP_CLOSED) {
      /* If the connection has outstanding data, we increase the
	 connection's timer and see if it has reached the RTO value
	 in which case we retransmit. */
      if(uip_outstanding(uip_connr)) {
	  uip_connr->timer = uip_connr->timer - 1;
	if(uip_connr->timer == 0) {
	  if(uip_connr->nrtx == UIP_MAXRTX ||
	     ((uip_connr->tcpstateflags == UIP_SYN_SENT ||
	       uip_connr->tcpstateflags == UIP_SYN_RCVD) &&
	      uip_connr->nrtx == UIP_MAXSYNRTX)) {
	    uip_connr->tcpstateflags = UIP_CLOSED;

	    /* We call UIP_APPCALL() with uip_flags set to
	       UIP_TIMEDOUT to inform the application that the
	       connection has timed out. */
	    uip_flags = UIP_TIMEDOUT;
	    UIP_APPCALL();

	    /* We also send a reset packet to the remote host. */
	    BUF->flags = TCP_RST | TCP_ACK;
	    goto tcp_send_nodata;
	  }

	  /* Exponential backoff. */
	  uip_connr->timer = UIP_RTO << (uip_connr->nrtx > 4?
					 4:
					 uip_connr->nrtx);
	  ++(uip_connr->nrtx);
	
	  /* Ok, so we need to retransmit. We do this differently
	     depending on which state we are in. In ESTABLISHED, we
	     call upon the application so that it may prepare the
	     data for the retransmit. In SYN_RCVD, we resend the
	     SYNACK that we sent earlier and in LAST_ACK we have to
	     retransmit our FINACK. */
	  UIP_STAT(++uip_stat.tcp.rexmit);
	  switch(uip_connr->tcpstateflags & UIP_TS_MASK) {
	  case UIP_SYN_RCVD:
	    /* In the SYN_RCVD state, we should retransmit our
               SYNACK. */
	    goto tcp_send_synack;
	
#if UIP_ACTIVE_OPEN
	  case UIP_SYN_SENT:
	    /* In the SYN_SENT state, we retransmit out SYN. */
	    BUF->flags = 0;
	    goto tcp_send_syn;
#endif /* UIP_ACTIVE_OPEN */
	
	  case UIP_ESTABLISHED:
	    /* In the ESTABLISHED state, we call upon the application
               to do the actual retransmit after which we jump into
               the code for sending out the packet (the apprexmit
               label). */
	    uip_flags = UIP_REXMIT;
	    UIP_APPCALL();
	    goto apprexmit;
	
	  case UIP_FIN_WAIT_1:
	  case UIP_CLOSING:
	  case UIP_LAST_ACK:
	    /* In all these states we should retransmit a FINACK. */
	    goto tcp_send_finack;
	
	  }
	}
      } else if((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED) {
	/* If there was no need for a retransmission, we poll the
           application for new data. */
	uip_flags = UIP_POLL;
	UIP_APPCALL();
	goto appsend;
      }
    }
    goto drop;
  }
#if UIP_UDP
  if(flag == UIP_UDP_TIMER) {
    if(uip_udp_conn->lport != 0) {
      uip_conn = NULL;
      uip_sappdata = uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
      uip_len = uip_slen = 0;
      uip_flags = UIP_POLL;
      UIP_UDP_APPCALL();
      goto udp_send;
    } else {
      goto drop;
    }
  }
#endif

  /* This is where the input processing starts. */
  UIP_STAT(++uip_stat.ip.recv);

  /* Start of IP input header processing code. */

#if UIP_CONF_IPV6
  /* Check validity of the IP header. */
  if((BUF->vtc & 0xf0) != 0x60)  { /* IP version and header length. */
    UIP_STAT(++uip_stat.ip.drop);
    UIP_STAT(++uip_stat.ip.vhlerr);
    UIP_LOG("ipv6: invalid version.");
    goto drop;
  }
#else /* UIP_CONF_IPV6 */
  /* Check validity of the IP header. */
  if(BUF->vhl != 0x45)  { /* IP version and header length. */
    UIP_STAT(++uip_stat.ip.drop);
    UIP_STAT(++uip_stat.ip.vhlerr);
    UIP_LOG("ip: invalid version or header length.");
    goto drop;
  }
#endif /* UIP_CONF_IPV6 */

  /* Check the size of the packet. If the size reported to us in
     uip_len is smaller the size reported in the IP header, we assume
     that the packet has been corrupted in transit. If the size of
     uip_len is larger than the size reported in the IP packet header,
     the packet has been padded and we set uip_len to the correct
     value.. */

  if((BUF->len[0] << 8) + BUF->len[1] <= uip_len) {
    uip_len = (BUF->len[0] << 8) + BUF->len[1];
#if UIP_CONF_IPV6
    uip_len += 40; /* The length reported in the IPv6 header is the
		      length of the payload that follows the
		      header. However, uIP uses the uip_len variable
		      for holding the size of the entire packet,
		      including the IP header. For IPv4 this is not a
		      problem as the length field in the IPv4 header
		      contains the length of the entire packet. But
		      for IPv6 we need to add the size of the IPv6
		      header (40 bytes). */
#endif /* UIP_CONF_IPV6 */
  } else {
    UIP_LOG("ip: packet shorter than reported in IP header.");
    goto drop;
  }

#if !UIP_CONF_IPV6
  /* Check the fragment flag. */
  if((BUF->ipoffset[0] & 0x3f) != 0 ||
     BUF->ipoffset[1] != 0) {
#if UIP_REASSEMBLY
    uip_len = uip_reass();
    if(uip_len == 0) {
      goto drop;
    }
#else /* UIP_REASSEMBLY */
    UIP_STAT(++uip_stat.ip.drop);
    UIP_STAT(++uip_stat.ip.fragerr);
    UIP_LOG("ip: fragment dropped.");
    goto drop;
#endif /* UIP_REASSEMBLY */
  }
#endif /* UIP_CONF_IPV6 */

  if(uip_ipaddr_cmp(uip_hostaddr, all_zeroes_addr)) {
    /* If we are configured to use ping IP address configuration and
       hasn't been assigned an IP address yet, we accept all ICMP
       packets. */
#if UIP_PINGADDRCONF && !UIP_CONF_IPV6
    if(BUF->proto == UIP_PROTO_ICMP) {
      UIP_LOG("ip: possible ping config packet received.");
      goto icmp_input;
    } else {
      UIP_LOG("ip: packet dropped since no address assigned.");
      goto drop;
    }
#endif /* UIP_PINGADDRCONF */

  } else {
    /* If IP broadcast support is configured, we check for a broadcast
       UDP packet, which may be destined to us. */
#if UIP_BROADCAST
    DEBUG_PRINTF("UDP IP checksum 0x%04x\n", uip_ipchksum());
    if(BUF->proto == UIP_PROTO_UDP &&
       uip_ipaddr_cmp(BUF->destipaddr, all_ones_addr)
       /*&&
	 uip_ipchksum() == 0xffff*/) {
      goto udp_input;
    }
#endif /* UIP_BROADCAST */

    /* Check if the packet is destined for our IP address. */
#if !UIP_CONF_IPV6
    if(!uip_ipaddr_cmp(BUF->destipaddr, uip_hostaddr)) {
      UIP_STAT(++uip_stat.ip.drop);
      goto drop;
    }
#else /* UIP_CONF_IPV6 */
    /* For IPv6, packet reception is a little trickier as we need to
       make sure that we listen to certain multicast addresses (all
       hosts multicast address, and the solicited-node multicast
       address) as well. However, we will cheat here and accept all
       multicast packets that are sent to the ff02::/16 addresses. */
    if(!uip_ipaddr_cmp(BUF->destipaddr, uip_hostaddr) &&
       BUF->destipaddr[0] != HTONS(0xff02)) {
      UIP_STAT(++uip_stat.ip.drop);
      goto drop;
    }
#endif /* UIP_CONF_IPV6 */
  }

#if !UIP_CONF_IPV6
  if(uip_ipchksum() != 0xffff) { /* Compute and check the IP header
				    checksum. */
    UIP_STAT(++uip_stat.ip.drop);
    UIP_STAT(++uip_stat.ip.chkerr);
    UIP_LOG("ip: bad checksum.");
    goto drop;
  }
#endif /* UIP_CONF_IPV6 */

  if(BUF->proto == UIP_PROTO_TCP) { /* Check for TCP packet. If so,
				       proceed with TCP input
				       processing. */
    goto tcp_input;
  }

#if UIP_UDP
  if(BUF->proto == UIP_PROTO_UDP) {
    goto udp_input;
  }
#endif /* UIP_UDP */

#if !UIP_CONF_IPV6
  /* ICMPv4 processing code follows. */
  if(BUF->proto != UIP_PROTO_ICMP) { /* We only allow ICMP packets from
					here. */
    UIP_STAT(++uip_stat.ip.drop);
    UIP_STAT(++uip_stat.ip.protoerr);
    UIP_LOG("ip: neither tcp nor icmp.");
    goto drop;
  }

#if UIP_PINGADDRCONF
 icmp_input:
#endif /* UIP_PINGADDRCONF */
  UIP_STAT(++uip_stat.icmp.recv);

  /* ICMP echo (i.e., ping) processing. This is simple, we only change
     the ICMP type from ECHO to ECHO_REPLY and adjust the ICMP
     checksum before we return the packet. */
  if(ICMPBUF->type != ICMP_ECHO) {
    UIP_STAT(++uip_stat.icmp.drop);
    UIP_STAT(++uip_stat.icmp.typeerr);
    UIP_LOG("icmp: not icmp echo.");
    goto drop;
  }

  /* If we are configured to use ping IP address assignment, we use
     the destination IP address of this ping packet and assign it to
     ourself. */
#if UIP_PINGADDRCONF
  if((uip_hostaddr[0] | uip_hostaddr[1]) == 0) {
    uip_hostaddr[0] = BUF->destipaddr[0];
    uip_hostaddr[1] = BUF->destipaddr[1];
  }
#endif /* UIP_PINGADDRCONF */

  ICMPBUF->type = ICMP_ECHO_REPLY;

  if(ICMPBUF->icmpchksum >= HTONS(0xffff - (ICMP_ECHO << 8))) {
    ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8) + 1;
  } else {
    ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8);
  }

  /* Swap IP addresses. */
  uip_ipaddr_copy(BUF->destipaddr, BUF->srcipaddr);
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);

  UIP_STAT(++uip_stat.icmp.sent);
  goto send;

  /* End of IPv4 input header processing code. */
#else /* !UIP_CONF_IPV6 */

  /* This is IPv6 ICMPv6 processing code. */
  DEBUG_PRINTF("icmp6_input: length %d\n", uip_len);

  if(BUF->proto != UIP_PROTO_ICMP6) { /* We only allow ICMPv6 packets from
					 here. */
    UIP_STAT(++uip_stat.ip.drop);
    UIP_STAT(++uip_stat.ip.protoerr);
    UIP_LOG("ip: neither tcp nor icmp6.");
    goto drop;
  }

  UIP_STAT(++uip_stat.icmp.recv);

  /* If we get a neighbor solicitation for our address we should send
     a neighbor advertisement message back. */
  if(ICMPBUF->type == ICMP6_NEIGHBOR_SOLICITATION) {
    if(uip_ipaddr_cmp(ICMPBUF->icmp6data, uip_hostaddr)) {

      if(ICMPBUF->options[0] == ICMP6_OPTION_SOURCE_LINK_ADDRESS) {
	/* Save the sender's address in our neighbor list. */
	uip_neighbor_add(ICMPBUF->srcipaddr, &(ICMPBUF->options[2]));
      }

      /* We should now send a neighbor advertisement back to where the
	 neighbor solicication came from. */
      ICMPBUF->type = ICMP6_NEIGHBOR_ADVERTISEMENT;
      ICMPBUF->flags = ICMP6_FLAG_S; /* Solicited flag. */

      ICMPBUF->reserved1 = ICMPBUF->reserved2 = ICMPBUF->reserved3 = 0;

      uip_ipaddr_copy(ICMPBUF->destipaddr, ICMPBUF->srcipaddr);
      uip_ipaddr_copy(ICMPBUF->srcipaddr, uip_hostaddr);
      ICMPBUF->options[0] = ICMP6_OPTION_TARGET_LINK_ADDRESS;
      ICMPBUF->options[1] = 1;  /* Options length, 1 = 8 bytes. */
      memcpy(&(ICMPBUF->options[2]), &uip_ethaddr, sizeof(uip_ethaddr));
      ICMPBUF->icmpchksum = 0;
      ICMPBUF->icmpchksum = ~uip_icmp6chksum();
      goto send;

    }
    goto drop;
  } else if(ICMPBUF->type == ICMP6_ECHO) {
    /* ICMP echo (i.e., ping) processing. This is simple, we only
       change the ICMP type from ECHO to ECHO_REPLY and update the
       ICMP checksum before we return the packet. */

    ICMPBUF->type = ICMP6_ECHO_REPLY;

    uip_ipaddr_copy(BUF->destipaddr, BUF->srcipaddr);
    uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
    ICMPBUF->icmpchksum = 0;
    ICMPBUF->icmpchksum = ~uip_icmp6chksum();

    UIP_STAT(++uip_stat.icmp.sent);
    goto send;
  } else {
    DEBUG_PRINTF("Unknown icmp6 message type %d\n", ICMPBUF->type);
    UIP_STAT(++uip_stat.icmp.drop);
    UIP_STAT(++uip_stat.icmp.typeerr);
    UIP_LOG("icmp: unknown ICMP message.");
    goto drop;
  }

  /* End of IPv6 ICMP processing. */

#endif /* !UIP_CONF_IPV6 */

#if UIP_UDP
  /* UDP input processing. */
 udp_input:
  /* UDP processing is really just a hack. We don't do anything to the
     UDP/IP headers, but let the UDP application do all the hard
     work. If the application sets uip_slen, it has a packet to
     send. */
#if UIP_UDP_CHECKSUMS
  uip_len = uip_len - UIP_IPUDPH_LEN;
  uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
  if(UDPBUF->udpchksum != 0 && uip_udpchksum() != 0xffff) {
    UIP_STAT(++uip_stat.udp.drop);
    UIP_STAT(++uip_stat.udp.chkerr);
    UIP_LOG("udp: bad checksum.");
    goto drop;
  }
#else /* UIP_UDP_CHECKSUMS */
  uip_len = uip_len - UIP_IPUDPH_LEN;
#endif /* UIP_UDP_CHECKSUMS */

  /* Demultiplex this UDP packet between the UDP "connections". */
  for(uip_udp_conn = &uip_udp_conns[0];
      uip_udp_conn < &uip_udp_conns[UIP_UDP_CONNS];
      ++uip_udp_conn) {
    /* If the local UDP port is non-zero, the connection is considered
       to be used. If so, the local port number is checked against the
       destination port number in the received packet. If the two port
       numbers match, the remote port number is checked if the
       connection is bound to a remote port. Finally, if the
       connection is bound to a remote IP address, the source IP
       address of the packet is checked. */
    if(uip_udp_conn->lport != 0 &&
       UDPBUF->destport == uip_udp_conn->lport &&
       (uip_udp_conn->rport == 0 ||
        UDPBUF->srcport == uip_udp_conn->rport) &&
       (uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_zeroes_addr) ||
	uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_ones_addr) ||
	uip_ipaddr_cmp(BUF->srcipaddr, uip_udp_conn->ripaddr))) {
      goto udp_found;
    }
  }
  UIP_LOG("udp: no matching connection found");
  goto drop;

 udp_found:
  UIP_STAT(++uip_stat.udp.recv);
  uip_conn = NULL;
  uip_flags = UIP_NEWDATA;
  uip_sappdata = uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
  uip_slen = 0;
  UIP_UDP_APPCALL();
 udp_send:
  if(uip_slen == 0) {
    goto drop;
  }
  uip_len = uip_slen + UIP_IPUDPH_LEN;

#if UIP_CONF_IPV6
  /* For IPv6, the IP length field does not include the IPv6 IP header
     length. */
  BUF->len[0] = ((uip_len - UIP_IPH_LEN) >> 8);
  BUF->len[1] = ((uip_len - UIP_IPH_LEN) & 0xff);
#else /* UIP_CONF_IPV6 */
  BUF->len[0] = (uip_len >> 8);
  BUF->len[1] = (uip_len & 0xff);
#endif /* UIP_CONF_IPV6 */

  BUF->ttl = uip_udp_conn->ttl;
  BUF->proto = UIP_PROTO_UDP;

  UDPBUF->udplen = HTONS(uip_slen + UIP_UDPH_LEN);
  UDPBUF->udpchksum = 0;

  BUF->srcport  = uip_udp_conn->lport;
  BUF->destport = uip_udp_conn->rport;

  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
  uip_ipaddr_copy(BUF->destipaddr, uip_udp_conn->ripaddr);

  uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPTCPH_LEN];

#if UIP_UDP_CHECKSUMS
  /* Calculate UDP checksum. */
  UDPBUF->udpchksum = ~(uip_udpchksum());
  if(UDPBUF->udpchksum == 0) {
    UDPBUF->udpchksum = 0xffff;
  }
#endif /* UIP_UDP_CHECKSUMS */
  UIP_STAT(++uip_stat.udp.sent);
  goto ip_send_nolen;
#endif /* UIP_UDP */

  /* TCP input processing. */
 tcp_input:
  UIP_STAT(++uip_stat.tcp.recv);

  /* Start of TCP input header processing code. */

  if(uip_tcpchksum() != 0xffff) {   /* Compute and check the TCP
				       checksum. */
    UIP_STAT(++uip_stat.tcp.drop);
    UIP_STAT(++uip_stat.tcp.chkerr);
    UIP_LOG("tcp: bad checksum.");
    goto drop;
  }


  /* Demultiplex this segment. */
  /* First check any active connections. */
  for(uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1];
      ++uip_connr) {
    if(uip_connr->tcpstateflags != UIP_CLOSED &&
       BUF->destport == uip_connr->lport &&
       BUF->srcport == uip_connr->rport &&
       uip_ipaddr_cmp(BUF->srcipaddr, uip_connr->ripaddr)) {
      goto found;
    }
  }

  /* If we didn't find and active connection that expected the packet,
     either this packet is an old duplicate, or this is a SYN packet
     destined for a connection in LISTEN. If the SYN flag isn't set,
     it is an old packet and we send a RST. */
  if((BUF->flags & TCP_CTL) != TCP_SYN) {
    goto reset;
  }

  tmp16 = BUF->destport;
  /* Next, check listening connections. */
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
    if(tmp16 == uip_listenports[c])
      goto found_listen;
  }

  /* No matching connection found, so we send a RST packet. */
  UIP_STAT(++uip_stat.tcp.synrst);
 reset:

  /* We do not send resets in response to resets. */
  if(BUF->flags & TCP_RST) {
    goto drop;
  }

  UIP_STAT(++uip_stat.tcp.rst);

  BUF->flags = TCP_RST | TCP_ACK;
  uip_len = UIP_IPTCPH_LEN;
  BUF->tcpoffset = 5 << 4;

  /* Flip the seqno and ackno fields in the TCP header. */
  c = BUF->seqno[3];
  BUF->seqno[3] = BUF->ackno[3];
  BUF->ackno[3] = c;

  c = BUF->seqno[2];
  BUF->seqno[2] = BUF->ackno[2];
  BUF->ackno[2] = c;

  c = BUF->seqno[1];
  BUF->seqno[1] = BUF->ackno[1];
  BUF->ackno[1] = c;

  c = BUF->seqno[0];
  BUF->seqno[0] = BUF->ackno[0];
  BUF->ackno[0] = c;

  /* We also have to increase the sequence number we are
     acknowledging. If the least significant byte overflowed, we need
     to propagate the carry to the other bytes as well. */
  if(++BUF->ackno[3] == 0) {
    if(++BUF->ackno[2] == 0) {
      if(++BUF->ackno[1] == 0) {
	++BUF->ackno[0];
      }
    }
  }

  /* Swap port numbers. */
  tmp16 = BUF->srcport;
  BUF->srcport = BUF->destport;
  BUF->destport = tmp16;

  /* Swap IP addresses. */
  uip_ipaddr_copy(BUF->destipaddr, BUF->srcipaddr);
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);

  /* And send out the RST packet! */
  goto tcp_send_noconn;

  /* This label will be jumped to if we matched the incoming packet
     with a connection in LISTEN. In that case, we should create a new
     connection and send a SYNACK in return. */
 found_listen:
  /* First we check if there are any connections avaliable. Unused
     connections are kept in the same table as used connections, but
     unused ones have the tcpstate set to CLOSED. Also, connections in
     TIME_WAIT are kept track of and we'll use the oldest one if no
     CLOSED connections are found. Thanks to Eddie C. Dost for a very
     nice algorithm for the TIME_WAIT search. */
  uip_connr = 0;
  for(c = 0; c < UIP_CONNS; ++c) {
    if(uip_conns[c].tcpstateflags == UIP_CLOSED) {
      uip_connr = &uip_conns[c];
      break;
    }
    if(uip_conns[c].tcpstateflags == UIP_TIME_WAIT) {
      if(uip_connr == 0 ||
	 uip_conns[c].timer > uip_connr->timer) {
	uip_connr = &uip_conns[c];
      }
    }
  }

  if(uip_connr == 0) {
    /* All connections are used already, we drop packet and hope that
       the remote end will retransmit the packet at a time when we
       have more spare connections. */
    UIP_STAT(++uip_stat.tcp.syndrop);
    UIP_LOG("tcp: found no unused connections.");
    goto drop;
  }
  uip_conn = uip_connr;

  /* Fill in the necessary fields for the new connection. */
  uip_connr->rto = uip_connr->timer = UIP_RTO;
  uip_connr->sa = 0;
  uip_connr->sv = 4;
  uip_connr->nrtx = 0;
  uip_connr->lport = BUF->destport;
  uip_connr->rport = BUF->srcport;
  uip_ipaddr_copy(uip_connr->ripaddr, BUF->srcipaddr);
  uip_connr->tcpstateflags = UIP_SYN_RCVD;

  uip_connr->snd_nxt[0] = iss[0];
  uip_connr->snd_nxt[1] = iss[1];
  uip_connr->snd_nxt[2] = iss[2];
  uip_connr->snd_nxt[3] = iss[3];
  uip_connr->len = 1;

  /* rcv_nxt should be the seqno from the incoming packet + 1. */
  uip_connr->rcv_nxt[3] = BUF->seqno[3];
  uip_connr->rcv_nxt[2] = BUF->seqno[2];
  uip_connr->rcv_nxt[1] = BUF->seqno[1];
  uip_connr->rcv_nxt[0] = BUF->seqno[0];
  uip_add_rcv_nxt(1);

  /* Parse the TCP MSS option, if present. */
  if((BUF->tcpoffset & 0xf0) > 0x50) {
    for(c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2 ;) {
      opt = uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + c];
      if(opt == TCP_OPT_END) {
	/* End of options. */
	break;
      } else if(opt == TCP_OPT_NOOP) {
	++c;
	/* NOP option. */
      } else if(opt == TCP_OPT_MSS &&
		uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
	/* An MSS option with the right option length. */
	tmp16 = ((u16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
	  (u16_t)uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN + 3 + c];
	uip_connr->initialmss = uip_connr->mss =
	  tmp16 > UIP_TCP_MSS? UIP_TCP_MSS: tmp16;
	
	/* And we are done processing options. */
	break;
      } else {
	/* All other options have a length field, so that we easily
	   can skip past them. */
	if(uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == 0) {
	  /* If the length field is zero, the options are malformed
	     and we don't process them further. */
	  break;
	}
	c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
      }
    }
  }

  /* Our response will be a SYNACK. */
#if UIP_ACTIVE_OPEN
 tcp_send_synack:
  BUF->flags = TCP_ACK;

 tcp_send_syn:
  BUF->flags |= TCP_SYN;
#else /* UIP_ACTIVE_OPEN */
 tcp_send_synack:
  BUF->flags = TCP_SYN | TCP_ACK;
#endif /* UIP_ACTIVE_OPEN */

  /* We send out the TCP Maximum Segment Size option with our
     SYNACK. */
  BUF->optdata[0] = TCP_OPT_MSS;
  BUF->optdata[1] = TCP_OPT_MSS_LEN;
  BUF->optdata[2] = (UIP_TCP_MSS) / 256;
  BUF->optdata[3] = (UIP_TCP_MSS) & 255;
  uip_len = UIP_IPTCPH_LEN + TCP_OPT_MSS_LEN;
  BUF->tcpoffset = ((UIP_TCPH_LEN + TCP_OPT_MSS_LEN) / 4) << 4;
  goto tcp_send;

  /* This label will be jumped to if we found an active connection. */
 found:
  uip_conn = uip_connr;
  uip_flags = 0;
  /* We do a very naive form of TCP reset processing; we just accept
     any RST and kill our connection. We should in fact check if the
     sequence number of this reset is wihtin our advertised window
     before we accept the reset. */
  if(BUF->flags & TCP_RST) {
    uip_connr->tcpstateflags = UIP_CLOSED;
    UIP_LOG("tcp: got reset, aborting connection.");
    uip_flags = UIP_ABORT;
    UIP_APPCALL();
    goto drop;
  }
  /* Calculated the length of the data, if the application has sent
     any data to us. */
  c = (BUF->tcpoffset >> 4) << 2;
  /* uip_len will contain the length of the actual TCP data. This is
     calculated by subtracing the length of the TCP header (in
     c) and the length of the IP header (20 bytes). */
  uip_len = uip_len - c - UIP_IPH_LEN;

  /* First, check if the sequence number of the incoming packet is
     what we're expecting next. If not, we send out an ACK with the
     correct numbers in. */
  if(!(((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT) &&
       ((BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK)))) {
    if((uip_len > 0 || ((BUF->flags & (TCP_SYN | TCP_FIN)) != 0)) &&
       (BUF->seqno[0] != uip_connr->rcv_nxt[0] ||
	BUF->seqno[1] != uip_connr->rcv_nxt[1] ||
	BUF->seqno[2] != uip_connr->rcv_nxt[2] ||
	BUF->seqno[3] != uip_connr->rcv_nxt[3])) {
      goto tcp_send_ack;
    }
  }

  /* Next, check if the incoming segment acknowledges any outstanding
     data. If so, we update the sequence number, reset the length of
     the outstanding data, calculate RTT estimations, and reset the
     retransmission timer. */
  if((BUF->flags & TCP_ACK) && uip_outstanding(uip_connr)) {
    uip_add32(uip_connr->snd_nxt, uip_connr->len);

    if(BUF->ackno[0] == uip_acc32[0] &&
       BUF->ackno[1] == uip_acc32[1] &&
       BUF->ackno[2] == uip_acc32[2] &&
       BUF->ackno[3] == uip_acc32[3]) {
      /* Update sequence number. */
      uip_connr->snd_nxt[0] = uip_acc32[0];
      uip_connr->snd_nxt[1] = uip_acc32[1];
      uip_connr->snd_nxt[2] = uip_acc32[2];
      uip_connr->snd_nxt[3] = uip_acc32[3];
	

      /* Do RTT estimation, unless we have done retransmissions. */
      if(uip_connr->nrtx == 0) {
	signed char m;
	m = uip_connr->rto - uip_connr->timer;
	/* This is taken directly from VJs original code in his paper */
	m = m - (uip_connr->sa >> 3);
	uip_connr->sa += m;
	if(m < 0) {
	  m = -m;
	}
	m = m - (uip_connr->sv >> 2);
	uip_connr->sv += m;
	uip_connr->rto = (uip_connr->sa >> 3) + uip_connr->sv;

      }
      /* Set the acknowledged flag. */
      uip_flags = UIP_ACKDATA;
      /* Reset the retransmission timer. */
      uip_connr->timer = uip_connr->rto;

      /* Reset length of outstanding data. */
      uip_connr->len = 0;
    }

  }

  /* Do different things depending on in what state the connection is. */
  switch(uip_connr->tcpstateflags & UIP_TS_MASK) {
    /* CLOSED and LISTEN are not handled here. CLOSE_WAIT is not
	implemented, since we force the application to close when the
	peer sends a FIN (hence the application goes directly from
	ESTABLISHED to LAST_ACK). */
  case UIP_SYN_RCVD:
    /* In SYN_RCVD we have sent out a SYNACK in response to a SYN, and
       we are waiting for an ACK that acknowledges the data we sent
       out the last time. Therefore, we want to have the UIP_ACKDATA
       flag set. If so, we enter the ESTABLISHED state. */
    if(uip_flags & UIP_ACKDATA) {
      uip_connr->tcpstateflags = UIP_ESTABLISHED;
      uip_flags = UIP_CONNECTED;
      uip_connr->len = 0;
      if(uip_len > 0) {
        uip_flags |= UIP_NEWDATA;
        uip_add_rcv_nxt(uip_len);
      }
      uip_slen = 0;
      UIP_APPCALL();
      goto appsend;
    }
    goto drop;
#if UIP_ACTIVE_OPEN
  case UIP_SYN_SENT:
    /* In SYN_SENT, we wait for a SYNACK that is sent in response to
       our SYN. The rcv_nxt is set to sequence number in the SYNACK
       plus one, and we send an ACK. We move into the ESTABLISHED
       state. */
    if((uip_flags & UIP_ACKDATA) &&
       (BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK)) {

      /* Parse the TCP MSS option, if present. */
      if((BUF->tcpoffset & 0xf0) > 0x50) {
	for(c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2 ;) {
	  opt = uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN + c];
	  if(opt == TCP_OPT_END) {
	    /* End of options. */
	    break;
	  } else if(opt == TCP_OPT_NOOP) {
	    ++c;
	    /* NOP option. */
	  } else if(opt == TCP_OPT_MSS &&
		    uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
	    /* An MSS option with the right option length. */
	    tmp16 = (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
	      uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 3 + c];
	    uip_connr->initialmss =
	      uip_connr->mss = tmp16 > UIP_TCP_MSS? UIP_TCP_MSS: tmp16;

	    /* And we are done processing options. */
	    break;
	  } else {
	    /* All other options have a length field, so that we easily
	       can skip past them. */
	    if(uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == 0) {
	      /* If the length field is zero, the options are malformed
		 and we don't process them further. */
	      break;
	    }
	    c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
	  }
	}
      }
      uip_connr->tcpstateflags = UIP_ESTABLISHED;
      uip_connr->rcv_nxt[0] = BUF->seqno[0];
      uip_connr->rcv_nxt[1] = BUF->seqno[1];
      uip_connr->rcv_nxt[2] = BUF->seqno[2];
      uip_connr->rcv_nxt[3] = BUF->seqno[3];
      uip_add_rcv_nxt(1);
      uip_flags = UIP_CONNECTED | UIP_NEWDATA;
      uip_connr->len = 0;
      uip_len = 0;
      uip_slen = 0;
      UIP_APPCALL();
      goto appsend;
    }
    /* Inform the application that the connection failed */
    uip_flags = UIP_ABORT;
    UIP_APPCALL();
    /* The connection is closed after we send the RST */
    uip_conn->tcpstateflags = UIP_CLOSED;
    goto reset;
#endif /* UIP_ACTIVE_OPEN */

  case UIP_ESTABLISHED:
    /* In the ESTABLISHED state, we call upon the application to feed
    data into the uip_buf. If the UIP_ACKDATA flag is set, the
    application should put new data into the buffer, otherwise we are
    retransmitting an old segment, and the application should put that
    data into the buffer.

    If the incoming packet is a FIN, we should close the connection on
    this side as well, and we send out a FIN and enter the LAST_ACK
    state. We require that there is no outstanding data; otherwise the
    sequence numbers will be screwed up. */

    if(BUF->flags & TCP_FIN && !(uip_connr->tcpstateflags & UIP_STOPPED)) {
      if(uip_outstanding(uip_connr)) {
	goto drop;
      }
      uip_add_rcv_nxt(1 + uip_len);
      uip_flags |= UIP_CLOSE;
      if(uip_len > 0) {
	uip_flags |= UIP_NEWDATA;
      }
      UIP_APPCALL();
      uip_connr->len = 1;
      uip_connr->tcpstateflags = UIP_LAST_ACK;
      uip_connr->nrtx = 0;
    tcp_send_finack:
      BUF->flags = TCP_FIN | TCP_ACK;
      goto tcp_send_nodata;
    }

    /* Check the URG flag. If this is set, the segment carries urgent
       data that we must pass to the application. */
    if((BUF->flags & TCP_URG) != 0) {
#if UIP_URGDATA > 0
      uip_urglen = (BUF->urgp[0] << 8) | BUF->urgp[1];
      if(uip_urglen > uip_len) {
	/* There is more urgent data in the next segment to come. */
	uip_urglen = uip_len;
      }
      uip_add_rcv_nxt(uip_urglen);
      uip_len -= uip_urglen;
      uip_urgdata = uip_appdata;
      uip_appdata += uip_urglen;
    } else {
      uip_urglen = 0;
#else /* UIP_URGDATA > 0 */
      uip_appdata = ((char *)uip_appdata) + ((BUF->urgp[0] << 8) | BUF->urgp[1]);
      uip_len -= (BUF->urgp[0] << 8) | BUF->urgp[1];
#endif /* UIP_URGDATA > 0 */
    }

    /* If uip_len > 0 we have TCP data in the packet, and we flag this
       by setting the UIP_NEWDATA flag and update the sequence number
       we acknowledge. If the application has stopped the dataflow
       using uip_stop(), we must not accept any data packets from the
       remote host. */
    if(uip_len > 0 && !(uip_connr->tcpstateflags & UIP_STOPPED)) {
      uip_flags |= UIP_NEWDATA;
      uip_add_rcv_nxt(uip_len);
    }

    /* Check if the available buffer space advertised by the other end
       is smaller than the initial MSS for this connection. If so, we
       set the current MSS to the window size to ensure that the
       application does not send more data than the other end can
       handle.

       If the remote host advertises a zero window, we set the MSS to
       the initial MSS so that the application will send an entire MSS
       of data. This data will not be acknowledged by the receiver,
       and the application will retransmit it. This is called the
       "persistent timer" and uses the retransmission mechanim.
    */
    tmp16 = ((u16_t)BUF->wnd[0] << 8) + (u16_t)BUF->wnd[1];
    if(tmp16 > uip_connr->initialmss ||
       tmp16 == 0) {
      tmp16 = uip_connr->initialmss;
    }
    uip_connr->mss = tmp16;

    /* If this packet constitutes an ACK for outstanding data (flagged
       by the UIP_ACKDATA flag, we should call the application since it
       might want to send more data. If the incoming packet had data
       from the peer (as flagged by the UIP_NEWDATA flag), the
       application must also be notified.

       When the application is called, the global variable uip_len
       contains the length of the incoming data. The application can
       access the incoming data through the global pointer
       uip_appdata, which usually points UIP_IPTCPH_LEN + UIP_LLH_LEN
       bytes into the uip_buf array.

       If the application wishes to send any data, this data should be
       put into the uip_appdata and the length of the data should be
       put into uip_len. If the application don't have any data to
       send, uip_len must be set to 0. */
    if(uip_flags & (UIP_NEWDATA | UIP_ACKDATA)) {
      uip_slen = 0;
      UIP_APPCALL();

    appsend:

      if(uip_flags & UIP_ABORT) {
	uip_slen = 0;
	uip_connr->tcpstateflags = UIP_CLOSED;
	BUF->flags = TCP_RST | TCP_ACK;
	goto tcp_send_nodata;
      }

      if(uip_flags & UIP_CLOSE) {
	uip_slen = 0;
	uip_connr->len = 1;
	uip_connr->tcpstateflags = UIP_FIN_WAIT_1;
	uip_connr->nrtx = 0;
	BUF->flags = TCP_FIN | TCP_ACK;
	goto tcp_send_nodata;
      }

      /* If uip_slen > 0, the application has data to be sent. */
      if(uip_slen > 0) {

	/* If the connection has acknowledged data, the contents of
	   the ->len variable should be discarded. */
	if((uip_flags & UIP_ACKDATA) != 0) {
	  uip_connr->len = 0;
	}

	/* If the ->len variable is non-zero the connection has
	   already data in transit and cannot send anymore right
	   now. */
	if(uip_connr->len == 0) {

	  /* The application cannot send more than what is allowed by
	     the mss (the minumum of the MSS and the available
	     window). */
	  if(uip_slen > uip_connr->mss) {
	    uip_slen = uip_connr->mss;
	  }

	  /* Remember how much data we send out now so that we know
	     when everything has been acknowledged. */
	  uip_connr->len = uip_slen;
	} else {

	  /* If the application already had unacknowledged data, we
	     make sure that the application does not send (i.e.,
	     retransmit) out more than it previously sent out. */
	  uip_slen = uip_connr->len;
	}
      }
      uip_connr->nrtx = 0;
    apprexmit:
      uip_appdata = uip_sappdata;

      /* If the application has data to be sent, or if the incoming
         packet had new data in it, we must send out a packet. */
      if(uip_slen > 0 && uip_connr->len > 0) {
	/* Add the length of the IP and TCP headers. */
	uip_len = uip_connr->len + UIP_TCPIP_HLEN;
	/* We always set the ACK flag in response packets. */
	BUF->flags = TCP_ACK | TCP_PSH;
	/* Send the packet. */
	goto tcp_send_noopts;
      }
      /* If there is no data to send, just send out a pure ACK if
	 there is newdata. */
      if(uip_flags & UIP_NEWDATA) {
	uip_len = UIP_TCPIP_HLEN;
	BUF->flags = TCP_ACK;
	goto tcp_send_noopts;
      }
    }
    goto drop;
  case UIP_LAST_ACK:
    /* We can close this connection if the peer has acknowledged our
       FIN. This is indicated by the UIP_ACKDATA flag. */
    if(uip_flags & UIP_ACKDATA) {
      uip_connr->tcpstateflags = UIP_CLOSED;
      uip_flags = UIP_CLOSE;
      UIP_APPCALL();
    }
    break;

  case UIP_FIN_WAIT_1:
    /* The application has closed the connection, but the remote host
       hasn't closed its end yet. Thus we do nothing but wait for a
       FIN from the other side. */
    if(uip_len > 0) {
      uip_add_rcv_nxt(uip_len);
    }
    if(BUF->flags & TCP_FIN) {
      if(uip_flags & UIP_ACKDATA) {
	uip_connr->tcpstateflags = UIP_TIME_WAIT;
	uip_connr->timer = 0;
	uip_connr->len = 0;
      } else {
	uip_connr->tcpstateflags = UIP_CLOSING;
      }
      uip_add_rcv_nxt(1);
      uip_flags = UIP_CLOSE;
      UIP_APPCALL();
      goto tcp_send_ack;
    } else if(uip_flags & UIP_ACKDATA) {
      uip_connr->tcpstateflags = UIP_FIN_WAIT_2;
      uip_connr->len = 0;
      goto drop;
    }
    if(uip_len > 0) {
      goto tcp_send_ack;
    }
    goto drop;

  case UIP_FIN_WAIT_2:
    if(uip_len > 0) {
      uip_add_rcv_nxt(uip_len);
    }
    if(BUF->flags & TCP_FIN) {
      uip_connr->tcpstateflags = UIP_TIME_WAIT;
      uip_connr->timer = 0;
      uip_add_rcv_nxt(1);
      uip_flags = UIP_CLOSE;
      UIP_APPCALL();
      goto tcp_send_ack;
    }
    if(uip_len > 0) {
      goto tcp_send_ack;
    }
    goto drop;

  case UIP_TIME_WAIT:
    goto tcp_send_ack;

  case UIP_CLOSING:
    if(uip_flags & UIP_ACKDATA) {
      uip_connr->tcpstateflags = UIP_TIME_WAIT;
      uip_connr->timer = 0;
    }
  }
  goto drop;


  /* We jump here when we are ready to send the packet, and just want
     to set the appropriate TCP sequence numbers in the TCP header. */
 tcp_send_ack:
  BUF->flags = TCP_ACK;
 tcp_send_nodata:
  uip_len = UIP_IPTCPH_LEN;
 tcp_send_noopts:
  BUF->tcpoffset = (UIP_TCPH_LEN / 4) << 4;
 tcp_send:
  /* We're done with the input processing. We are now ready to send a
     reply. Our job is to fill in all the fields of the TCP and IP
     headers before calculating the checksum and finally send the
     packet. */
  BUF->ackno[0] = uip_connr->rcv_nxt[0];
  BUF->ackno[1] = uip_connr->rcv_nxt[1];
  BUF->ackno[2] = uip_connr->rcv_nxt[2];
  BUF->ackno[3] = uip_connr->rcv_nxt[3];

  BUF->seqno[0] = uip_connr->snd_nxt[0];
  BUF->seqno[1] = uip_connr->snd_nxt[1];
  BUF->seqno[2] = uip_connr->snd_nxt[2];
  BUF->seqno[3] = uip_connr->snd_nxt[3];

  BUF->proto = UIP_PROTO_TCP;

  BUF->srcport  = uip_connr->lport;
  BUF->destport = uip_connr->rport;

  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
  uip_ipaddr_copy(BUF->destipaddr, uip_connr->ripaddr);

  if(uip_connr->tcpstateflags & UIP_STOPPED) {
    /* If the connection has issued uip_stop(), we advertise a zero
       window so that the remote host will stop sending data. */
    BUF->wnd[0] = BUF->wnd[1] = 0;
  } else {
    BUF->wnd[0] = ((UIP_RECEIVE_WINDOW) >> 8);
    BUF->wnd[1] = ((UIP_RECEIVE_WINDOW) & 0xff);
  }

 tcp_send_noconn:
  BUF->ttl = UIP_TTL;
#if UIP_CONF_IPV6
  /* For IPv6, the IP length field does not include the IPv6 IP header
     length. */
  BUF->len[0] = ((uip_len - UIP_IPH_LEN) >> 8);
  BUF->len[1] = ((uip_len - UIP_IPH_LEN) & 0xff);
#else /* UIP_CONF_IPV6 */
  BUF->len[0] = (uip_len >> 8);
  BUF->len[1] = (uip_len & 0xff);
#endif /* UIP_CONF_IPV6 */

  BUF->urgp[0] = BUF->urgp[1] = 0;

  /* Calculate TCP checksum. */
  BUF->tcpchksum = 0;
  BUF->tcpchksum = ~(uip_tcpchksum());

#if UIP_UDP  
 ip_send_nolen:
#endif /* UIP_UDP */
 
#if UIP_CONF_IPV6
  BUF->vtc = 0x60;
  BUF->tcflow = 0x00;
  BUF->flow = 0x00;
#else /* UIP_CONF_IPV6 */
  BUF->vhl = 0x45;
  BUF->tos = 0;
  BUF->ipoffset[0] = BUF->ipoffset[1] = 0;
  ++ipid;
  BUF->ipid[0] = ipid >> 8;
  BUF->ipid[1] = ipid & 0xff;
  /* Calculate IP checksum. */
  BUF->ipchksum = 0;
  BUF->ipchksum = ~(uip_ipchksum());
  DEBUG_PRINTF("uip ip_send_nolen: chkecum 0x%04x\n", uip_ipchksum());
#endif /* UIP_CONF_IPV6 */

  UIP_STAT(++uip_stat.tcp.sent);
 send:
  DEBUG_PRINTF("Sending packet with length %d (%d)\n", uip_len,
	       (BUF->len[0] << 8) | BUF->len[1]);

  UIP_STAT(++uip_stat.ip.sent);
  /* Return and let the caller do the actual transmission. */
  uip_flags = 0;
  return;
 drop:
  uip_len = 0;
  uip_flags = 0;


//  DEBUG_EXIT;

  return;
}
/*---------------------------------------------------------------------------*/
u16_t
htons(u16_t val)
{
    838c:	e1a03800 	mov	r3, r0, lsl #16
    8390:	e1a00c23 	mov	r0, r3, lsr #24
    8394:	e1800423 	orr	r0, r0, r3, lsr #8
    8398:	e1a00800 	mov	r0, r0, lsl #16
  return HTONS(val);
}
    839c:	e1a00820 	mov	r0, r0, lsr #16
    83a0:	e12fff1e 	bx	lr

000083a4 <uip_connect>:
    83a4:	e92d47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    83a8:	e1a0a000 	mov	sl, r0
    83ac:	e1a01801 	mov	r1, r1, lsl #16
    83b0:	e1a09821 	mov	r9, r1, lsr #16
    83b4:	e59f3170 	ldr	r3, [pc, #368]	; 852c <prog+0x84e4>
    83b8:	e1d360b0 	ldrh	r6, [r3]
    83bc:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
    83c0:	e28388ff 	add	r8, r3, #16711680	; 0xff0000
    83c4:	e2863001 	add	r3, r6, #1	; 0x1
    83c8:	e1a03803 	mov	r3, r3, lsl #16
    83cc:	e1a06823 	mov	r6, r3, lsr #16
    83d0:	e1560828 	cmp	r6, r8, lsr #16
    83d4:	83a06a01 	movhi	r6, #4096	; 0x1000
    83d8:	e1a07006 	mov	r7, r6
    83dc:	e59f414c 	ldr	r4, [pc, #332]	; 8530 <prog+0x84e8>
    83e0:	e3a05000 	mov	r5, #0	; 0x0
    83e4:	e5d43019 	ldrb	r3, [r4, #25]
    83e8:	e3530000 	cmp	r3, #0	; 0x0
    83ec:	0a000004 	beq	8404 <uip_connect+0x60>
    83f0:	e1a00007 	mov	r0, r7
    83f4:	ebffffe4 	bl	838c <htons>
    83f8:	e1d430b4 	ldrh	r3, [r4, #4]
    83fc:	e1530000 	cmp	r3, r0
    8400:	0affffef 	beq	83c4 <uip_connect+0x20>
    8404:	e2853001 	add	r3, r5, #1	; 0x1
    8408:	e20350ff 	and	r5, r3, #255	; 0xff
    840c:	e2844088 	add	r4, r4, #136	; 0x88
    8410:	e3550028 	cmp	r5, #40	; 0x28
    8414:	1afffff2 	bne	83e4 <uip_connect+0x40>
    8418:	e59f310c 	ldr	r3, [pc, #268]	; 852c <prog+0x84e4>
    841c:	e1c360b0 	strh	r6, [r3]
    8420:	e3a02000 	mov	r2, #0	; 0x0
    8424:	e59f3108 	ldr	r3, [pc, #264]	; 8534 <prog+0x84ec>
    8428:	e5c32000 	strb	r2, [r3]
    842c:	e1a04002 	mov	r4, r2
    8430:	e1a0e002 	mov	lr, r2
    8434:	e59f10f4 	ldr	r1, [pc, #244]	; 8530 <prog+0x84e8>
    8438:	e1a0c001 	mov	ip, r1
    843c:	e5d13019 	ldrb	r3, [r1, #25]
    8440:	e3530000 	cmp	r3, #0	; 0x0
    8444:	059f30e8 	ldreq	r3, [pc, #232]	; 8534 <prog+0x84ec>
    8448:	05c32000 	streqb	r2, [r3]
    844c:	01a04001 	moveq	r4, r1
    8450:	0a000010 	beq	8498 <uip_connect+0xf4>
    8454:	e3530007 	cmp	r3, #7	; 0x7
    8458:	1a000006 	bne	8478 <uip_connect+0xd4>
    845c:	e3540000 	cmp	r4, #0	; 0x0
    8460:	0a000003 	beq	8474 <uip_connect+0xd0>
    8464:	e5d1201a 	ldrb	r2, [r1, #26]
    8468:	e5d4301a 	ldrb	r3, [r4, #26]
    846c:	e1520003 	cmp	r2, r3
    8470:	9a000000 	bls	8478 <uip_connect+0xd4>
    8474:	e1a0400c 	mov	r4, ip
    8478:	e28e3001 	add	r3, lr, #1	; 0x1
    847c:	e20320ff 	and	r2, r3, #255	; 0xff
    8480:	e2811088 	add	r1, r1, #136	; 0x88
    8484:	e3520028 	cmp	r2, #40	; 0x28
    8488:	11a0e002 	movne	lr, r2
    848c:	1affffe9 	bne	8438 <uip_connect+0x94>
    8490:	e59f309c 	ldr	r3, [pc, #156]	; 8534 <prog+0x84ec>
    8494:	e5c32000 	strb	r2, [r3]
    8498:	e3540000 	cmp	r4, #0	; 0x0
    849c:	0a000020 	beq	8524 <uip_connect+0x180>
    84a0:	e3a03002 	mov	r3, #2	; 0x2
    84a4:	e5c43019 	strb	r3, [r4, #25]
    84a8:	e59f2088 	ldr	r2, [pc, #136]	; 8538 <prog+0x84f0>
    84ac:	e5d23000 	ldrb	r3, [r2]
    84b0:	e5c4300c 	strb	r3, [r4, #12]
    84b4:	e5d23001 	ldrb	r3, [r2, #1]
    84b8:	e5c4300d 	strb	r3, [r4, #13]
    84bc:	e5d23002 	ldrb	r3, [r2, #2]
    84c0:	e5c4300e 	strb	r3, [r4, #14]
    84c4:	e5d23003 	ldrb	r3, [r2, #3]
    84c8:	e5c4300f 	strb	r3, [r4, #15]
    84cc:	e3a03e5a 	mov	r3, #1440	; 0x5a0
    84d0:	e2833006 	add	r3, r3, #6	; 0x6
    84d4:	e1c431b2 	strh	r3, [r4, #18]
    84d8:	e1c431b4 	strh	r3, [r4, #20]
    84dc:	e3a03001 	mov	r3, #1	; 0x1
    84e0:	e1c431b0 	strh	r3, [r4, #16]
    84e4:	e3a02000 	mov	r2, #0	; 0x0
    84e8:	e5c4201b 	strb	r2, [r4, #27]
    84ec:	e5c4301a 	strb	r3, [r4, #26]
    84f0:	e2833002 	add	r3, r3, #2	; 0x2
    84f4:	e5c43018 	strb	r3, [r4, #24]
    84f8:	e5c42016 	strb	r2, [r4, #22]
    84fc:	e283300d 	add	r3, r3, #13	; 0xd
    8500:	e5c43017 	strb	r3, [r4, #23]
    8504:	e1a00006 	mov	r0, r6
    8508:	ebffff9f 	bl	838c <htons>
    850c:	e1c400b4 	strh	r0, [r4, #4]
    8510:	e1c490b6 	strh	r9, [r4, #6]
    8514:	e1da30b0 	ldrh	r3, [sl]
    8518:	e1c430b0 	strh	r3, [r4]
    851c:	e1daa0b2 	ldrh	sl, [sl, #2]
    8520:	e1c4a0b2 	strh	sl, [r4, #2]
    8524:	e1a00004 	mov	r0, r4
    8528:	e8bd87f0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    852c:	40001560 	andmi	r1, r0, r0, ror #10
    8530:	4000184c 	andmi	r1, r0, ip, asr #16
    8534:	40001562 	andmi	r1, r0, r2, ror #10
    8538:	4000155c 	andmi	r1, r0, ip, asr r5

0000853c <upper_layer_chksum>:
    853c:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    8540:	e20000ff 	and	r0, r0, #255	; 0xff
    8544:	e59f1054 	ldr	r1, [pc, #84]	; 85a0 <prog+0x8558>
    8548:	e5d13002 	ldrb	r3, [r1, #2]
    854c:	e5d14003 	ldrb	r4, [r1, #3]
    8550:	e0844403 	add	r4, r4, r3, lsl #8
    8554:	e2444014 	sub	r4, r4, #20	; 0x14
    8558:	e1a04804 	mov	r4, r4, lsl #16
    855c:	e1a04824 	mov	r4, r4, lsr #16
    8560:	e241500e 	sub	r5, r1, #14	; 0xe
    8564:	e0840000 	add	r0, r4, r0
    8568:	e1a00800 	mov	r0, r0, lsl #16
    856c:	e1a00820 	mov	r0, r0, lsr #16
    8570:	e281100c 	add	r1, r1, #12	; 0xc
    8574:	e3a02008 	mov	r2, #8	; 0x8
    8578:	ebfffee8 	bl	8120 <chksum>
    857c:	e2851022 	add	r1, r5, #34	; 0x22
    8580:	e1a02004 	mov	r2, r4
    8584:	ebfffee5 	bl	8120 <chksum>
    8588:	e3500000 	cmp	r0, #0	; 0x0
    858c:	03a03801 	moveq	r3, #65536	; 0x10000
    8590:	02430001 	subeq	r0, r3, #1	; 0x1
    8594:	08bd8030 	ldmeqia	sp!, {r4, r5, pc}
    8598:	ebffff7b 	bl	838c <htons>
    859c:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
    85a0:	40002e2e 	andmi	r2, r0, lr, lsr #28

000085a4 <uip_udpchksum>:
    85a4:	e52de004 	str	lr, [sp, #-4]!
    85a8:	e3a00011 	mov	r0, #17	; 0x11
    85ac:	ebffffe2 	bl	853c <upper_layer_chksum>
    85b0:	e49df004 	ldr	pc, [sp], #4

000085b4 <uip_tcpchksum>:
    85b4:	e52de004 	str	lr, [sp, #-4]!
    85b8:	e3a00006 	mov	r0, #6	; 0x6
    85bc:	ebffffde 	bl	853c <upper_layer_chksum>
    85c0:	e49df004 	ldr	pc, [sp], #4

000085c4 <uip_ipchksum>:
    85c4:	e52de004 	str	lr, [sp, #-4]!
    85c8:	e3a00000 	mov	r0, #0	; 0x0
    85cc:	e59f101c 	ldr	r1, [pc, #28]	; 85f0 <prog+0x85a8>
    85d0:	e3a02014 	mov	r2, #20	; 0x14
    85d4:	ebfffed1 	bl	8120 <chksum>
    85d8:	e3500000 	cmp	r0, #0	; 0x0
    85dc:	03a03801 	moveq	r3, #65536	; 0x10000
    85e0:	02430001 	subeq	r0, r3, #1	; 0x1
    85e4:	049df004 	ldreq	pc, [sp], #4
    85e8:	ebffff67 	bl	838c <htons>
    85ec:	e49df004 	ldr	pc, [sp], #4
    85f0:	40002e2e 	andmi	r2, r0, lr, lsr #28

000085f4 <uip_chksum>:
    85f4:	e52de004 	str	lr, [sp, #-4]!
    85f8:	e1a03000 	mov	r3, r0
    85fc:	e1a02801 	mov	r2, r1, lsl #16
    8600:	e3a00000 	mov	r0, #0	; 0x0
    8604:	e1a01003 	mov	r1, r3
    8608:	e1a02822 	mov	r2, r2, lsr #16
    860c:	ebfffec3 	bl	8120 <chksum>
    8610:	ebffff5d 	bl	838c <htons>
    8614:	e49df004 	ldr	pc, [sp], #4

00008618 <uip_send>:
/*---------------------------------------------------------------------------*/
void
uip_send(const void *data, int len)
{
    8618:	e52de004 	str	lr, [sp, #-4]!
    861c:	e1a0c000 	mov	ip, r0
  if(len > 0) {
    8620:	e3510000 	cmp	r1, #0	; 0x0
    8624:	d49df004 	ldrle	pc, [sp], #4
    uip_slen = len;
    8628:	e1a03801 	mov	r3, r1, lsl #16
    862c:	e1a02823 	mov	r2, r3, lsr #16
    8630:	e59f301c 	ldr	r3, [pc, #28]	; 8654 <prog+0x860c>
    8634:	e1c320b0 	strh	r2, [r3]
    if(data != uip_sappdata) {
    8638:	e59f3018 	ldr	r3, [pc, #24]	; 8658 <prog+0x8610>
    863c:	e5930000 	ldr	r0, [r3]
    8640:	e150000c 	cmp	r0, ip
    8644:	049df004 	ldreq	pc, [sp], #4
      memcpy(uip_sappdata, (data), uip_slen);
    8648:	e1a0100c 	mov	r1, ip
    864c:	eb000e90 	bl	c094 <memcpy>
    8650:	e49df004 	ldr	pc, [sp], #4
    8654:	400033fe 	strmid	r3, [r0], -lr
    8658:	40001834 	andmi	r1, r0, r4, lsr r8

0000865c <uip_process>:
    865c:	e92d41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8660:	e24dde7d 	sub	sp, sp, #2000	; 0x7d0
    8664:	e20040ff 	and	r4, r0, #255	; 0xff
    8668:	e59f3f8c 	ldr	r3, [pc, #3980]	; 95fc <prog+0x95b4>
    866c:	e5935000 	ldr	r5, [r3]
    8670:	e3540004 	cmp	r4, #4	; 0x4
    8674:	0a000183 	beq	8c88 <prog+0x8c40>
    8678:	e1a0000d 	mov	r0, sp
    867c:	e59f1f40 	ldr	r1, [pc, #3904]	; 95c4 <prog+0x957c>
    8680:	e1d520b4 	ldrh	r2, [r5, #4]
    8684:	ebffe4d0 	bl	19cc <sprintf>
    8688:	e59f3f38 	ldr	r3, [pc, #3896]	; 95c8 <prog+0x9580>
    868c:	e59f2f74 	ldr	r2, [pc, #3956]	; 9608 <prog+0x95c0>
    8690:	e5823000 	str	r3, [r2]
    8694:	e59f2f68 	ldr	r2, [pc, #3944]	; 9604 <prog+0x95bc>
    8698:	e5823000 	str	r3, [r2]
    869c:	e3540003 	cmp	r4, #3	; 0x3
    86a0:	1a00000b 	bne	86d4 <uip_process+0x78>
    86a4:	e5d53019 	ldrb	r3, [r5, #25]
    86a8:	e203300f 	and	r3, r3, #15	; 0xf
    86ac:	e3530003 	cmp	r3, #3	; 0x3
    86b0:	1a000572 	bne	9c80 <prog+0x9c38>
    86b4:	e1d531b0 	ldrh	r3, [r5, #16]
    86b8:	e3530000 	cmp	r3, #0	; 0x0
    86bc:	1a00056f 	bne	9c80 <prog+0x9c38>
    86c0:	e3a02008 	mov	r2, #8	; 0x8
    86c4:	e59f3f58 	ldr	r3, [pc, #3928]	; 9624 <prog+0x95dc>
    86c8:	e5c32000 	strb	r2, [r3]
    86cc:	ebffe91f 	bl	2b50 <services_appcall>
    86d0:	ea000462 	b	9860 <prog+0x9818>
    86d4:	e3540002 	cmp	r4, #2	; 0x2
    86d8:	1a00006f 	bne	889c <prog+0x8854>
    86dc:	e59f2ee8 	ldr	r2, [pc, #3816]	; 95cc <prog+0x9584>
    86e0:	e5d23003 	ldrb	r3, [r2, #3]
    86e4:	e2833001 	add	r3, r3, #1	; 0x1
    86e8:	e20330ff 	and	r3, r3, #255	; 0xff
    86ec:	e5c23003 	strb	r3, [r2, #3]
    86f0:	e3530000 	cmp	r3, #0	; 0x0
    86f4:	1a00000d 	bne	8730 <uip_process+0xd4>
    86f8:	e5d23002 	ldrb	r3, [r2, #2]
    86fc:	e2833001 	add	r3, r3, #1	; 0x1
    8700:	e20330ff 	and	r3, r3, #255	; 0xff
    8704:	e5c23002 	strb	r3, [r2, #2]
    8708:	e3530000 	cmp	r3, #0	; 0x0
    870c:	1a000007 	bne	8730 <uip_process+0xd4>
    8710:	e5d23001 	ldrb	r3, [r2, #1]
    8714:	e2833001 	add	r3, r3, #1	; 0x1
    8718:	e20330ff 	and	r3, r3, #255	; 0xff
    871c:	e5c23001 	strb	r3, [r2, #1]
    8720:	e3530000 	cmp	r3, #0	; 0x0
    8724:	05d23000 	ldreqb	r3, [r2]
    8728:	02833001 	addeq	r3, r3, #1	; 0x1
    872c:	05c23000 	streqb	r3, [r2]
    8730:	e3a03000 	mov	r3, #0	; 0x0
    8734:	e1a01003 	mov	r1, r3
    8738:	e59f2ee0 	ldr	r2, [pc, #3808]	; 9620 <prog+0x95d8>
    873c:	e1c230b0 	strh	r3, [r2]
    8740:	e59f2ec4 	ldr	r2, [pc, #3780]	; 960c <prog+0x95c4>
    8744:	e1c230b0 	strh	r3, [r2]
    8748:	e5d52019 	ldrb	r2, [r5, #25]
    874c:	e3520005 	cmp	r2, #5	; 0x5
    8750:	13520007 	cmpne	r2, #7	; 0x7
    8754:	1a000006 	bne	8774 <uip_process+0x118>
    8758:	e5d5301a 	ldrb	r3, [r5, #26]
    875c:	e2833001 	add	r3, r3, #1	; 0x1
    8760:	e20330ff 	and	r3, r3, #255	; 0xff
    8764:	e5c5301a 	strb	r3, [r5, #26]
    8768:	e3530078 	cmp	r3, #120	; 0x78
    876c:	05c51019 	streqb	r1, [r5, #25]
    8770:	ea000542 	b	9c80 <prog+0x9c38>
    8774:	e3520000 	cmp	r2, #0	; 0x0
    8778:	0a000540 	beq	9c80 <prog+0x9c38>
    877c:	e1d531b0 	ldrh	r3, [r5, #16]
    8780:	e3530000 	cmp	r3, #0	; 0x0
    8784:	0a00003c 	beq	887c <prog+0x8834>
    8788:	e5d5301a 	ldrb	r3, [r5, #26]
    878c:	e2433001 	sub	r3, r3, #1	; 0x1
    8790:	e20330ff 	and	r3, r3, #255	; 0xff
    8794:	e5c5301a 	strb	r3, [r5, #26]
    8798:	e3530000 	cmp	r3, #0	; 0x0
    879c:	1a000537 	bne	9c80 <prog+0x9c38>
    87a0:	e5d5201b 	ldrb	r2, [r5, #27]
    87a4:	e3520008 	cmp	r2, #8	; 0x8
    87a8:	0a000005 	beq	87c4 <uip_process+0x168>
    87ac:	e5d53019 	ldrb	r3, [r5, #25]
    87b0:	e2433001 	sub	r3, r3, #1	; 0x1
    87b4:	e3530001 	cmp	r3, #1	; 0x1
    87b8:	8a00000b 	bhi	87ec <uip_process+0x190>
    87bc:	e3520005 	cmp	r2, #5	; 0x5
    87c0:	1a000009 	bne	87ec <uip_process+0x190>
    87c4:	e3a03000 	mov	r3, #0	; 0x0
    87c8:	e5c53019 	strb	r3, [r5, #25]
    87cc:	e3e0207f 	mvn	r2, #127	; 0x7f
    87d0:	e59f3e4c 	ldr	r3, [pc, #3660]	; 9624 <prog+0x95dc>
    87d4:	e5c32000 	strb	r2, [r3]
    87d8:	ebffe8dc 	bl	2b50 <services_appcall>
    87dc:	e3a02014 	mov	r2, #20	; 0x14
    87e0:	e59f3e2c 	ldr	r3, [pc, #3628]	; 9614 <prog+0x95cc>
    87e4:	e5c32021 	strb	r2, [r3, #33]
    87e8:	ea0004bb 	b	9adc <prog+0x9a94>
    87ec:	e3520004 	cmp	r2, #4	; 0x4
    87f0:	83a03030 	movhi	r3, #48	; 0x30
    87f4:	93a03003 	movls	r3, #3	; 0x3
    87f8:	91a03213 	movls	r3, r3, lsl r2
    87fc:	920330ff 	andls	r3, r3, #255	; 0xff
    8800:	e5c5301a 	strb	r3, [r5, #26]
    8804:	e5d5301b 	ldrb	r3, [r5, #27]
    8808:	e2833001 	add	r3, r3, #1	; 0x1
    880c:	e5c5301b 	strb	r3, [r5, #27]
    8810:	e59f2e04 	ldr	r2, [pc, #3588]	; 961c <prog+0x95d4>
    8814:	e1d232b8 	ldrh	r3, [r2, #40]
    8818:	e2833001 	add	r3, r3, #1	; 0x1
    881c:	e1c232b8 	strh	r3, [r2, #40]
    8820:	e5d53019 	ldrb	r3, [r5, #25]
    8824:	e203300f 	and	r3, r3, #15	; 0xf
    8828:	e2433001 	sub	r3, r3, #1	; 0x1
    882c:	e3530007 	cmp	r3, #7	; 0x7
    8830:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    8834:	ea000511 	b	9c80 <prog+0x9c38>
    8838:	00009248 	andeq	r9, r0, r8, asr #4
    883c:	00008858 	andeq	r8, r0, r8, asr r8
    8840:	00008868 	andeq	r8, r0, r8, ror #16
    8844:	00009788 	andeq	r9, r0, r8, lsl #15
    8848:	00009c80 	andeq	r9, r0, r0, lsl #25
    884c:	00009788 	andeq	r9, r0, r8, lsl #15
    8850:	00009c80 	andeq	r9, r0, r0, lsl #25
    8854:	00009788 	andeq	r9, r0, r8, lsl #15
    8858:	e3a02000 	mov	r2, #0	; 0x0
    885c:	e59f3db0 	ldr	r3, [pc, #3504]	; 9614 <prog+0x95cc>
    8860:	e5c32021 	strb	r2, [r3, #33]
    8864:	ea00027a 	b	9254 <prog+0x920c>
    8868:	e3a02004 	mov	r2, #4	; 0x4
    886c:	e59f3db0 	ldr	r3, [pc, #3504]	; 9624 <prog+0x95dc>
    8870:	e5c32000 	strb	r2, [r3]
    8874:	ebffe8b5 	bl	2b50 <services_appcall>
    8878:	ea00042a 	b	9928 <prog+0x98e0>
    887c:	e202300f 	and	r3, r2, #15	; 0xf
    8880:	e3530003 	cmp	r3, #3	; 0x3
    8884:	1a0004fd 	bne	9c80 <prog+0x9c38>
    8888:	e3a02008 	mov	r2, #8	; 0x8
    888c:	e59f3d90 	ldr	r3, [pc, #3472]	; 9624 <prog+0x95dc>
    8890:	e5c32000 	strb	r2, [r3]
    8894:	ebffe8ad 	bl	2b50 <services_appcall>
    8898:	ea0003f0 	b	9860 <prog+0x9818>
    889c:	e3540005 	cmp	r4, #5	; 0x5
    88a0:	1a000015 	bne	88fc <prog+0x88b4>
    88a4:	e59f3d24 	ldr	r3, [pc, #3364]	; 95d0 <prog+0x9588>
    88a8:	e5933000 	ldr	r3, [r3]
    88ac:	e1d330b4 	ldrh	r3, [r3, #4]
    88b0:	e3530000 	cmp	r3, #0	; 0x0
    88b4:	0a0004f1 	beq	9c80 <prog+0x9c38>
    88b8:	e3a01000 	mov	r1, #0	; 0x0
    88bc:	e59f3d38 	ldr	r3, [pc, #3384]	; 95fc <prog+0x95b4>
    88c0:	e5831000 	str	r1, [r3]
    88c4:	e59f2d08 	ldr	r2, [pc, #3336]	; 95d4 <prog+0x958c>
    88c8:	e59f3d38 	ldr	r3, [pc, #3384]	; 9608 <prog+0x95c0>
    88cc:	e5832000 	str	r2, [r3]
    88d0:	e59f3d2c 	ldr	r3, [pc, #3372]	; 9604 <prog+0x95bc>
    88d4:	e5832000 	str	r2, [r3]
    88d8:	e59f3d2c 	ldr	r3, [pc, #3372]	; 960c <prog+0x95c4>
    88dc:	e1c310b0 	strh	r1, [r3]
    88e0:	e59f3d38 	ldr	r3, [pc, #3384]	; 9620 <prog+0x95d8>
    88e4:	e1c310b0 	strh	r1, [r3]
    88e8:	e3a02008 	mov	r2, #8	; 0x8
    88ec:	e59f3d30 	ldr	r3, [pc, #3376]	; 9624 <prog+0x95dc>
    88f0:	e5c32000 	strb	r2, [r3]
    88f4:	ebffed5e 	bl	3e74 <dhcpc_appcall>
    88f8:	ea0000e2 	b	8c88 <prog+0x8c40>
    88fc:	e59f2d18 	ldr	r2, [pc, #3352]	; 961c <prog+0x95d4>
    8900:	e1d230b2 	ldrh	r3, [r2, #2]
    8904:	e2833001 	add	r3, r3, #1	; 0x1
    8908:	e1c230b2 	strh	r3, [r2, #2]
    890c:	e59f4d00 	ldr	r4, [pc, #3328]	; 9614 <prog+0x95cc>
    8910:	e5d43000 	ldrb	r3, [r4]
    8914:	e3530045 	cmp	r3, #69	; 0x45
    8918:	0a000006 	beq	8938 <prog+0x88f0>
    891c:	e1d230b0 	ldrh	r3, [r2]
    8920:	e2833001 	add	r3, r3, #1	; 0x1
    8924:	e1c230b0 	strh	r3, [r2]
    8928:	e1d230b6 	ldrh	r3, [r2, #6]
    892c:	e2833001 	add	r3, r3, #1	; 0x1
    8930:	e1c230b6 	strh	r3, [r2, #6]
    8934:	ea0004d1 	b	9c80 <prog+0x9c38>
    8938:	e5d43002 	ldrb	r3, [r4, #2]
    893c:	e5d42003 	ldrb	r2, [r4, #3]
    8940:	e0822403 	add	r2, r2, r3, lsl #8
    8944:	e59f1cd4 	ldr	r1, [pc, #3284]	; 9620 <prog+0x95d8>
    8948:	e1d130b0 	ldrh	r3, [r1]
    894c:	e1520003 	cmp	r2, r3
    8950:	ca0004ca 	bgt	9c80 <prog+0x9c38>
    8954:	e1c120b0 	strh	r2, [r1]
    8958:	e5d43006 	ldrb	r3, [r4, #6]
    895c:	e313003f 	tst	r3, #63	; 0x3f
    8960:	1a000002 	bne	8970 <prog+0x8928>
    8964:	e5d43007 	ldrb	r3, [r4, #7]
    8968:	e3530000 	cmp	r3, #0	; 0x0
    896c:	0a000007 	beq	8990 <prog+0x8948>
    8970:	e59f3ca4 	ldr	r3, [pc, #3236]	; 961c <prog+0x95d4>
    8974:	e1d320b0 	ldrh	r2, [r3]
    8978:	e2822001 	add	r2, r2, #1	; 0x1
    897c:	e1c320b0 	strh	r2, [r3]
    8980:	e1d320bc 	ldrh	r2, [r3, #12]
    8984:	e2822001 	add	r2, r2, #1	; 0x1
    8988:	e1c320bc 	strh	r2, [r3, #12]
    898c:	ea0004bb 	b	9c80 <prog+0x9c38>
    8990:	e59f3c78 	ldr	r3, [pc, #3192]	; 9610 <prog+0x95c8>
    8994:	e1d320b0 	ldrh	r2, [r3]
    8998:	e3a07000 	mov	r7, #0	; 0x0
    899c:	e1520007 	cmp	r2, r7
    89a0:	1a000002 	bne	89b0 <prog+0x8968>
    89a4:	e1d330b2 	ldrh	r3, [r3, #2]
    89a8:	e1530007 	cmp	r3, r7
    89ac:	0a00000d 	beq	89e8 <prog+0x89a0>
    89b0:	e59f1c20 	ldr	r1, [pc, #3104]	; 95d8 <prog+0x9590>
    89b4:	e1d131be 	ldrh	r3, [r1, #30]
    89b8:	e1530002 	cmp	r3, r2
    89bc:	1a000004 	bne	89d4 <prog+0x898c>
    89c0:	e1d132b0 	ldrh	r3, [r1, #32]
    89c4:	e59f2c44 	ldr	r2, [pc, #3140]	; 9610 <prog+0x95c8>
    89c8:	e1d220b2 	ldrh	r2, [r2, #2]
    89cc:	e1530002 	cmp	r3, r2
    89d0:	0a000004 	beq	89e8 <prog+0x89a0>
    89d4:	e59f2c40 	ldr	r2, [pc, #3136]	; 961c <prog+0x95d4>
    89d8:	e1d230b0 	ldrh	r3, [r2]
    89dc:	e2833001 	add	r3, r3, #1	; 0x1
    89e0:	e1c230b0 	strh	r3, [r2]
    89e4:	ea0004a5 	b	9c80 <prog+0x9c38>
    89e8:	ebfffef5 	bl	85c4 <uip_ipchksum>
    89ec:	e3a03801 	mov	r3, #65536	; 0x10000
    89f0:	e2433001 	sub	r3, r3, #1	; 0x1
    89f4:	e1500003 	cmp	r0, r3
    89f8:	0a000007 	beq	8a1c <prog+0x89d4>
    89fc:	e59f3c18 	ldr	r3, [pc, #3096]	; 961c <prog+0x95d4>
    8a00:	e1d320b0 	ldrh	r2, [r3]
    8a04:	e2822001 	add	r2, r2, #1	; 0x1
    8a08:	e1c320b0 	strh	r2, [r3]
    8a0c:	e1d320be 	ldrh	r2, [r3, #14]
    8a10:	e2822001 	add	r2, r2, #1	; 0x1
    8a14:	e1c320be 	strh	r2, [r3, #14]
    8a18:	ea000498 	b	9c80 <prog+0x9c38>
    8a1c:	e5d43009 	ldrb	r3, [r4, #9]
    8a20:	e3530006 	cmp	r3, #6	; 0x6
    8a24:	0a0000d8 	beq	8d8c <prog+0x8d44>
    8a28:	e3530011 	cmp	r3, #17	; 0x11
    8a2c:	0a000037 	beq	8b10 <prog+0x8ac8>
    8a30:	e3530001 	cmp	r3, #1	; 0x1
    8a34:	0a000007 	beq	8a58 <prog+0x8a10>
    8a38:	e59f3bdc 	ldr	r3, [pc, #3036]	; 961c <prog+0x95d4>
    8a3c:	e1d320b0 	ldrh	r2, [r3]
    8a40:	e2822001 	add	r2, r2, #1	; 0x1
    8a44:	e1c320b0 	strh	r2, [r3]
    8a48:	e1d321b0 	ldrh	r2, [r3, #16]
    8a4c:	e2822001 	add	r2, r2, #1	; 0x1
    8a50:	e1c321b0 	strh	r2, [r3, #16]
    8a54:	ea000489 	b	9c80 <prog+0x9c38>
    8a58:	e59f2bbc 	ldr	r2, [pc, #3004]	; 961c <prog+0x95d4>
    8a5c:	e1d231b6 	ldrh	r3, [r2, #22]
    8a60:	e2833001 	add	r3, r3, #1	; 0x1
    8a64:	e1c231b6 	strh	r3, [r2, #22]
    8a68:	e59f1ba4 	ldr	r1, [pc, #2980]	; 9614 <prog+0x95cc>
    8a6c:	e5d13014 	ldrb	r3, [r1, #20]
    8a70:	e3530008 	cmp	r3, #8	; 0x8
    8a74:	0a000006 	beq	8a94 <prog+0x8a4c>
    8a78:	e1d231b4 	ldrh	r3, [r2, #20]
    8a7c:	e2833001 	add	r3, r3, #1	; 0x1
    8a80:	e1c231b4 	strh	r3, [r2, #20]
    8a84:	e1d231ba 	ldrh	r3, [r2, #26]
    8a88:	e2833001 	add	r3, r3, #1	; 0x1
    8a8c:	e1c231ba 	strh	r3, [r2, #26]
    8a90:	ea00047a 	b	9c80 <prog+0x9c38>
    8a94:	e3a03000 	mov	r3, #0	; 0x0
    8a98:	e5c13014 	strb	r3, [r1, #20]
    8a9c:	e5d12016 	ldrb	r2, [r1, #22]
    8aa0:	e5d13017 	ldrb	r3, [r1, #23]
    8aa4:	e1822403 	orr	r2, r2, r3, lsl #8
    8aa8:	e3a03cff 	mov	r3, #65280	; 0xff00
    8aac:	e28330f6 	add	r3, r3, #246	; 0xf6
    8ab0:	e1520003 	cmp	r2, r3
    8ab4:	82823009 	addhi	r3, r2, #9	; 0x9
    8ab8:	85c13016 	strhib	r3, [r1, #22]
    8abc:	81a03423 	movhi	r3, r3, lsr #8
    8ac0:	85c13017 	strhib	r3, [r1, #23]
    8ac4:	92823008 	addls	r3, r2, #8	; 0x8
    8ac8:	95c13016 	strlsb	r3, [r1, #22]
    8acc:	91a03423 	movls	r3, r3, lsr #8
    8ad0:	95c13017 	strlsb	r3, [r1, #23]
    8ad4:	e59f3afc 	ldr	r3, [pc, #2812]	; 95d8 <prog+0x9590>
    8ad8:	e1d301ba 	ldrh	r0, [r3, #26]
    8adc:	e1c301be 	strh	r0, [r3, #30]
    8ae0:	e1d311bc 	ldrh	r1, [r3, #28]
    8ae4:	e1c312b0 	strh	r1, [r3, #32]
    8ae8:	e59f2b20 	ldr	r2, [pc, #2848]	; 9610 <prog+0x95c8>
    8aec:	e1d2c0b0 	ldrh	ip, [r2]
    8af0:	e1c3c1ba 	strh	ip, [r3, #26]
    8af4:	e1d220b2 	ldrh	r2, [r2, #2]
    8af8:	e1c321bc 	strh	r2, [r3, #28]
    8afc:	e59f2b18 	ldr	r2, [pc, #2840]	; 961c <prog+0x95d4>
    8b00:	e1d231b8 	ldrh	r3, [r2, #24]
    8b04:	e2833001 	add	r3, r3, #1	; 0x1
    8b08:	e1c231b8 	strh	r3, [r2, #24]
    8b0c:	ea000453 	b	9c60 <prog+0x9c18>
    8b10:	e59f2b08 	ldr	r2, [pc, #2824]	; 9620 <prog+0x95d8>
    8b14:	e1d230b0 	ldrh	r3, [r2]
    8b18:	e243301c 	sub	r3, r3, #28	; 0x1c
    8b1c:	e1c230b0 	strh	r3, [r2]
    8b20:	e59f2aac 	ldr	r2, [pc, #2732]	; 95d4 <prog+0x958c>
    8b24:	e59f3adc 	ldr	r3, [pc, #2780]	; 9608 <prog+0x95c0>
    8b28:	e5832000 	str	r2, [r3]
    8b2c:	e242401c 	sub	r4, r2, #28	; 0x1c
    8b30:	e5d4201a 	ldrb	r2, [r4, #26]
    8b34:	e5d4301b 	ldrb	r3, [r4, #27]
    8b38:	e1923403 	orrs	r3, r2, r3, lsl #8
    8b3c:	0a00000c 	beq	8b74 <prog+0x8b2c>
    8b40:	ebfffe97 	bl	85a4 <uip_udpchksum>
    8b44:	e3a03801 	mov	r3, #65536	; 0x10000
    8b48:	e2433001 	sub	r3, r3, #1	; 0x1
    8b4c:	e1500003 	cmp	r0, r3
    8b50:	0a000007 	beq	8b74 <prog+0x8b2c>
    8b54:	e59f3ac0 	ldr	r3, [pc, #2752]	; 961c <prog+0x95d4>
    8b58:	e1d323b0 	ldrh	r2, [r3, #48]
    8b5c:	e2822001 	add	r2, r2, #1	; 0x1
    8b60:	e1c323b0 	strh	r2, [r3, #48]
    8b64:	e1d323b6 	ldrh	r2, [r3, #54]
    8b68:	e2822001 	add	r2, r2, #1	; 0x1
    8b6c:	e1c323b6 	strh	r2, [r3, #54]
    8b70:	ea000442 	b	9c80 <prog+0x9c38>
    8b74:	e59f3a60 	ldr	r3, [pc, #2656]	; 95dc <prog+0x9594>
    8b78:	e59f2a50 	ldr	r2, [pc, #2640]	; 95d0 <prog+0x9588>
    8b7c:	e5823000 	str	r3, [r2]
    8b80:	e3a02801 	mov	r2, #65536	; 0x10000
    8b84:	e2425001 	sub	r5, r2, #1	; 0x1
    8b88:	e1a0e005 	mov	lr, r5
    8b8c:	e3a06000 	mov	r6, #0	; 0x0
    8b90:	e1a00003 	mov	r0, r3
    8b94:	e1a0c000 	mov	ip, r0
    8b98:	e1d010b4 	ldrh	r1, [r0, #4]
    8b9c:	e3510000 	cmp	r1, #0	; 0x0
    8ba0:	0a00001f 	beq	8c24 <prog+0x8bdc>
    8ba4:	e5d43016 	ldrb	r3, [r4, #22]
    8ba8:	e5d42017 	ldrb	r2, [r4, #23]
    8bac:	e1833402 	orr	r3, r3, r2, lsl #8
    8bb0:	e1510003 	cmp	r1, r3
    8bb4:	1a00001a 	bne	8c24 <prog+0x8bdc>
    8bb8:	e1d010b6 	ldrh	r1, [r0, #6]
    8bbc:	e3510000 	cmp	r1, #0	; 0x0
    8bc0:	0a000004 	beq	8bd8 <prog+0x8b90>
    8bc4:	e5d43014 	ldrb	r3, [r4, #20]
    8bc8:	e5d42015 	ldrb	r2, [r4, #21]
    8bcc:	e1833402 	orr	r3, r3, r2, lsl #8
    8bd0:	e1510003 	cmp	r1, r3
    8bd4:	1a000012 	bne	8c24 <prog+0x8bdc>
    8bd8:	e1dc20b0 	ldrh	r2, [ip]
    8bdc:	e1570002 	cmp	r7, r2
    8be0:	1a000002 	bne	8bf0 <prog+0x8ba8>
    8be4:	e1dc30b2 	ldrh	r3, [ip, #2]
    8be8:	e1530006 	cmp	r3, r6
    8bec:	0a000013 	beq	8c40 <prog+0x8bf8>
    8bf0:	e1520005 	cmp	r2, r5
    8bf4:	1a000002 	bne	8c04 <prog+0x8bbc>
    8bf8:	e1dc30b2 	ldrh	r3, [ip, #2]
    8bfc:	e153000e 	cmp	r3, lr
    8c00:	0a00000e 	beq	8c40 <prog+0x8bf8>
    8c04:	e59f19cc 	ldr	r1, [pc, #2508]	; 95d8 <prog+0x9590>
    8c08:	e1d131ba 	ldrh	r3, [r1, #26]
    8c0c:	e1530002 	cmp	r3, r2
    8c10:	1a000003 	bne	8c24 <prog+0x8bdc>
    8c14:	e1d121bc 	ldrh	r2, [r1, #28]
    8c18:	e1dc30b2 	ldrh	r3, [ip, #2]
    8c1c:	e1520003 	cmp	r2, r3
    8c20:	0a000006 	beq	8c40 <prog+0x8bf8>
    8c24:	e2800044 	add	r0, r0, #68	; 0x44
    8c28:	e59f39a0 	ldr	r3, [pc, #2464]	; 95d0 <prog+0x9588>
    8c2c:	e5830000 	str	r0, [r3]
    8c30:	e59f39a8 	ldr	r3, [pc, #2472]	; 95e0 <prog+0x9598>
    8c34:	e1500003 	cmp	r0, r3
    8c38:	2a000410 	bcs	9c80 <prog+0x9c38>
    8c3c:	eaffffd4 	b	8b94 <prog+0x8b4c>
    8c40:	e59f29d4 	ldr	r2, [pc, #2516]	; 961c <prog+0x95d4>
    8c44:	e1d233b2 	ldrh	r3, [r2, #50]
    8c48:	e2833001 	add	r3, r3, #1	; 0x1
    8c4c:	e1c233b2 	strh	r3, [r2, #50]
    8c50:	e3a01000 	mov	r1, #0	; 0x0
    8c54:	e59f39a0 	ldr	r3, [pc, #2464]	; 95fc <prog+0x95b4>
    8c58:	e5831000 	str	r1, [r3]
    8c5c:	e3a02002 	mov	r2, #2	; 0x2
    8c60:	e59f39bc 	ldr	r3, [pc, #2492]	; 9624 <prog+0x95dc>
    8c64:	e5c32000 	strb	r2, [r3]
    8c68:	e59f2964 	ldr	r2, [pc, #2404]	; 95d4 <prog+0x958c>
    8c6c:	e59f3994 	ldr	r3, [pc, #2452]	; 9608 <prog+0x95c0>
    8c70:	e5832000 	str	r2, [r3]
    8c74:	e59f3988 	ldr	r3, [pc, #2440]	; 9604 <prog+0x95bc>
    8c78:	e5832000 	str	r2, [r3]
    8c7c:	e59f3988 	ldr	r3, [pc, #2440]	; 960c <prog+0x95c4>
    8c80:	e1c310b0 	strh	r1, [r3]
    8c84:	ebffec7a 	bl	3e74 <dhcpc_appcall>
    8c88:	e59f397c 	ldr	r3, [pc, #2428]	; 960c <prog+0x95c4>
    8c8c:	e1d300b0 	ldrh	r0, [r3]
    8c90:	e3500000 	cmp	r0, #0	; 0x0
    8c94:	0a0003f9 	beq	9c80 <prog+0x9c38>
    8c98:	e280301c 	add	r3, r0, #28	; 0x1c
    8c9c:	e59f297c 	ldr	r2, [pc, #2428]	; 9620 <prog+0x95d8>
    8ca0:	e1c230b0 	strh	r3, [r2]
    8ca4:	e59f4968 	ldr	r4, [pc, #2408]	; 9614 <prog+0x95cc>
    8ca8:	e1a03423 	mov	r3, r3, lsr #8
    8cac:	e5c43002 	strb	r3, [r4, #2]
    8cb0:	e1d230b0 	ldrh	r3, [r2]
    8cb4:	e3e05000 	mvn	r5, #0	; 0x0
    8cb8:	e5c43003 	strb	r3, [r4, #3]
    8cbc:	e59f390c 	ldr	r3, [pc, #2316]	; 95d0 <prog+0x9588>
    8cc0:	e5931000 	ldr	r1, [r3]
    8cc4:	e5d13008 	ldrb	r3, [r1, #8]
    8cc8:	e5c43008 	strb	r3, [r4, #8]
    8ccc:	e3a03011 	mov	r3, #17	; 0x11
    8cd0:	e5c43009 	strb	r3, [r4, #9]
    8cd4:	e2803008 	add	r3, r0, #8	; 0x8
    8cd8:	e1a03803 	mov	r3, r3, lsl #16
    8cdc:	e1a02c23 	mov	r2, r3, lsr #24
    8ce0:	e1822423 	orr	r2, r2, r3, lsr #8
    8ce4:	e3a03000 	mov	r3, #0	; 0x0
    8ce8:	e5c42018 	strb	r2, [r4, #24]
    8cec:	e1a02422 	mov	r2, r2, lsr #8
    8cf0:	e5c42019 	strb	r2, [r4, #25]
    8cf4:	e5c4301a 	strb	r3, [r4, #26]
    8cf8:	e5c4301b 	strb	r3, [r4, #27]
    8cfc:	e5d13004 	ldrb	r3, [r1, #4]
    8d00:	e5c43014 	strb	r3, [r4, #20]
    8d04:	e5d13005 	ldrb	r3, [r1, #5]
    8d08:	e5c43015 	strb	r3, [r4, #21]
    8d0c:	e5d13006 	ldrb	r3, [r1, #6]
    8d10:	e5c43016 	strb	r3, [r4, #22]
    8d14:	e5d13007 	ldrb	r3, [r1, #7]
    8d18:	e5c43017 	strb	r3, [r4, #23]
    8d1c:	e244300e 	sub	r3, r4, #14	; 0xe
    8d20:	e59f28e8 	ldr	r2, [pc, #2280]	; 9610 <prog+0x95c8>
    8d24:	e1d200b0 	ldrh	r0, [r2]
    8d28:	e1c301ba 	strh	r0, [r3, #26]
    8d2c:	e1d220b2 	ldrh	r2, [r2, #2]
    8d30:	e1c321bc 	strh	r2, [r3, #28]
    8d34:	e1d120b0 	ldrh	r2, [r1]
    8d38:	e1c321be 	strh	r2, [r3, #30]
    8d3c:	e1d110b2 	ldrh	r1, [r1, #2]
    8d40:	e1c312b0 	strh	r1, [r3, #32]
    8d44:	e2833036 	add	r3, r3, #54	; 0x36
    8d48:	e59f28b8 	ldr	r2, [pc, #2232]	; 9608 <prog+0x95c0>
    8d4c:	e5823000 	str	r3, [r2]
    8d50:	ebfffe13 	bl	85a4 <uip_udpchksum>
    8d54:	e1e00000 	mvn	r0, r0
    8d58:	e1a00800 	mov	r0, r0, lsl #16
    8d5c:	e1a00820 	mov	r0, r0, lsr #16
    8d60:	e5c4001a 	strb	r0, [r4, #26]
    8d64:	e1a03420 	mov	r3, r0, lsr #8
    8d68:	e5c4301b 	strb	r3, [r4, #27]
    8d6c:	e3500000 	cmp	r0, #0	; 0x0
    8d70:	05c4501a 	streqb	r5, [r4, #26]
    8d74:	05c4501b 	streqb	r5, [r4, #27]
    8d78:	e59f289c 	ldr	r2, [pc, #2204]	; 961c <prog+0x95d4>
    8d7c:	e1d233b4 	ldrh	r3, [r2, #52]
    8d80:	e2833001 	add	r3, r3, #1	; 0x1
    8d84:	e1c233b4 	strh	r3, [r2, #52]
    8d88:	ea000399 	b	9bf4 <prog+0x9bac>
    8d8c:	e59f5888 	ldr	r5, [pc, #2184]	; 961c <prog+0x95d4>
    8d90:	e1d531be 	ldrh	r3, [r5, #30]
    8d94:	e2833001 	add	r3, r3, #1	; 0x1
    8d98:	e1c531be 	strh	r3, [r5, #30]
    8d9c:	ebfffe04 	bl	85b4 <uip_tcpchksum>
    8da0:	e3a03801 	mov	r3, #65536	; 0x10000
    8da4:	e2433001 	sub	r3, r3, #1	; 0x1
    8da8:	e1500003 	cmp	r0, r3
    8dac:	0a000006 	beq	8dcc <prog+0x8d84>
    8db0:	e1d531bc 	ldrh	r3, [r5, #28]
    8db4:	e2833001 	add	r3, r3, #1	; 0x1
    8db8:	e1c531bc 	strh	r3, [r5, #28]
    8dbc:	e1d532b2 	ldrh	r3, [r5, #34]
    8dc0:	e2833001 	add	r3, r3, #1	; 0x1
    8dc4:	e1c532b2 	strh	r3, [r5, #34]
    8dc8:	ea0003ac 	b	9c80 <prog+0x9c38>
    8dcc:	e59f5810 	ldr	r5, [pc, #2064]	; 95e4 <prog+0x959c>
    8dd0:	e5d53019 	ldrb	r3, [r5, #25]
    8dd4:	e3530000 	cmp	r3, #0	; 0x0
    8dd8:	0a000014 	beq	8e30 <prog+0x8de8>
    8ddc:	e5d43016 	ldrb	r3, [r4, #22]
    8de0:	e5d42017 	ldrb	r2, [r4, #23]
    8de4:	e1d510b4 	ldrh	r1, [r5, #4]
    8de8:	e1833402 	orr	r3, r3, r2, lsl #8
    8dec:	e1510003 	cmp	r1, r3
    8df0:	1a00000e 	bne	8e30 <prog+0x8de8>
    8df4:	e5d43014 	ldrb	r3, [r4, #20]
    8df8:	e5d42015 	ldrb	r2, [r4, #21]
    8dfc:	e1d510b6 	ldrh	r1, [r5, #6]
    8e00:	e1833402 	orr	r3, r3, r2, lsl #8
    8e04:	e1510003 	cmp	r1, r3
    8e08:	1a000008 	bne	8e30 <prog+0x8de8>
    8e0c:	e59f17c4 	ldr	r1, [pc, #1988]	; 95d8 <prog+0x9590>
    8e10:	e1d121ba 	ldrh	r2, [r1, #26]
    8e14:	e1d530b0 	ldrh	r3, [r5]
    8e18:	e1520003 	cmp	r2, r3
    8e1c:	1a000003 	bne	8e30 <prog+0x8de8>
    8e20:	e1d121bc 	ldrh	r2, [r1, #28]
    8e24:	e1d530b2 	ldrh	r3, [r5, #2]
    8e28:	e1520003 	cmp	r2, r3
    8e2c:	0a00011a 	beq	929c <prog+0x9254>
    8e30:	e2855088 	add	r5, r5, #136	; 0x88
    8e34:	e59f37ac 	ldr	r3, [pc, #1964]	; 95e8 <prog+0x95a0>
    8e38:	e1550003 	cmp	r5, r3
    8e3c:	9affffe3 	bls	8dd0 <prog+0x8d88>
    8e40:	e5d43021 	ldrb	r3, [r4, #33]
    8e44:	e203303f 	and	r3, r3, #63	; 0x3f
    8e48:	e3530002 	cmp	r3, #2	; 0x2
    8e4c:	1a000016 	bne	8eac <prog+0x8e64>
    8e50:	e5d42016 	ldrb	r2, [r4, #22]
    8e54:	e5d43017 	ldrb	r3, [r4, #23]
    8e58:	e1820403 	orr	r0, r2, r3, lsl #8
    8e5c:	e59f379c 	ldr	r3, [pc, #1948]	; 9600 <prog+0x95b8>
    8e60:	e1c300b0 	strh	r0, [r3]
    8e64:	e3a02000 	mov	r2, #0	; 0x0
    8e68:	e59f3788 	ldr	r3, [pc, #1928]	; 95f8 <prog+0x95b0>
    8e6c:	e5c32000 	strb	r2, [r3]
    8e70:	e59f1774 	ldr	r1, [pc, #1908]	; 95ec <prog+0x95a4>
    8e74:	e1d130b0 	ldrh	r3, [r1]
    8e78:	e1530000 	cmp	r3, r0
    8e7c:	0a00005f 	beq	9000 <prog+0x8fb8>
    8e80:	e2823001 	add	r3, r2, #1	; 0x1
    8e84:	e20320ff 	and	r2, r3, #255	; 0xff
    8e88:	e2811002 	add	r1, r1, #2	; 0x2
    8e8c:	e3520028 	cmp	r2, #40	; 0x28
    8e90:	1afffff7 	bne	8e74 <prog+0x8e2c>
    8e94:	e59f375c 	ldr	r3, [pc, #1884]	; 95f8 <prog+0x95b0>
    8e98:	e5c32000 	strb	r2, [r3]
    8e9c:	e59f2778 	ldr	r2, [pc, #1912]	; 961c <prog+0x95d4>
    8ea0:	e1d232bc 	ldrh	r3, [r2, #44]
    8ea4:	e2833001 	add	r3, r3, #1	; 0x1
    8ea8:	e1c232bc 	strh	r3, [r2, #44]
    8eac:	e5d43021 	ldrb	r3, [r4, #33]
    8eb0:	e3130004 	tst	r3, #4	; 0x4
    8eb4:	1a000371 	bne	9c80 <prog+0x9c38>
    8eb8:	e59f275c 	ldr	r2, [pc, #1884]	; 961c <prog+0x95d4>
    8ebc:	e1d232b6 	ldrh	r3, [r2, #38]
    8ec0:	e2833001 	add	r3, r3, #1	; 0x1
    8ec4:	e1c232b6 	strh	r3, [r2, #38]
    8ec8:	e3a03014 	mov	r3, #20	; 0x14
    8ecc:	e5c43021 	strb	r3, [r4, #33]
    8ed0:	e59f3748 	ldr	r3, [pc, #1864]	; 9620 <prog+0x95d8>
    8ed4:	e3a0c028 	mov	ip, #40	; 0x28
    8ed8:	e1c3c0b0 	strh	ip, [r3]
    8edc:	e3a03050 	mov	r3, #80	; 0x50
    8ee0:	e5c43020 	strb	r3, [r4, #32]
    8ee4:	e5d4201b 	ldrb	r2, [r4, #27]
    8ee8:	e5d4301f 	ldrb	r3, [r4, #31]
    8eec:	e5c4301b 	strb	r3, [r4, #27]
    8ef0:	e5c4201f 	strb	r2, [r4, #31]
    8ef4:	e5d4201a 	ldrb	r2, [r4, #26]
    8ef8:	e5d4301e 	ldrb	r3, [r4, #30]
    8efc:	e5c4301a 	strb	r3, [r4, #26]
    8f00:	e5c4201e 	strb	r2, [r4, #30]
    8f04:	e5d42019 	ldrb	r2, [r4, #25]
    8f08:	e5d4301d 	ldrb	r3, [r4, #29]
    8f0c:	e5c43019 	strb	r3, [r4, #25]
    8f10:	e5c4201d 	strb	r2, [r4, #29]
    8f14:	e5d42018 	ldrb	r2, [r4, #24]
    8f18:	e59f36d8 	ldr	r3, [pc, #1752]	; 95f8 <prog+0x95b0>
    8f1c:	e5c32000 	strb	r2, [r3]
    8f20:	e5d4301c 	ldrb	r3, [r4, #28]
    8f24:	e5c43018 	strb	r3, [r4, #24]
    8f28:	e5c4201c 	strb	r2, [r4, #28]
    8f2c:	e5d4301f 	ldrb	r3, [r4, #31]
    8f30:	e2833001 	add	r3, r3, #1	; 0x1
    8f34:	e20330ff 	and	r3, r3, #255	; 0xff
    8f38:	e5c4301f 	strb	r3, [r4, #31]
    8f3c:	e3530000 	cmp	r3, #0	; 0x0
    8f40:	1a00000d 	bne	8f7c <prog+0x8f34>
    8f44:	e5d4301e 	ldrb	r3, [r4, #30]
    8f48:	e2833001 	add	r3, r3, #1	; 0x1
    8f4c:	e20330ff 	and	r3, r3, #255	; 0xff
    8f50:	e5c4301e 	strb	r3, [r4, #30]
    8f54:	e3530000 	cmp	r3, #0	; 0x0
    8f58:	1a000007 	bne	8f7c <prog+0x8f34>
    8f5c:	e5d4301d 	ldrb	r3, [r4, #29]
    8f60:	e2833001 	add	r3, r3, #1	; 0x1
    8f64:	e20330ff 	and	r3, r3, #255	; 0xff
    8f68:	e5c4301d 	strb	r3, [r4, #29]
    8f6c:	e3530000 	cmp	r3, #0	; 0x0
    8f70:	05d4301c 	ldreqb	r3, [r4, #28]
    8f74:	02833001 	addeq	r3, r3, #1	; 0x1
    8f78:	05c4301c 	streqb	r3, [r4, #28]
    8f7c:	e5d41014 	ldrb	r1, [r4, #20]
    8f80:	e5d43015 	ldrb	r3, [r4, #21]
    8f84:	e1811403 	orr	r1, r1, r3, lsl #8
    8f88:	e1a01801 	mov	r1, r1, lsl #16
    8f8c:	e1a00821 	mov	r0, r1, lsr #16
    8f90:	e59f3668 	ldr	r3, [pc, #1640]	; 9600 <prog+0x95b8>
    8f94:	e1c300b0 	strh	r0, [r3]
    8f98:	e5d43016 	ldrb	r3, [r4, #22]
    8f9c:	e5d42017 	ldrb	r2, [r4, #23]
    8fa0:	e1833402 	orr	r3, r3, r2, lsl #8
    8fa4:	e5c43014 	strb	r3, [r4, #20]
    8fa8:	e1a03423 	mov	r3, r3, lsr #8
    8fac:	e5c43015 	strb	r3, [r4, #21]
    8fb0:	e5c40016 	strb	r0, [r4, #22]
    8fb4:	e1a01c21 	mov	r1, r1, lsr #24
    8fb8:	e5c41017 	strb	r1, [r4, #23]
    8fbc:	e59f3614 	ldr	r3, [pc, #1556]	; 95d8 <prog+0x9590>
    8fc0:	e1d301ba 	ldrh	r0, [r3, #26]
    8fc4:	e1c301be 	strh	r0, [r3, #30]
    8fc8:	e1d311bc 	ldrh	r1, [r3, #28]
    8fcc:	e1c312b0 	strh	r1, [r3, #32]
    8fd0:	e59f2638 	ldr	r2, [pc, #1592]	; 9610 <prog+0x95c8>
    8fd4:	e1d2c0b0 	ldrh	ip, [r2]
    8fd8:	e1c3c1ba 	strh	ip, [r3, #26]
    8fdc:	e1d220b2 	ldrh	r2, [r2, #2]
    8fe0:	e1c321bc 	strh	r2, [r3, #28]
    8fe4:	ea0002f0 	b	9bac <prog+0x9b64>
    8fe8:	e59f3608 	ldr	r3, [pc, #1544]	; 95f8 <prog+0x95b0>
    8fec:	e5c3e000 	strb	lr, [r3]
    8ff0:	e0812201 	add	r2, r1, r1, lsl #4
    8ff4:	e59f35e8 	ldr	r3, [pc, #1512]	; 95e4 <prog+0x959c>
    8ff8:	e0835182 	add	r5, r3, r2, lsl #3
    8ffc:	ea00001b 	b	9070 <prog+0x9028>
    9000:	e3a02000 	mov	r2, #0	; 0x0
    9004:	e59f35ec 	ldr	r3, [pc, #1516]	; 95f8 <prog+0x95b0>
    9008:	e5c32000 	strb	r2, [r3]
    900c:	e59f05d0 	ldr	r0, [pc, #1488]	; 95e4 <prog+0x959c>
    9010:	e1a05002 	mov	r5, r2
    9014:	e1a0e002 	mov	lr, r2
    9018:	e1a0c002 	mov	ip, r2
    901c:	e20c10ff 	and	r1, ip, #255	; 0xff
    9020:	e5d03019 	ldrb	r3, [r0, #25]
    9024:	e3530000 	cmp	r3, #0	; 0x0
    9028:	0affffee 	beq	8fe8 <prog+0x8fa0>
    902c:	e3530007 	cmp	r3, #7	; 0x7
    9030:	1a000006 	bne	9050 <prog+0x9008>
    9034:	e3550000 	cmp	r5, #0	; 0x0
    9038:	0a000003 	beq	904c <prog+0x9004>
    903c:	e5d0201a 	ldrb	r2, [r0, #26]
    9040:	e5d5301a 	ldrb	r3, [r5, #26]
    9044:	e1520003 	cmp	r2, r3
    9048:	9a000000 	bls	9050 <prog+0x9008>
    904c:	e1a05000 	mov	r5, r0
    9050:	e2813001 	add	r3, r1, #1	; 0x1
    9054:	e203e0ff 	and	lr, r3, #255	; 0xff
    9058:	e28cc001 	add	ip, ip, #1	; 0x1
    905c:	e2800088 	add	r0, r0, #136	; 0x88
    9060:	e35c0028 	cmp	ip, #40	; 0x28
    9064:	1affffec 	bne	901c <prog+0x8fd4>
    9068:	e59f3588 	ldr	r3, [pc, #1416]	; 95f8 <prog+0x95b0>
    906c:	e5c3e000 	strb	lr, [r3]
    9070:	e3550000 	cmp	r5, #0	; 0x0
    9074:	1a00001e 	bne	90f4 <prog+0x90ac>
    9078:	e59f259c 	ldr	r2, [pc, #1436]	; 961c <prog+0x95d4>
    907c:	e1d232ba 	ldrh	r3, [r2, #42]
    9080:	e2833001 	add	r3, r3, #1	; 0x1
    9084:	e1c232ba 	strh	r3, [r2, #42]
    9088:	ea0002fc 	b	9c80 <prog+0x9c38>
    908c:	e59f3560 	ldr	r3, [pc, #1376]	; 95f4 <prog+0x95ac>
    9090:	e5c31000 	strb	r1, [r3]
    9094:	e59f355c 	ldr	r3, [pc, #1372]	; 95f8 <prog+0x95b0>
    9098:	e5c3c000 	strb	ip, [r3]
    909c:	ea000069 	b	9248 <prog+0x9200>
    90a0:	e59f354c 	ldr	r3, [pc, #1356]	; 95f4 <prog+0x95ac>
    90a4:	e5c31000 	strb	r1, [r3]
    90a8:	e59f3548 	ldr	r3, [pc, #1352]	; 95f8 <prog+0x95b0>
    90ac:	e5c3c000 	strb	ip, [r3]
    90b0:	e5d23038 	ldrb	r3, [r2, #56]
    90b4:	e5d22039 	ldrb	r2, [r2, #57]
    90b8:	e1822403 	orr	r2, r2, r3, lsl #8
    90bc:	e59f353c 	ldr	r3, [pc, #1340]	; 9600 <prog+0x95b8>
    90c0:	e1c320b0 	strh	r2, [r3]
    90c4:	e3a03e5a 	mov	r3, #1440	; 0x5a0
    90c8:	e2833006 	add	r3, r3, #6	; 0x6
    90cc:	e1520003 	cmp	r2, r3
    90d0:	21a02003 	movcs	r2, r3
    90d4:	e1c521b2 	strh	r2, [r5, #18]
    90d8:	e1c521b4 	strh	r2, [r5, #20]
    90dc:	ea000059 	b	9248 <prog+0x9200>
    90e0:	e59f350c 	ldr	r3, [pc, #1292]	; 95f4 <prog+0x95ac>
    90e4:	e5c31000 	strb	r1, [r3]
    90e8:	e59f3508 	ldr	r3, [pc, #1288]	; 95f8 <prog+0x95b0>
    90ec:	e5c3c000 	strb	ip, [r3]
    90f0:	ea000054 	b	9248 <prog+0x9200>
    90f4:	e59f3500 	ldr	r3, [pc, #1280]	; 95fc <prog+0x95b4>
    90f8:	e5835000 	str	r5, [r3]
    90fc:	e3a03003 	mov	r3, #3	; 0x3
    9100:	e5c5301a 	strb	r3, [r5, #26]
    9104:	e5c53018 	strb	r3, [r5, #24]
    9108:	e3a06000 	mov	r6, #0	; 0x0
    910c:	e5c56016 	strb	r6, [r5, #22]
    9110:	e2833001 	add	r3, r3, #1	; 0x1
    9114:	e5c53017 	strb	r3, [r5, #23]
    9118:	e5c5601b 	strb	r6, [r5, #27]
    911c:	e5d43016 	ldrb	r3, [r4, #22]
    9120:	e5d42017 	ldrb	r2, [r4, #23]
    9124:	e1833402 	orr	r3, r3, r2, lsl #8
    9128:	e1c530b4 	strh	r3, [r5, #4]
    912c:	e5d43014 	ldrb	r3, [r4, #20]
    9130:	e5d42015 	ldrb	r2, [r4, #21]
    9134:	e1833402 	orr	r3, r3, r2, lsl #8
    9138:	e1c530b6 	strh	r3, [r5, #6]
    913c:	e59f3494 	ldr	r3, [pc, #1172]	; 95d8 <prog+0x9590>
    9140:	e1d301ba 	ldrh	r0, [r3, #26]
    9144:	e1c500b0 	strh	r0, [r5]
    9148:	e1d331bc 	ldrh	r3, [r3, #28]
    914c:	e1c530b2 	strh	r3, [r5, #2]
    9150:	e3a00001 	mov	r0, #1	; 0x1
    9154:	e5c50019 	strb	r0, [r5, #25]
    9158:	e59f246c 	ldr	r2, [pc, #1132]	; 95cc <prog+0x9584>
    915c:	e5d23000 	ldrb	r3, [r2]
    9160:	e5c5300c 	strb	r3, [r5, #12]
    9164:	e5d23001 	ldrb	r3, [r2, #1]
    9168:	e5c5300d 	strb	r3, [r5, #13]
    916c:	e5d23002 	ldrb	r3, [r2, #2]
    9170:	e5c5300e 	strb	r3, [r5, #14]
    9174:	e5d23003 	ldrb	r3, [r2, #3]
    9178:	e5c5300f 	strb	r3, [r5, #15]
    917c:	e1c501b0 	strh	r0, [r5, #16]
    9180:	e5d4301b 	ldrb	r3, [r4, #27]
    9184:	e5c5300b 	strb	r3, [r5, #11]
    9188:	e5d4301a 	ldrb	r3, [r4, #26]
    918c:	e5c5300a 	strb	r3, [r5, #10]
    9190:	e5d43019 	ldrb	r3, [r4, #25]
    9194:	e5c53009 	strb	r3, [r5, #9]
    9198:	e5d43018 	ldrb	r3, [r4, #24]
    919c:	e5c53008 	strb	r3, [r5, #8]
    91a0:	ebfffc62 	bl	8330 <uip_add_rcv_nxt>
    91a4:	e5d42020 	ldrb	r2, [r4, #32]
    91a8:	e20230f0 	and	r3, r2, #240	; 0xf0
    91ac:	e3530050 	cmp	r3, #80	; 0x50
    91b0:	da000024 	ble	9248 <prog+0x9200>
    91b4:	e59f343c 	ldr	r3, [pc, #1084]	; 95f8 <prog+0x95b0>
    91b8:	e5c36000 	strb	r6, [r3]
    91bc:	e59f3430 	ldr	r3, [pc, #1072]	; 95f4 <prog+0x95ac>
    91c0:	e5d31000 	ldrb	r1, [r3]
    91c4:	e1a0c006 	mov	ip, r6
    91c8:	e1a03222 	mov	r3, r2, lsr #4
    91cc:	e2433005 	sub	r3, r3, #5	; 0x5
    91d0:	e1a04103 	mov	r4, r3, lsl #2
    91d4:	e59fe3fc 	ldr	lr, [pc, #1020]	; 95d8 <prog+0x9590>
    91d8:	ea000013 	b	922c <prog+0x91e4>
    91dc:	e080300e 	add	r3, r0, lr
    91e0:	e5d31036 	ldrb	r1, [r3, #54]
    91e4:	e3510000 	cmp	r1, #0	; 0x0
    91e8:	0affffa7 	beq	908c <prog+0x9044>
    91ec:	e3510001 	cmp	r1, #1	; 0x1
    91f0:	028c3001 	addeq	r3, ip, #1	; 0x1
    91f4:	0203c0ff 	andeq	ip, r3, #255	; 0xff
    91f8:	0a00000b 	beq	922c <prog+0x91e4>
    91fc:	e3510002 	cmp	r1, #2	; 0x2
    9200:	1a000003 	bne	9214 <prog+0x91cc>
    9204:	e080200e 	add	r2, r0, lr
    9208:	e5d23037 	ldrb	r3, [r2, #55]
    920c:	e3530004 	cmp	r3, #4	; 0x4
    9210:	0affffa2 	beq	90a0 <prog+0x9058>
    9214:	e080300e 	add	r3, r0, lr
    9218:	e5d33037 	ldrb	r3, [r3, #55]
    921c:	e3530000 	cmp	r3, #0	; 0x0
    9220:	0affffae 	beq	90e0 <prog+0x9098>
    9224:	e083300c 	add	r3, r3, ip
    9228:	e203c0ff 	and	ip, r3, #255	; 0xff
    922c:	e1a0000c 	mov	r0, ip
    9230:	e15c0004 	cmp	ip, r4
    9234:	baffffe8 	blt	91dc <prog+0x9194>
    9238:	e59f33b4 	ldr	r3, [pc, #948]	; 95f4 <prog+0x95ac>
    923c:	e5c31000 	strb	r1, [r3]
    9240:	e59f33b0 	ldr	r3, [pc, #944]	; 95f8 <prog+0x95b0>
    9244:	e5c3c000 	strb	ip, [r3]
    9248:	e3a02010 	mov	r2, #16	; 0x10
    924c:	e59f33c0 	ldr	r3, [pc, #960]	; 9614 <prog+0x95cc>
    9250:	e5c32021 	strb	r2, [r3, #33]
    9254:	e59f23b8 	ldr	r2, [pc, #952]	; 9614 <prog+0x95cc>
    9258:	e5d23021 	ldrb	r3, [r2, #33]
    925c:	e3833002 	orr	r3, r3, #2	; 0x2
    9260:	e5c23021 	strb	r3, [r2, #33]
    9264:	e3a03002 	mov	r3, #2	; 0x2
    9268:	e5c23028 	strb	r3, [r2, #40]
    926c:	e2833002 	add	r3, r3, #2	; 0x2
    9270:	e5c23029 	strb	r3, [r2, #41]
    9274:	e2833001 	add	r3, r3, #1	; 0x1
    9278:	e5c2302a 	strb	r3, [r2, #42]
    927c:	e243305f 	sub	r3, r3, #95	; 0x5f
    9280:	e5c2302b 	strb	r3, [r2, #43]
    9284:	e59f3394 	ldr	r3, [pc, #916]	; 9620 <prog+0x95d8>
    9288:	e3a0102c 	mov	r1, #44	; 0x2c
    928c:	e1c310b0 	strh	r1, [r3]
    9290:	e3a03060 	mov	r3, #96	; 0x60
    9294:	e5c23020 	strb	r3, [r2, #32]
    9298:	ea000215 	b	9af4 <prog+0x9aac>
    929c:	e1a06005 	mov	r6, r5
    92a0:	e59f3354 	ldr	r3, [pc, #852]	; 95fc <prog+0x95b4>
    92a4:	e5835000 	str	r5, [r3]
    92a8:	e59f1374 	ldr	r1, [pc, #884]	; 9624 <prog+0x95dc>
    92ac:	e3a02000 	mov	r2, #0	; 0x0
    92b0:	e5c12000 	strb	r2, [r1]
    92b4:	e5d43021 	ldrb	r3, [r4, #33]
    92b8:	e3130004 	tst	r3, #4	; 0x4
    92bc:	0a000004 	beq	92d4 <prog+0x928c>
    92c0:	e5c52019 	strb	r2, [r5, #25]
    92c4:	e3a03020 	mov	r3, #32	; 0x20
    92c8:	e5c13000 	strb	r3, [r1]
    92cc:	ebffe61f 	bl	2b50 <services_appcall>
    92d0:	ea00026a 	b	9c80 <prog+0x9c38>
    92d4:	e5d42020 	ldrb	r2, [r4, #32]
    92d8:	e1a02222 	mov	r2, r2, lsr #4
    92dc:	e1a02102 	mov	r2, r2, lsl #2
    92e0:	e59f3310 	ldr	r3, [pc, #784]	; 95f8 <prog+0x95b0>
    92e4:	e5c32000 	strb	r2, [r3]
    92e8:	e59f1330 	ldr	r1, [pc, #816]	; 9620 <prog+0x95d8>
    92ec:	e1d130b0 	ldrh	r3, [r1]
    92f0:	e0623003 	rsb	r3, r2, r3
    92f4:	e2433014 	sub	r3, r3, #20	; 0x14
    92f8:	e1a03803 	mov	r3, r3, lsl #16
    92fc:	e1a02823 	mov	r2, r3, lsr #16
    9300:	e1c120b0 	strh	r2, [r1]
    9304:	e5d53019 	ldrb	r3, [r5, #25]
    9308:	e203300f 	and	r3, r3, #15	; 0xf
    930c:	e3530002 	cmp	r3, #2	; 0x2
    9310:	1a000003 	bne	9324 <prog+0x92dc>
    9314:	e5d43021 	ldrb	r3, [r4, #33]
    9318:	e203303f 	and	r3, r3, #63	; 0x3f
    931c:	e3530012 	cmp	r3, #18	; 0x12
    9320:	0a000014 	beq	9378 <prog+0x9330>
    9324:	e3520000 	cmp	r2, #0	; 0x0
    9328:	1a000002 	bne	9338 <prog+0x92f0>
    932c:	e5d43021 	ldrb	r3, [r4, #33]
    9330:	e3130003 	tst	r3, #3	; 0x3
    9334:	0a00000f 	beq	9378 <prog+0x9330>
    9338:	e5d42018 	ldrb	r2, [r4, #24]
    933c:	e5d63008 	ldrb	r3, [r6, #8]
    9340:	e1520003 	cmp	r2, r3
    9344:	1a0001e2 	bne	9ad4 <prog+0x9a8c>
    9348:	e5d42019 	ldrb	r2, [r4, #25]
    934c:	e5d63009 	ldrb	r3, [r6, #9]
    9350:	e1520003 	cmp	r2, r3
    9354:	1a0001de 	bne	9ad4 <prog+0x9a8c>
    9358:	e5d4201a 	ldrb	r2, [r4, #26]
    935c:	e5d6300a 	ldrb	r3, [r6, #10]
    9360:	e1520003 	cmp	r2, r3
    9364:	1a0001da 	bne	9ad4 <prog+0x9a8c>
    9368:	e5d4201b 	ldrb	r2, [r4, #27]
    936c:	e5d6300b 	ldrb	r3, [r6, #11]
    9370:	e1520003 	cmp	r2, r3
    9374:	1a0001d6 	bne	9ad4 <prog+0x9a8c>
    9378:	e5d43021 	ldrb	r3, [r4, #33]
    937c:	e3130010 	tst	r3, #16	; 0x10
    9380:	0a00003a 	beq	9470 <prog+0x9428>
    9384:	e1d611b0 	ldrh	r1, [r6, #16]
    9388:	e3510000 	cmp	r1, #0	; 0x0
    938c:	0a000037 	beq	9470 <prog+0x9428>
    9390:	e286000c 	add	r0, r6, #12	; 0xc
    9394:	ebfffb33 	bl	8068 <uip_add32>
    9398:	e5d4301c 	ldrb	r3, [r4, #28]
    939c:	e59f124c 	ldr	r1, [pc, #588]	; 95f0 <prog+0x95a8>
    93a0:	e5d10000 	ldrb	r0, [r1]
    93a4:	e1500003 	cmp	r0, r3
    93a8:	1a000030 	bne	9470 <prog+0x9428>
    93ac:	e5d4201d 	ldrb	r2, [r4, #29]
    93b0:	e5d13001 	ldrb	r3, [r1, #1]
    93b4:	e1520003 	cmp	r2, r3
    93b8:	1a00002c 	bne	9470 <prog+0x9428>
    93bc:	e5d4201e 	ldrb	r2, [r4, #30]
    93c0:	e5d13002 	ldrb	r3, [r1, #2]
    93c4:	e1520003 	cmp	r2, r3
    93c8:	1a000028 	bne	9470 <prog+0x9428>
    93cc:	e5d4201f 	ldrb	r2, [r4, #31]
    93d0:	e5d13003 	ldrb	r3, [r1, #3]
    93d4:	e1520003 	cmp	r2, r3
    93d8:	1a000024 	bne	9470 <prog+0x9428>
    93dc:	e5c6000c 	strb	r0, [r6, #12]
    93e0:	e5d13001 	ldrb	r3, [r1, #1]
    93e4:	e5c6300d 	strb	r3, [r6, #13]
    93e8:	e5d13002 	ldrb	r3, [r1, #2]
    93ec:	e5c6300e 	strb	r3, [r6, #14]
    93f0:	e5d13003 	ldrb	r3, [r1, #3]
    93f4:	e5c6300f 	strb	r3, [r6, #15]
    93f8:	e5d6301b 	ldrb	r3, [r6, #27]
    93fc:	e3530000 	cmp	r3, #0	; 0x0
    9400:	1a000013 	bne	9454 <prog+0x940c>
    9404:	e5d61016 	ldrb	r1, [r6, #22]
    9408:	e5d63018 	ldrb	r3, [r6, #24]
    940c:	e5d6201a 	ldrb	r2, [r6, #26]
    9410:	e0623003 	rsb	r3, r2, r3
    9414:	e04331a1 	sub	r3, r3, r1, lsr #3
    9418:	e20330ff 	and	r3, r3, #255	; 0xff
    941c:	e0811003 	add	r1, r1, r3
    9420:	e5c61016 	strb	r1, [r6, #22]
    9424:	e5d62017 	ldrb	r2, [r6, #23]
    9428:	e1a03c03 	mov	r3, r3, lsl #24
    942c:	e1a03c43 	mov	r3, r3, asr #24
    9430:	e3530000 	cmp	r3, #0	; 0x0
    9434:	b2633000 	rsblt	r3, r3, #0	; 0x0
    9438:	e0433122 	sub	r3, r3, r2, lsr #2
    943c:	e0822003 	add	r2, r2, r3
    9440:	e20220ff 	and	r2, r2, #255	; 0xff
    9444:	e5c62017 	strb	r2, [r6, #23]
    9448:	e5d63016 	ldrb	r3, [r6, #22]
    944c:	e08221a3 	add	r2, r2, r3, lsr #3
    9450:	e5c62018 	strb	r2, [r6, #24]
    9454:	e3a03001 	mov	r3, #1	; 0x1
    9458:	e59f21c4 	ldr	r2, [pc, #452]	; 9624 <prog+0x95dc>
    945c:	e5c23000 	strb	r3, [r2]
    9460:	e5d63018 	ldrb	r3, [r6, #24]
    9464:	e5c6301a 	strb	r3, [r6, #26]
    9468:	e3a02000 	mov	r2, #0	; 0x0
    946c:	e1c621b0 	strh	r2, [r6, #16]
    9470:	e5d62019 	ldrb	r2, [r6, #25]
    9474:	e202300f 	and	r3, r2, #15	; 0xf
    9478:	e2433001 	sub	r3, r3, #1	; 0x1
    947c:	e3530007 	cmp	r3, #7	; 0x7
    9480:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    9484:	ea0001fd 	b	9c80 <prog+0x9c38>
    9488:	000094a8 	andeq	r9, r0, r8, lsr #9
    948c:	00009568 	andeq	r9, r0, r8, ror #10
    9490:	00009714 	andeq	r9, r0, r4, lsl r7
    9494:	000099c4 	andeq	r9, r0, r4, asr #19
    9498:	00009a58 	andeq	r9, r0, r8, asr sl
    949c:	00009ab4 	streqh	r9, [r0], -r4
    94a0:	00009ad4 	ldreqd	r9, [r0], -r4
    94a4:	0000999c 	muleq	r0, ip, r9
    94a8:	e59f2174 	ldr	r2, [pc, #372]	; 9624 <prog+0x95dc>
    94ac:	e5d23000 	ldrb	r3, [r2]
    94b0:	e3130001 	tst	r3, #1	; 0x1
    94b4:	0a0001f1 	beq	9c80 <prog+0x9c38>
    94b8:	e3a03003 	mov	r3, #3	; 0x3
    94bc:	e5c63019 	strb	r3, [r6, #25]
    94c0:	e283303d 	add	r3, r3, #61	; 0x3d
    94c4:	e5c23000 	strb	r3, [r2]
    94c8:	e3a03000 	mov	r3, #0	; 0x0
    94cc:	e1c631b0 	strh	r3, [r6, #16]
    94d0:	e59f3148 	ldr	r3, [pc, #328]	; 9620 <prog+0x95d8>
    94d4:	e1d300b0 	ldrh	r0, [r3]
    94d8:	e3500000 	cmp	r0, #0	; 0x0
    94dc:	15d23000 	ldrneb	r3, [r2]
    94e0:	13833002 	orrne	r3, r3, #2	; 0x2
    94e4:	15c23000 	strneb	r3, [r2]
    94e8:	1bfffb90 	blne	8330 <uip_add_rcv_nxt>
    94ec:	e59f3118 	ldr	r3, [pc, #280]	; 960c <prog+0x95c4>
    94f0:	e3a0c000 	mov	ip, #0	; 0x0
    94f4:	e1c3c0b0 	strh	ip, [r3]
    94f8:	ebffe594 	bl	2b50 <services_appcall>
    94fc:	ea0000d7 	b	9860 <prog+0x9818>
    9500:	e59f30ec 	ldr	r3, [pc, #236]	; 95f4 <prog+0x95ac>
    9504:	e5c30000 	strb	r0, [r3]
    9508:	e59f30e8 	ldr	r3, [pc, #232]	; 95f8 <prog+0x95b0>
    950c:	e5c3e000 	strb	lr, [r3]
    9510:	ea00005f 	b	9694 <prog+0x964c>
    9514:	e59f30d8 	ldr	r3, [pc, #216]	; 95f4 <prog+0x95ac>
    9518:	e5c30000 	strb	r0, [r3]
    951c:	e59f30d4 	ldr	r3, [pc, #212]	; 95f8 <prog+0x95b0>
    9520:	e5c3e000 	strb	lr, [r3]
    9524:	e5d13038 	ldrb	r3, [r1, #56]
    9528:	e5d12039 	ldrb	r2, [r1, #57]
    952c:	e1822403 	orr	r2, r2, r3, lsl #8
    9530:	e59f30c8 	ldr	r3, [pc, #200]	; 9600 <prog+0x95b8>
    9534:	e1c320b0 	strh	r2, [r3]
    9538:	e3a03e5a 	mov	r3, #1440	; 0x5a0
    953c:	e2833006 	add	r3, r3, #6	; 0x6
    9540:	e1520003 	cmp	r2, r3
    9544:	21a02003 	movcs	r2, r3
    9548:	e1c621b2 	strh	r2, [r6, #18]
    954c:	e1c621b4 	strh	r2, [r6, #20]
    9550:	ea00004f 	b	9694 <prog+0x964c>
    9554:	e59f3098 	ldr	r3, [pc, #152]	; 95f4 <prog+0x95ac>
    9558:	e5c30000 	strb	r0, [r3]
    955c:	e59f3094 	ldr	r3, [pc, #148]	; 95f8 <prog+0x95b0>
    9560:	e5c3e000 	strb	lr, [r3]
    9564:	ea00004a 	b	9694 <prog+0x964c>
    9568:	e59f30b4 	ldr	r3, [pc, #180]	; 9624 <prog+0x95dc>
    956c:	e5d33000 	ldrb	r3, [r3]
    9570:	e3130001 	tst	r3, #1	; 0x1
    9574:	0a00005d 	beq	96f0 <prog+0x96a8>
    9578:	e5d43021 	ldrb	r3, [r4, #33]
    957c:	e203303f 	and	r3, r3, #63	; 0x3f
    9580:	e3530012 	cmp	r3, #18	; 0x12
    9584:	1a000059 	bne	96f0 <prog+0x96a8>
    9588:	e5d41020 	ldrb	r1, [r4, #32]
    958c:	e20130f0 	and	r3, r1, #240	; 0xf0
    9590:	e3530050 	cmp	r3, #80	; 0x50
    9594:	da00003e 	ble	9694 <prog+0x964c>
    9598:	e3a02000 	mov	r2, #0	; 0x0
    959c:	e59f3054 	ldr	r3, [pc, #84]	; 95f8 <prog+0x95b0>
    95a0:	e5c32000 	strb	r2, [r3]
    95a4:	e59f3048 	ldr	r3, [pc, #72]	; 95f4 <prog+0x95ac>
    95a8:	e5d30000 	ldrb	r0, [r3]
    95ac:	e1a0e002 	mov	lr, r2
    95b0:	e1a03221 	mov	r3, r1, lsr #4
    95b4:	e2433005 	sub	r3, r3, #5	; 0x5
    95b8:	e1a08103 	mov	r8, r3, lsl #2
    95bc:	e59f7014 	ldr	r7, [pc, #20]	; 95d8 <prog+0x9590>
    95c0:	ea00002c 	b	9678 <prog+0x9630>
    95c4:	00014e6c 	andeq	r4, r1, ip, ror #28
    95c8:	40002e56 	andmi	r2, r0, r6, asr lr
    95cc:	4000155c 	andmi	r1, r0, ip, asr r5
    95d0:	40001840 	andmi	r1, r0, r0, asr #16
    95d4:	40002e4a 	andmi	r2, r0, sl, asr #28
    95d8:	40002e20 	andmi	r2, r0, r0, lsr #28
    95dc:	40003400 	andmi	r3, r0, r0, lsl #8
    95e0:	400036a8 	andmi	r3, r0, r8, lsr #13
    95e4:	4000184c 	andmi	r1, r0, ip, asr #16
    95e8:	40002d04 	andmi	r2, r0, r4, lsl #26
    95ec:	40002d8c 	andmi	r2, r0, ip, lsl #27
    95f0:	40001838 	andmi	r1, r0, r8, lsr r8
    95f4:	40001563 	andmi	r1, r0, r3, ror #10
    95f8:	40001562 	andmi	r1, r0, r2, ror #10
    95fc:	40001848 	andmi	r1, r0, r8, asr #16
    9600:	40001564 	andmi	r1, r0, r4, ror #10
    9604:	40001834 	andmi	r1, r0, r4, lsr r8
    9608:	40001844 	andmi	r1, r0, r4, asr #16
    960c:	400033fe 	strmid	r3, [r0], -lr
    9610:	40002e1c 	andmi	r2, r0, ip, lsl lr
    9614:	40002e2e 	andmi	r2, r0, lr, lsr #28
    9618:	4000155a 	andmi	r1, r0, sl, asr r5
    961c:	40002de0 	andmi	r2, r0, r0, ror #27
    9620:	40001830 	andmi	r1, r0, r0, lsr r8
    9624:	4000183c 	andmi	r1, r0, ip, lsr r8
    9628:	e08c3007 	add	r3, ip, r7
    962c:	e5d30036 	ldrb	r0, [r3, #54]
    9630:	e3500000 	cmp	r0, #0	; 0x0
    9634:	0affffb1 	beq	9500 <prog+0x94b8>
    9638:	e3500001 	cmp	r0, #1	; 0x1
    963c:	028e3001 	addeq	r3, lr, #1	; 0x1
    9640:	0203e0ff 	andeq	lr, r3, #255	; 0xff
    9644:	0a00000b 	beq	9678 <prog+0x9630>
    9648:	e3500002 	cmp	r0, #2	; 0x2
    964c:	1a000003 	bne	9660 <prog+0x9618>
    9650:	e08c1007 	add	r1, ip, r7
    9654:	e5d13037 	ldrb	r3, [r1, #55]
    9658:	e3530004 	cmp	r3, #4	; 0x4
    965c:	0affffac 	beq	9514 <prog+0x94cc>
    9660:	e08c3007 	add	r3, ip, r7
    9664:	e5d32037 	ldrb	r2, [r3, #55]
    9668:	e3520000 	cmp	r2, #0	; 0x0
    966c:	0affffb8 	beq	9554 <prog+0x950c>
    9670:	e08e3002 	add	r3, lr, r2
    9674:	e203e0ff 	and	lr, r3, #255	; 0xff
    9678:	e1a0c00e 	mov	ip, lr
    967c:	e15e0008 	cmp	lr, r8
    9680:	baffffe8 	blt	9628 <prog+0x95e0>
    9684:	e51f3098 	ldr	r3, [pc, #-152]	; 95f4 <prog+0x95ac>
    9688:	e5c30000 	strb	r0, [r3]
    968c:	e51f309c 	ldr	r3, [pc, #-156]	; 95f8 <prog+0x95b0>
    9690:	e5c3e000 	strb	lr, [r3]
    9694:	e3a03003 	mov	r3, #3	; 0x3
    9698:	e5c63019 	strb	r3, [r6, #25]
    969c:	e5d43018 	ldrb	r3, [r4, #24]
    96a0:	e5c63008 	strb	r3, [r6, #8]
    96a4:	e5d43019 	ldrb	r3, [r4, #25]
    96a8:	e5c63009 	strb	r3, [r6, #9]
    96ac:	e5d4301a 	ldrb	r3, [r4, #26]
    96b0:	e5c6300a 	strb	r3, [r6, #10]
    96b4:	e5d4301b 	ldrb	r3, [r4, #27]
    96b8:	e5c6300b 	strb	r3, [r6, #11]
    96bc:	e3a00001 	mov	r0, #1	; 0x1
    96c0:	ebfffb1a 	bl	8330 <uip_add_rcv_nxt>
    96c4:	e3a02042 	mov	r2, #66	; 0x42
    96c8:	e51f30ac 	ldr	r3, [pc, #-172]	; 9624 <prog+0x95dc>
    96cc:	e5c32000 	strb	r2, [r3]
    96d0:	e2422042 	sub	r2, r2, #66	; 0x42
    96d4:	e1c621b0 	strh	r2, [r6, #16]
    96d8:	e51f30c0 	ldr	r3, [pc, #-192]	; 9620 <prog+0x95d8>
    96dc:	e1c320b0 	strh	r2, [r3]
    96e0:	e51f30dc 	ldr	r3, [pc, #-220]	; 960c <prog+0x95c4>
    96e4:	e1c320b0 	strh	r2, [r3]
    96e8:	ebffe518 	bl	2b50 <services_appcall>
    96ec:	ea00005b 	b	9860 <prog+0x9818>
    96f0:	e3a02020 	mov	r2, #32	; 0x20
    96f4:	e51f30d8 	ldr	r3, [pc, #-216]	; 9624 <prog+0x95dc>
    96f8:	e5c32000 	strb	r2, [r3]
    96fc:	ebffe513 	bl	2b50 <services_appcall>
    9700:	e51f310c 	ldr	r3, [pc, #-268]	; 95fc <prog+0x95b4>
    9704:	e5932000 	ldr	r2, [r3]
    9708:	e3a03000 	mov	r3, #0	; 0x0
    970c:	e5c23019 	strb	r3, [r2, #25]
    9710:	eafffde5 	b	8eac <prog+0x8e64>
    9714:	e5d43021 	ldrb	r3, [r4, #33]
    9718:	e3130001 	tst	r3, #1	; 0x1
    971c:	0a00001d 	beq	9798 <prog+0x9750>
    9720:	e3120010 	tst	r2, #16	; 0x10
    9724:	1a00001b 	bne	9798 <prog+0x9750>
    9728:	e1d631b0 	ldrh	r3, [r6, #16]
    972c:	e3530000 	cmp	r3, #0	; 0x0
    9730:	1a000152 	bne	9c80 <prog+0x9c38>
    9734:	e51f411c 	ldr	r4, [pc, #-284]	; 9620 <prog+0x95d8>
    9738:	e1d400b0 	ldrh	r0, [r4]
    973c:	e2800001 	add	r0, r0, #1	; 0x1
    9740:	e1a00800 	mov	r0, r0, lsl #16
    9744:	e1a00820 	mov	r0, r0, lsr #16
    9748:	ebfffaf8 	bl	8330 <uip_add_rcv_nxt>
    974c:	e51f1130 	ldr	r1, [pc, #-304]	; 9624 <prog+0x95dc>
    9750:	e5d13000 	ldrb	r3, [r1]
    9754:	e3832010 	orr	r2, r3, #16	; 0x10
    9758:	e5c12000 	strb	r2, [r1]
    975c:	e1d430b0 	ldrh	r3, [r4]
    9760:	e3530000 	cmp	r3, #0	; 0x0
    9764:	13823002 	orrne	r3, r2, #2	; 0x2
    9768:	15c13000 	strneb	r3, [r1]
    976c:	ebffe4f7 	bl	2b50 <services_appcall>
    9770:	e3a00001 	mov	r0, #1	; 0x1
    9774:	e1c601b0 	strh	r0, [r6, #16]
    9778:	e3a03008 	mov	r3, #8	; 0x8
    977c:	e5c63019 	strb	r3, [r6, #25]
    9780:	e2433008 	sub	r3, r3, #8	; 0x8
    9784:	e5c6301b 	strb	r3, [r6, #27]
    9788:	e3a02011 	mov	r2, #17	; 0x11
    978c:	e51f3180 	ldr	r3, [pc, #-384]	; 9614 <prog+0x95cc>
    9790:	e5c32021 	strb	r2, [r3, #33]
    9794:	ea0000d0 	b	9adc <prog+0x9a94>
    9798:	e3130020 	tst	r3, #32	; 0x20
    979c:	0a00000a 	beq	97cc <prog+0x9784>
    97a0:	e51f11a0 	ldr	r1, [pc, #-416]	; 9608 <prog+0x95c0>
    97a4:	e5d43026 	ldrb	r3, [r4, #38]
    97a8:	e5d42027 	ldrb	r2, [r4, #39]
    97ac:	e1822403 	orr	r2, r2, r3, lsl #8
    97b0:	e5913000 	ldr	r3, [r1]
    97b4:	e0823003 	add	r3, r2, r3
    97b8:	e5813000 	str	r3, [r1]
    97bc:	e51f11a4 	ldr	r1, [pc, #-420]	; 9620 <prog+0x95d8>
    97c0:	e1d130b0 	ldrh	r3, [r1]
    97c4:	e0623003 	rsb	r3, r2, r3
    97c8:	e1c130b0 	strh	r3, [r1]
    97cc:	e51f31b4 	ldr	r3, [pc, #-436]	; 9620 <prog+0x95d8>
    97d0:	e1d300b0 	ldrh	r0, [r3]
    97d4:	e3500000 	cmp	r0, #0	; 0x0
    97d8:	0a000007 	beq	97fc <prog+0x97b4>
    97dc:	e5d63019 	ldrb	r3, [r6, #25]
    97e0:	e3130010 	tst	r3, #16	; 0x10
    97e4:	1a000004 	bne	97fc <prog+0x97b4>
    97e8:	e51f21cc 	ldr	r2, [pc, #-460]	; 9624 <prog+0x95dc>
    97ec:	e5d23000 	ldrb	r3, [r2]
    97f0:	e3833002 	orr	r3, r3, #2	; 0x2
    97f4:	e5c23000 	strb	r3, [r2]
    97f8:	ebfffacc 	bl	8330 <uip_add_rcv_nxt>
    97fc:	e5d43022 	ldrb	r3, [r4, #34]
    9800:	e5d42023 	ldrb	r2, [r4, #35]
    9804:	e0822403 	add	r2, r2, r3, lsl #8
    9808:	e1a02802 	mov	r2, r2, lsl #16
    980c:	e1a02822 	mov	r2, r2, lsr #16
    9810:	e51f3218 	ldr	r3, [pc, #-536]	; 9600 <prog+0x95b8>
    9814:	e1c320b0 	strh	r2, [r3]
    9818:	e1d611b4 	ldrh	r1, [r6, #20]
    981c:	e1520001 	cmp	r2, r1
    9820:	8a000001 	bhi	982c <prog+0x97e4>
    9824:	e3520000 	cmp	r2, #0	; 0x0
    9828:	1a000001 	bne	9834 <prog+0x97ec>
    982c:	e51f3234 	ldr	r3, [pc, #-564]	; 9600 <prog+0x95b8>
    9830:	e1c310b0 	strh	r1, [r3]
    9834:	e51f323c 	ldr	r3, [pc, #-572]	; 9600 <prog+0x95b8>
    9838:	e1d330b0 	ldrh	r3, [r3]
    983c:	e1c631b2 	strh	r3, [r6, #18]
    9840:	e51f3224 	ldr	r3, [pc, #-548]	; 9624 <prog+0x95dc>
    9844:	e5d33000 	ldrb	r3, [r3]
    9848:	e3130003 	tst	r3, #3	; 0x3
    984c:	0a00010b 	beq	9c80 <prog+0x9c38>
    9850:	e51f324c 	ldr	r3, [pc, #-588]	; 960c <prog+0x95c4>
    9854:	e3a01000 	mov	r1, #0	; 0x0
    9858:	e1c310b0 	strh	r1, [r3]
    985c:	ebffe4bb 	bl	2b50 <services_appcall>
    9860:	e51f3244 	ldr	r3, [pc, #-580]	; 9624 <prog+0x95dc>
    9864:	e5d32000 	ldrb	r2, [r3]
    9868:	e3120020 	tst	r2, #32	; 0x20
    986c:	0a000007 	beq	9890 <prog+0x9848>
    9870:	e3a02000 	mov	r2, #0	; 0x0
    9874:	e51f3270 	ldr	r3, [pc, #-624]	; 960c <prog+0x95c4>
    9878:	e1c320b0 	strh	r2, [r3]
    987c:	e5c52019 	strb	r2, [r5, #25]
    9880:	e2822014 	add	r2, r2, #20	; 0x14
    9884:	e51f3278 	ldr	r3, [pc, #-632]	; 9614 <prog+0x95cc>
    9888:	e5c32021 	strb	r2, [r3, #33]
    988c:	ea000092 	b	9adc <prog+0x9a94>
    9890:	e3120010 	tst	r2, #16	; 0x10
    9894:	0a00000c 	beq	98cc <prog+0x9884>
    9898:	e3a02000 	mov	r2, #0	; 0x0
    989c:	e1a01002 	mov	r1, r2
    98a0:	e51f329c 	ldr	r3, [pc, #-668]	; 960c <prog+0x95c4>
    98a4:	e1c320b0 	strh	r2, [r3]
    98a8:	e3a02001 	mov	r2, #1	; 0x1
    98ac:	e1c521b0 	strh	r2, [r5, #16]
    98b0:	e3a03004 	mov	r3, #4	; 0x4
    98b4:	e5c53019 	strb	r3, [r5, #25]
    98b8:	e5c5101b 	strb	r1, [r5, #27]
    98bc:	e3a02011 	mov	r2, #17	; 0x11
    98c0:	e51f32b4 	ldr	r3, [pc, #-692]	; 9614 <prog+0x95cc>
    98c4:	e5c32021 	strb	r2, [r3, #33]
    98c8:	ea000083 	b	9adc <prog+0x9a94>
    98cc:	e51f32c8 	ldr	r3, [pc, #-712]	; 960c <prog+0x95c4>
    98d0:	e1d330b0 	ldrh	r3, [r3]
    98d4:	e3530000 	cmp	r3, #0	; 0x0
    98d8:	0a000010 	beq	9920 <prog+0x98d8>
    98dc:	e3120001 	tst	r2, #1	; 0x1
    98e0:	13a03000 	movne	r3, #0	; 0x0
    98e4:	11c531b0 	strneh	r3, [r5, #16]
    98e8:	1a000004 	bne	9900 <prog+0x98b8>
    98ec:	e1d521b0 	ldrh	r2, [r5, #16]
    98f0:	e3520000 	cmp	r2, #0	; 0x0
    98f4:	151f32f0 	ldrne	r3, [pc, #-752]	; 960c <prog+0x95c4>
    98f8:	11c320b0 	strneh	r2, [r3]
    98fc:	1a000007 	bne	9920 <prog+0x98d8>
    9900:	e1d521b2 	ldrh	r2, [r5, #18]
    9904:	e51f1300 	ldr	r1, [pc, #-768]	; 960c <prog+0x95c4>
    9908:	e1d130b0 	ldrh	r3, [r1]
    990c:	e1530002 	cmp	r3, r2
    9910:	81c120b0 	strhih	r2, [r1]
    9914:	e51f3310 	ldr	r3, [pc, #-784]	; 960c <prog+0x95c4>
    9918:	e1d330b0 	ldrh	r3, [r3]
    991c:	e1c531b0 	strh	r3, [r5, #16]
    9920:	e3a03000 	mov	r3, #0	; 0x0
    9924:	e5c5301b 	strb	r3, [r5, #27]
    9928:	e51f332c 	ldr	r3, [pc, #-812]	; 9604 <prog+0x95bc>
    992c:	e5932000 	ldr	r2, [r3]
    9930:	e51f3330 	ldr	r3, [pc, #-816]	; 9608 <prog+0x95c0>
    9934:	e5832000 	str	r2, [r3]
    9938:	e51f3334 	ldr	r3, [pc, #-820]	; 960c <prog+0x95c4>
    993c:	e1d330b0 	ldrh	r3, [r3]
    9940:	e3530000 	cmp	r3, #0	; 0x0
    9944:	0a000009 	beq	9970 <prog+0x9928>
    9948:	e1d521b0 	ldrh	r2, [r5, #16]
    994c:	e3520000 	cmp	r2, #0	; 0x0
    9950:	0a000006 	beq	9970 <prog+0x9928>
    9954:	e2822028 	add	r2, r2, #40	; 0x28
    9958:	e51f3340 	ldr	r3, [pc, #-832]	; 9620 <prog+0x95d8>
    995c:	e1c320b0 	strh	r2, [r3]
    9960:	e3a02018 	mov	r2, #24	; 0x18
    9964:	e51f3358 	ldr	r3, [pc, #-856]	; 9614 <prog+0x95cc>
    9968:	e5c32021 	strb	r2, [r3, #33]
    996c:	ea00005d 	b	9ae8 <prog+0x9aa0>
    9970:	e51f3354 	ldr	r3, [pc, #-852]	; 9624 <prog+0x95dc>
    9974:	e5d33000 	ldrb	r3, [r3]
    9978:	e3130002 	tst	r3, #2	; 0x2
    997c:	0a0000bf 	beq	9c80 <prog+0x9c38>
    9980:	e51f3368 	ldr	r3, [pc, #-872]	; 9620 <prog+0x95d8>
    9984:	e3a0c028 	mov	ip, #40	; 0x28
    9988:	e1c3c0b0 	strh	ip, [r3]
    998c:	e3a02010 	mov	r2, #16	; 0x10
    9990:	e51f3384 	ldr	r3, [pc, #-900]	; 9614 <prog+0x95cc>
    9994:	e5c32021 	strb	r2, [r3, #33]
    9998:	ea000052 	b	9ae8 <prog+0x9aa0>
    999c:	e51f2380 	ldr	r2, [pc, #-896]	; 9624 <prog+0x95dc>
    99a0:	e5d23000 	ldrb	r3, [r2]
    99a4:	e3130001 	tst	r3, #1	; 0x1
    99a8:	0a0000b4 	beq	9c80 <prog+0x9c38>
    99ac:	e3a03000 	mov	r3, #0	; 0x0
    99b0:	e5c63019 	strb	r3, [r6, #25]
    99b4:	e2833010 	add	r3, r3, #16	; 0x10
    99b8:	e5c23000 	strb	r3, [r2]
    99bc:	ebffe463 	bl	2b50 <services_appcall>
    99c0:	ea0000ae 	b	9c80 <prog+0x9c38>
    99c4:	e51f33ac 	ldr	r3, [pc, #-940]	; 9620 <prog+0x95d8>
    99c8:	e1d300b0 	ldrh	r0, [r3]
    99cc:	e3500000 	cmp	r0, #0	; 0x0
    99d0:	1bfffa56 	blne	8330 <uip_add_rcv_nxt>
    99d4:	e5d43021 	ldrb	r3, [r4, #33]
    99d8:	e3130001 	tst	r3, #1	; 0x1
    99dc:	0a000010 	beq	9a24 <prog+0x99dc>
    99e0:	e51f33c4 	ldr	r3, [pc, #-964]	; 9624 <prog+0x95dc>
    99e4:	e5d33000 	ldrb	r3, [r3]
    99e8:	e3130001 	tst	r3, #1	; 0x1
    99ec:	13a03007 	movne	r3, #7	; 0x7
    99f0:	15c63019 	strneb	r3, [r6, #25]
    99f4:	12433007 	subne	r3, r3, #7	; 0x7
    99f8:	15c6301a 	strneb	r3, [r6, #26]
    99fc:	11c631b0 	strneh	r3, [r6, #16]
    9a00:	03a03006 	moveq	r3, #6	; 0x6
    9a04:	05c63019 	streqb	r3, [r6, #25]
    9a08:	e3a00001 	mov	r0, #1	; 0x1
    9a0c:	ebfffa47 	bl	8330 <uip_add_rcv_nxt>
    9a10:	e3a02010 	mov	r2, #16	; 0x10
    9a14:	e51f33f8 	ldr	r3, [pc, #-1016]	; 9624 <prog+0x95dc>
    9a18:	e5c32000 	strb	r2, [r3]
    9a1c:	ebffe44b 	bl	2b50 <services_appcall>
    9a20:	ea00002b 	b	9ad4 <prog+0x9a8c>
    9a24:	e51f3408 	ldr	r3, [pc, #-1032]	; 9624 <prog+0x95dc>
    9a28:	e5d33000 	ldrb	r3, [r3]
    9a2c:	e3130001 	tst	r3, #1	; 0x1
    9a30:	13a03005 	movne	r3, #5	; 0x5
    9a34:	15c63019 	strneb	r3, [r6, #25]
    9a38:	13a00000 	movne	r0, #0	; 0x0
    9a3c:	11c601b0 	strneh	r0, [r6, #16]
    9a40:	1a00008e 	bne	9c80 <prog+0x9c38>
    9a44:	e51f342c 	ldr	r3, [pc, #-1068]	; 9620 <prog+0x95d8>
    9a48:	e1d330b0 	ldrh	r3, [r3]
    9a4c:	e3530000 	cmp	r3, #0	; 0x0
    9a50:	1a00001f 	bne	9ad4 <prog+0x9a8c>
    9a54:	ea000089 	b	9c80 <prog+0x9c38>
    9a58:	e51f3440 	ldr	r3, [pc, #-1088]	; 9620 <prog+0x95d8>
    9a5c:	e1d300b0 	ldrh	r0, [r3]
    9a60:	e3500000 	cmp	r0, #0	; 0x0
    9a64:	1bfffa31 	blne	8330 <uip_add_rcv_nxt>
    9a68:	e5d43021 	ldrb	r3, [r4, #33]
    9a6c:	e3130001 	tst	r3, #1	; 0x1
    9a70:	0a00000a 	beq	9aa0 <prog+0x9a58>
    9a74:	e3a03007 	mov	r3, #7	; 0x7
    9a78:	e5c63019 	strb	r3, [r6, #25]
    9a7c:	e2433007 	sub	r3, r3, #7	; 0x7
    9a80:	e5c6301a 	strb	r3, [r6, #26]
    9a84:	e3a00001 	mov	r0, #1	; 0x1
    9a88:	ebfffa28 	bl	8330 <uip_add_rcv_nxt>
    9a8c:	e3a02010 	mov	r2, #16	; 0x10
    9a90:	e51f3474 	ldr	r3, [pc, #-1140]	; 9624 <prog+0x95dc>
    9a94:	e5c32000 	strb	r2, [r3]
    9a98:	ebffe42c 	bl	2b50 <services_appcall>
    9a9c:	ea00000c 	b	9ad4 <prog+0x9a8c>
    9aa0:	e51f3488 	ldr	r3, [pc, #-1160]	; 9620 <prog+0x95d8>
    9aa4:	e1d330b0 	ldrh	r3, [r3]
    9aa8:	e3530000 	cmp	r3, #0	; 0x0
    9aac:	1a000008 	bne	9ad4 <prog+0x9a8c>
    9ab0:	ea000072 	b	9c80 <prog+0x9c38>
    9ab4:	e51f3498 	ldr	r3, [pc, #-1176]	; 9624 <prog+0x95dc>
    9ab8:	e5d33000 	ldrb	r3, [r3]
    9abc:	e3130001 	tst	r3, #1	; 0x1
    9ac0:	13a03007 	movne	r3, #7	; 0x7
    9ac4:	15c63019 	strneb	r3, [r6, #25]
    9ac8:	12433007 	subne	r3, r3, #7	; 0x7
    9acc:	15c6301a 	strneb	r3, [r6, #26]
    9ad0:	ea00006a 	b	9c80 <prog+0x9c38>
    9ad4:	e3a03010 	mov	r3, #16	; 0x10
    9ad8:	e5c43021 	strb	r3, [r4, #33]
    9adc:	e51f34c4 	ldr	r3, [pc, #-1220]	; 9620 <prog+0x95d8>
    9ae0:	e3a01028 	mov	r1, #40	; 0x28
    9ae4:	e1c310b0 	strh	r1, [r3]
    9ae8:	e3a02050 	mov	r2, #80	; 0x50
    9aec:	e51f34e0 	ldr	r3, [pc, #-1248]	; 9614 <prog+0x95cc>
    9af0:	e5c32020 	strb	r2, [r3, #32]
    9af4:	e51f14e8 	ldr	r1, [pc, #-1256]	; 9614 <prog+0x95cc>
    9af8:	e5d53008 	ldrb	r3, [r5, #8]
    9afc:	e5c1301c 	strb	r3, [r1, #28]
    9b00:	e5d53009 	ldrb	r3, [r5, #9]
    9b04:	e5c1301d 	strb	r3, [r1, #29]
    9b08:	e5d5300a 	ldrb	r3, [r5, #10]
    9b0c:	e5c1301e 	strb	r3, [r1, #30]
    9b10:	e5d5300b 	ldrb	r3, [r5, #11]
    9b14:	e5c1301f 	strb	r3, [r1, #31]
    9b18:	e5d5300c 	ldrb	r3, [r5, #12]
    9b1c:	e5c13018 	strb	r3, [r1, #24]
    9b20:	e5d5300d 	ldrb	r3, [r5, #13]
    9b24:	e5c13019 	strb	r3, [r1, #25]
    9b28:	e5d5300e 	ldrb	r3, [r5, #14]
    9b2c:	e5c1301a 	strb	r3, [r1, #26]
    9b30:	e5d5300f 	ldrb	r3, [r5, #15]
    9b34:	e5c1301b 	strb	r3, [r1, #27]
    9b38:	e3a03006 	mov	r3, #6	; 0x6
    9b3c:	e5c13009 	strb	r3, [r1, #9]
    9b40:	e5d53004 	ldrb	r3, [r5, #4]
    9b44:	e3a00000 	mov	r0, #0	; 0x0
    9b48:	e5c13014 	strb	r3, [r1, #20]
    9b4c:	e5d53005 	ldrb	r3, [r5, #5]
    9b50:	e5c13015 	strb	r3, [r1, #21]
    9b54:	e5d53006 	ldrb	r3, [r5, #6]
    9b58:	e5c13016 	strb	r3, [r1, #22]
    9b5c:	e5d53007 	ldrb	r3, [r5, #7]
    9b60:	e5c13017 	strb	r3, [r1, #23]
    9b64:	e241300e 	sub	r3, r1, #14	; 0xe
    9b68:	e51f2560 	ldr	r2, [pc, #-1376]	; 9610 <prog+0x95c8>
    9b6c:	e1d2c0b0 	ldrh	ip, [r2]
    9b70:	e1c3c1ba 	strh	ip, [r3, #26]
    9b74:	e1d220b2 	ldrh	r2, [r2, #2]
    9b78:	e1c321bc 	strh	r2, [r3, #28]
    9b7c:	e1d520b0 	ldrh	r2, [r5]
    9b80:	e1c321be 	strh	r2, [r3, #30]
    9b84:	e1d5c0b2 	ldrh	ip, [r5, #2]
    9b88:	e1c3c2b0 	strh	ip, [r3, #32]
    9b8c:	e5d53019 	ldrb	r3, [r5, #25]
    9b90:	e3130010 	tst	r3, #16	; 0x10
    9b94:	15c10023 	strneb	r0, [r1, #35]
    9b98:	15c10022 	strneb	r0, [r1, #34]
    9b9c:	03a03005 	moveq	r3, #5	; 0x5
    9ba0:	05c13022 	streqb	r3, [r1, #34]
    9ba4:	0243305f 	subeq	r3, r3, #95	; 0x5f
    9ba8:	05c13023 	streqb	r3, [r1, #35]
    9bac:	e51f45a0 	ldr	r4, [pc, #-1440]	; 9614 <prog+0x95cc>
    9bb0:	e3a03040 	mov	r3, #64	; 0x40
    9bb4:	e5c43008 	strb	r3, [r4, #8]
    9bb8:	e51f35a0 	ldr	r3, [pc, #-1440]	; 9620 <prog+0x95d8>
    9bbc:	e1d320b0 	ldrh	r2, [r3]
    9bc0:	e1a03422 	mov	r3, r2, lsr #8
    9bc4:	e5c43002 	strb	r3, [r4, #2]
    9bc8:	e5c42003 	strb	r2, [r4, #3]
    9bcc:	e3a03000 	mov	r3, #0	; 0x0
    9bd0:	e5c43027 	strb	r3, [r4, #39]
    9bd4:	e5c43026 	strb	r3, [r4, #38]
    9bd8:	e5c43024 	strb	r3, [r4, #36]
    9bdc:	e5c43025 	strb	r3, [r4, #37]
    9be0:	ebfffa73 	bl	85b4 <uip_tcpchksum>
    9be4:	e1e00000 	mvn	r0, r0
    9be8:	e5c40024 	strb	r0, [r4, #36]
    9bec:	e1a00420 	mov	r0, r0, lsr #8
    9bf0:	e5c40025 	strb	r0, [r4, #37]
    9bf4:	e51f45e8 	ldr	r4, [pc, #-1512]	; 9614 <prog+0x95cc>
    9bf8:	e3a03045 	mov	r3, #69	; 0x45
    9bfc:	e5c43000 	strb	r3, [r4]
    9c00:	e3a02000 	mov	r2, #0	; 0x0
    9c04:	e5c42001 	strb	r2, [r4, #1]
    9c08:	e5c42007 	strb	r2, [r4, #7]
    9c0c:	e5c42006 	strb	r2, [r4, #6]
    9c10:	e51f0600 	ldr	r0, [pc, #-1536]	; 9618 <prog+0x95d0>
    9c14:	e1d030b0 	ldrh	r3, [r0]
    9c18:	e2833001 	add	r3, r3, #1	; 0x1
    9c1c:	e1a03803 	mov	r3, r3, lsl #16
    9c20:	e1a01823 	mov	r1, r3, lsr #16
    9c24:	e1c010b0 	strh	r1, [r0]
    9c28:	e1a03c23 	mov	r3, r3, lsr #24
    9c2c:	e5c43004 	strb	r3, [r4, #4]
    9c30:	e5c41005 	strb	r1, [r4, #5]
    9c34:	e5c4200a 	strb	r2, [r4, #10]
    9c38:	e5c4200b 	strb	r2, [r4, #11]
    9c3c:	ebfffa60 	bl	85c4 <uip_ipchksum>
    9c40:	e1e00000 	mvn	r0, r0
    9c44:	e5c4000a 	strb	r0, [r4, #10]
    9c48:	e1a00420 	mov	r0, r0, lsr #8
    9c4c:	e5c4000b 	strb	r0, [r4, #11]
    9c50:	e51f263c 	ldr	r2, [pc, #-1596]	; 961c <prog+0x95d4>
    9c54:	e1d232b0 	ldrh	r3, [r2, #32]
    9c58:	e2833001 	add	r3, r3, #1	; 0x1
    9c5c:	e1c232b0 	strh	r3, [r2, #32]
    9c60:	e51f264c 	ldr	r2, [pc, #-1612]	; 961c <prog+0x95d4>
    9c64:	e1d230b4 	ldrh	r3, [r2, #4]
    9c68:	e2833001 	add	r3, r3, #1	; 0x1
    9c6c:	e1c230b4 	strh	r3, [r2, #4]
    9c70:	e3a02000 	mov	r2, #0	; 0x0
    9c74:	e51f3658 	ldr	r3, [pc, #-1624]	; 9624 <prog+0x95dc>
    9c78:	e5c32000 	strb	r2, [r3]
    9c7c:	ea000004 	b	9c94 <prog+0x9c4c>
    9c80:	e3a02000 	mov	r2, #0	; 0x0
    9c84:	e51f366c 	ldr	r3, [pc, #-1644]	; 9620 <prog+0x95d8>
    9c88:	e1c320b0 	strh	r2, [r3]
    9c8c:	e51f3670 	ldr	r3, [pc, #-1648]	; 9624 <prog+0x95dc>
    9c90:	e5c32000 	strb	r2, [r3]
    9c94:	e28dde7d 	add	sp, sp, #2000	; 0x7d0
    9c98:	e8bd81f0 	ldmia	sp!, {r4, r5, r6, r7, r8, pc}

00009c9c <uip_udp_new>:
    9c9c:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
    9ca0:	e1a06000 	mov	r6, r0
    9ca4:	e1a01801 	mov	r1, r1, lsl #16
    9ca8:	e1a07821 	mov	r7, r1, lsr #16
    9cac:	e59f30f4 	ldr	r3, [pc, #244]	; 9da8 <prog+0x9d60>
    9cb0:	e1d340b0 	ldrh	r4, [r3]
    9cb4:	e3a0331f 	mov	r3, #2080374784	; 0x7c000000
    9cb8:	e28358ff 	add	r5, r3, #16711680	; 0xff0000
    9cbc:	e2843001 	add	r3, r4, #1	; 0x1
    9cc0:	e1a03803 	mov	r3, r3, lsl #16
    9cc4:	e1a04823 	mov	r4, r3, lsr #16
    9cc8:	e1540825 	cmp	r4, r5, lsr #16
    9ccc:	83a04a01 	movhi	r4, #4096	; 0x1000
    9cd0:	e1a00004 	mov	r0, r4
    9cd4:	ebfff9ac 	bl	838c <htons>
    9cd8:	e59f20cc 	ldr	r2, [pc, #204]	; 9dac <prog+0x9d64>
    9cdc:	e3a01000 	mov	r1, #0	; 0x0
    9ce0:	e1d230b4 	ldrh	r3, [r2, #4]
    9ce4:	e1530000 	cmp	r3, r0
    9ce8:	0afffff3 	beq	9cbc <uip_udp_new+0x20>
    9cec:	e2813001 	add	r3, r1, #1	; 0x1
    9cf0:	e20310ff 	and	r1, r3, #255	; 0xff
    9cf4:	e2822044 	add	r2, r2, #68	; 0x44
    9cf8:	e351000a 	cmp	r1, #10	; 0xa
    9cfc:	1afffff7 	bne	9ce0 <uip_udp_new+0x44>
    9d00:	e59f30a0 	ldr	r3, [pc, #160]	; 9da8 <prog+0x9d60>
    9d04:	e1c340b0 	strh	r4, [r3]
    9d08:	e3a02000 	mov	r2, #0	; 0x0
    9d0c:	e59f309c 	ldr	r3, [pc, #156]	; 9db0 <prog+0x9d68>
    9d10:	e5c32000 	strb	r2, [r3]
    9d14:	e59fe090 	ldr	lr, [pc, #144]	; 9dac <prog+0x9d64>
    9d18:	e1a0c002 	mov	ip, r2
    9d1c:	e1a0000e 	mov	r0, lr
    9d20:	e20c10ff 	and	r1, ip, #255	; 0xff
    9d24:	e1de30b4 	ldrh	r3, [lr, #4]
    9d28:	e3530000 	cmp	r3, #0	; 0x0
    9d2c:	1a000005 	bne	9d48 <uip_udp_new+0xac>
    9d30:	e59f3078 	ldr	r3, [pc, #120]	; 9db0 <prog+0x9d68>
    9d34:	e5c32000 	strb	r2, [r3]
    9d38:	e0813201 	add	r3, r1, r1, lsl #4
    9d3c:	e0900103 	adds	r0, r0, r3, lsl #2
    9d40:	08bd80f0 	ldmeqia	sp!, {r4, r5, r6, r7, pc}
    9d44:	ea000009 	b	9d70 <uip_udp_new+0xd4>
    9d48:	e2813001 	add	r3, r1, #1	; 0x1
    9d4c:	e20320ff 	and	r2, r3, #255	; 0xff
    9d50:	e28cc001 	add	ip, ip, #1	; 0x1
    9d54:	e28ee044 	add	lr, lr, #68	; 0x44
    9d58:	e35c000a 	cmp	ip, #10	; 0xa
    9d5c:	1affffef 	bne	9d20 <uip_udp_new+0x84>
    9d60:	e59f3048 	ldr	r3, [pc, #72]	; 9db0 <prog+0x9d68>
    9d64:	e5c32000 	strb	r2, [r3]
    9d68:	e3a00000 	mov	r0, #0	; 0x0
    9d6c:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
    9d70:	e1a03424 	mov	r3, r4, lsr #8
    9d74:	e1833404 	orr	r3, r3, r4, lsl #8
    9d78:	e1c030b4 	strh	r3, [r0, #4]
    9d7c:	e1c070b6 	strh	r7, [r0, #6]
    9d80:	e3560000 	cmp	r6, #0	; 0x0
    9d84:	01c060b0 	streqh	r6, [r0]
    9d88:	01c060b2 	streqh	r6, [r0, #2]
    9d8c:	11d630b0 	ldrneh	r3, [r6]
    9d90:	11c030b0 	strneh	r3, [r0]
    9d94:	11d660b2 	ldrneh	r6, [r6, #2]
    9d98:	11c060b2 	strneh	r6, [r0, #2]
    9d9c:	e3a03040 	mov	r3, #64	; 0x40
    9da0:	e5c03008 	strb	r3, [r0, #8]
    9da4:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
    9da8:	40001560 	andmi	r1, r0, r0, ror #10
    9dac:	40003400 	andmi	r3, r0, r0, lsl #8
    9db0:	40001562 	andmi	r1, r0, r2, ror #10

00009db4 <start>:
    9db4:	e59f00b8 	ldr	r0, [pc, #184]	; 9e74 <prog+0x9e2c>
    9db8:	e321f0db 	msr	CPSR_c, #219	; 0xdb
    9dbc:	e1a0d000 	mov	sp, r0
    9dc0:	e2400004 	sub	r0, r0, #4	; 0x4
    9dc4:	e321f0d7 	msr	CPSR_c, #215	; 0xd7
    9dc8:	e1a0d000 	mov	sp, r0
    9dcc:	e2400004 	sub	r0, r0, #4	; 0x4
    9dd0:	e321f0d1 	msr	CPSR_c, #209	; 0xd1
    9dd4:	e1a0d000 	mov	sp, r0
    9dd8:	e2400004 	sub	r0, r0, #4	; 0x4
    9ddc:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
    9de0:	e1a0d000 	mov	sp, r0
    9de4:	e2400c01 	sub	r0, r0, #256	; 0x100
    9de8:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
    9dec:	e1a0d000 	mov	sp, r0
    9df0:	e2400c01 	sub	r0, r0, #256	; 0x100
    9df4:	e321f0df 	msr	CPSR_c, #223	; 0xdf
    9df8:	e1a0d000 	mov	sp, r0
    9dfc:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
    9e00:	e3a01000 	mov	r1, #0	; 0x0
    9e04:	e1a0b001 	mov	fp, r1
    9e08:	e1a07001 	mov	r7, r1
    9e0c:	e59f104c 	ldr	r1, [pc, #76]	; 9e60 <prog+0x9e18>
    9e10:	e59f304c 	ldr	r3, [pc, #76]	; 9e64 <prog+0x9e1c>
    9e14:	e0533001 	subs	r3, r3, r1
    9e18:	0a000003 	beq	9e2c <.end_clear_loop>
    9e1c:	e3a02000 	mov	r2, #0	; 0x0

00009e20 <.clear_loop>:
    9e20:	e4c12001 	strb	r2, [r1], #1
    9e24:	e2533001 	subs	r3, r3, #1	; 0x1
    9e28:	cafffffc 	bgt	9e20 <.clear_loop>

00009e2c <.end_clear_loop>:
    9e2c:	e59f1034 	ldr	r1, [pc, #52]	; 9e68 <prog+0x9e20>
    9e30:	e59f2034 	ldr	r2, [pc, #52]	; 9e6c <prog+0x9e24>
    9e34:	e59f3034 	ldr	r3, [pc, #52]	; 9e70 <prog+0x9e28>
    9e38:	e0533001 	subs	r3, r3, r1
    9e3c:	0a000003 	beq	9e50 <.end_set_loop>

00009e40 <.set_loop>:
    9e40:	e4d24001 	ldrb	r4, [r2], #1
    9e44:	e4c14001 	strb	r4, [r1], #1
    9e48:	e2533001 	subs	r3, r3, #1	; 0x1
    9e4c:	cafffffb 	bgt	9e40 <.set_loop>

00009e50 <.end_set_loop>:
    9e50:	e3a00000 	mov	r0, #0	; 0x0
    9e54:	e3a01000 	mov	r1, #0	; 0x0
    9e58:	ebffd95b 	bl	3cc <main>

00009e5c <endless_loop>:
    9e5c:	eafffffe 	b	9e5c <endless_loop>
    9e60:	4000083c 	andmi	r0, r0, ip, lsr r8
    9e64:	400036a8 	andmi	r3, r0, r8, lsr #13
    9e68:	40000000 	andmi	r0, r0, r0
    9e6c:	00014f24 	andeq	r4, r1, r4, lsr #30
    9e70:	4000083c 	andmi	r0, r0, ip, lsr r8
    9e74:	40007ffc 	strmid	r7, [r0], -ip

00009e78 <__aeabi_uidiv>:
    9e78:	e2512001 	subs	r2, r1, #1	; 0x1
    9e7c:	012fff1e 	bxeq	lr
    9e80:	3a000036 	bcc	9f60 <__aeabi_uidiv+0xe8>
    9e84:	e1500001 	cmp	r0, r1
    9e88:	9a000022 	bls	9f18 <__aeabi_uidiv+0xa0>
    9e8c:	e1110002 	tst	r1, r2
    9e90:	0a000023 	beq	9f24 <__aeabi_uidiv+0xac>
    9e94:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    9e98:	01a01181 	moveq	r1, r1, lsl #3
    9e9c:	03a03008 	moveq	r3, #8	; 0x8
    9ea0:	13a03001 	movne	r3, #1	; 0x1
    9ea4:	e3510201 	cmp	r1, #268435456	; 0x10000000
    9ea8:	31510000 	cmpcc	r1, r0
    9eac:	31a01201 	movcc	r1, r1, lsl #4
    9eb0:	31a03203 	movcc	r3, r3, lsl #4
    9eb4:	3afffffa 	bcc	9ea4 <__aeabi_uidiv+0x2c>
    9eb8:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    9ebc:	31510000 	cmpcc	r1, r0
    9ec0:	31a01081 	movcc	r1, r1, lsl #1
    9ec4:	31a03083 	movcc	r3, r3, lsl #1
    9ec8:	3afffffa 	bcc	9eb8 <__aeabi_uidiv+0x40>
    9ecc:	e3a02000 	mov	r2, #0	; 0x0
    9ed0:	e1500001 	cmp	r0, r1
    9ed4:	20400001 	subcs	r0, r0, r1
    9ed8:	21822003 	orrcs	r2, r2, r3
    9edc:	e15000a1 	cmp	r0, r1, lsr #1
    9ee0:	204000a1 	subcs	r0, r0, r1, lsr #1
    9ee4:	218220a3 	orrcs	r2, r2, r3, lsr #1
    9ee8:	e1500121 	cmp	r0, r1, lsr #2
    9eec:	20400121 	subcs	r0, r0, r1, lsr #2
    9ef0:	21822123 	orrcs	r2, r2, r3, lsr #2
    9ef4:	e15001a1 	cmp	r0, r1, lsr #3
    9ef8:	204001a1 	subcs	r0, r0, r1, lsr #3
    9efc:	218221a3 	orrcs	r2, r2, r3, lsr #3
    9f00:	e3500000 	cmp	r0, #0	; 0x0
    9f04:	11b03223 	movnes	r3, r3, lsr #4
    9f08:	11a01221 	movne	r1, r1, lsr #4
    9f0c:	1affffef 	bne	9ed0 <__aeabi_uidiv+0x58>
    9f10:	e1a00002 	mov	r0, r2
    9f14:	e12fff1e 	bx	lr
    9f18:	03a00001 	moveq	r0, #1	; 0x1
    9f1c:	13a00000 	movne	r0, #0	; 0x0
    9f20:	e12fff1e 	bx	lr
    9f24:	e3510801 	cmp	r1, #65536	; 0x10000
    9f28:	21a01821 	movcs	r1, r1, lsr #16
    9f2c:	23a02010 	movcs	r2, #16	; 0x10
    9f30:	33a02000 	movcc	r2, #0	; 0x0
    9f34:	e3510c01 	cmp	r1, #256	; 0x100
    9f38:	21a01421 	movcs	r1, r1, lsr #8
    9f3c:	22822008 	addcs	r2, r2, #8	; 0x8
    9f40:	e3510010 	cmp	r1, #16	; 0x10
    9f44:	21a01221 	movcs	r1, r1, lsr #4
    9f48:	22822004 	addcs	r2, r2, #4	; 0x4
    9f4c:	e3510004 	cmp	r1, #4	; 0x4
    9f50:	82822003 	addhi	r2, r2, #3	; 0x3
    9f54:	908220a1 	addls	r2, r2, r1, lsr #1
    9f58:	e1a00230 	mov	r0, r0, lsr r2
    9f5c:	e12fff1e 	bx	lr
    9f60:	e52de008 	str	lr, [sp, #-8]!
    9f64:	eb00003a 	bl	a054 <__aeabi_idiv0>
    9f68:	e3a00000 	mov	r0, #0	; 0x0
    9f6c:	e49df008 	ldr	pc, [sp], #8

00009f70 <__aeabi_uidivmod>:
    9f70:	e92d4003 	stmdb	sp!, {r0, r1, lr}
    9f74:	ebffffbf 	bl	9e78 <__aeabi_uidiv>
    9f78:	e8bd4006 	ldmia	sp!, {r1, r2, lr}
    9f7c:	e0030092 	mul	r3, r2, r0
    9f80:	e0411003 	sub	r1, r1, r3
    9f84:	e12fff1e 	bx	lr

00009f88 <__umodsi3>:
    9f88:	e2512001 	subs	r2, r1, #1	; 0x1
    9f8c:	3a00002c 	bcc	a044 <__umodsi3+0xbc>
    9f90:	11500001 	cmpne	r0, r1
    9f94:	03a00000 	moveq	r0, #0	; 0x0
    9f98:	81110002 	tsthi	r1, r2
    9f9c:	00000002 	andeq	r0, r0, r2
    9fa0:	912fff1e 	bxls	lr
    9fa4:	e3a02000 	mov	r2, #0	; 0x0
    9fa8:	e3510201 	cmp	r1, #268435456	; 0x10000000
    9fac:	31510000 	cmpcc	r1, r0
    9fb0:	31a01201 	movcc	r1, r1, lsl #4
    9fb4:	32822004 	addcc	r2, r2, #4	; 0x4
    9fb8:	3afffffa 	bcc	9fa8 <__umodsi3+0x20>
    9fbc:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    9fc0:	31510000 	cmpcc	r1, r0
    9fc4:	31a01081 	movcc	r1, r1, lsl #1
    9fc8:	32822001 	addcc	r2, r2, #1	; 0x1
    9fcc:	3afffffa 	bcc	9fbc <__umodsi3+0x34>
    9fd0:	e2522003 	subs	r2, r2, #3	; 0x3
    9fd4:	ba00000e 	blt	a014 <__umodsi3+0x8c>
    9fd8:	e1500001 	cmp	r0, r1
    9fdc:	20400001 	subcs	r0, r0, r1
    9fe0:	e15000a1 	cmp	r0, r1, lsr #1
    9fe4:	204000a1 	subcs	r0, r0, r1, lsr #1
    9fe8:	e1500121 	cmp	r0, r1, lsr #2
    9fec:	20400121 	subcs	r0, r0, r1, lsr #2
    9ff0:	e15001a1 	cmp	r0, r1, lsr #3
    9ff4:	204001a1 	subcs	r0, r0, r1, lsr #3
    9ff8:	e3500001 	cmp	r0, #1	; 0x1
    9ffc:	e1a01221 	mov	r1, r1, lsr #4
    a000:	a2522004 	subges	r2, r2, #4	; 0x4
    a004:	aafffff3 	bge	9fd8 <__umodsi3+0x50>
    a008:	e3120003 	tst	r2, #3	; 0x3
    a00c:	13300000 	teqne	r0, #0	; 0x0
    a010:	0a00000a 	beq	a040 <__umodsi3+0xb8>
    a014:	e3720002 	cmn	r2, #2	; 0x2
    a018:	ba000006 	blt	a038 <__umodsi3+0xb0>
    a01c:	0a000002 	beq	a02c <__umodsi3+0xa4>
    a020:	e1500001 	cmp	r0, r1
    a024:	20400001 	subcs	r0, r0, r1
    a028:	e1a010a1 	mov	r1, r1, lsr #1
    a02c:	e1500001 	cmp	r0, r1
    a030:	20400001 	subcs	r0, r0, r1
    a034:	e1a010a1 	mov	r1, r1, lsr #1
    a038:	e1500001 	cmp	r0, r1
    a03c:	20400001 	subcs	r0, r0, r1
    a040:	e12fff1e 	bx	lr
    a044:	e52de008 	str	lr, [sp, #-8]!
    a048:	eb000001 	bl	a054 <__aeabi_idiv0>
    a04c:	e3a00000 	mov	r0, #0	; 0x0
    a050:	e49df008 	ldr	pc, [sp], #8

0000a054 <__aeabi_idiv0>:
    a054:	e12fff1e 	bx	lr

0000a058 <nan>:
    a058:	e59f0000 	ldr	r0, [pc, #0]	; a060 <prog+0xa018>
    a05c:	e12fff1e 	bx	lr
    a060:	00014420 	andeq	r4, r1, r0, lsr #8

0000a064 <isnan>:
    a064:	e5900000 	ldr	r0, [r0]
    a068:	e3500001 	cmp	r0, #1	; 0x1
    a06c:	83a00000 	movhi	r0, #0	; 0x0
    a070:	93a00001 	movls	r0, #1	; 0x1
    a074:	e12fff1e 	bx	lr

0000a078 <isinf>:
    a078:	e5900000 	ldr	r0, [r0]
    a07c:	e3500004 	cmp	r0, #4	; 0x4
    a080:	13a00000 	movne	r0, #0	; 0x0
    a084:	03a00001 	moveq	r0, #1	; 0x1
    a088:	e12fff1e 	bx	lr

0000a08c <iszero>:
    a08c:	e5900000 	ldr	r0, [r0]
    a090:	e3500002 	cmp	r0, #2	; 0x2
    a094:	13a00000 	movne	r0, #0	; 0x0
    a098:	03a00001 	moveq	r0, #1	; 0x1
    a09c:	e12fff1e 	bx	lr

0000a0a0 <_fpadd_parts>:
    a0a0:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a0a4:	e24dd004 	sub	sp, sp, #4	; 0x4
    a0a8:	e1a07001 	mov	r7, r1
    a0ac:	e1a06002 	mov	r6, r2
    a0b0:	e1a05000 	mov	r5, r0
    a0b4:	ebffffea 	bl	a064 <isnan>
    a0b8:	e3500000 	cmp	r0, #0	; 0x0
    a0bc:	0a000002 	beq	a0cc <_fpadd_parts+0x2c>
    a0c0:	e1a00005 	mov	r0, r5
    a0c4:	e28dd004 	add	sp, sp, #4	; 0x4
    a0c8:	e8bd8ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a0cc:	e1a00007 	mov	r0, r7
    a0d0:	ebffffe3 	bl	a064 <isnan>
    a0d4:	e3500000 	cmp	r0, #0	; 0x0
    a0d8:	0a000001 	beq	a0e4 <_fpadd_parts+0x44>
    a0dc:	e1a05007 	mov	r5, r7
    a0e0:	eafffff6 	b	a0c0 <_fpadd_parts+0x20>
    a0e4:	e1a00005 	mov	r0, r5
    a0e8:	ebffffe2 	bl	a078 <isinf>
    a0ec:	e3500000 	cmp	r0, #0	; 0x0
    a0f0:	1a000068 	bne	a298 <_fpadd_parts+0x1f8>
    a0f4:	e1a00007 	mov	r0, r7
    a0f8:	ebffffde 	bl	a078 <isinf>
    a0fc:	e3500000 	cmp	r0, #0	; 0x0
    a100:	1afffff5 	bne	a0dc <_fpadd_parts+0x3c>
    a104:	e1a00007 	mov	r0, r7
    a108:	ebffffdf 	bl	a08c <iszero>
    a10c:	e3500000 	cmp	r0, #0	; 0x0
    a110:	1a00006b 	bne	a2c4 <_fpadd_parts+0x224>
    a114:	e1a00005 	mov	r0, r5
    a118:	ebffffdb 	bl	a08c <iszero>
    a11c:	e3500000 	cmp	r0, #0	; 0x0
    a120:	1affffed 	bne	a0dc <_fpadd_parts+0x3c>
    a124:	e5953008 	ldr	r3, [r5, #8]
    a128:	e597c008 	ldr	ip, [r7, #8]
    a12c:	e06ce003 	rsb	lr, ip, r3
    a130:	e58d3000 	str	r3, [sp]
    a134:	e02e3fce 	eor	r3, lr, lr, asr #31
    a138:	e0433fce 	sub	r3, r3, lr, asr #31
    a13c:	e353003f 	cmp	r3, #63	; 0x3f
    a140:	e285a00c 	add	sl, r5, #12	; 0xc
    a144:	e89a0c00 	ldmia	sl, {sl, fp}
    a148:	e287800c 	add	r8, r7, #12	; 0xc
    a14c:	e8980300 	ldmia	r8, {r8, r9}
    a150:	ca000081 	bgt	a35c <_fpadd_parts+0x2bc>
    a154:	e59d4000 	ldr	r4, [sp]
    a158:	e154000c 	cmp	r4, ip
    a15c:	da00000b 	ble	a190 <_fpadd_parts+0xf0>
    a160:	e2800001 	add	r0, r0, #1	; 0x1
    a164:	e3a03001 	mov	r3, #1	; 0x1
    a168:	e3a04000 	mov	r4, #0	; 0x0
    a16c:	e1b020a9 	movs	r2, r9, lsr #1
    a170:	e1a01068 	mov	r1, r8, rrx
    a174:	e0088003 	and	r8, r8, r3
    a178:	e0099004 	and	r9, r9, r4
    a17c:	e150000e 	cmp	r0, lr
    a180:	e1888001 	orr	r8, r8, r1
    a184:	e1899002 	orr	r9, r9, r2
    a188:	1afffff4 	bne	a160 <_fpadd_parts+0xc0>
    a18c:	e08cc000 	add	ip, ip, r0
    a190:	e59d4000 	ldr	r4, [sp]
    a194:	e154000c 	cmp	r4, ip
    a198:	aa00000f 	bge	a1dc <_fpadd_parts+0x13c>
    a19c:	e064c00c 	rsb	ip, r4, ip
    a1a0:	e3a00000 	mov	r0, #0	; 0x0
    a1a4:	e2800001 	add	r0, r0, #1	; 0x1
    a1a8:	e3a03001 	mov	r3, #1	; 0x1
    a1ac:	e3a04000 	mov	r4, #0	; 0x0
    a1b0:	e1b020ab 	movs	r2, fp, lsr #1
    a1b4:	e1a0106a 	mov	r1, sl, rrx
    a1b8:	e00aa003 	and	sl, sl, r3
    a1bc:	e00bb004 	and	fp, fp, r4
    a1c0:	e15c0000 	cmp	ip, r0
    a1c4:	e18aa001 	orr	sl, sl, r1
    a1c8:	e18bb002 	orr	fp, fp, r2
    a1cc:	1afffff4 	bne	a1a4 <_fpadd_parts+0x104>
    a1d0:	e59d4000 	ldr	r4, [sp]
    a1d4:	e0844000 	add	r4, r4, r0
    a1d8:	e58d4000 	str	r4, [sp]
    a1dc:	e5950004 	ldr	r0, [r5, #4]
    a1e0:	e5973004 	ldr	r3, [r7, #4]
    a1e4:	e1500003 	cmp	r0, r3
    a1e8:	0a000068 	beq	a390 <_fpadd_parts+0x2f0>
    a1ec:	e3500000 	cmp	r0, #0	; 0x0
    a1f0:	0a000061 	beq	a37c <_fpadd_parts+0x2dc>
    a1f4:	e1a01008 	mov	r1, r8
    a1f8:	e1a02009 	mov	r2, r9
    a1fc:	e051100a 	subs	r1, r1, sl
    a200:	e0c2200b 	sbc	r2, r2, fp
    a204:	e3520000 	cmp	r2, #0	; 0x0
    a208:	ba000067 	blt	a3ac <_fpadd_parts+0x30c>
    a20c:	e586100c 	str	r1, [r6, #12]
    a210:	e5862010 	str	r2, [r6, #16]
    a214:	e59d4000 	ldr	r4, [sp]
    a218:	e3a03000 	mov	r3, #0	; 0x0
    a21c:	e9860018 	stmib	r6, {r3, r4}
    a220:	e286100c 	add	r1, r6, #12	; 0xc
    a224:	e8910006 	ldmia	r1, {r1, r2}
    a228:	e3e07000 	mvn	r7, #0	; 0x0
    a22c:	e0977001 	adds	r7, r7, r1
    a230:	e3e08000 	mvn	r8, #0	; 0x0
    a234:	e0a88002 	adc	r8, r8, r2
    a238:	e378021f 	cmn	r8, #-268435455	; 0xf0000001
    a23c:	e1a0a001 	mov	sl, r1
    a240:	e1a0b002 	mov	fp, r2
    a244:	8a000030 	bhi	a30c <_fpadd_parts+0x26c>
    a248:	0a00002d 	beq	a304 <_fpadd_parts+0x264>
    a24c:	e5963008 	ldr	r3, [r6, #8]
    a250:	e09a100a 	adds	r1, sl, sl
    a254:	e3e07000 	mvn	r7, #0	; 0x0
    a258:	e0ab200b 	adc	r2, fp, fp
    a25c:	e3e08000 	mvn	r8, #0	; 0x0
    a260:	e0977001 	adds	r7, r7, r1
    a264:	e0a88002 	adc	r8, r8, r2
    a268:	e2433001 	sub	r3, r3, #1	; 0x1
    a26c:	e378021f 	cmn	r8, #-268435455	; 0xf0000001
    a270:	e586100c 	str	r1, [r6, #12]
    a274:	e5862010 	str	r2, [r6, #16]
    a278:	e5863008 	str	r3, [r6, #8]
    a27c:	e1a0a001 	mov	sl, r1
    a280:	e1a0b002 	mov	fp, r2
    a284:	8a000020 	bhi	a30c <_fpadd_parts+0x26c>
    a288:	1afffff0 	bne	a250 <_fpadd_parts+0x1b0>
    a28c:	e3770002 	cmn	r7, #2	; 0x2
    a290:	8a00001d 	bhi	a30c <_fpadd_parts+0x26c>
    a294:	eaffffed 	b	a250 <_fpadd_parts+0x1b0>
    a298:	e1a00007 	mov	r0, r7
    a29c:	ebffff75 	bl	a078 <isinf>
    a2a0:	e3500000 	cmp	r0, #0	; 0x0
    a2a4:	0affff85 	beq	a0c0 <_fpadd_parts+0x20>
    a2a8:	e5972004 	ldr	r2, [r7, #4]
    a2ac:	e5953004 	ldr	r3, [r5, #4]
    a2b0:	e1530002 	cmp	r3, r2
    a2b4:	0affff81 	beq	a0c0 <_fpadd_parts+0x20>
    a2b8:	e28dd004 	add	sp, sp, #4	; 0x4
    a2bc:	e8bd4ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a2c0:	eaffff64 	b	a058 <nan>
    a2c4:	e1a00005 	mov	r0, r5
    a2c8:	ebffff6f 	bl	a08c <iszero>
    a2cc:	e3500000 	cmp	r0, #0	; 0x0
    a2d0:	0affff7a 	beq	a0c0 <_fpadd_parts+0x20>
    a2d4:	e1a0c005 	mov	ip, r5
    a2d8:	e8bc000f 	ldmia	ip!, {r0, r1, r2, r3}
    a2dc:	e1a0e006 	mov	lr, r6
    a2e0:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
    a2e4:	e5953010 	ldr	r3, [r5, #16]
    a2e8:	e5863010 	str	r3, [r6, #16]
    a2ec:	e5952004 	ldr	r2, [r5, #4]
    a2f0:	e5973004 	ldr	r3, [r7, #4]
    a2f4:	e1a05006 	mov	r5, r6
    a2f8:	e0022003 	and	r2, r2, r3
    a2fc:	e5862004 	str	r2, [r6, #4]
    a300:	eaffff6e 	b	a0c0 <_fpadd_parts+0x20>
    a304:	e3770002 	cmn	r7, #2	; 0x2
    a308:	9affffcf 	bls	a24c <_fpadd_parts+0x1ac>
    a30c:	e372021e 	cmn	r2, #-536870911	; 0xe0000001
    a310:	e3a03003 	mov	r3, #3	; 0x3
    a314:	e5863000 	str	r3, [r6]
    a318:	91a05006 	movls	r5, r6
    a31c:	9affff67 	bls	a0c0 <_fpadd_parts+0x20>
    a320:	e5960008 	ldr	r0, [r6, #8]
    a324:	e3a03001 	mov	r3, #1	; 0x1
    a328:	e3a04000 	mov	r4, #0	; 0x0
    a32c:	e1b080a2 	movs	r8, r2, lsr #1
    a330:	e1a07061 	mov	r7, r1, rrx
    a334:	e0011003 	and	r1, r1, r3
    a338:	e0022004 	and	r2, r2, r4
    a33c:	e1877001 	orr	r7, r7, r1
    a340:	e1888002 	orr	r8, r8, r2
    a344:	e2800001 	add	r0, r0, #1	; 0x1
    a348:	e1a05006 	mov	r5, r6
    a34c:	e586700c 	str	r7, [r6, #12]
    a350:	e5868010 	str	r8, [r6, #16]
    a354:	e5860008 	str	r0, [r6, #8]
    a358:	eaffff58 	b	a0c0 <_fpadd_parts+0x20>
    a35c:	e59d3000 	ldr	r3, [sp]
    a360:	e153000c 	cmp	r3, ip
    a364:	d3a0a000 	movle	sl, #0	; 0x0
    a368:	d3a0b000 	movle	fp, #0	; 0x0
    a36c:	c3a08000 	movgt	r8, #0	; 0x0
    a370:	c3a09000 	movgt	r9, #0	; 0x0
    a374:	d58dc000 	strle	ip, [sp]
    a378:	eaffff97 	b	a1dc <_fpadd_parts+0x13c>
    a37c:	e1a0100a 	mov	r1, sl
    a380:	e1a0200b 	mov	r2, fp
    a384:	e0511008 	subs	r1, r1, r8
    a388:	e0c22009 	sbc	r2, r2, r9
    a38c:	eaffff9c 	b	a204 <_fpadd_parts+0x164>
    a390:	e09a1008 	adds	r1, sl, r8
    a394:	e0ab2009 	adc	r2, fp, r9
    a398:	e586100c 	str	r1, [r6, #12]
    a39c:	e5862010 	str	r2, [r6, #16]
    a3a0:	e59d4000 	ldr	r4, [sp]
    a3a4:	e9860011 	stmib	r6, {r0, r4}
    a3a8:	eaffffd7 	b	a30c <_fpadd_parts+0x26c>
    a3ac:	e3a03001 	mov	r3, #1	; 0x1
    a3b0:	e5863004 	str	r3, [r6, #4]
    a3b4:	e59d3000 	ldr	r3, [sp]
    a3b8:	e2711000 	rsbs	r1, r1, #0	; 0x0
    a3bc:	e2e22000 	rsc	r2, r2, #0	; 0x0
    a3c0:	e5863008 	str	r3, [r6, #8]
    a3c4:	e586100c 	str	r1, [r6, #12]
    a3c8:	e5862010 	str	r2, [r6, #16]
    a3cc:	eaffff93 	b	a220 <_fpadd_parts+0x180>

0000a3d0 <__subdf3>:
    a3d0:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    a3d4:	e24dd04c 	sub	sp, sp, #76	; 0x4c
    a3d8:	e28d5028 	add	r5, sp, #40	; 0x28
    a3dc:	e58d0044 	str	r0, [sp, #68]
    a3e0:	e58d1048 	str	r1, [sp, #72]
    a3e4:	e28d4014 	add	r4, sp, #20	; 0x14
    a3e8:	e28d0044 	add	r0, sp, #68	; 0x44
    a3ec:	e1a01005 	mov	r1, r5
    a3f0:	e58d203c 	str	r2, [sp, #60]
    a3f4:	e58d3040 	str	r3, [sp, #64]
    a3f8:	eb00035c 	bl	b170 <__unpack_d>
    a3fc:	e28d003c 	add	r0, sp, #60	; 0x3c
    a400:	e1a01004 	mov	r1, r4
    a404:	eb000359 	bl	b170 <__unpack_d>
    a408:	e59d3018 	ldr	r3, [sp, #24]
    a40c:	e1a01004 	mov	r1, r4
    a410:	e2233001 	eor	r3, r3, #1	; 0x1
    a414:	e1a0200d 	mov	r2, sp
    a418:	e1a00005 	mov	r0, r5
    a41c:	e58d3018 	str	r3, [sp, #24]
    a420:	ebffff1e 	bl	a0a0 <_fpadd_parts>
    a424:	eb000294 	bl	ae7c <__pack_d>
    a428:	e28dd04c 	add	sp, sp, #76	; 0x4c
    a42c:	e8bd8030 	ldmia	sp!, {r4, r5, pc}

0000a430 <__adddf3>:
    a430:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    a434:	e24dd04c 	sub	sp, sp, #76	; 0x4c
    a438:	e28d5028 	add	r5, sp, #40	; 0x28
    a43c:	e58d0044 	str	r0, [sp, #68]
    a440:	e58d1048 	str	r1, [sp, #72]
    a444:	e28d4014 	add	r4, sp, #20	; 0x14
    a448:	e28d0044 	add	r0, sp, #68	; 0x44
    a44c:	e1a01005 	mov	r1, r5
    a450:	e58d203c 	str	r2, [sp, #60]
    a454:	e58d3040 	str	r3, [sp, #64]
    a458:	eb000344 	bl	b170 <__unpack_d>
    a45c:	e28d003c 	add	r0, sp, #60	; 0x3c
    a460:	e1a01004 	mov	r1, r4
    a464:	eb000341 	bl	b170 <__unpack_d>
    a468:	e1a01004 	mov	r1, r4
    a46c:	e1a0200d 	mov	r2, sp
    a470:	e1a00005 	mov	r0, r5
    a474:	ebffff09 	bl	a0a0 <_fpadd_parts>
    a478:	eb00027f 	bl	ae7c <__pack_d>
    a47c:	e28dd04c 	add	sp, sp, #76	; 0x4c
    a480:	e8bd8030 	ldmia	sp!, {r4, r5, pc}

0000a484 <nan>:
    a484:	e59f0000 	ldr	r0, [pc, #0]	; a48c <prog+0xa444>
    a488:	e12fff1e 	bx	lr
    a48c:	00014420 	andeq	r4, r1, r0, lsr #8

0000a490 <isnan>:
    a490:	e5900000 	ldr	r0, [r0]
    a494:	e3500001 	cmp	r0, #1	; 0x1
    a498:	83a00000 	movhi	r0, #0	; 0x0
    a49c:	93a00001 	movls	r0, #1	; 0x1
    a4a0:	e12fff1e 	bx	lr

0000a4a4 <isinf>:
    a4a4:	e5900000 	ldr	r0, [r0]
    a4a8:	e3500004 	cmp	r0, #4	; 0x4
    a4ac:	13a00000 	movne	r0, #0	; 0x0
    a4b0:	03a00001 	moveq	r0, #1	; 0x1
    a4b4:	e12fff1e 	bx	lr

0000a4b8 <iszero>:
    a4b8:	e5900000 	ldr	r0, [r0]
    a4bc:	e3500002 	cmp	r0, #2	; 0x2
    a4c0:	13a00000 	movne	r0, #0	; 0x0
    a4c4:	03a00001 	moveq	r0, #1	; 0x1
    a4c8:	e12fff1e 	bx	lr

0000a4cc <__muldf3>:
    a4cc:	e92d4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
    a4d0:	e24dd064 	sub	sp, sp, #100	; 0x64
    a4d4:	e28d5040 	add	r5, sp, #64	; 0x40
    a4d8:	e58d005c 	str	r0, [sp, #92]
    a4dc:	e58d1060 	str	r1, [sp, #96]
    a4e0:	e28d702c 	add	r7, sp, #44	; 0x2c
    a4e4:	e28d005c 	add	r0, sp, #92	; 0x5c
    a4e8:	e1a01005 	mov	r1, r5
    a4ec:	e58d2054 	str	r2, [sp, #84]
    a4f0:	e58d3058 	str	r3, [sp, #88]
    a4f4:	eb00031d 	bl	b170 <__unpack_d>
    a4f8:	e1a01007 	mov	r1, r7
    a4fc:	e28d0054 	add	r0, sp, #84	; 0x54
    a500:	eb00031a 	bl	b170 <__unpack_d>
    a504:	e1a00005 	mov	r0, r5
    a508:	ebffffe0 	bl	a490 <isnan>
    a50c:	e3500000 	cmp	r0, #0	; 0x0
    a510:	0a000008 	beq	a538 <__muldf3+0x6c>
    a514:	e59d3044 	ldr	r3, [sp, #68]
    a518:	e59d2030 	ldr	r2, [sp, #48]
    a51c:	e0533002 	subs	r3, r3, r2
    a520:	13a03001 	movne	r3, #1	; 0x1
    a524:	e58d3044 	str	r3, [sp, #68]
    a528:	e1a00005 	mov	r0, r5
    a52c:	eb000252 	bl	ae7c <__pack_d>
    a530:	e28dd064 	add	sp, sp, #100	; 0x64
    a534:	e8bd8df0 	ldmia	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
    a538:	e1a00007 	mov	r0, r7
    a53c:	ebffffd3 	bl	a490 <isnan>
    a540:	e3500000 	cmp	r0, #0	; 0x0
    a544:	0a000006 	beq	a564 <__muldf3+0x98>
    a548:	e59d2030 	ldr	r2, [sp, #48]
    a54c:	e59d3044 	ldr	r3, [sp, #68]
    a550:	e1a00007 	mov	r0, r7
    a554:	e0533002 	subs	r3, r3, r2
    a558:	13a03001 	movne	r3, #1	; 0x1
    a55c:	e58d3030 	str	r3, [sp, #48]
    a560:	eafffff1 	b	a52c <__muldf3+0x60>
    a564:	e1a00005 	mov	r0, r5
    a568:	ebffffcd 	bl	a4a4 <isinf>
    a56c:	e3500000 	cmp	r0, #0	; 0x0
    a570:	1a000009 	bne	a59c <__muldf3+0xd0>
    a574:	e1a00007 	mov	r0, r7
    a578:	ebffffc9 	bl	a4a4 <isinf>
    a57c:	e3500000 	cmp	r0, #0	; 0x0
    a580:	0a00000b 	beq	a5b4 <__muldf3+0xe8>
    a584:	e1a00005 	mov	r0, r5
    a588:	ebffffca 	bl	a4b8 <iszero>
    a58c:	e3500000 	cmp	r0, #0	; 0x0
    a590:	0affffec 	beq	a548 <__muldf3+0x7c>
    a594:	ebffffba 	bl	a484 <nan>
    a598:	eaffffe3 	b	a52c <__muldf3+0x60>
    a59c:	e1a00007 	mov	r0, r7
    a5a0:	ebffffc4 	bl	a4b8 <iszero>
    a5a4:	e3500000 	cmp	r0, #0	; 0x0
    a5a8:	0affffd9 	beq	a514 <__muldf3+0x48>
    a5ac:	ebffffb4 	bl	a484 <nan>
    a5b0:	eaffffdd 	b	a52c <__muldf3+0x60>
    a5b4:	e1a00005 	mov	r0, r5
    a5b8:	ebffffbe 	bl	a4b8 <iszero>
    a5bc:	e3500000 	cmp	r0, #0	; 0x0
    a5c0:	1affffd3 	bne	a514 <__muldf3+0x48>
    a5c4:	e1a00007 	mov	r0, r7
    a5c8:	ebffffba 	bl	a4b8 <iszero>
    a5cc:	e3500000 	cmp	r0, #0	; 0x0
    a5d0:	1affffdc 	bne	a548 <__muldf3+0x7c>
    a5d4:	e28d5038 	add	r5, sp, #56	; 0x38
    a5d8:	e8950060 	ldmia	r5, {r5, r6}
    a5dc:	e1a03006 	mov	r3, r6
    a5e0:	e3a04000 	mov	r4, #0	; 0x0
    a5e4:	e28d704c 	add	r7, sp, #76	; 0x4c
    a5e8:	e8970180 	ldmia	r7, {r7, r8}
    a5ec:	e58d3010 	str	r3, [sp, #16]
    a5f0:	e58d4014 	str	r4, [sp, #20]
    a5f4:	e59d0010 	ldr	r0, [sp, #16]
    a5f8:	e1a01008 	mov	r1, r8
    a5fc:	e3a08000 	mov	r8, #0	; 0x0
    a600:	e0843097 	umull	r3, r4, r7, r0
    a604:	e3a06000 	mov	r6, #0	; 0x0
    a608:	e1a0a001 	mov	sl, r1
    a60c:	e3a0b000 	mov	fp, #0	; 0x0
    a610:	e1a02004 	mov	r2, r4
    a614:	e1a01003 	mov	r1, r3
    a618:	e0a2159a 	umlal	r1, r2, sl, r5
    a61c:	e88d0006 	stmia	sp, {r1, r2}
    a620:	e0810795 	umull	r0, r1, r5, r7
    a624:	e1540002 	cmp	r4, r2
    a628:	e1a05000 	mov	r5, r0
    a62c:	e1a06001 	mov	r6, r1
    a630:	8a00005f 	bhi	a7b4 <__muldf3+0x2e8>
    a634:	0a00005b 	beq	a7a8 <__muldf3+0x2dc>
    a638:	e3a02000 	mov	r2, #0	; 0x0
    a63c:	e3a03000 	mov	r3, #0	; 0x0
    a640:	e58d2008 	str	r2, [sp, #8]
    a644:	e58d300c 	str	r3, [sp, #12]
    a648:	e59d4000 	ldr	r4, [sp]
    a64c:	e3a03000 	mov	r3, #0	; 0x0
    a650:	e0937005 	adds	r7, r3, r5
    a654:	e1a01004 	mov	r1, r4
    a658:	e3a02000 	mov	r2, #0	; 0x0
    a65c:	e0a18006 	adc	r8, r1, r6
    a660:	e1560008 	cmp	r6, r8
    a664:	8a000046 	bhi	a784 <__muldf3+0x2b8>
    a668:	0a000043 	beq	a77c <__muldf3+0x2b0>
    a66c:	e59d0010 	ldr	r0, [sp, #16]
    a670:	e000009b 	mul	r0, fp, r0
    a674:	e59dc010 	ldr	ip, [sp, #16]
    a678:	e0821a9c 	umull	r1, r2, ip, sl
    a67c:	e59dc014 	ldr	ip, [sp, #20]
    a680:	e02c0c9a 	mla	ip, sl, ip, r0
    a684:	e59d0004 	ldr	r0, [sp, #4]
    a688:	e08c2002 	add	r2, ip, r2
    a68c:	e0905001 	adds	r5, r0, r1
    a690:	e3a04000 	mov	r4, #0	; 0x0
    a694:	e0a46002 	adc	r6, r4, r2
    a698:	e28d1008 	add	r1, sp, #8	; 0x8
    a69c:	e8910006 	ldmia	r1, {r1, r2}
    a6a0:	e0955001 	adds	r5, r5, r1
    a6a4:	e59d1048 	ldr	r1, [sp, #72]
    a6a8:	e0a66002 	adc	r6, r6, r2
    a6ac:	e59d0044 	ldr	r0, [sp, #68]
    a6b0:	e59d3030 	ldr	r3, [sp, #48]
    a6b4:	e59d2034 	ldr	r2, [sp, #52]
    a6b8:	e2811004 	add	r1, r1, #4	; 0x4
    a6bc:	e0500003 	subs	r0, r0, r3
    a6c0:	13a00001 	movne	r0, #1	; 0x1
    a6c4:	e0822001 	add	r2, r2, r1
    a6c8:	e376021e 	cmn	r6, #-536870911	; 0xe0000001
    a6cc:	e58d001c 	str	r0, [sp, #28]
    a6d0:	e58d2020 	str	r2, [sp, #32]
    a6d4:	9a00000e 	bls	a714 <__muldf3+0x248>
    a6d8:	e3a00001 	mov	r0, #1	; 0x1
    a6dc:	e3a0a000 	mov	sl, #0	; 0x0
    a6e0:	e3a0b102 	mov	fp, #-2147483648	; 0x80000000
    a6e4:	e1150000 	tst	r5, r0
    a6e8:	e2822001 	add	r2, r2, #1	; 0x1
    a6ec:	0a000003 	beq	a700 <__muldf3+0x234>
    a6f0:	e1b040a8 	movs	r4, r8, lsr #1
    a6f4:	e1a03067 	mov	r3, r7, rrx
    a6f8:	e183700a 	orr	r7, r3, sl
    a6fc:	e184800b 	orr	r8, r4, fp
    a700:	e1b060a6 	movs	r6, r6, lsr #1
    a704:	e1a05065 	mov	r5, r5, rrx
    a708:	e376021e 	cmn	r6, #-536870911	; 0xe0000001
    a70c:	8afffff4 	bhi	a6e4 <__muldf3+0x218>
    a710:	e58d2020 	str	r2, [sp, #32]
    a714:	e376021f 	cmn	r6, #-268435455	; 0xf0000001
    a718:	8a00000d 	bhi	a754 <__muldf3+0x288>
    a71c:	e59d3020 	ldr	r3, [sp, #32]
    a720:	e3a01001 	mov	r1, #1	; 0x1
    a724:	e3a02000 	mov	r2, #0	; 0x0
    a728:	e0955005 	adds	r5, r5, r5
    a72c:	e0a66006 	adc	r6, r6, r6
    a730:	e3580000 	cmp	r8, #0	; 0x0
    a734:	b1866002 	orrlt	r6, r6, r2
    a738:	b1855001 	orrlt	r5, r5, r1
    a73c:	e0977007 	adds	r7, r7, r7
    a740:	e0a88008 	adc	r8, r8, r8
    a744:	e376021f 	cmn	r6, #-268435455	; 0xf0000001
    a748:	e2433001 	sub	r3, r3, #1	; 0x1
    a74c:	9afffff5 	bls	a728 <__muldf3+0x25c>
    a750:	e58d3020 	str	r3, [sp, #32]
    a754:	e20530ff 	and	r3, r5, #255	; 0xff
    a758:	e3a04000 	mov	r4, #0	; 0x0
    a75c:	e3530080 	cmp	r3, #128	; 0x80
    a760:	0a000018 	beq	a7c8 <__muldf3+0x2fc>
    a764:	e3a03003 	mov	r3, #3	; 0x3
    a768:	e28d0018 	add	r0, sp, #24	; 0x18
    a76c:	e58d5024 	str	r5, [sp, #36]
    a770:	e58d6028 	str	r6, [sp, #40]
    a774:	e58d3018 	str	r3, [sp, #24]
    a778:	eaffff6b 	b	a52c <__muldf3+0x60>
    a77c:	e1550007 	cmp	r5, r7
    a780:	9affffb9 	bls	a66c <__muldf3+0x1a0>
    a784:	e28d0008 	add	r0, sp, #8	; 0x8
    a788:	e8900003 	ldmia	r0, {r0, r1}
    a78c:	e3a03001 	mov	r3, #1	; 0x1
    a790:	e0900003 	adds	r0, r0, r3
    a794:	e3a04000 	mov	r4, #0	; 0x0
    a798:	e0a11004 	adc	r1, r1, r4
    a79c:	e58d0008 	str	r0, [sp, #8]
    a7a0:	e58d100c 	str	r1, [sp, #12]
    a7a4:	eaffffb0 	b	a66c <__muldf3+0x1a0>
    a7a8:	e59d1000 	ldr	r1, [sp]
    a7ac:	e1530001 	cmp	r3, r1
    a7b0:	9affffa0 	bls	a638 <__muldf3+0x16c>
    a7b4:	e3a03000 	mov	r3, #0	; 0x0
    a7b8:	e3a04001 	mov	r4, #1	; 0x1
    a7bc:	e58d3008 	str	r3, [sp, #8]
    a7c0:	e58d400c 	str	r4, [sp, #12]
    a7c4:	eaffff9f 	b	a648 <__muldf3+0x17c>
    a7c8:	e3540000 	cmp	r4, #0	; 0x0
    a7cc:	1affffe4 	bne	a764 <__muldf3+0x298>
    a7d0:	e3a01c01 	mov	r1, #256	; 0x100
    a7d4:	e3a02000 	mov	r2, #0	; 0x0
    a7d8:	e0053001 	and	r3, r5, r1
    a7dc:	e0064002 	and	r4, r6, r2
    a7e0:	e1933004 	orrs	r3, r3, r4
    a7e4:	1affffde 	bne	a764 <__muldf3+0x298>
    a7e8:	e1977008 	orrs	r7, r7, r8
    a7ec:	0affffdc 	beq	a764 <__muldf3+0x298>
    a7f0:	e3a03080 	mov	r3, #128	; 0x80
    a7f4:	e0933005 	adds	r3, r3, r5
    a7f8:	e3a04000 	mov	r4, #0	; 0x0
    a7fc:	e0a44006 	adc	r4, r4, r6
    a800:	e3e010ff 	mvn	r1, #255	; 0xff
    a804:	e3e02000 	mvn	r2, #0	; 0x0
    a808:	e0035001 	and	r5, r3, r1
    a80c:	e0046002 	and	r6, r4, r2
    a810:	eaffffd3 	b	a764 <__muldf3+0x298>

0000a814 <nan>:
    a814:	e59f0000 	ldr	r0, [pc, #0]	; a81c <prog+0xa7d4>
    a818:	e12fff1e 	bx	lr
    a81c:	00014420 	andeq	r4, r1, r0, lsr #8

0000a820 <isnan>:
    a820:	e5900000 	ldr	r0, [r0]
    a824:	e3500001 	cmp	r0, #1	; 0x1
    a828:	83a00000 	movhi	r0, #0	; 0x0
    a82c:	93a00001 	movls	r0, #1	; 0x1
    a830:	e12fff1e 	bx	lr

0000a834 <isinf>:
    a834:	e5900000 	ldr	r0, [r0]
    a838:	e3500004 	cmp	r0, #4	; 0x4
    a83c:	13a00000 	movne	r0, #0	; 0x0
    a840:	03a00001 	moveq	r0, #1	; 0x1
    a844:	e12fff1e 	bx	lr

0000a848 <iszero>:
    a848:	e5900000 	ldr	r0, [r0]
    a84c:	e3500002 	cmp	r0, #2	; 0x2
    a850:	13a00000 	movne	r0, #0	; 0x0
    a854:	03a00001 	moveq	r0, #1	; 0x1
    a858:	e12fff1e 	bx	lr

0000a85c <__divdf3>:
    a85c:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a860:	e24dd038 	sub	sp, sp, #56	; 0x38
    a864:	e28d7014 	add	r7, sp, #20	; 0x14
    a868:	e58d0030 	str	r0, [sp, #48]
    a86c:	e58d1034 	str	r1, [sp, #52]
    a870:	e28d0030 	add	r0, sp, #48	; 0x30
    a874:	e1a01007 	mov	r1, r7
    a878:	e58d2028 	str	r2, [sp, #40]
    a87c:	e58d302c 	str	r3, [sp, #44]
    a880:	eb00023a 	bl	b170 <__unpack_d>
    a884:	e1a0100d 	mov	r1, sp
    a888:	e28d0028 	add	r0, sp, #40	; 0x28
    a88c:	eb000237 	bl	b170 <__unpack_d>
    a890:	e1a00007 	mov	r0, r7
    a894:	ebffffe1 	bl	a820 <isnan>
    a898:	e3500000 	cmp	r0, #0	; 0x0
    a89c:	e1a0500d 	mov	r5, sp
    a8a0:	0a000003 	beq	a8b4 <__divdf3+0x58>
    a8a4:	e1a00007 	mov	r0, r7
    a8a8:	eb000173 	bl	ae7c <__pack_d>
    a8ac:	e28dd038 	add	sp, sp, #56	; 0x38
    a8b0:	e8bd8ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a8b4:	e1a0000d 	mov	r0, sp
    a8b8:	ebffffd8 	bl	a820 <isnan>
    a8bc:	e3500000 	cmp	r0, #0	; 0x0
    a8c0:	11a0000d 	movne	r0, sp
    a8c4:	1afffff7 	bne	a8a8 <__divdf3+0x4c>
    a8c8:	e59d3018 	ldr	r3, [sp, #24]
    a8cc:	e59d2004 	ldr	r2, [sp, #4]
    a8d0:	e0233002 	eor	r3, r3, r2
    a8d4:	e58d3018 	str	r3, [sp, #24]
    a8d8:	e1a00007 	mov	r0, r7
    a8dc:	ebffffd4 	bl	a834 <isinf>
    a8e0:	e3500000 	cmp	r0, #0	; 0x0
    a8e4:	0a000005 	beq	a900 <__divdf3+0xa4>
    a8e8:	e59d2014 	ldr	r2, [sp, #20]
    a8ec:	e59d3000 	ldr	r3, [sp]
    a8f0:	e1520003 	cmp	r2, r3
    a8f4:	1affffea 	bne	a8a4 <__divdf3+0x48>
    a8f8:	ebffffc5 	bl	a814 <nan>
    a8fc:	eaffffe9 	b	a8a8 <__divdf3+0x4c>
    a900:	e1a00007 	mov	r0, r7
    a904:	ebffffcf 	bl	a848 <iszero>
    a908:	e2506000 	subs	r6, r0, #0	; 0x0
    a90c:	1afffff5 	bne	a8e8 <__divdf3+0x8c>
    a910:	e1a0000d 	mov	r0, sp
    a914:	ebffffc6 	bl	a834 <isinf>
    a918:	e3500000 	cmp	r0, #0	; 0x0
    a91c:	0a000006 	beq	a93c <__divdf3+0xe0>
    a920:	e3a03000 	mov	r3, #0	; 0x0
    a924:	e3a04000 	mov	r4, #0	; 0x0
    a928:	e1a00007 	mov	r0, r7
    a92c:	e58d601c 	str	r6, [sp, #28]
    a930:	e58d3020 	str	r3, [sp, #32]
    a934:	e58d4024 	str	r4, [sp, #36]
    a938:	eaffffda 	b	a8a8 <__divdf3+0x4c>
    a93c:	e1a0000d 	mov	r0, sp
    a940:	ebffffc0 	bl	a848 <iszero>
    a944:	e3500000 	cmp	r0, #0	; 0x0
    a948:	13a03004 	movne	r3, #4	; 0x4
    a94c:	11a00007 	movne	r0, r7
    a950:	158d3014 	strne	r3, [sp, #20]
    a954:	1affffd3 	bne	a8a8 <__divdf3+0x4c>
    a958:	e59d201c 	ldr	r2, [sp, #28]
    a95c:	e28d0020 	add	r0, sp, #32	; 0x20
    a960:	e8900003 	ldmia	r0, {r0, r1}
    a964:	e28d800c 	add	r8, sp, #12	; 0xc
    a968:	e8980300 	ldmia	r8, {r8, r9}
    a96c:	e59d3008 	ldr	r3, [sp, #8]
    a970:	e1590001 	cmp	r9, r1
    a974:	e0632002 	rsb	r2, r3, r2
    a978:	e58d201c 	str	r2, [sp, #28]
    a97c:	8a000022 	bhi	aa0c <__divdf3+0x1b0>
    a980:	0a00001f 	beq	aa04 <__divdf3+0x1a8>
    a984:	e3a02000 	mov	r2, #0	; 0x0
    a988:	e3a03201 	mov	r3, #268435456	; 0x10000000
    a98c:	e3a0a000 	mov	sl, #0	; 0x0
    a990:	e3a0b000 	mov	fp, #0	; 0x0
    a994:	e3a0c000 	mov	ip, #0	; 0x0
    a998:	ea00000b 	b	a9cc <__divdf3+0x170>
    a99c:	e0500008 	subs	r0, r0, r8
    a9a0:	e0c11009 	sbc	r1, r1, r9
    a9a4:	e18aa002 	orr	sl, sl, r2
    a9a8:	e18bb003 	orr	fp, fp, r3
    a9ac:	e0905000 	adds	r5, r0, r0
    a9b0:	e0a16001 	adc	r6, r1, r1
    a9b4:	e1b030a3 	movs	r3, r3, lsr #1
    a9b8:	e1a02062 	mov	r2, r2, rrx
    a9bc:	e35c003d 	cmp	ip, #61	; 0x3d
    a9c0:	e1a00005 	mov	r0, r5
    a9c4:	e1a01006 	mov	r1, r6
    a9c8:	0a000006 	beq	a9e8 <__divdf3+0x18c>
    a9cc:	e1590001 	cmp	r9, r1
    a9d0:	e28cc001 	add	ip, ip, #1	; 0x1
    a9d4:	8afffff4 	bhi	a9ac <__divdf3+0x150>
    a9d8:	1affffef 	bne	a99c <__divdf3+0x140>
    a9dc:	e1580000 	cmp	r8, r0
    a9e0:	8afffff1 	bhi	a9ac <__divdf3+0x150>
    a9e4:	eaffffec 	b	a99c <__divdf3+0x140>
    a9e8:	e20a20ff 	and	r2, sl, #255	; 0xff
    a9ec:	e3a03000 	mov	r3, #0	; 0x0
    a9f0:	e3520080 	cmp	r2, #128	; 0x80
    a9f4:	0a000009 	beq	aa20 <__divdf3+0x1c4>
    a9f8:	e58da020 	str	sl, [sp, #32]
    a9fc:	e58db024 	str	fp, [sp, #36]
    aa00:	eaffffa7 	b	a8a4 <__divdf3+0x48>
    aa04:	e1580000 	cmp	r8, r0
    aa08:	9affffdd 	bls	a984 <__divdf3+0x128>
    aa0c:	e0900000 	adds	r0, r0, r0
    aa10:	e2423001 	sub	r3, r2, #1	; 0x1
    aa14:	e0a11001 	adc	r1, r1, r1
    aa18:	e58d301c 	str	r3, [sp, #28]
    aa1c:	eaffffd8 	b	a984 <__divdf3+0x128>
    aa20:	e3530000 	cmp	r3, #0	; 0x0
    aa24:	1afffff3 	bne	a9f8 <__divdf3+0x19c>
    aa28:	e3a01c01 	mov	r1, #256	; 0x100
    aa2c:	e3a02000 	mov	r2, #0	; 0x0
    aa30:	e00a3001 	and	r3, sl, r1
    aa34:	e00b4002 	and	r4, fp, r2
    aa38:	e1933004 	orrs	r3, r3, r4
    aa3c:	1affffed 	bne	a9f8 <__divdf3+0x19c>
    aa40:	e1955006 	orrs	r5, r5, r6
    aa44:	0affffeb 	beq	a9f8 <__divdf3+0x19c>
    aa48:	e3a03080 	mov	r3, #128	; 0x80
    aa4c:	e093300a 	adds	r3, r3, sl
    aa50:	e3a04000 	mov	r4, #0	; 0x0
    aa54:	e0a4400b 	adc	r4, r4, fp
    aa58:	e3e010ff 	mvn	r1, #255	; 0xff
    aa5c:	e3e02000 	mvn	r2, #0	; 0x0
    aa60:	e003a001 	and	sl, r3, r1
    aa64:	e004b002 	and	fp, r4, r2
    aa68:	eaffffe2 	b	a9f8 <__divdf3+0x19c>

0000aa6c <isnan>:
    aa6c:	e5900000 	ldr	r0, [r0]
    aa70:	e3500001 	cmp	r0, #1	; 0x1
    aa74:	83a00000 	movhi	r0, #0	; 0x0
    aa78:	93a00001 	movls	r0, #1	; 0x1
    aa7c:	e12fff1e 	bx	lr

0000aa80 <__nedf2>:
    aa80:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    aa84:	e24dd038 	sub	sp, sp, #56	; 0x38
    aa88:	e28d5014 	add	r5, sp, #20	; 0x14
    aa8c:	e58d0030 	str	r0, [sp, #48]
    aa90:	e58d1034 	str	r1, [sp, #52]
    aa94:	e28d0030 	add	r0, sp, #48	; 0x30
    aa98:	e1a01005 	mov	r1, r5
    aa9c:	e58d2028 	str	r2, [sp, #40]
    aaa0:	e58d302c 	str	r3, [sp, #44]
    aaa4:	eb0001b1 	bl	b170 <__unpack_d>
    aaa8:	e1a0100d 	mov	r1, sp
    aaac:	e28d0028 	add	r0, sp, #40	; 0x28
    aab0:	eb0001ae 	bl	b170 <__unpack_d>
    aab4:	e1a00005 	mov	r0, r5
    aab8:	ebffffeb 	bl	aa6c <isnan>
    aabc:	e3500000 	cmp	r0, #0	; 0x0
    aac0:	e1a0400d 	mov	r4, sp
    aac4:	e1a0000d 	mov	r0, sp
    aac8:	0a000002 	beq	aad8 <__nedf2+0x58>
    aacc:	e3a00001 	mov	r0, #1	; 0x1
    aad0:	e28dd038 	add	sp, sp, #56	; 0x38
    aad4:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
    aad8:	ebffffe3 	bl	aa6c <isnan>
    aadc:	e3500000 	cmp	r0, #0	; 0x0
    aae0:	e1a0100d 	mov	r1, sp
    aae4:	e1a00005 	mov	r0, r5
    aae8:	1afffff7 	bne	aacc <__nedf2+0x4c>
    aaec:	eb0001f7 	bl	b2d0 <__fpcmp_parts_d>
    aaf0:	eafffff6 	b	aad0 <__nedf2+0x50>

0000aaf4 <isnan>:
    aaf4:	e5900000 	ldr	r0, [r0]
    aaf8:	e3500001 	cmp	r0, #1	; 0x1
    aafc:	83a00000 	movhi	r0, #0	; 0x0
    ab00:	93a00001 	movls	r0, #1	; 0x1
    ab04:	e12fff1e 	bx	lr

0000ab08 <__gtdf2>:
    ab08:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    ab0c:	e24dd038 	sub	sp, sp, #56	; 0x38
    ab10:	e28d5014 	add	r5, sp, #20	; 0x14
    ab14:	e58d0030 	str	r0, [sp, #48]
    ab18:	e58d1034 	str	r1, [sp, #52]
    ab1c:	e28d0030 	add	r0, sp, #48	; 0x30
    ab20:	e1a01005 	mov	r1, r5
    ab24:	e58d2028 	str	r2, [sp, #40]
    ab28:	e58d302c 	str	r3, [sp, #44]
    ab2c:	eb00018f 	bl	b170 <__unpack_d>
    ab30:	e1a0100d 	mov	r1, sp
    ab34:	e28d0028 	add	r0, sp, #40	; 0x28
    ab38:	eb00018c 	bl	b170 <__unpack_d>
    ab3c:	e1a00005 	mov	r0, r5
    ab40:	ebffffeb 	bl	aaf4 <isnan>
    ab44:	e3500000 	cmp	r0, #0	; 0x0
    ab48:	e1a0400d 	mov	r4, sp
    ab4c:	e1a0000d 	mov	r0, sp
    ab50:	0a000002 	beq	ab60 <__gtdf2+0x58>
    ab54:	e3e00000 	mvn	r0, #0	; 0x0
    ab58:	e28dd038 	add	sp, sp, #56	; 0x38
    ab5c:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
    ab60:	ebffffe3 	bl	aaf4 <isnan>
    ab64:	e3500000 	cmp	r0, #0	; 0x0
    ab68:	e1a0100d 	mov	r1, sp
    ab6c:	e1a00005 	mov	r0, r5
    ab70:	1afffff7 	bne	ab54 <__gtdf2+0x4c>
    ab74:	eb0001d5 	bl	b2d0 <__fpcmp_parts_d>
    ab78:	eafffff6 	b	ab58 <__gtdf2+0x50>

0000ab7c <isnan>:
    ab7c:	e5900000 	ldr	r0, [r0]
    ab80:	e3500001 	cmp	r0, #1	; 0x1
    ab84:	83a00000 	movhi	r0, #0	; 0x0
    ab88:	93a00001 	movls	r0, #1	; 0x1
    ab8c:	e12fff1e 	bx	lr

0000ab90 <__gedf2>:
    ab90:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    ab94:	e24dd038 	sub	sp, sp, #56	; 0x38
    ab98:	e28d5014 	add	r5, sp, #20	; 0x14
    ab9c:	e58d0030 	str	r0, [sp, #48]
    aba0:	e58d1034 	str	r1, [sp, #52]
    aba4:	e28d0030 	add	r0, sp, #48	; 0x30
    aba8:	e1a01005 	mov	r1, r5
    abac:	e58d2028 	str	r2, [sp, #40]
    abb0:	e58d302c 	str	r3, [sp, #44]
    abb4:	eb00016d 	bl	b170 <__unpack_d>
    abb8:	e1a0100d 	mov	r1, sp
    abbc:	e28d0028 	add	r0, sp, #40	; 0x28
    abc0:	eb00016a 	bl	b170 <__unpack_d>
    abc4:	e1a00005 	mov	r0, r5
    abc8:	ebffffeb 	bl	ab7c <isnan>
    abcc:	e3500000 	cmp	r0, #0	; 0x0
    abd0:	e1a0400d 	mov	r4, sp
    abd4:	e1a0000d 	mov	r0, sp
    abd8:	0a000002 	beq	abe8 <__gedf2+0x58>
    abdc:	e3e00000 	mvn	r0, #0	; 0x0
    abe0:	e28dd038 	add	sp, sp, #56	; 0x38
    abe4:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
    abe8:	ebffffe3 	bl	ab7c <isnan>
    abec:	e3500000 	cmp	r0, #0	; 0x0
    abf0:	e1a0100d 	mov	r1, sp
    abf4:	e1a00005 	mov	r0, r5
    abf8:	1afffff7 	bne	abdc <__gedf2+0x4c>
    abfc:	eb0001b3 	bl	b2d0 <__fpcmp_parts_d>
    ac00:	eafffff6 	b	abe0 <__gedf2+0x50>

0000ac04 <isnan>:
    ac04:	e5900000 	ldr	r0, [r0]
    ac08:	e3500001 	cmp	r0, #1	; 0x1
    ac0c:	83a00000 	movhi	r0, #0	; 0x0
    ac10:	93a00001 	movls	r0, #1	; 0x1
    ac14:	e12fff1e 	bx	lr

0000ac18 <__ltdf2>:
    ac18:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    ac1c:	e24dd038 	sub	sp, sp, #56	; 0x38
    ac20:	e28d5014 	add	r5, sp, #20	; 0x14
    ac24:	e58d0030 	str	r0, [sp, #48]
    ac28:	e58d1034 	str	r1, [sp, #52]
    ac2c:	e28d0030 	add	r0, sp, #48	; 0x30
    ac30:	e1a01005 	mov	r1, r5
    ac34:	e58d2028 	str	r2, [sp, #40]
    ac38:	e58d302c 	str	r3, [sp, #44]
    ac3c:	eb00014b 	bl	b170 <__unpack_d>
    ac40:	e1a0100d 	mov	r1, sp
    ac44:	e28d0028 	add	r0, sp, #40	; 0x28
    ac48:	eb000148 	bl	b170 <__unpack_d>
    ac4c:	e1a00005 	mov	r0, r5
    ac50:	ebffffeb 	bl	ac04 <isnan>
    ac54:	e3500000 	cmp	r0, #0	; 0x0
    ac58:	e1a0400d 	mov	r4, sp
    ac5c:	e1a0000d 	mov	r0, sp
    ac60:	0a000002 	beq	ac70 <__ltdf2+0x58>
    ac64:	e3a00001 	mov	r0, #1	; 0x1
    ac68:	e28dd038 	add	sp, sp, #56	; 0x38
    ac6c:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
    ac70:	ebffffe3 	bl	ac04 <isnan>
    ac74:	e3500000 	cmp	r0, #0	; 0x0
    ac78:	e1a0100d 	mov	r1, sp
    ac7c:	e1a00005 	mov	r0, r5
    ac80:	1afffff7 	bne	ac64 <__ltdf2+0x4c>
    ac84:	eb000191 	bl	b2d0 <__fpcmp_parts_d>
    ac88:	eafffff6 	b	ac68 <__ltdf2+0x50>

0000ac8c <__floatsidf>:
    ac8c:	e92d4010 	stmdb	sp!, {r4, lr}
    ac90:	e3a03003 	mov	r3, #3	; 0x3
    ac94:	e24dd014 	sub	sp, sp, #20	; 0x14
    ac98:	e3500000 	cmp	r0, #0	; 0x0
    ac9c:	e58d3000 	str	r3, [sp]
    aca0:	e1a02fa0 	mov	r2, r0, lsr #31
    aca4:	02433001 	subeq	r3, r3, #1	; 0x1
    aca8:	e58d2004 	str	r2, [sp, #4]
    acac:	058d3000 	streq	r3, [sp]
    acb0:	0a00001b 	beq	ad24 <__floatsidf+0x98>
    acb4:	e3520000 	cmp	r2, #0	; 0x0
    acb8:	e3a0203c 	mov	r2, #60	; 0x3c
    acbc:	e58d2008 	str	r2, [sp, #8]
    acc0:	0a00001b 	beq	ad34 <__floatsidf+0xa8>
    acc4:	e3500102 	cmp	r0, #-2147483648	; 0x80000000
    acc8:	03a004c1 	moveq	r0, #-1056964608	; 0xc1000000
    accc:	0280060e 	addeq	r0, r0, #14680064	; 0xe00000
    acd0:	03a01000 	moveq	r1, #0	; 0x0
    acd4:	0a000014 	beq	ad2c <__floatsidf+0xa0>
    acd8:	e2603000 	rsb	r3, r0, #0	; 0x0
    acdc:	e1a04fc3 	mov	r4, r3, asr #31
    ace0:	e58d300c 	str	r3, [sp, #12]
    ace4:	e58d4010 	str	r4, [sp, #16]
    ace8:	e28d000c 	add	r0, sp, #12	; 0xc
    acec:	e8900003 	ldmia	r0, {r0, r1}
    acf0:	e371021f 	cmn	r1, #-268435455	; 0xf0000001
    acf4:	8a00000a 	bhi	ad24 <__floatsidf+0x98>
    acf8:	e59d2008 	ldr	r2, [sp, #8]
    acfc:	e0903000 	adds	r3, r0, r0
    ad00:	e0a14001 	adc	r4, r1, r1
    ad04:	e2422001 	sub	r2, r2, #1	; 0x1
    ad08:	e374021f 	cmn	r4, #-268435455	; 0xf0000001
    ad0c:	e1a00003 	mov	r0, r3
    ad10:	e1a01004 	mov	r1, r4
    ad14:	e58d300c 	str	r3, [sp, #12]
    ad18:	e58d4010 	str	r4, [sp, #16]
    ad1c:	e58d2008 	str	r2, [sp, #8]
    ad20:	9afffff5 	bls	acfc <__floatsidf+0x70>
    ad24:	e1a0000d 	mov	r0, sp
    ad28:	eb000053 	bl	ae7c <__pack_d>
    ad2c:	e28dd014 	add	sp, sp, #20	; 0x14
    ad30:	e8bd8010 	ldmia	sp!, {r4, pc}
    ad34:	e1a03000 	mov	r3, r0
    ad38:	e1a04fc3 	mov	r4, r3, asr #31
    ad3c:	e58d300c 	str	r3, [sp, #12]
    ad40:	e58d4010 	str	r4, [sp, #16]
    ad44:	eaffffe7 	b	ace8 <__floatsidf+0x5c>

0000ad48 <isnan>:
    ad48:	e5900000 	ldr	r0, [r0]
    ad4c:	e3500001 	cmp	r0, #1	; 0x1
    ad50:	83a00000 	movhi	r0, #0	; 0x0
    ad54:	93a00001 	movls	r0, #1	; 0x1
    ad58:	e12fff1e 	bx	lr

0000ad5c <isinf>:
    ad5c:	e5900000 	ldr	r0, [r0]
    ad60:	e3500004 	cmp	r0, #4	; 0x4
    ad64:	13a00000 	movne	r0, #0	; 0x0
    ad68:	03a00001 	moveq	r0, #1	; 0x1
    ad6c:	e12fff1e 	bx	lr

0000ad70 <iszero>:
    ad70:	e5900000 	ldr	r0, [r0]
    ad74:	e3500002 	cmp	r0, #2	; 0x2
    ad78:	13a00000 	movne	r0, #0	; 0x0
    ad7c:	03a00001 	moveq	r0, #1	; 0x1
    ad80:	e12fff1e 	bx	lr

0000ad84 <__fixdfsi>:
    ad84:	e92d4010 	stmdb	sp!, {r4, lr}
    ad88:	e24dd01c 	sub	sp, sp, #28	; 0x1c
    ad8c:	e28d301c 	add	r3, sp, #28	; 0x1c
    ad90:	e9230003 	stmdb	r3!, {r0, r1}
    ad94:	e1a0100d 	mov	r1, sp
    ad98:	e1a00003 	mov	r0, r3
    ad9c:	eb0000f3 	bl	b170 <__unpack_d>
    ada0:	e1a0000d 	mov	r0, sp
    ada4:	ebfffff1 	bl	ad70 <iszero>
    ada8:	e3500000 	cmp	r0, #0	; 0x0
    adac:	e1a0400d 	mov	r4, sp
    adb0:	0a000002 	beq	adc0 <__fixdfsi+0x3c>
    adb4:	e3a00000 	mov	r0, #0	; 0x0
    adb8:	e28dd01c 	add	sp, sp, #28	; 0x1c
    adbc:	e8bd8010 	ldmia	sp!, {r4, pc}
    adc0:	e1a0000d 	mov	r0, sp
    adc4:	ebffffdf 	bl	ad48 <isnan>
    adc8:	e3500000 	cmp	r0, #0	; 0x0
    adcc:	1afffff8 	bne	adb4 <__fixdfsi+0x30>
    add0:	e1a0000d 	mov	r0, sp
    add4:	ebffffe0 	bl	ad5c <isinf>
    add8:	e3500000 	cmp	r0, #0	; 0x0
    addc:	0a000004 	beq	adf4 <__fixdfsi+0x70>
    ade0:	e59d3004 	ldr	r3, [sp, #4]
    ade4:	e3530000 	cmp	r3, #0	; 0x0
    ade8:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    adec:	13a00102 	movne	r0, #-2147483648	; 0x80000000
    adf0:	eafffff0 	b	adb8 <__fixdfsi+0x34>
    adf4:	e59d3008 	ldr	r3, [sp, #8]
    adf8:	e3530000 	cmp	r3, #0	; 0x0
    adfc:	baffffec 	blt	adb4 <__fixdfsi+0x30>
    ae00:	e353001e 	cmp	r3, #30	; 0x1e
    ae04:	cafffff5 	bgt	ade0 <__fixdfsi+0x5c>
    ae08:	e59d200c 	ldr	r2, [sp, #12]
    ae0c:	e263103c 	rsb	r1, r3, #60	; 0x3c
    ae10:	e1a03132 	mov	r3, r2, lsr r1
    ae14:	e59d0010 	ldr	r0, [sp, #16]
    ae18:	e261c020 	rsb	ip, r1, #32	; 0x20
    ae1c:	e1833c10 	orr	r3, r3, r0, lsl ip
    ae20:	e251e020 	subs	lr, r1, #32	; 0x20
    ae24:	51a03e30 	movpl	r3, r0, lsr lr
    ae28:	e1a04130 	mov	r4, r0, lsr r1
    ae2c:	e59d2004 	ldr	r2, [sp, #4]
    ae30:	e3520000 	cmp	r2, #0	; 0x0
    ae34:	e1a00003 	mov	r0, r3
    ae38:	12630000 	rsbne	r0, r3, #0	; 0x0
    ae3c:	eaffffdd 	b	adb8 <__fixdfsi+0x34>

0000ae40 <isnan>:
    ae40:	e5900000 	ldr	r0, [r0]
    ae44:	e3500001 	cmp	r0, #1	; 0x1
    ae48:	83a00000 	movhi	r0, #0	; 0x0
    ae4c:	93a00001 	movls	r0, #1	; 0x1
    ae50:	e12fff1e 	bx	lr

0000ae54 <isinf>:
    ae54:	e5900000 	ldr	r0, [r0]
    ae58:	e3500004 	cmp	r0, #4	; 0x4
    ae5c:	13a00000 	movne	r0, #0	; 0x0
    ae60:	03a00001 	moveq	r0, #1	; 0x1
    ae64:	e12fff1e 	bx	lr

0000ae68 <iszero>:
    ae68:	e5900000 	ldr	r0, [r0]
    ae6c:	e3500002 	cmp	r0, #2	; 0x2
    ae70:	13a00000 	movne	r0, #0	; 0x0
    ae74:	03a00001 	moveq	r0, #1	; 0x1
    ae78:	e12fff1e 	bx	lr

0000ae7c <__pack_d>:
    ae7c:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ae80:	e24dd008 	sub	sp, sp, #8	; 0x8
    ae84:	e1a05000 	mov	r5, r0
    ae88:	ebffffec 	bl	ae40 <isnan>
    ae8c:	e3500000 	cmp	r0, #0	; 0x0
    ae90:	e3a08000 	mov	r8, #0	; 0x0
    ae94:	e285a00c 	add	sl, r5, #12	; 0xc
    ae98:	e89a0c00 	ldmia	sl, {sl, fp}
    ae9c:	e5959004 	ldr	r9, [r5, #4]
    aea0:	0a000019 	beq	af0c <__pack_d+0x90>
    aea4:	e3a04702 	mov	r4, #524288	; 0x80000
    aea8:	e3a03000 	mov	r3, #0	; 0x0
    aeac:	e18b1004 	orr	r1, fp, r4
    aeb0:	e3a04601 	mov	r4, #1048576	; 0x100000
    aeb4:	e18a0003 	orr	r0, sl, r3
    aeb8:	e3a0ce7f 	mov	ip, #2032	; 0x7f0
    aebc:	e3e03000 	mvn	r3, #0	; 0x0
    aec0:	e2444001 	sub	r4, r4, #1	; 0x1
    aec4:	e0000003 	and	r0, r0, r3
    aec8:	e0011004 	and	r1, r1, r4
    aecc:	e28cc00f 	add	ip, ip, #15	; 0xf
    aed0:	e1a03a28 	mov	r3, r8, lsr #20
    aed4:	e1833601 	orr	r3, r3, r1, lsl #12
    aed8:	e1a08663 	mov	r8, r3, ror #12
    aedc:	e3c8247f 	bic	r2, r8, #2130706432	; 0x7f000000
    aee0:	e3c2260f 	bic	r2, r2, #15728640	; 0xf00000
    aee4:	e1828a0c 	orr	r8, r2, ip, lsl #20
    aee8:	e3c83102 	bic	r3, r8, #-2147483648	; 0x80000000
    aeec:	e1833f89 	orr	r3, r3, r9, lsl #31
    aef0:	e1a02000 	mov	r2, r0
    aef4:	e1a08000 	mov	r8, r0
    aef8:	e1a07003 	mov	r7, r3
    aefc:	e1a00003 	mov	r0, r3
    af00:	e1a01002 	mov	r1, r2
    af04:	e28dd008 	add	sp, sp, #8	; 0x8
    af08:	e8bd8ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af0c:	e1a00005 	mov	r0, r5
    af10:	ebffffcf 	bl	ae54 <isinf>
    af14:	e3500000 	cmp	r0, #0	; 0x0
    af18:	0a000004 	beq	af30 <__pack_d+0xb4>
    af1c:	e3a0ce7f 	mov	ip, #2032	; 0x7f0
    af20:	e28cc00f 	add	ip, ip, #15	; 0xf
    af24:	e3a00000 	mov	r0, #0	; 0x0
    af28:	e3a01000 	mov	r1, #0	; 0x0
    af2c:	eaffffe7 	b	aed0 <__pack_d+0x54>
    af30:	e1a00005 	mov	r0, r5
    af34:	ebffffcb 	bl	ae68 <iszero>
    af38:	e250c000 	subs	ip, r0, #0	; 0x0
    af3c:	1a000023 	bne	afd0 <__pack_d+0x154>
    af40:	e19a100b 	orrs	r1, sl, fp
    af44:	0a000021 	beq	afd0 <__pack_d+0x154>
    af48:	e5950008 	ldr	r0, [r5, #8]
    af4c:	e3e03fff 	mvn	r3, #1020	; 0x3fc
    af50:	e2433001 	sub	r3, r3, #1	; 0x1
    af54:	e1500003 	cmp	r0, r3
    af58:	ba000020 	blt	afe0 <__pack_d+0x164>
    af5c:	e3500b01 	cmp	r0, #1024	; 0x400
    af60:	aaffffed 	bge	af1c <__pack_d+0xa0>
    af64:	e20a20ff 	and	r2, sl, #255	; 0xff
    af68:	e3a03000 	mov	r3, #0	; 0x0
    af6c:	e2800fff 	add	r0, r0, #1020	; 0x3fc
    af70:	e3520080 	cmp	r2, #128	; 0x80
    af74:	e2800003 	add	r0, r0, #3	; 0x3
    af78:	0a000054 	beq	b0d0 <__pack_d+0x254>
    af7c:	e3a0307f 	mov	r3, #127	; 0x7f
    af80:	e3a04000 	mov	r4, #0	; 0x0
    af84:	e09aa003 	adds	sl, sl, r3
    af88:	e0abb004 	adc	fp, fp, r4
    af8c:	e37b021e 	cmn	fp, #-536870911	; 0xe0000001
    af90:	9a000002 	bls	afa0 <__pack_d+0x124>
    af94:	e1b0b0ab 	movs	fp, fp, lsr #1
    af98:	e1a0a06a 	mov	sl, sl, rrx
    af9c:	e2800001 	add	r0, r0, #1	; 0x1
    afa0:	e3c02b3e 	bic	r2, r0, #63488	; 0xf800
    afa4:	e3a04601 	mov	r4, #1048576	; 0x100000
    afa8:	e1a0042a 	mov	r0, sl, lsr #8
    afac:	e1a02802 	mov	r2, r2, lsl #16
    afb0:	e1800c0b 	orr	r0, r0, fp, lsl #24
    afb4:	e1a0142b 	mov	r1, fp, lsr #8
    afb8:	e3e03000 	mvn	r3, #0	; 0x0
    afbc:	e2444001 	sub	r4, r4, #1	; 0x1
    afc0:	e0000003 	and	r0, r0, r3
    afc4:	e0011004 	and	r1, r1, r4
    afc8:	e1a0c822 	mov	ip, r2, lsr #16
    afcc:	eaffffbf 	b	aed0 <__pack_d+0x54>
    afd0:	e3a00000 	mov	r0, #0	; 0x0
    afd4:	e3a01000 	mov	r1, #0	; 0x0
    afd8:	e3a0c000 	mov	ip, #0	; 0x0
    afdc:	eaffffbb 	b	aed0 <__pack_d+0x54>
    afe0:	e26003bf 	rsb	r0, r0, #-67108862	; 0xfc000002
    afe4:	e28007ff 	add	r0, r0, #66846720	; 0x3fc0000
    afe8:	e2800bff 	add	r0, r0, #261120	; 0x3fc00
    afec:	e3500038 	cmp	r0, #56	; 0x38
    aff0:	c1a0000c 	movgt	r0, ip
    aff4:	c3a0a000 	movgt	sl, #0	; 0x0
    aff8:	c3a0b000 	movgt	fp, #0	; 0x0
    affc:	ca00002a 	bgt	b0ac <__pack_d+0x230>
    b000:	e1a0503a 	mov	r5, sl, lsr r0
    b004:	e2601020 	rsb	r1, r0, #32	; 0x20
    b008:	e3a0e001 	mov	lr, #1	; 0x1
    b00c:	e185511b 	orr	r5, r5, fp, lsl r1
    b010:	e18c413e 	orr	r4, ip, lr, lsr r1
    b014:	e2402020 	sub	r2, r0, #32	; 0x20
    b018:	e3520000 	cmp	r2, #0	; 0x0
    b01c:	e1a0301e 	mov	r3, lr, lsl r0
    b020:	a1a0421e 	movge	r4, lr, lsl r2
    b024:	e1a01005 	mov	r1, r5
    b028:	a1a0123b 	movge	r1, fp, lsr r2
    b02c:	e1a0003b 	mov	r0, fp, lsr r0
    b030:	e3e05000 	mvn	r5, #0	; 0x0
    b034:	e0933005 	adds	r3, r3, r5
    b038:	e3e06000 	mvn	r6, #0	; 0x0
    b03c:	e0a44006 	adc	r4, r4, r6
    b040:	e00b2004 	and	r2, fp, r4
    b044:	e58d1000 	str	r1, [sp]
    b048:	e58d0004 	str	r0, [sp, #4]
    b04c:	e00a1003 	and	r1, sl, r3
    b050:	e1911002 	orrs	r1, r1, r2
    b054:	e89d0060 	ldmia	sp, {r5, r6}
    b058:	e3a02000 	mov	r2, #0	; 0x0
    b05c:	13a02001 	movne	r2, #1	; 0x1
    b060:	e1855002 	orr	r5, r5, r2
    b064:	e205a0ff 	and	sl, r5, #255	; 0xff
    b068:	e3a0b000 	mov	fp, #0	; 0x0
    b06c:	e3a03000 	mov	r3, #0	; 0x0
    b070:	13a03000 	movne	r3, #0	; 0x0
    b074:	e35a0080 	cmp	sl, #128	; 0x80
    b078:	e1866003 	orr	r6, r6, r3
    b07c:	0a000020 	beq	b104 <__pack_d+0x288>
    b080:	e3a0307f 	mov	r3, #127	; 0x7f
    b084:	e0933005 	adds	r3, r3, r5
    b088:	e3a04000 	mov	r4, #0	; 0x0
    b08c:	e0a44006 	adc	r4, r4, r6
    b090:	e3540201 	cmp	r4, #268435456	; 0x10000000
    b094:	31a0200c 	movcc	r2, ip
    b098:	21a0200e 	movcs	r2, lr
    b09c:	e1a0a423 	mov	sl, r3, lsr #8
    b0a0:	e1a00002 	mov	r0, r2
    b0a4:	e18aac04 	orr	sl, sl, r4, lsl #24
    b0a8:	e1a0b424 	mov	fp, r4, lsr #8
    b0ac:	e3c02b3e 	bic	r2, r0, #63488	; 0xf800
    b0b0:	e3a04601 	mov	r4, #1048576	; 0x100000
    b0b4:	e1a02802 	mov	r2, r2, lsl #16
    b0b8:	e3e03000 	mvn	r3, #0	; 0x0
    b0bc:	e2444001 	sub	r4, r4, #1	; 0x1
    b0c0:	e00a0003 	and	r0, sl, r3
    b0c4:	e00b1004 	and	r1, fp, r4
    b0c8:	e1a0c822 	mov	ip, r2, lsr #16
    b0cc:	eaffff7f 	b	aed0 <__pack_d+0x54>
    b0d0:	e3530000 	cmp	r3, #0	; 0x0
    b0d4:	1affffa8 	bne	af7c <__pack_d+0x100>
    b0d8:	e3a01c01 	mov	r1, #256	; 0x100
    b0dc:	e3a02000 	mov	r2, #0	; 0x0
    b0e0:	e00a3001 	and	r3, sl, r1
    b0e4:	e00b4002 	and	r4, fp, r2
    b0e8:	e1933004 	orrs	r3, r3, r4
    b0ec:	0affffa6 	beq	af8c <__pack_d+0x110>
    b0f0:	e3a03080 	mov	r3, #128	; 0x80
    b0f4:	e3a04000 	mov	r4, #0	; 0x0
    b0f8:	e09aa003 	adds	sl, sl, r3
    b0fc:	e0abb004 	adc	fp, fp, r4
    b100:	eaffffa1 	b	af8c <__pack_d+0x110>
    b104:	e35b0000 	cmp	fp, #0	; 0x0
    b108:	1affffdc 	bne	b080 <__pack_d+0x204>
    b10c:	e3a01c01 	mov	r1, #256	; 0x100
    b110:	e3a02000 	mov	r2, #0	; 0x0
    b114:	e0053001 	and	r3, r5, r1
    b118:	e0064002 	and	r4, r6, r2
    b11c:	e1933004 	orrs	r3, r3, r4
    b120:	1a000006 	bne	b140 <__pack_d+0x2c4>
    b124:	e3560201 	cmp	r6, #268435456	; 0x10000000
    b128:	21a0300e 	movcs	r3, lr
    b12c:	e1a0a425 	mov	sl, r5, lsr #8
    b130:	e1a00003 	mov	r0, r3
    b134:	e18aac06 	orr	sl, sl, r6, lsl #24
    b138:	e1a0b426 	mov	fp, r6, lsr #8
    b13c:	eaffffda 	b	b0ac <__pack_d+0x230>
    b140:	e3a03080 	mov	r3, #128	; 0x80
    b144:	e0933005 	adds	r3, r3, r5
    b148:	e3a04000 	mov	r4, #0	; 0x0
    b14c:	e0a44006 	adc	r4, r4, r6
    b150:	e3540201 	cmp	r4, #268435456	; 0x10000000
    b154:	21a0200e 	movcs	r2, lr
    b158:	31a0200b 	movcc	r2, fp
    b15c:	e1a0a423 	mov	sl, r3, lsr #8
    b160:	e1a00002 	mov	r0, r2
    b164:	e18aac04 	orr	sl, sl, r4, lsl #24
    b168:	e1a0b424 	mov	fp, r4, lsr #8
    b16c:	eaffffce 	b	b0ac <__pack_d+0x230>

0000b170 <__unpack_d>:
    b170:	e92d0070 	stmdb	sp!, {r4, r5, r6}
    b174:	e5904000 	ldr	r4, [r0]
    b178:	e1a02a24 	mov	r2, r4, lsr #20
    b17c:	e5903004 	ldr	r3, [r0, #4]
    b180:	e3c22b3e 	bic	r2, r2, #63488	; 0xf800
    b184:	e1a0c001 	mov	ip, r1
    b188:	e3c464ff 	bic	r6, r4, #-16777216	; 0xff000000
    b18c:	e1a01fa4 	mov	r1, r4, lsr #31
    b190:	e2520000 	subs	r0, r2, #0	; 0x0
    b194:	e1a05003 	mov	r5, r3
    b198:	e58c1004 	str	r1, [ip, #4]
    b19c:	e3c6660f 	bic	r6, r6, #15728640	; 0xf00000
    b1a0:	1a000005 	bne	b1bc <__unpack_d+0x4c>
    b1a4:	e1953006 	orrs	r3, r5, r6
    b1a8:	03a03002 	moveq	r3, #2	; 0x2
    b1ac:	058c3000 	streq	r3, [ip]
    b1b0:	1a000014 	bne	b208 <__unpack_d+0x98>
    b1b4:	e8bd0070 	ldmia	sp!, {r4, r5, r6}
    b1b8:	e12fff1e 	bx	lr
    b1bc:	e3a03e7f 	mov	r3, #2032	; 0x7f0
    b1c0:	e283300f 	add	r3, r3, #15	; 0xf
    b1c4:	e1500003 	cmp	r0, r3
    b1c8:	0a000022 	beq	b258 <__unpack_d+0xe8>
    b1cc:	e1a04406 	mov	r4, r6, lsl #8
    b1d0:	e1844c25 	orr	r4, r4, r5, lsr #24
    b1d4:	e1a03405 	mov	r3, r5, lsl #8
    b1d8:	e3a01000 	mov	r1, #0	; 0x0
    b1dc:	e3a02201 	mov	r2, #268435456	; 0x10000000
    b1e0:	e2400fff 	sub	r0, r0, #1020	; 0x3fc
    b1e4:	e1835001 	orr	r5, r3, r1
    b1e8:	e1846002 	orr	r6, r4, r2
    b1ec:	e2400003 	sub	r0, r0, #3	; 0x3
    b1f0:	e3a03003 	mov	r3, #3	; 0x3
    b1f4:	e58c500c 	str	r5, [ip, #12]
    b1f8:	e58c6010 	str	r6, [ip, #16]
    b1fc:	e58c0008 	str	r0, [ip, #8]
    b200:	e58c3000 	str	r3, [ip]
    b204:	eaffffea 	b	b1b4 <__unpack_d+0x44>
    b208:	e1a02406 	mov	r2, r6, lsl #8
    b20c:	e3e00fff 	mvn	r0, #1020	; 0x3fc
    b210:	e1822c25 	orr	r2, r2, r5, lsr #24
    b214:	e2400001 	sub	r0, r0, #1	; 0x1
    b218:	e3a03003 	mov	r3, #3	; 0x3
    b21c:	e372021f 	cmn	r2, #-268435455	; 0xf0000001
    b220:	e1a01405 	mov	r1, r5, lsl #8
    b224:	e58c3000 	str	r3, [ip]
    b228:	e58c0008 	str	r0, [ip, #8]
    b22c:	8a000006 	bhi	b24c <__unpack_d+0xdc>
    b230:	e1a03000 	mov	r3, r0
    b234:	e0911001 	adds	r1, r1, r1
    b238:	e0a22002 	adc	r2, r2, r2
    b23c:	e372021f 	cmn	r2, #-268435455	; 0xf0000001
    b240:	e2433001 	sub	r3, r3, #1	; 0x1
    b244:	9afffffa 	bls	b234 <__unpack_d+0xc4>
    b248:	e58c3008 	str	r3, [ip, #8]
    b24c:	e58c100c 	str	r1, [ip, #12]
    b250:	e58c2010 	str	r2, [ip, #16]
    b254:	eaffffd6 	b	b1b4 <__unpack_d+0x44>
    b258:	e1953006 	orrs	r3, r5, r6
    b25c:	03a03004 	moveq	r3, #4	; 0x4
    b260:	058c3000 	streq	r3, [ip]
    b264:	0affffd2 	beq	b1b4 <__unpack_d+0x44>
    b268:	e3a01000 	mov	r1, #0	; 0x0
    b26c:	e3a02702 	mov	r2, #524288	; 0x80000
    b270:	e0053001 	and	r3, r5, r1
    b274:	e0064002 	and	r4, r6, r2
    b278:	e1933004 	orrs	r3, r3, r4
    b27c:	13a03001 	movne	r3, #1	; 0x1
    b280:	158c3000 	strne	r3, [ip]
    b284:	058c3000 	streq	r3, [ip]
    b288:	e58c500c 	str	r5, [ip, #12]
    b28c:	e58c6010 	str	r6, [ip, #16]
    b290:	eaffffc7 	b	b1b4 <__unpack_d+0x44>

0000b294 <isnan>:
    b294:	e5900000 	ldr	r0, [r0]
    b298:	e3500001 	cmp	r0, #1	; 0x1
    b29c:	83a00000 	movhi	r0, #0	; 0x0
    b2a0:	93a00001 	movls	r0, #1	; 0x1
    b2a4:	e12fff1e 	bx	lr

0000b2a8 <isinf>:
    b2a8:	e5900000 	ldr	r0, [r0]
    b2ac:	e3500004 	cmp	r0, #4	; 0x4
    b2b0:	13a00000 	movne	r0, #0	; 0x0
    b2b4:	03a00001 	moveq	r0, #1	; 0x1
    b2b8:	e12fff1e 	bx	lr

0000b2bc <iszero>:
    b2bc:	e5900000 	ldr	r0, [r0]
    b2c0:	e3500002 	cmp	r0, #2	; 0x2
    b2c4:	13a00000 	movne	r0, #0	; 0x0
    b2c8:	03a00001 	moveq	r0, #1	; 0x1
    b2cc:	e12fff1e 	bx	lr

0000b2d0 <__fpcmp_parts_d>:
    b2d0:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    b2d4:	e1a04001 	mov	r4, r1
    b2d8:	e1a05000 	mov	r5, r0
    b2dc:	ebffffec 	bl	b294 <isnan>
    b2e0:	e3500000 	cmp	r0, #0	; 0x0
    b2e4:	0a000001 	beq	b2f0 <__fpcmp_parts_d+0x20>
    b2e8:	e3a00001 	mov	r0, #1	; 0x1
    b2ec:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
    b2f0:	e1a00004 	mov	r0, r4
    b2f4:	ebffffe6 	bl	b294 <isnan>
    b2f8:	e3500000 	cmp	r0, #0	; 0x0
    b2fc:	1afffff9 	bne	b2e8 <__fpcmp_parts_d+0x18>
    b300:	e1a00005 	mov	r0, r5
    b304:	ebffffe7 	bl	b2a8 <isinf>
    b308:	e3500000 	cmp	r0, #0	; 0x0
    b30c:	1a000013 	bne	b360 <__fpcmp_parts_d+0x90>
    b310:	e1a00004 	mov	r0, r4
    b314:	ebffffe3 	bl	b2a8 <isinf>
    b318:	e3500000 	cmp	r0, #0	; 0x0
    b31c:	1a000021 	bne	b3a8 <__fpcmp_parts_d+0xd8>
    b320:	e1a00005 	mov	r0, r5
    b324:	ebffffe4 	bl	b2bc <iszero>
    b328:	e3500000 	cmp	r0, #0	; 0x0
    b32c:	1a000017 	bne	b390 <__fpcmp_parts_d+0xc0>
    b330:	e1a00004 	mov	r0, r4
    b334:	ebffffe0 	bl	b2bc <iszero>
    b338:	e3500000 	cmp	r0, #0	; 0x0
    b33c:	1a00000f 	bne	b380 <__fpcmp_parts_d+0xb0>
    b340:	e595c004 	ldr	ip, [r5, #4]
    b344:	e5943004 	ldr	r3, [r4, #4]
    b348:	e15c0003 	cmp	ip, r3
    b34c:	0a000019 	beq	b3b8 <__fpcmp_parts_d+0xe8>
    b350:	e35c0000 	cmp	ip, #0	; 0x0
    b354:	0affffe3 	beq	b2e8 <__fpcmp_parts_d+0x18>
    b358:	e3e00000 	mvn	r0, #0	; 0x0
    b35c:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
    b360:	e1a00004 	mov	r0, r4
    b364:	ebffffcf 	bl	b2a8 <isinf>
    b368:	e3500000 	cmp	r0, #0	; 0x0
    b36c:	0a000003 	beq	b380 <__fpcmp_parts_d+0xb0>
    b370:	e5942004 	ldr	r2, [r4, #4]
    b374:	e5953004 	ldr	r3, [r5, #4]
    b378:	e0630002 	rsb	r0, r3, r2
    b37c:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
    b380:	e5953004 	ldr	r3, [r5, #4]
    b384:	e3530000 	cmp	r3, #0	; 0x0
    b388:	0affffd6 	beq	b2e8 <__fpcmp_parts_d+0x18>
    b38c:	eafffff1 	b	b358 <__fpcmp_parts_d+0x88>
    b390:	e1a00004 	mov	r0, r4
    b394:	ebffffc8 	bl	b2bc <iszero>
    b398:	e3500000 	cmp	r0, #0	; 0x0
    b39c:	0a000001 	beq	b3a8 <__fpcmp_parts_d+0xd8>
    b3a0:	e3a00000 	mov	r0, #0	; 0x0
    b3a4:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
    b3a8:	e5943004 	ldr	r3, [r4, #4]
    b3ac:	e3530000 	cmp	r3, #0	; 0x0
    b3b0:	1affffcc 	bne	b2e8 <__fpcmp_parts_d+0x18>
    b3b4:	eaffffe7 	b	b358 <__fpcmp_parts_d+0x88>
    b3b8:	e5952008 	ldr	r2, [r5, #8]
    b3bc:	e5943008 	ldr	r3, [r4, #8]
    b3c0:	e1520003 	cmp	r2, r3
    b3c4:	caffffe1 	bgt	b350 <__fpcmp_parts_d+0x80>
    b3c8:	ba00000b 	blt	b3fc <__fpcmp_parts_d+0x12c>
    b3cc:	e285200c 	add	r2, r5, #12	; 0xc
    b3d0:	e892000c 	ldmia	r2, {r2, r3}
    b3d4:	e284000c 	add	r0, r4, #12	; 0xc
    b3d8:	e8900003 	ldmia	r0, {r0, r1}
    b3dc:	e1530001 	cmp	r3, r1
    b3e0:	8affffda 	bhi	b350 <__fpcmp_parts_d+0x80>
    b3e4:	0a000007 	beq	b408 <__fpcmp_parts_d+0x138>
    b3e8:	e1510003 	cmp	r1, r3
    b3ec:	8a000002 	bhi	b3fc <__fpcmp_parts_d+0x12c>
    b3f0:	1affffea 	bne	b3a0 <__fpcmp_parts_d+0xd0>
    b3f4:	e1500002 	cmp	r0, r2
    b3f8:	9affffe8 	bls	b3a0 <__fpcmp_parts_d+0xd0>
    b3fc:	e35c0000 	cmp	ip, #0	; 0x0
    b400:	1affffb8 	bne	b2e8 <__fpcmp_parts_d+0x18>
    b404:	eaffffd3 	b	b358 <__fpcmp_parts_d+0x88>
    b408:	e1520000 	cmp	r2, r0
    b40c:	9afffff5 	bls	b3e8 <__fpcmp_parts_d+0x118>
    b410:	eaffffce 	b	b350 <__fpcmp_parts_d+0x80>

0000b414 <__errno>:
    b414:	e59f3004 	ldr	r3, [pc, #4]	; b420 <prog+0xb3d8>
    b418:	e5930000 	ldr	r0, [r3]
    b41c:	e12fff1e 	bx	lr
    b420:	40000014 	andmi	r0, r0, r4, lsl r0

0000b424 <fflush>:
    b424:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
    b428:	e2506000 	subs	r6, r0, #0	; 0x0
    b42c:	0a00002c 	beq	b4e4 <fflush+0xc0>
    b430:	e59f30c0 	ldr	r3, [pc, #192]	; b4f8 <prog+0xb4b0>
    b434:	e5930000 	ldr	r0, [r3]
    b438:	e3500000 	cmp	r0, #0	; 0x0
    b43c:	0a000002 	beq	b44c <fflush+0x28>
    b440:	e5903038 	ldr	r3, [r0, #56]
    b444:	e3530000 	cmp	r3, #0	; 0x0
    b448:	0a000023 	beq	b4dc <fflush+0xb8>
    b44c:	e1d610fc 	ldrsh	r1, [r6, #12]
    b450:	e3110008 	tst	r1, #8	; 0x8
    b454:	0a00001c 	beq	b4cc <fflush+0xa8>
    b458:	e5965010 	ldr	r5, [r6, #16]
    b45c:	e3550000 	cmp	r5, #0	; 0x0
    b460:	0a000019 	beq	b4cc <fflush+0xa8>
    b464:	e5963000 	ldr	r3, [r6]
    b468:	e3110003 	tst	r1, #3	; 0x3
    b46c:	e0654003 	rsb	r4, r5, r3
    b470:	e5865000 	str	r5, [r6]
    b474:	13a03000 	movne	r3, #0	; 0x0
    b478:	0a000015 	beq	b4d4 <fflush+0xb0>
    b47c:	e3540000 	cmp	r4, #0	; 0x0
    b480:	e5863008 	str	r3, [r6, #8]
    b484:	ca000002 	bgt	b494 <fflush+0x70>
    b488:	ea00000f 	b	b4cc <fflush+0xa8>
    b48c:	e3540000 	cmp	r4, #0	; 0x0
    b490:	da00000d 	ble	b4cc <fflush+0xa8>
    b494:	e1a01005 	mov	r1, r5
    b498:	e1a02004 	mov	r2, r4
    b49c:	e596001c 	ldr	r0, [r6, #28]
    b4a0:	e1a0e00f 	mov	lr, pc
    b4a4:	e596f024 	ldr	pc, [r6, #36]
    b4a8:	e3500000 	cmp	r0, #0	; 0x0
    b4ac:	e0855000 	add	r5, r5, r0
    b4b0:	e0604004 	rsb	r4, r0, r4
    b4b4:	cafffff4 	bgt	b48c <fflush+0x68>
    b4b8:	e1d630bc 	ldrh	r3, [r6, #12]
    b4bc:	e3e00000 	mvn	r0, #0	; 0x0
    b4c0:	e3833040 	orr	r3, r3, #64	; 0x40
    b4c4:	e1c630bc 	strh	r3, [r6, #12]
    b4c8:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
    b4cc:	e3a00000 	mov	r0, #0	; 0x0
    b4d0:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
    b4d4:	e5963014 	ldr	r3, [r6, #20]
    b4d8:	eaffffe7 	b	b47c <fflush+0x58>
    b4dc:	eb000023 	bl	b570 <__sinit>
    b4e0:	eaffffd9 	b	b44c <fflush+0x28>
    b4e4:	e59f3010 	ldr	r3, [pc, #16]	; b4fc <prog+0xb4b4>
    b4e8:	e59f1010 	ldr	r1, [pc, #16]	; b500 <prog+0xb4b8>
    b4ec:	e5930000 	ldr	r0, [r3]
    b4f0:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
    b4f4:	ea0000c3 	b	b808 <_fwalk>
    b4f8:	40000014 	andmi	r0, r0, r4, lsl r0
    b4fc:	00014434 	andeq	r4, r1, r4, lsr r4
    b500:	0000b424 	andeq	fp, r0, r4, lsr #8

0000b504 <std>:
    b504:	e59f3044 	ldr	r3, [pc, #68]	; b550 <prog+0xb508>
    b508:	e580302c 	str	r3, [r0, #44]
    b50c:	e59f3040 	ldr	r3, [pc, #64]	; b554 <prog+0xb50c>
    b510:	e1c020be 	strh	r2, [r0, #14]
    b514:	e5803020 	str	r3, [r0, #32]
    b518:	e59f2038 	ldr	r2, [pc, #56]	; b558 <prog+0xb510>
    b51c:	e59f3038 	ldr	r3, [pc, #56]	; b55c <prog+0xb514>
    b520:	e3a0c000 	mov	ip, #0	; 0x0
    b524:	e1c010bc 	strh	r1, [r0, #12]
    b528:	e580c018 	str	ip, [r0, #24]
    b52c:	e5802024 	str	r2, [r0, #36]
    b530:	e5803028 	str	r3, [r0, #40]
    b534:	e580c000 	str	ip, [r0]
    b538:	e580c004 	str	ip, [r0, #4]
    b53c:	e580c008 	str	ip, [r0, #8]
    b540:	e580c010 	str	ip, [r0, #16]
    b544:	e580c014 	str	ip, [r0, #20]
    b548:	e580001c 	str	r0, [r0, #28]
    b54c:	e12fff1e 	bx	lr
    b550:	0000c36c 	andeq	ip, r0, ip, ror #6
    b554:	0000c428 	andeq	ip, r0, r8, lsr #8
    b558:	0000c3c8 	andeq	ip, r0, r8, asr #7
    b55c:	0000c380 	andeq	ip, r0, r0, lsl #7

0000b560 <__sfp_lock_acquire>:
    b560:	e12fff1e 	bx	lr

0000b564 <__sfp_lock_release>:
    b564:	e12fff1e 	bx	lr

0000b568 <__sinit_lock_acquire>:
    b568:	e12fff1e 	bx	lr

0000b56c <__sinit_lock_release>:
    b56c:	e12fff1e 	bx	lr

0000b570 <__sinit>:
    b570:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
    b574:	e590e038 	ldr	lr, [r0, #56]
    b578:	e25e2000 	subs	r2, lr, #0	; 0x0
    b57c:	e3a06001 	mov	r6, #1	; 0x1
    b580:	e3a01004 	mov	r1, #4	; 0x4
    b584:	e1a04000 	mov	r4, r0
    b588:	e2805fbb 	add	r5, r0, #748	; 0x2ec
    b58c:	e1a03000 	mov	r3, r0
    b590:	18bd8070 	ldmneia	sp!, {r4, r5, r6, pc}
    b594:	e59f0048 	ldr	r0, [pc, #72]	; b5e4 <prog+0xb59c>
    b598:	e3a0c003 	mov	ip, #3	; 0x3
    b59c:	e584003c 	str	r0, [r4, #60]
    b5a0:	e584c2e4 	str	ip, [r4, #740]
    b5a4:	e584e2e0 	str	lr, [r4, #736]
    b5a8:	e5940004 	ldr	r0, [r4, #4]
    b5ac:	e58452e8 	str	r5, [r4, #744]
    b5b0:	e5846038 	str	r6, [r4, #56]
    b5b4:	ebffffd2 	bl	b504 <std>
    b5b8:	e1a02006 	mov	r2, r6
    b5bc:	e5940008 	ldr	r0, [r4, #8]
    b5c0:	e1a03004 	mov	r3, r4
    b5c4:	e3a01009 	mov	r1, #9	; 0x9
    b5c8:	ebffffcd 	bl	b504 <std>
    b5cc:	e594000c 	ldr	r0, [r4, #12]
    b5d0:	e1a03004 	mov	r3, r4
    b5d4:	e3a0100a 	mov	r1, #10	; 0xa
    b5d8:	e3a02002 	mov	r2, #2	; 0x2
    b5dc:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
    b5e0:	eaffffc7 	b	b504 <std>
    b5e4:	0000b628 	andeq	fp, r0, r8, lsr #12

0000b5e8 <__fp_lock>:
    b5e8:	e3a00000 	mov	r0, #0	; 0x0
    b5ec:	e12fff1e 	bx	lr

0000b5f0 <__fp_unlock>:
    b5f0:	e3a00000 	mov	r0, #0	; 0x0
    b5f4:	e12fff1e 	bx	lr

0000b5f8 <__fp_unlock_all>:
    b5f8:	e59f3008 	ldr	r3, [pc, #8]	; b608 <prog+0xb5c0>
    b5fc:	e59f1008 	ldr	r1, [pc, #8]	; b60c <prog+0xb5c4>
    b600:	e5930000 	ldr	r0, [r3]
    b604:	ea00007f 	b	b808 <_fwalk>
    b608:	40000014 	andmi	r0, r0, r4, lsl r0
    b60c:	0000b5f0 	streqd	fp, [r0], -r0

0000b610 <__fp_lock_all>:
    b610:	e59f3008 	ldr	r3, [pc, #8]	; b620 <prog+0xb5d8>
    b614:	e59f1008 	ldr	r1, [pc, #8]	; b624 <prog+0xb5dc>
    b618:	e5930000 	ldr	r0, [r3]
    b61c:	ea000079 	b	b808 <_fwalk>
    b620:	40000014 	andmi	r0, r0, r4, lsl r0
    b624:	0000b5e8 	andeq	fp, r0, r8, ror #11

0000b628 <_cleanup_r>:
    b628:	e59f1000 	ldr	r1, [pc, #0]	; b630 <prog+0xb5e8>
    b62c:	ea000075 	b	b808 <_fwalk>
    b630:	00010bc8 	andeq	r0, r1, r8, asr #23

0000b634 <_cleanup>:
    b634:	e59f3004 	ldr	r3, [pc, #4]	; b640 <prog+0xb5f8>
    b638:	e5930000 	ldr	r0, [r3]
    b63c:	eafffff9 	b	b628 <_cleanup_r>
    b640:	00014434 	andeq	r4, r1, r4, lsr r4

0000b644 <__sfmoreglue>:
    b644:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
    b648:	e0814081 	add	r4, r1, r1, lsl #1
    b64c:	e0614184 	rsb	r4, r1, r4, lsl #3
    b650:	e1a04104 	mov	r4, r4, lsl #2
    b654:	e1a06001 	mov	r6, r1
    b658:	e284100c 	add	r1, r4, #12	; 0xc
    b65c:	eb00008a 	bl	b88c <_malloc_r>
    b660:	e250c000 	subs	ip, r0, #0	; 0x0
    b664:	e3a0e000 	mov	lr, #0	; 0x0
    b668:	e28c300c 	add	r3, ip, #12	; 0xc
    b66c:	e1a0500c 	mov	r5, ip
    b670:	e1a00003 	mov	r0, r3
    b674:	e1a0100e 	mov	r1, lr
    b678:	e1a02004 	mov	r2, r4
    b67c:	158c6004 	strne	r6, [ip, #4]
    b680:	158ce000 	strne	lr, [ip]
    b684:	158c3008 	strne	r3, [ip, #8]
    b688:	1b0002a9 	blne	c134 <memset>
    b68c:	e1a00005 	mov	r0, r5
    b690:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}

0000b694 <__sfp>:
    b694:	e59f30e0 	ldr	r3, [pc, #224]	; b77c <prog+0xb734>
    b698:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    b69c:	e5934000 	ldr	r4, [r3]
    b6a0:	e5942038 	ldr	r2, [r4, #56]
    b6a4:	e3520000 	cmp	r2, #0	; 0x0
    b6a8:	e1a05000 	mov	r5, r0
    b6ac:	0a000025 	beq	b748 <__sfp+0xb4>
    b6b0:	e2844e2e 	add	r4, r4, #736	; 0x2e0
    b6b4:	e5943004 	ldr	r3, [r4, #4]
    b6b8:	e2531001 	subs	r1, r3, #1	; 0x1
    b6bc:	e5940008 	ldr	r0, [r4, #8]
    b6c0:	4a00000b 	bmi	b6f4 <__sfp+0x60>
    b6c4:	e1d030fc 	ldrsh	r3, [r0, #12]
    b6c8:	e3530000 	cmp	r3, #0	; 0x0
    b6cc:	0a00000d 	beq	b708 <__sfp+0x74>
    b6d0:	e3a02000 	mov	r2, #0	; 0x0
    b6d4:	ea000002 	b	b6e4 <__sfp+0x50>
    b6d8:	e1d030fc 	ldrsh	r3, [r0, #12]
    b6dc:	e3530000 	cmp	r3, #0	; 0x0
    b6e0:	0a000008 	beq	b708 <__sfp+0x74>
    b6e4:	e1520001 	cmp	r2, r1
    b6e8:	e280005c 	add	r0, r0, #92	; 0x5c
    b6ec:	e2822001 	add	r2, r2, #1	; 0x1
    b6f0:	1afffff8 	bne	b6d8 <__sfp+0x44>
    b6f4:	e5940000 	ldr	r0, [r4]
    b6f8:	e3500000 	cmp	r0, #0	; 0x0
    b6fc:	0a000014 	beq	b754 <__sfp+0xc0>
    b700:	e1a04000 	mov	r4, r0
    b704:	eaffffea 	b	b6b4 <__sfp+0x20>
    b708:	e3a03000 	mov	r3, #0	; 0x0
    b70c:	e5803048 	str	r3, [r0, #72]
    b710:	e5803000 	str	r3, [r0]
    b714:	e5803008 	str	r3, [r0, #8]
    b718:	e5803004 	str	r3, [r0, #4]
    b71c:	e5803010 	str	r3, [r0, #16]
    b720:	e5803014 	str	r3, [r0, #20]
    b724:	e5803018 	str	r3, [r0, #24]
    b728:	e5803030 	str	r3, [r0, #48]
    b72c:	e5803034 	str	r3, [r0, #52]
    b730:	e5803044 	str	r3, [r0, #68]
    b734:	e3e03000 	mvn	r3, #0	; 0x0
    b738:	e1c030be 	strh	r3, [r0, #14]
    b73c:	e3a03001 	mov	r3, #1	; 0x1
    b740:	e1c030bc 	strh	r3, [r0, #12]
    b744:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
    b748:	e1a00004 	mov	r0, r4
    b74c:	ebffff87 	bl	b570 <__sinit>
    b750:	eaffffd6 	b	b6b0 <__sfp+0x1c>
    b754:	e1a00005 	mov	r0, r5
    b758:	e3a01004 	mov	r1, #4	; 0x4
    b75c:	ebffffb8 	bl	b644 <__sfmoreglue>
    b760:	e3500000 	cmp	r0, #0	; 0x0
    b764:	e5840000 	str	r0, [r4]
    b768:	1affffe4 	bne	b700 <__sfp+0x6c>
    b76c:	e3a0300c 	mov	r3, #12	; 0xc
    b770:	e3a00000 	mov	r0, #0	; 0x0
    b774:	e5853000 	str	r3, [r5]
    b778:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
    b77c:	00014434 	andeq	r4, r1, r4, lsr r4

0000b780 <_fwalk_reent>:
    b780:	e92d47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b784:	e1a08000 	mov	r8, r0
    b788:	e1a0a001 	mov	sl, r1
    b78c:	ebffff73 	bl	b560 <__sfp_lock_acquire>
    b790:	e2987e2e 	adds	r7, r8, #736	; 0x2e0
    b794:	01a09007 	moveq	r9, r7
    b798:	0a000017 	beq	b7fc <_fwalk_reent+0x7c>
    b79c:	e3a09000 	mov	r9, #0	; 0x0
    b7a0:	e5973004 	ldr	r3, [r7, #4]
    b7a4:	e2536001 	subs	r6, r3, #1	; 0x1
    b7a8:	e5974008 	ldr	r4, [r7, #8]
    b7ac:	4a00000f 	bmi	b7f0 <_fwalk_reent+0x70>
    b7b0:	e3a05000 	mov	r5, #0	; 0x0
    b7b4:	e1d430fc 	ldrsh	r3, [r4, #12]
    b7b8:	e3530000 	cmp	r3, #0	; 0x0
    b7bc:	0a000007 	beq	b7e0 <_fwalk_reent+0x60>
    b7c0:	e1d430fe 	ldrsh	r3, [r4, #14]
    b7c4:	e3730001 	cmn	r3, #1	; 0x1
    b7c8:	e1a01004 	mov	r1, r4
    b7cc:	e1a00008 	mov	r0, r8
    b7d0:	0a000002 	beq	b7e0 <_fwalk_reent+0x60>
    b7d4:	e1a0e00f 	mov	lr, pc
    b7d8:	e12fff1a 	bx	sl
    b7dc:	e1899000 	orr	r9, r9, r0
    b7e0:	e1560005 	cmp	r6, r5
    b7e4:	e284405c 	add	r4, r4, #92	; 0x5c
    b7e8:	e2855001 	add	r5, r5, #1	; 0x1
    b7ec:	1afffff0 	bne	b7b4 <_fwalk_reent+0x34>
    b7f0:	e5977000 	ldr	r7, [r7]
    b7f4:	e3570000 	cmp	r7, #0	; 0x0
    b7f8:	1affffe8 	bne	b7a0 <_fwalk_reent+0x20>
    b7fc:	ebffff58 	bl	b564 <__sfp_lock_release>
    b800:	e1a00009 	mov	r0, r9
    b804:	e8bd87f0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000b808 <_fwalk>:
    b808:	e92d45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
    b80c:	e1a04000 	mov	r4, r0
    b810:	e1a08001 	mov	r8, r1
    b814:	ebffff51 	bl	b560 <__sfp_lock_acquire>
    b818:	e2947e2e 	adds	r7, r4, #736	; 0x2e0
    b81c:	01a0a007 	moveq	sl, r7
    b820:	0a000016 	beq	b880 <_fwalk+0x78>
    b824:	e3a0a000 	mov	sl, #0	; 0x0
    b828:	e5973004 	ldr	r3, [r7, #4]
    b82c:	e2536001 	subs	r6, r3, #1	; 0x1
    b830:	e5974008 	ldr	r4, [r7, #8]
    b834:	4a00000e 	bmi	b874 <_fwalk+0x6c>
    b838:	e3a05000 	mov	r5, #0	; 0x0
    b83c:	e1d430fc 	ldrsh	r3, [r4, #12]
    b840:	e3530000 	cmp	r3, #0	; 0x0
    b844:	0a000006 	beq	b864 <_fwalk+0x5c>
    b848:	e1d430fe 	ldrsh	r3, [r4, #14]
    b84c:	e3730001 	cmn	r3, #1	; 0x1
    b850:	e1a00004 	mov	r0, r4
    b854:	0a000002 	beq	b864 <_fwalk+0x5c>
    b858:	e1a0e00f 	mov	lr, pc
    b85c:	e12fff18 	bx	r8
    b860:	e18aa000 	orr	sl, sl, r0
    b864:	e1560005 	cmp	r6, r5
    b868:	e284405c 	add	r4, r4, #92	; 0x5c
    b86c:	e2855001 	add	r5, r5, #1	; 0x1
    b870:	1afffff1 	bne	b83c <_fwalk+0x34>
    b874:	e5977000 	ldr	r7, [r7]
    b878:	e3570000 	cmp	r7, #0	; 0x0
    b87c:	1affffe9 	bne	b828 <_fwalk+0x20>
    b880:	ebffff37 	bl	b564 <__sfp_lock_release>
    b884:	e1a0000a 	mov	r0, sl
    b888:	e8bd85f0 	ldmia	sp!, {r4, r5, r6, r7, r8, sl, pc}

0000b88c <_malloc_r>:
    b88c:	e281300b 	add	r3, r1, #11	; 0xb
    b890:	e3530016 	cmp	r3, #22	; 0x16
    b894:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b898:	83c35007 	bichi	r5, r3, #7	; 0x7
    b89c:	93a05010 	movls	r5, #16	; 0x10
    b8a0:	93a03000 	movls	r3, #0	; 0x0
    b8a4:	81a03fa5 	movhi	r3, r5, lsr #31
    b8a8:	e1550001 	cmp	r5, r1
    b8ac:	33833001 	orrcc	r3, r3, #1	; 0x1
    b8b0:	e3530000 	cmp	r3, #0	; 0x0
    b8b4:	e1a07000 	mov	r7, r0
    b8b8:	13a0300c 	movne	r3, #12	; 0xc
    b8bc:	e24dd004 	sub	sp, sp, #4	; 0x4
    b8c0:	13a00000 	movne	r0, #0	; 0x0
    b8c4:	15873000 	strne	r3, [r7]
    b8c8:	1a000017 	bne	b92c <_malloc_r+0xa0>
    b8cc:	e1a00007 	mov	r0, r7
    b8d0:	eb00023d 	bl	c1cc <__malloc_lock>
    b8d4:	e3550f7e 	cmp	r5, #504	; 0x1f8
    b8d8:	2a000015 	bcs	b934 <_malloc_r+0xa8>
    b8dc:	e59f86fc 	ldr	r8, [pc, #1788]	; bfe0 <prog+0xbf98>
    b8e0:	e1a021a5 	mov	r2, r5, lsr #3
    b8e4:	e0883182 	add	r3, r8, r2, lsl #3
    b8e8:	e593400c 	ldr	r4, [r3, #12]
    b8ec:	e1530004 	cmp	r3, r4
    b8f0:	e1a0a008 	mov	sl, r8
    b8f4:	0a0000cd 	beq	bc30 <_malloc_r+0x3a4>
    b8f8:	e5943004 	ldr	r3, [r4, #4]
    b8fc:	e3c33003 	bic	r3, r3, #3	; 0x3
    b900:	e0843003 	add	r3, r4, r3
    b904:	e5932004 	ldr	r2, [r3, #4]
    b908:	e594000c 	ldr	r0, [r4, #12]
    b90c:	e5941008 	ldr	r1, [r4, #8]
    b910:	e3822001 	orr	r2, r2, #1	; 0x1
    b914:	e5801008 	str	r1, [r0, #8]
    b918:	e581000c 	str	r0, [r1, #12]
    b91c:	e5832004 	str	r2, [r3, #4]
    b920:	e1a00007 	mov	r0, r7
    b924:	eb000229 	bl	c1d0 <__malloc_unlock>
    b928:	e2840008 	add	r0, r4, #8	; 0x8
    b92c:	e28dd004 	add	sp, sp, #4	; 0x4
    b930:	e8bd8ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b934:	e1b024a5 	movs	r2, r5, lsr #9
    b938:	01a001a5 	moveq	r0, r5, lsr #3
    b93c:	01a03180 	moveq	r3, r0, lsl #3
    b940:	1a000027 	bne	b9e4 <_malloc_r+0x158>
    b944:	e59f8694 	ldr	r8, [pc, #1684]	; bfe0 <prog+0xbf98>
    b948:	e0831008 	add	r1, r3, r8
    b94c:	e591400c 	ldr	r4, [r1, #12]
    b950:	e1510004 	cmp	r1, r4
    b954:	e1a0a008 	mov	sl, r8
    b958:	1a000005 	bne	b974 <_malloc_r+0xe8>
    b95c:	ea00000a 	b	b98c <_malloc_r+0x100>
    b960:	e3520000 	cmp	r2, #0	; 0x0
    b964:	aa000047 	bge	ba88 <_malloc_r+0x1fc>
    b968:	e594400c 	ldr	r4, [r4, #12]
    b96c:	e1510004 	cmp	r1, r4
    b970:	0a000005 	beq	b98c <_malloc_r+0x100>
    b974:	e5943004 	ldr	r3, [r4, #4]
    b978:	e3c33003 	bic	r3, r3, #3	; 0x3
    b97c:	e0652003 	rsb	r2, r5, r3
    b980:	e352000f 	cmp	r2, #15	; 0xf
    b984:	dafffff5 	ble	b960 <_malloc_r+0xd4>
    b988:	e2400001 	sub	r0, r0, #1	; 0x1
    b98c:	e280e001 	add	lr, r0, #1	; 0x1
    b990:	e59f664c 	ldr	r6, [pc, #1612]	; bfe4 <prog+0xbf9c>
    b994:	e5964008 	ldr	r4, [r6, #8]
    b998:	e1560004 	cmp	r6, r4
    b99c:	0a000076 	beq	bb7c <_malloc_r+0x2f0>
    b9a0:	e5943004 	ldr	r3, [r4, #4]
    b9a4:	e3c32003 	bic	r2, r3, #3	; 0x3
    b9a8:	e0650002 	rsb	r0, r5, r2
    b9ac:	e350000f 	cmp	r0, #15	; 0xf
    b9b0:	ca000027 	bgt	ba54 <_malloc_r+0x1c8>
    b9b4:	e3500000 	cmp	r0, #0	; 0x0
    b9b8:	e586600c 	str	r6, [r6, #12]
    b9bc:	e5866008 	str	r6, [r6, #8]
    b9c0:	ba00003c 	blt	bab8 <_malloc_r+0x22c>
    b9c4:	e0842002 	add	r2, r4, r2
    b9c8:	e5923004 	ldr	r3, [r2, #4]
    b9cc:	e3833001 	orr	r3, r3, #1	; 0x1
    b9d0:	e1a00007 	mov	r0, r7
    b9d4:	e5823004 	str	r3, [r2, #4]
    b9d8:	eb0001fc 	bl	c1d0 <__malloc_unlock>
    b9dc:	e2840008 	add	r0, r4, #8	; 0x8
    b9e0:	eaffffd1 	b	b92c <_malloc_r+0xa0>
    b9e4:	e3520004 	cmp	r2, #4	; 0x4
    b9e8:	91a03325 	movls	r3, r5, lsr #6
    b9ec:	92830038 	addls	r0, r3, #56	; 0x38
    b9f0:	91a03180 	movls	r3, r0, lsl #3
    b9f4:	9affffd2 	bls	b944 <_malloc_r+0xb8>
    b9f8:	e3520014 	cmp	r2, #20	; 0x14
    b9fc:	9282005b 	addls	r0, r2, #91	; 0x5b
    ba00:	91a03180 	movls	r3, r0, lsl #3
    ba04:	9affffce 	bls	b944 <_malloc_r+0xb8>
    ba08:	e3520054 	cmp	r2, #84	; 0x54
    ba0c:	91a03625 	movls	r3, r5, lsr #12
    ba10:	9283006e 	addls	r0, r3, #110	; 0x6e
    ba14:	91a03180 	movls	r3, r0, lsl #3
    ba18:	9affffc9 	bls	b944 <_malloc_r+0xb8>
    ba1c:	e3520f55 	cmp	r2, #340	; 0x154
    ba20:	91a037a5 	movls	r3, r5, lsr #15
    ba24:	92830077 	addls	r0, r3, #119	; 0x77
    ba28:	91a03180 	movls	r3, r0, lsl #3
    ba2c:	9affffc4 	bls	b944 <_malloc_r+0xb8>
    ba30:	e3a03e55 	mov	r3, #1360	; 0x550
    ba34:	e2833004 	add	r3, r3, #4	; 0x4
    ba38:	e1520003 	cmp	r2, r3
    ba3c:	91a03925 	movls	r3, r5, lsr #18
    ba40:	9283007c 	addls	r0, r3, #124	; 0x7c
    ba44:	83a0007e 	movhi	r0, #126	; 0x7e
    ba48:	82433f59 	subhi	r3, r3, #356	; 0x164
    ba4c:	91a03180 	movls	r3, r0, lsl #3
    ba50:	eaffffbb 	b	b944 <_malloc_r+0xb8>
    ba54:	e0842005 	add	r2, r4, r5
    ba58:	e3801001 	orr	r1, r0, #1	; 0x1
    ba5c:	e3853001 	orr	r3, r5, #1	; 0x1
    ba60:	e7820000 	str	r0, [r2, r0]
    ba64:	e5843004 	str	r3, [r4, #4]
    ba68:	e586200c 	str	r2, [r6, #12]
    ba6c:	e5862008 	str	r2, [r6, #8]
    ba70:	e1a00007 	mov	r0, r7
    ba74:	e9820042 	stmib	r2, {r1, r6}
    ba78:	e582600c 	str	r6, [r2, #12]
    ba7c:	eb0001d3 	bl	c1d0 <__malloc_unlock>
    ba80:	e2840008 	add	r0, r4, #8	; 0x8
    ba84:	eaffffa8 	b	b92c <_malloc_r+0xa0>
    ba88:	e0840003 	add	r0, r4, r3
    ba8c:	e5903004 	ldr	r3, [r0, #4]
    ba90:	e594100c 	ldr	r1, [r4, #12]
    ba94:	e5942008 	ldr	r2, [r4, #8]
    ba98:	e3833001 	orr	r3, r3, #1	; 0x1
    ba9c:	e5803004 	str	r3, [r0, #4]
    baa0:	e5812008 	str	r2, [r1, #8]
    baa4:	e1a00007 	mov	r0, r7
    baa8:	e582100c 	str	r1, [r2, #12]
    baac:	eb0001c7 	bl	c1d0 <__malloc_unlock>
    bab0:	e2840008 	add	r0, r4, #8	; 0x8
    bab4:	eaffff9c 	b	b92c <_malloc_r+0xa0>
    bab8:	e3520c02 	cmp	r2, #512	; 0x200
    babc:	3a0000a0 	bcc	bd44 <_malloc_r+0x4b8>
    bac0:	e1b014a2 	movs	r1, r2, lsr #9
    bac4:	01a011a2 	moveq	r1, r2, lsr #3
    bac8:	01a03181 	moveq	r3, r1, lsl #3
    bacc:	0a00001a 	beq	bb3c <_malloc_r+0x2b0>
    bad0:	e3510004 	cmp	r1, #4	; 0x4
    bad4:	91a03322 	movls	r3, r2, lsr #6
    bad8:	92831038 	addls	r1, r3, #56	; 0x38
    badc:	91a03181 	movls	r3, r1, lsl #3
    bae0:	9a000015 	bls	bb3c <_malloc_r+0x2b0>
    bae4:	e3510014 	cmp	r1, #20	; 0x14
    bae8:	9281105b 	addls	r1, r1, #91	; 0x5b
    baec:	91a03181 	movls	r3, r1, lsl #3
    baf0:	9a000011 	bls	bb3c <_malloc_r+0x2b0>
    baf4:	e3510054 	cmp	r1, #84	; 0x54
    baf8:	91a03622 	movls	r3, r2, lsr #12
    bafc:	9283106e 	addls	r1, r3, #110	; 0x6e
    bb00:	91a03181 	movls	r3, r1, lsl #3
    bb04:	9a00000c 	bls	bb3c <_malloc_r+0x2b0>
    bb08:	e3510f55 	cmp	r1, #340	; 0x154
    bb0c:	91a037a2 	movls	r3, r2, lsr #15
    bb10:	92831077 	addls	r1, r3, #119	; 0x77
    bb14:	91a03181 	movls	r3, r1, lsl #3
    bb18:	9a000007 	bls	bb3c <_malloc_r+0x2b0>
    bb1c:	e3a03e55 	mov	r3, #1360	; 0x550
    bb20:	e2833004 	add	r3, r3, #4	; 0x4
    bb24:	e1510003 	cmp	r1, r3
    bb28:	91a03922 	movls	r3, r2, lsr #18
    bb2c:	9283107c 	addls	r1, r3, #124	; 0x7c
    bb30:	83a0107e 	movhi	r1, #126	; 0x7e
    bb34:	82433f59 	subhi	r3, r3, #356	; 0x164
    bb38:	91a03181 	movls	r3, r1, lsl #3
    bb3c:	e088c003 	add	ip, r8, r3
    bb40:	e59c0008 	ldr	r0, [ip, #8]
    bb44:	e15c0000 	cmp	ip, r0
    bb48:	0a0000eb 	beq	befc <_malloc_r+0x670>
    bb4c:	e5903004 	ldr	r3, [r0, #4]
    bb50:	e3c33003 	bic	r3, r3, #3	; 0x3
    bb54:	e1520003 	cmp	r2, r3
    bb58:	2a000002 	bcs	bb68 <_malloc_r+0x2dc>
    bb5c:	e5900008 	ldr	r0, [r0, #8]
    bb60:	e15c0000 	cmp	ip, r0
    bb64:	1afffff8 	bne	bb4c <_malloc_r+0x2c0>
    bb68:	e590c00c 	ldr	ip, [r0, #12]
    bb6c:	e584c00c 	str	ip, [r4, #12]
    bb70:	e5840008 	str	r0, [r4, #8]
    bb74:	e580400c 	str	r4, [r0, #12]
    bb78:	e58c4008 	str	r4, [ip, #8]
    bb7c:	e59a0004 	ldr	r0, [sl, #4]
    bb80:	e35e0000 	cmp	lr, #0	; 0x0
    bb84:	e28e3003 	add	r3, lr, #3	; 0x3
    bb88:	a1a0300e 	movge	r3, lr
    bb8c:	e1a03143 	mov	r3, r3, asr #2
    bb90:	e3a02001 	mov	r2, #1	; 0x1
    bb94:	e1a02312 	mov	r2, r2, lsl r3
    bb98:	e1520000 	cmp	r2, r0
    bb9c:	8a000029 	bhi	bc48 <_malloc_r+0x3bc>
    bba0:	e1120000 	tst	r2, r0
    bba4:	0a000073 	beq	bd78 <_malloc_r+0x4ec>
    bba8:	e088918e 	add	r9, r8, lr, lsl #3
    bbac:	e1a0a00e 	mov	sl, lr
    bbb0:	e1a01009 	mov	r1, r9
    bbb4:	e591400c 	ldr	r4, [r1, #12]
    bbb8:	e1510004 	cmp	r1, r4
    bbbc:	1a000005 	bne	bbd8 <_malloc_r+0x34c>
    bbc0:	ea000076 	b	bda0 <_malloc_r+0x514>
    bbc4:	e35c0000 	cmp	ip, #0	; 0x0
    bbc8:	aa000079 	bge	bdb4 <_malloc_r+0x528>
    bbcc:	e594400c 	ldr	r4, [r4, #12]
    bbd0:	e1510004 	cmp	r1, r4
    bbd4:	0a000071 	beq	bda0 <_malloc_r+0x514>
    bbd8:	e5943004 	ldr	r3, [r4, #4]
    bbdc:	e3c33003 	bic	r3, r3, #3	; 0x3
    bbe0:	e065c003 	rsb	ip, r5, r3
    bbe4:	e35c000f 	cmp	ip, #15	; 0xf
    bbe8:	dafffff5 	ble	bbc4 <_malloc_r+0x338>
    bbec:	e3853001 	orr	r3, r5, #1	; 0x1
    bbf0:	e0842005 	add	r2, r4, r5
    bbf4:	e594000c 	ldr	r0, [r4, #12]
    bbf8:	e5843004 	str	r3, [r4, #4]
    bbfc:	e5b41008 	ldr	r1, [r4, #8]!
    bc00:	e38c3001 	orr	r3, ip, #1	; 0x1
    bc04:	e5801008 	str	r1, [r0, #8]
    bc08:	e581000c 	str	r0, [r1, #12]
    bc0c:	e5862008 	str	r2, [r6, #8]
    bc10:	e586200c 	str	r2, [r6, #12]
    bc14:	e1a00007 	mov	r0, r7
    bc18:	e782c00c 	str	ip, [r2, ip]
    bc1c:	e9820048 	stmib	r2, {r3, r6}
    bc20:	e582600c 	str	r6, [r2, #12]
    bc24:	eb000169 	bl	c1d0 <__malloc_unlock>
    bc28:	e1a00004 	mov	r0, r4
    bc2c:	eaffff3e 	b	b92c <_malloc_r+0xa0>
    bc30:	e2843008 	add	r3, r4, #8	; 0x8
    bc34:	e593400c 	ldr	r4, [r3, #12]
    bc38:	e1530004 	cmp	r3, r4
    bc3c:	1affff2d 	bne	b8f8 <_malloc_r+0x6c>
    bc40:	e282e002 	add	lr, r2, #2	; 0x2
    bc44:	eaffff51 	b	b990 <_malloc_r+0x104>
    bc48:	e59f2390 	ldr	r2, [pc, #912]	; bfe0 <prog+0xbf98>
    bc4c:	e5924008 	ldr	r4, [r2, #8]
    bc50:	e5943004 	ldr	r3, [r4, #4]
    bc54:	e3c38003 	bic	r8, r3, #3	; 0x3
    bc58:	e0650008 	rsb	r0, r5, r8
    bc5c:	e350000f 	cmp	r0, #15	; 0xf
    bc60:	c3a03000 	movgt	r3, #0	; 0x0
    bc64:	d3a03001 	movle	r3, #1	; 0x1
    bc68:	e1550008 	cmp	r5, r8
    bc6c:	83833001 	orrhi	r3, r3, #1	; 0x1
    bc70:	e3530000 	cmp	r3, #0	; 0x0
    bc74:	e1a09004 	mov	r9, r4
    bc78:	0a000026 	beq	bd18 <_malloc_r+0x48c>
    bc7c:	e59f3364 	ldr	r3, [pc, #868]	; bfe8 <prog+0xbfa0>
    bc80:	e59fb364 	ldr	fp, [pc, #868]	; bfec <prog+0xbfa4>
    bc84:	e5932000 	ldr	r2, [r3]
    bc88:	e59b1000 	ldr	r1, [fp]
    bc8c:	e2822010 	add	r2, r2, #16	; 0x10
    bc90:	e3710001 	cmn	r1, #1	; 0x1
    bc94:	e0856002 	add	r6, r5, r2
    bc98:	12863eff 	addne	r3, r6, #4080	; 0xff0
    bc9c:	1283300f 	addne	r3, r3, #15	; 0xf
    bca0:	13c36eff 	bicne	r6, r3, #4080	; 0xff0
    bca4:	13c6600f 	bicne	r6, r6, #15	; 0xf
    bca8:	e1a00007 	mov	r0, r7
    bcac:	e1a01006 	mov	r1, r6
    bcb0:	ebffd2a9 	bl	75c <_sbrk_r>
    bcb4:	e3700001 	cmn	r0, #1	; 0x1
    bcb8:	0a00008c 	beq	bef0 <_malloc_r+0x664>
    bcbc:	e0841008 	add	r1, r4, r8
    bcc0:	e1510000 	cmp	r1, r0
    bcc4:	e1a0a000 	mov	sl, r0
    bcc8:	9a000045 	bls	bde4 <_malloc_r+0x558>
    bccc:	e59f330c 	ldr	r3, [pc, #780]	; bfe0 <prog+0xbf98>
    bcd0:	e1540003 	cmp	r4, r3
    bcd4:	0a0000a5 	beq	bf70 <_malloc_r+0x6e4>
    bcd8:	e59f3300 	ldr	r3, [pc, #768]	; bfe0 <prog+0xbf98>
    bcdc:	e5934008 	ldr	r4, [r3, #8]
    bce0:	e5942004 	ldr	r2, [r4, #4]
    bce4:	e3c22003 	bic	r2, r2, #3	; 0x3
    bce8:	e0650002 	rsb	r0, r5, r2
    bcec:	e350000f 	cmp	r0, #15	; 0xf
    bcf0:	c3a03000 	movgt	r3, #0	; 0x0
    bcf4:	d3a03001 	movle	r3, #1	; 0x1
    bcf8:	e1550002 	cmp	r5, r2
    bcfc:	83833001 	orrhi	r3, r3, #1	; 0x1
    bd00:	e3530000 	cmp	r3, #0	; 0x0
    bd04:	0a000003 	beq	bd18 <_malloc_r+0x48c>
    bd08:	e1a00007 	mov	r0, r7
    bd0c:	eb00012f 	bl	c1d0 <__malloc_unlock>
    bd10:	e3a00000 	mov	r0, #0	; 0x0
    bd14:	eaffff04 	b	b92c <_malloc_r+0xa0>
    bd18:	e0841005 	add	r1, r4, r5
    bd1c:	e3802001 	orr	r2, r0, #1	; 0x1
    bd20:	e3853001 	orr	r3, r5, #1	; 0x1
    bd24:	e5843004 	str	r3, [r4, #4]
    bd28:	e5812004 	str	r2, [r1, #4]
    bd2c:	e59f22ac 	ldr	r2, [pc, #684]	; bfe0 <prog+0xbf98>
    bd30:	e1a00007 	mov	r0, r7
    bd34:	e5821008 	str	r1, [r2, #8]
    bd38:	eb000124 	bl	c1d0 <__malloc_unlock>
    bd3c:	e2840008 	add	r0, r4, #8	; 0x8
    bd40:	eafffef9 	b	b92c <_malloc_r+0xa0>
    bd44:	e1a021a2 	mov	r2, r2, lsr #3
    bd48:	e59a0004 	ldr	r0, [sl, #4]
    bd4c:	e1a01122 	mov	r1, r2, lsr #2
    bd50:	e3a03001 	mov	r3, #1	; 0x1
    bd54:	e1800113 	orr	r0, r0, r3, lsl r1
    bd58:	e0882182 	add	r2, r8, r2, lsl #3
    bd5c:	e5923008 	ldr	r3, [r2, #8]
    bd60:	e584200c 	str	r2, [r4, #12]
    bd64:	e5843008 	str	r3, [r4, #8]
    bd68:	e58a0004 	str	r0, [sl, #4]
    bd6c:	e583400c 	str	r4, [r3, #12]
    bd70:	e5824008 	str	r4, [r2, #8]
    bd74:	eaffff81 	b	bb80 <_malloc_r+0x2f4>
    bd78:	e1a02082 	mov	r2, r2, lsl #1
    bd7c:	e3ce3003 	bic	r3, lr, #3	; 0x3
    bd80:	e1100002 	tst	r0, r2
    bd84:	e283e004 	add	lr, r3, #4	; 0x4
    bd88:	1affff86 	bne	bba8 <_malloc_r+0x31c>
    bd8c:	e1a02082 	mov	r2, r2, lsl #1
    bd90:	e1100002 	tst	r0, r2
    bd94:	e28ee004 	add	lr, lr, #4	; 0x4
    bd98:	0afffffb 	beq	bd8c <_malloc_r+0x500>
    bd9c:	eaffff81 	b	bba8 <_malloc_r+0x31c>
    bda0:	e28aa001 	add	sl, sl, #1	; 0x1
    bda4:	e31a0003 	tst	sl, #3	; 0x3
    bda8:	0a000059 	beq	bf14 <_malloc_r+0x688>
    bdac:	e2811008 	add	r1, r1, #8	; 0x8
    bdb0:	eaffff7f 	b	bbb4 <_malloc_r+0x328>
    bdb4:	e0841003 	add	r1, r4, r3
    bdb8:	e5913004 	ldr	r3, [r1, #4]
    bdbc:	e594000c 	ldr	r0, [r4, #12]
    bdc0:	e5b42008 	ldr	r2, [r4, #8]!
    bdc4:	e3833001 	orr	r3, r3, #1	; 0x1
    bdc8:	e5802008 	str	r2, [r0, #8]
    bdcc:	e582000c 	str	r0, [r2, #12]
    bdd0:	e5813004 	str	r3, [r1, #4]
    bdd4:	e1a00007 	mov	r0, r7
    bdd8:	eb0000fc 	bl	c1d0 <__malloc_unlock>
    bddc:	e1a00004 	mov	r0, r4
    bde0:	eafffed1 	b	b92c <_malloc_r+0xa0>
    bde4:	e59fc204 	ldr	ip, [pc, #516]	; bff0 <prog+0xbfa8>
    bde8:	e59c3000 	ldr	r3, [ip]
    bdec:	e0862003 	add	r2, r6, r3
    bdf0:	e58c2000 	str	r2, [ip]
    bdf4:	0a000062 	beq	bf84 <_malloc_r+0x6f8>
    bdf8:	e59b3000 	ldr	r3, [fp]
    bdfc:	e3730001 	cmn	r3, #1	; 0x1
    be00:	10613000 	rsbne	r3, r1, r0
    be04:	059f31e0 	ldreq	r3, [pc, #480]	; bfec <prog+0xbfa4>
    be08:	10823003 	addne	r3, r2, r3
    be0c:	05830000 	streq	r0, [r3]
    be10:	158c3000 	strne	r3, [ip]
    be14:	e2103007 	ands	r3, r0, #7	; 0x7
    be18:	12631008 	rsbne	r1, r3, #8	; 0x8
    be1c:	1080a001 	addne	sl, r0, r1
    be20:	01a01003 	moveq	r1, r3
    be24:	e08a3006 	add	r3, sl, r6
    be28:	e1a03a03 	mov	r3, r3, lsl #20
    be2c:	e1a03a23 	mov	r3, r3, lsr #20
    be30:	e2633a01 	rsb	r3, r3, #4096	; 0x1000
    be34:	e0814003 	add	r4, r1, r3
    be38:	e1a01004 	mov	r1, r4
    be3c:	e1a00007 	mov	r0, r7
    be40:	e58dc000 	str	ip, [sp]
    be44:	ebffd244 	bl	75c <_sbrk_r>
    be48:	e3700001 	cmn	r0, #1	; 0x1
    be4c:	106a3000 	rsbne	r3, sl, r0
    be50:	e59dc000 	ldr	ip, [sp]
    be54:	10833004 	addne	r3, r3, r4
    be58:	13830001 	orrne	r0, r3, #1	; 0x1
    be5c:	e59f217c 	ldr	r2, [pc, #380]	; bfe0 <prog+0xbf98>
    be60:	e59c3000 	ldr	r3, [ip]
    be64:	03a04000 	moveq	r4, #0	; 0x0
    be68:	02800002 	addeq	r0, r0, #2	; 0x2
    be6c:	e0843003 	add	r3, r4, r3
    be70:	e1590002 	cmp	r9, r2
    be74:	e1a0400a 	mov	r4, sl
    be78:	e58c3000 	str	r3, [ip]
    be7c:	e58a0004 	str	r0, [sl, #4]
    be80:	e582a008 	str	sl, [r2, #8]
    be84:	0a00000f 	beq	bec8 <_malloc_r+0x63c>
    be88:	e358000f 	cmp	r8, #15	; 0xf
    be8c:	93a03001 	movls	r3, #1	; 0x1
    be90:	958a3004 	strls	r3, [sl, #4]
    be94:	9affff91 	bls	bce0 <_malloc_r+0x454>
    be98:	e5993004 	ldr	r3, [r9, #4]
    be9c:	e248200c 	sub	r2, r8, #12	; 0xc
    bea0:	e3c22007 	bic	r2, r2, #7	; 0x7
    bea4:	e2033001 	and	r3, r3, #1	; 0x1
    bea8:	e1823003 	orr	r3, r2, r3
    beac:	e3a01005 	mov	r1, #5	; 0x5
    beb0:	e352000f 	cmp	r2, #15	; 0xf
    beb4:	e0892002 	add	r2, r9, r2
    beb8:	e5893004 	str	r3, [r9, #4]
    bebc:	e5821008 	str	r1, [r2, #8]
    bec0:	e5821004 	str	r1, [r2, #4]
    bec4:	8a000038 	bhi	bfac <_malloc_r+0x720>
    bec8:	e59f1124 	ldr	r1, [pc, #292]	; bff4 <prog+0xbfac>
    becc:	e59c2000 	ldr	r2, [ip]
    bed0:	e5913000 	ldr	r3, [r1]
    bed4:	e1520003 	cmp	r2, r3
    bed8:	85812000 	strhi	r2, [r1]
    bedc:	e59f1114 	ldr	r1, [pc, #276]	; bff8 <prog+0xbfb0>
    bee0:	e5913000 	ldr	r3, [r1]
    bee4:	e1520003 	cmp	r2, r3
    bee8:	85812000 	strhi	r2, [r1]
    beec:	eaffff7b 	b	bce0 <_malloc_r+0x454>
    bef0:	e59f20e8 	ldr	r2, [pc, #232]	; bfe0 <prog+0xbf98>
    bef4:	e5924008 	ldr	r4, [r2, #8]
    bef8:	eaffff78 	b	bce0 <_malloc_r+0x454>
    befc:	e59a3004 	ldr	r3, [sl, #4]
    bf00:	e1a01121 	mov	r1, r1, lsr #2
    bf04:	e3a02001 	mov	r2, #1	; 0x1
    bf08:	e1833112 	orr	r3, r3, r2, lsl r1
    bf0c:	e58a3004 	str	r3, [sl, #4]
    bf10:	eaffff15 	b	bb6c <_malloc_r+0x2e0>
    bf14:	e1a0c00e 	mov	ip, lr
    bf18:	e1a01009 	mov	r1, r9
    bf1c:	e31c0003 	tst	ip, #3	; 0x3
    bf20:	e2411008 	sub	r1, r1, #8	; 0x8
    bf24:	e24cc001 	sub	ip, ip, #1	; 0x1
    bf28:	0a000027 	beq	bfcc <_malloc_r+0x740>
    bf2c:	e5913008 	ldr	r3, [r1, #8]
    bf30:	e1530001 	cmp	r3, r1
    bf34:	0afffff8 	beq	bf1c <_malloc_r+0x690>
    bf38:	e1a02082 	mov	r2, r2, lsl #1
    bf3c:	e1520000 	cmp	r2, r0
    bf40:	8affff40 	bhi	bc48 <_malloc_r+0x3bc>
    bf44:	e3520000 	cmp	r2, #0	; 0x0
    bf48:	0affff3e 	beq	bc48 <_malloc_r+0x3bc>
    bf4c:	e1120000 	tst	r2, r0
    bf50:	11a0e00a 	movne	lr, sl
    bf54:	1affff13 	bne	bba8 <_malloc_r+0x31c>
    bf58:	e1a02082 	mov	r2, r2, lsl #1
    bf5c:	e1100002 	tst	r0, r2
    bf60:	e28aa004 	add	sl, sl, #4	; 0x4
    bf64:	0afffffb 	beq	bf58 <_malloc_r+0x6cc>
    bf68:	e1a0e00a 	mov	lr, sl
    bf6c:	eaffff0d 	b	bba8 <_malloc_r+0x31c>
    bf70:	e59fc078 	ldr	ip, [pc, #120]	; bff0 <prog+0xbfa8>
    bf74:	e59c3000 	ldr	r3, [ip]
    bf78:	e0862003 	add	r2, r6, r3
    bf7c:	e58c2000 	str	r2, [ip]
    bf80:	eaffff9c 	b	bdf8 <_malloc_r+0x56c>
    bf84:	e1a03a00 	mov	r3, r0, lsl #20
    bf88:	e1a03a23 	mov	r3, r3, lsr #20
    bf8c:	e3530000 	cmp	r3, #0	; 0x0
    bf90:	1affff98 	bne	bdf8 <_malloc_r+0x56c>
    bf94:	e59f2044 	ldr	r2, [pc, #68]	; bfe0 <prog+0xbf98>
    bf98:	e0863008 	add	r3, r6, r8
    bf9c:	e5924008 	ldr	r4, [r2, #8]
    bfa0:	e3833001 	orr	r3, r3, #1	; 0x1
    bfa4:	e5843004 	str	r3, [r4, #4]
    bfa8:	eaffffc6 	b	bec8 <_malloc_r+0x63c>
    bfac:	e2891008 	add	r1, r9, #8	; 0x8
    bfb0:	e1a00007 	mov	r0, r7
    bfb4:	e58dc000 	str	ip, [sp]
    bfb8:	eb001346 	bl	10cd8 <_free_r>
    bfbc:	e59f301c 	ldr	r3, [pc, #28]	; bfe0 <prog+0xbf98>
    bfc0:	e59dc000 	ldr	ip, [sp]
    bfc4:	e5934008 	ldr	r4, [r3, #8]
    bfc8:	eaffffbe 	b	bec8 <_malloc_r+0x63c>
    bfcc:	e1e03002 	mvn	r3, r2
    bfd0:	e0000003 	and	r0, r0, r3
    bfd4:	e59f3004 	ldr	r3, [pc, #4]	; bfe0 <prog+0xbf98>
    bfd8:	e5830004 	str	r0, [r3, #4]
    bfdc:	eaffffd5 	b	bf38 <_malloc_r+0x6ac>
    bfe0:	40000418 	andmi	r0, r0, r8, lsl r4
    bfe4:	40000420 	andmi	r0, r0, r0, lsr #8
    bfe8:	40001568 	andmi	r1, r0, r8, ror #10
    bfec:	40000824 	andmi	r0, r0, r4, lsr #16
    bff0:	40001574 	andmi	r1, r0, r4, ror r5
    bff4:	4000156c 	andmi	r1, r0, ip, ror #10
    bff8:	40001570 	andmi	r1, r0, r0, ror r5

0000bffc <memcmp>:
    bffc:	e3520003 	cmp	r2, #3	; 0x3
    c000:	e1a0c002 	mov	ip, r2
    c004:	e52de004 	str	lr, [sp, #-4]!
    c008:	e1a02000 	mov	r2, r0
    c00c:	9a000002 	bls	c01c <memcmp+0x20>
    c010:	e1803001 	orr	r3, r0, r1
    c014:	e3130003 	tst	r3, #3	; 0x3
    c018:	0a000010 	beq	c060 <memcmp+0x64>
    c01c:	e25c3001 	subs	r3, ip, #1	; 0x1
    c020:	3a00000c 	bcc	c058 <memcmp+0x5c>
    c024:	e5d2c000 	ldrb	ip, [r2]
    c028:	e5d10000 	ldrb	r0, [r1]
    c02c:	e15c0000 	cmp	ip, r0
    c030:	03a0e000 	moveq	lr, #0	; 0x0
    c034:	0a000004 	beq	c04c <memcmp+0x50>
    c038:	ea000013 	b	c08c <memcmp+0x90>
    c03c:	e5f2c001 	ldrb	ip, [r2, #1]!
    c040:	e5f10001 	ldrb	r0, [r1, #1]!
    c044:	e15c0000 	cmp	ip, r0
    c048:	1a00000f 	bne	c08c <memcmp+0x90>
    c04c:	e153000e 	cmp	r3, lr
    c050:	e28ee001 	add	lr, lr, #1	; 0x1
    c054:	1afffff8 	bne	c03c <memcmp+0x40>
    c058:	e3a00000 	mov	r0, #0	; 0x0
    c05c:	e49df004 	ldr	pc, [sp], #4
    c060:	e5902000 	ldr	r2, [r0]
    c064:	e5913000 	ldr	r3, [r1]
    c068:	e1520003 	cmp	r2, r3
    c06c:	1a000004 	bne	c084 <memcmp+0x88>
    c070:	e24cc004 	sub	ip, ip, #4	; 0x4
    c074:	e35c0003 	cmp	ip, #3	; 0x3
    c078:	e2800004 	add	r0, r0, #4	; 0x4
    c07c:	e2811004 	add	r1, r1, #4	; 0x4
    c080:	8afffff6 	bhi	c060 <memcmp+0x64>
    c084:	e1a02000 	mov	r2, r0
    c088:	eaffffe3 	b	c01c <memcmp+0x20>
    c08c:	e060000c 	rsb	r0, r0, ip
    c090:	e49df004 	ldr	pc, [sp], #4

0000c094 <memcpy>:
    c094:	e352000f 	cmp	r2, #15	; 0xf
    c098:	e52de004 	str	lr, [sp, #-4]!
    c09c:	e1a0c000 	mov	ip, r0
    c0a0:	e1a0e002 	mov	lr, r2
    c0a4:	9a000002 	bls	c0b4 <memcpy+0x20>
    c0a8:	e1813000 	orr	r3, r1, r0
    c0ac:	e3130003 	tst	r3, #3	; 0x3
    c0b0:	0a000008 	beq	c0d8 <memcpy+0x44>
    c0b4:	e35e0000 	cmp	lr, #0	; 0x0
    c0b8:	049df004 	ldreq	pc, [sp], #4
    c0bc:	e3a02000 	mov	r2, #0	; 0x0
    c0c0:	e4d13001 	ldrb	r3, [r1], #1
    c0c4:	e7c2300c 	strb	r3, [r2, ip]
    c0c8:	e2822001 	add	r2, r2, #1	; 0x1
    c0cc:	e152000e 	cmp	r2, lr
    c0d0:	1afffffa 	bne	c0c0 <memcpy+0x2c>
    c0d4:	e49df004 	ldr	pc, [sp], #4
    c0d8:	e5913000 	ldr	r3, [r1]
    c0dc:	e58c3000 	str	r3, [ip]
    c0e0:	e5912004 	ldr	r2, [r1, #4]
    c0e4:	e58c2004 	str	r2, [ip, #4]
    c0e8:	e5913008 	ldr	r3, [r1, #8]
    c0ec:	e58c3008 	str	r3, [ip, #8]
    c0f0:	e24ee010 	sub	lr, lr, #16	; 0x10
    c0f4:	e591300c 	ldr	r3, [r1, #12]
    c0f8:	e35e000f 	cmp	lr, #15	; 0xf
    c0fc:	e58c300c 	str	r3, [ip, #12]
    c100:	e2811010 	add	r1, r1, #16	; 0x10
    c104:	e28cc010 	add	ip, ip, #16	; 0x10
    c108:	8afffff2 	bhi	c0d8 <memcpy+0x44>
    c10c:	e35e0003 	cmp	lr, #3	; 0x3
    c110:	9affffe7 	bls	c0b4 <memcpy+0x20>
    c114:	e24ee004 	sub	lr, lr, #4	; 0x4
    c118:	e4913004 	ldr	r3, [r1], #4
    c11c:	e35e0003 	cmp	lr, #3	; 0x3
    c120:	e48c3004 	str	r3, [ip], #4
    c124:	8afffffa 	bhi	c114 <memcpy+0x80>
    c128:	e35e0000 	cmp	lr, #0	; 0x0
    c12c:	1affffe2 	bne	c0bc <memcpy+0x28>
    c130:	e49df004 	ldr	pc, [sp], #4

0000c134 <memset>:
    c134:	e3520003 	cmp	r2, #3	; 0x3
    c138:	e20110ff 	and	r1, r1, #255	; 0xff
    c13c:	e1a0c000 	mov	ip, r0
    c140:	9a000001 	bls	c14c <memset+0x18>
    c144:	e3100003 	tst	r0, #3	; 0x3
    c148:	0a000008 	beq	c170 <memset+0x3c>
    c14c:	e3520000 	cmp	r2, #0	; 0x0
    c150:	012fff1e 	bxeq	lr
    c154:	e20110ff 	and	r1, r1, #255	; 0xff
    c158:	e3a03000 	mov	r3, #0	; 0x0
    c15c:	e7c3100c 	strb	r1, [r3, ip]
    c160:	e2833001 	add	r3, r3, #1	; 0x1
    c164:	e1530002 	cmp	r3, r2
    c168:	1afffffb 	bne	c15c <memset+0x28>
    c16c:	e12fff1e 	bx	lr
    c170:	e1813401 	orr	r3, r1, r1, lsl #8
    c174:	e352000f 	cmp	r2, #15	; 0xf
    c178:	e183c803 	orr	ip, r3, r3, lsl #16
    c17c:	e1a03000 	mov	r3, r0
    c180:	9a000009 	bls	c1ac <memset+0x78>
    c184:	e2422010 	sub	r2, r2, #16	; 0x10
    c188:	e352000f 	cmp	r2, #15	; 0xf
    c18c:	e583c000 	str	ip, [r3]
    c190:	e583c004 	str	ip, [r3, #4]
    c194:	e583c008 	str	ip, [r3, #8]
    c198:	e583c00c 	str	ip, [r3, #12]
    c19c:	e2833010 	add	r3, r3, #16	; 0x10
    c1a0:	8afffff7 	bhi	c184 <memset+0x50>
    c1a4:	e3520003 	cmp	r2, #3	; 0x3
    c1a8:	9a000003 	bls	c1bc <memset+0x88>
    c1ac:	e2422004 	sub	r2, r2, #4	; 0x4
    c1b0:	e3520003 	cmp	r2, #3	; 0x3
    c1b4:	e483c004 	str	ip, [r3], #4
    c1b8:	8afffffb 	bhi	c1ac <memset+0x78>
    c1bc:	e3520000 	cmp	r2, #0	; 0x0
    c1c0:	e1a0c003 	mov	ip, r3
    c1c4:	1affffe2 	bne	c154 <memset+0x20>
    c1c8:	e12fff1e 	bx	lr

0000c1cc <__malloc_lock>:
    c1cc:	e12fff1e 	bx	lr

0000c1d0 <__malloc_unlock>:
    c1d0:	e12fff1e 	bx	lr

0000c1d4 <printf>:
    c1d4:	e92d000f 	stmdb	sp!, {r0, r1, r2, r3}
    c1d8:	e52de004 	str	lr, [sp, #-4]!
    c1dc:	e59f302c 	ldr	r3, [pc, #44]	; c210 <prog+0xc1c8>
    c1e0:	e24dd004 	sub	sp, sp, #4	; 0x4
    c1e4:	e5932000 	ldr	r2, [r3]
    c1e8:	e28dc00c 	add	ip, sp, #12	; 0xc
    c1ec:	e5920008 	ldr	r0, [r2, #8]
    c1f0:	e59d1008 	ldr	r1, [sp, #8]
    c1f4:	e1a0200c 	mov	r2, ip
    c1f8:	e58dc000 	str	ip, [sp]
    c1fc:	eb000a88 	bl	ec24 <vfprintf>
    c200:	e28dd004 	add	sp, sp, #4	; 0x4
    c204:	e49de004 	ldr	lr, [sp], #4
    c208:	e28dd010 	add	sp, sp, #16	; 0x10
    c20c:	e12fff1e 	bx	lr
    c210:	40000014 	andmi	r0, r0, r4, lsl r0

0000c214 <_printf_r>:
    c214:	e92d000e 	stmdb	sp!, {r1, r2, r3}
    c218:	e52de004 	str	lr, [sp, #-4]!
    c21c:	e24dd004 	sub	sp, sp, #4	; 0x4
    c220:	e28dc00c 	add	ip, sp, #12	; 0xc
    c224:	e1a0300c 	mov	r3, ip
    c228:	e5901008 	ldr	r1, [r0, #8]
    c22c:	e59d2008 	ldr	r2, [sp, #8]
    c230:	e58dc000 	str	ip, [sp]
    c234:	eb0002b3 	bl	cd08 <_vfprintf_r>
    c238:	e28dd004 	add	sp, sp, #4	; 0x4
    c23c:	e49de004 	ldr	lr, [sp], #4
    c240:	e28dd00c 	add	sp, sp, #12	; 0xc
    c244:	e12fff1e 	bx	lr

0000c248 <_putchar_r>:
    c248:	e92d4010 	stmdb	sp!, {r4, lr}
    c24c:	e590e008 	ldr	lr, [r0, #8]
    c250:	e59e3008 	ldr	r3, [lr, #8]
    c254:	e243c001 	sub	ip, r3, #1	; 0x1
    c258:	e35c0000 	cmp	ip, #0	; 0x0
    c25c:	e1a04000 	mov	r4, r0
    c260:	e58ec008 	str	ip, [lr, #8]
    c264:	e1a02001 	mov	r2, r1
    c268:	ba000007 	blt	c28c <_putchar_r+0x44>
    c26c:	e59e3000 	ldr	r3, [lr]
    c270:	e5c31000 	strb	r1, [r3]
    c274:	e5902008 	ldr	r2, [r0, #8]
    c278:	e5923000 	ldr	r3, [r2]
    c27c:	e4d3c001 	ldrb	ip, [r3], #1
    c280:	e5823000 	str	r3, [r2]
    c284:	e1a0000c 	mov	r0, ip
    c288:	e8bd8010 	ldmia	sp!, {r4, pc}
    c28c:	e59e3018 	ldr	r3, [lr, #24]
    c290:	e15c0003 	cmp	ip, r3
    c294:	e1a00001 	mov	r0, r1
    c298:	e1a0100e 	mov	r1, lr
    c29c:	ba00000b 	blt	c2d0 <_putchar_r+0x88>
    c2a0:	e59e3000 	ldr	r3, [lr]
    c2a4:	e5c32000 	strb	r2, [r3]
    c2a8:	e594e008 	ldr	lr, [r4, #8]
    c2ac:	e59e2000 	ldr	r2, [lr]
    c2b0:	e5d23000 	ldrb	r3, [r2]
    c2b4:	e2822001 	add	r2, r2, #1	; 0x1
    c2b8:	e353000a 	cmp	r3, #10	; 0xa
    c2bc:	e1a0100e 	mov	r1, lr
    c2c0:	e1a00003 	mov	r0, r3
    c2c4:	e1a0c003 	mov	ip, r3
    c2c8:	158e2000 	strne	r2, [lr]
    c2cc:	1affffec 	bne	c284 <_putchar_r+0x3c>
    c2d0:	e8bd4010 	ldmia	sp!, {r4, lr}
    c2d4:	ea000a5d 	b	ec50 <__swbuf>

0000c2d8 <putchar>:
    c2d8:	e59f3008 	ldr	r3, [pc, #8]	; c2e8 <prog+0xc2a0>
    c2dc:	e1a01000 	mov	r1, r0
    c2e0:	e5930000 	ldr	r0, [r3]
    c2e4:	eaffffd7 	b	c248 <_putchar_r>
    c2e8:	40000014 	andmi	r0, r0, r4, lsl r0

0000c2ec <_puts_r>:
    c2ec:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
    c2f0:	e1a04000 	mov	r4, r0
    c2f4:	e24dd01c 	sub	sp, sp, #28	; 0x1c
    c2f8:	e1a00001 	mov	r0, r1
    c2fc:	e1a05001 	mov	r5, r1
    c300:	eb00011c 	bl	c778 <strlen>
    c304:	e59f3048 	ldr	r3, [pc, #72]	; c354 <prog+0xc30c>
    c308:	e3a02001 	mov	r2, #1	; 0x1
    c30c:	e280c001 	add	ip, r0, #1	; 0x1
    c310:	e1a06000 	mov	r6, r0
    c314:	e58d200c 	str	r2, [sp, #12]
    c318:	e5940008 	ldr	r0, [r4, #8]
    c31c:	e0822002 	add	r2, r2, r2
    c320:	e28d1010 	add	r1, sp, #16	; 0x10
    c324:	e58d5000 	str	r5, [sp]
    c328:	e58d3008 	str	r3, [sp, #8]
    c32c:	e58dc018 	str	ip, [sp, #24]
    c330:	e58dd010 	str	sp, [sp, #16]
    c334:	e58d2014 	str	r2, [sp, #20]
    c338:	e58d6004 	str	r6, [sp, #4]
    c33c:	eb00130d 	bl	10f78 <__sfvwrite>
    c340:	e3500000 	cmp	r0, #0	; 0x0
    c344:	03a0000a 	moveq	r0, #10	; 0xa
    c348:	13e00000 	mvnne	r0, #0	; 0x0
    c34c:	e28dd01c 	add	sp, sp, #28	; 0x1c
    c350:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
    c354:	00014dfc 	streqd	r4, [r1], -ip

0000c358 <puts>:
    c358:	e59f3008 	ldr	r3, [pc, #8]	; c368 <prog+0xc320>
    c35c:	e1a01000 	mov	r1, r0
    c360:	e5930000 	ldr	r0, [r3]
    c364:	eaffffe0 	b	c2ec <_puts_r>
    c368:	40000014 	andmi	r0, r0, r4, lsl r0

0000c36c <__sclose>:
    c36c:	e59f3008 	ldr	r3, [pc, #8]	; c37c <prog+0xc334>
    c370:	e1d010fe 	ldrsh	r1, [r0, #14]
    c374:	e5930000 	ldr	r0, [r3]
    c378:	eaffd0e9 	b	724 <_close_r>
    c37c:	40000014 	andmi	r0, r0, r4, lsl r0

0000c380 <__sseek>:
    c380:	e1a03002 	mov	r3, r2
    c384:	e59f2038 	ldr	r2, [pc, #56]	; c3c4 <prog+0xc37c>
    c388:	e92d4010 	stmdb	sp!, {r4, lr}
    c38c:	e1a04000 	mov	r4, r0
    c390:	e5920000 	ldr	r0, [r2]
    c394:	e1a02001 	mov	r2, r1
    c398:	e1d410fe 	ldrsh	r1, [r4, #14]
    c39c:	ebffd0de 	bl	71c <_lseek_r>
    c3a0:	e3700001 	cmn	r0, #1	; 0x1
    c3a4:	01d430bc 	ldreqh	r3, [r4, #12]
    c3a8:	11d430bc 	ldrneh	r3, [r4, #12]
    c3ac:	03c33a01 	biceq	r3, r3, #4096	; 0x1000
    c3b0:	13833a01 	orrne	r3, r3, #4096	; 0x1000
    c3b4:	01c430bc 	streqh	r3, [r4, #12]
    c3b8:	11c430bc 	strneh	r3, [r4, #12]
    c3bc:	15840050 	strne	r0, [r4, #80]
    c3c0:	e8bd8010 	ldmia	sp!, {r4, pc}
    c3c4:	40000014 	andmi	r0, r0, r4, lsl r0

0000c3c8 <__swrite>:
    c3c8:	e1d0c0bc 	ldrh	ip, [r0, #12]
    c3cc:	e31c0c01 	tst	ip, #256	; 0x100
    c3d0:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
    c3d4:	e3a03002 	mov	r3, #2	; 0x2
    c3d8:	e59f7044 	ldr	r7, [pc, #68]	; c424 <prog+0xc3dc>
    c3dc:	e1a06002 	mov	r6, r2
    c3e0:	e1a04000 	mov	r4, r0
    c3e4:	e1a05001 	mov	r5, r1
    c3e8:	e3a02000 	mov	r2, #0	; 0x0
    c3ec:	059f7030 	ldreq	r7, [pc, #48]	; c424 <prog+0xc3dc>
    c3f0:	0a000003 	beq	c404 <__swrite+0x3c>
    c3f4:	e5970000 	ldr	r0, [r7]
    c3f8:	e1d410fe 	ldrsh	r1, [r4, #14]
    c3fc:	ebffd0c6 	bl	71c <_lseek_r>
    c400:	e1d4c0bc 	ldrh	ip, [r4, #12]
    c404:	e5970000 	ldr	r0, [r7]
    c408:	e1d410fe 	ldrsh	r1, [r4, #14]
    c40c:	e3ccca01 	bic	ip, ip, #4096	; 0x1000
    c410:	e1a02005 	mov	r2, r5
    c414:	e1a03006 	mov	r3, r6
    c418:	e1c4c0bc 	strh	ip, [r4, #12]
    c41c:	e8bd40f0 	ldmia	sp!, {r4, r5, r6, r7, lr}
    c420:	eaffd0ec 	b	7d8 <_write_r>
    c424:	40000014 	andmi	r0, r0, r4, lsl r0

0000c428 <__sread>:
    c428:	e1a03002 	mov	r3, r2
    c42c:	e59f2034 	ldr	r2, [pc, #52]	; c468 <prog+0xc420>
    c430:	e92d4010 	stmdb	sp!, {r4, lr}
    c434:	e1a04000 	mov	r4, r0
    c438:	e5920000 	ldr	r0, [r2]
    c43c:	e1a02001 	mov	r2, r1
    c440:	e1d410fe 	ldrsh	r1, [r4, #14]
    c444:	ebffd0dd 	bl	7c0 <_read_r>
    c448:	e3500000 	cmp	r0, #0	; 0x0
    c44c:	a5943050 	ldrge	r3, [r4, #80]
    c450:	b1d430bc 	ldrlth	r3, [r4, #12]
    c454:	a0833000 	addge	r3, r3, r0
    c458:	b3c33a01 	biclt	r3, r3, #4096	; 0x1000
    c45c:	a5843050 	strge	r3, [r4, #80]
    c460:	b1c430bc 	strlth	r3, [r4, #12]
    c464:	e8bd8010 	ldmia	sp!, {r4, pc}
    c468:	40000014 	andmi	r0, r0, r4, lsl r0

0000c46c <strcat>:
    c46c:	e3100003 	tst	r0, #3	; 0x3
    c470:	e92d4010 	stmdb	sp!, {r4, lr}
    c474:	e1a04000 	mov	r4, r0
    c478:	11a00000 	movne	r0, r0
    c47c:	1a000016 	bne	c4dc <strcat+0x70>
    c480:	e5942000 	ldr	r2, [r4]
    c484:	e28234ff 	add	r3, r2, #-16777216	; 0xff000000
    c488:	e2433801 	sub	r3, r3, #65536	; 0x10000
    c48c:	e2433c01 	sub	r3, r3, #256	; 0x100
    c490:	e2433001 	sub	r3, r3, #1	; 0x1
    c494:	e3c3347f 	bic	r3, r3, #2130706432	; 0x7f000000
    c498:	e3c3387f 	bic	r3, r3, #8323072	; 0x7f0000
    c49c:	e3c33c7f 	bic	r3, r3, #32512	; 0x7f00
    c4a0:	e3c3307f 	bic	r3, r3, #127	; 0x7f
    c4a4:	e1d32002 	bics	r2, r3, r2
    c4a8:	e1a00004 	mov	r0, r4
    c4ac:	1a00000a 	bne	c4dc <strcat+0x70>
    c4b0:	e5b02004 	ldr	r2, [r0, #4]!
    c4b4:	e28234ff 	add	r3, r2, #-16777216	; 0xff000000
    c4b8:	e2433801 	sub	r3, r3, #65536	; 0x10000
    c4bc:	e2433c01 	sub	r3, r3, #256	; 0x100
    c4c0:	e2433001 	sub	r3, r3, #1	; 0x1
    c4c4:	e3c3347f 	bic	r3, r3, #2130706432	; 0x7f000000
    c4c8:	e3c3387f 	bic	r3, r3, #8323072	; 0x7f0000
    c4cc:	e3c33c7f 	bic	r3, r3, #32512	; 0x7f00
    c4d0:	e3c3307f 	bic	r3, r3, #127	; 0x7f
    c4d4:	e1d32002 	bics	r2, r3, r2
    c4d8:	0afffff4 	beq	c4b0 <strcat+0x44>
    c4dc:	e5d03000 	ldrb	r3, [r0]
    c4e0:	e3530000 	cmp	r3, #0	; 0x0
    c4e4:	0a000002 	beq	c4f4 <strcat+0x88>
    c4e8:	e5f03001 	ldrb	r3, [r0, #1]!
    c4ec:	e3530000 	cmp	r3, #0	; 0x0
    c4f0:	1afffffc 	bne	c4e8 <strcat+0x7c>
    c4f4:	eb000078 	bl	c6dc <strcpy>
    c4f8:	e1a00004 	mov	r0, r4
    c4fc:	e8bd8010 	ldmia	sp!, {r4, pc}

0000c500 <strchr>:
    c500:	e2103003 	ands	r3, r0, #3	; 0x3
    c504:	e92d4010 	stmdb	sp!, {r4, lr}
    c508:	e1a02000 	mov	r2, r0
    c50c:	e20110ff 	and	r1, r1, #255	; 0xff
    c510:	1a000032 	bne	c5e0 <strchr+0xe0>
    c514:	e1a04003 	mov	r4, r3
    c518:	e2833001 	add	r3, r3, #1	; 0x1
    c51c:	e3530004 	cmp	r3, #4	; 0x4
    c520:	e1814404 	orr	r4, r1, r4, lsl #8
    c524:	1afffffb 	bne	c518 <strchr+0x18>
    c528:	e1a00002 	mov	r0, r2
    c52c:	e5922000 	ldr	r2, [r2]
    c530:	e28234ff 	add	r3, r2, #-16777216	; 0xff000000
    c534:	e2433801 	sub	r3, r3, #65536	; 0x10000
    c538:	e2433c01 	sub	r3, r3, #256	; 0x100
    c53c:	e2433001 	sub	r3, r3, #1	; 0x1
    c540:	e3c3347f 	bic	r3, r3, #2130706432	; 0x7f000000
    c544:	e3c3387f 	bic	r3, r3, #8323072	; 0x7f0000
    c548:	e3c33c7f 	bic	r3, r3, #32512	; 0x7f00
    c54c:	e3c3307f 	bic	r3, r3, #127	; 0x7f
    c550:	e1d33002 	bics	r3, r3, r2
    c554:	1a000021 	bne	c5e0 <strchr+0xe0>
    c558:	e0222004 	eor	r2, r2, r4
    c55c:	e28234ff 	add	r3, r2, #-16777216	; 0xff000000
    c560:	e2433801 	sub	r3, r3, #65536	; 0x10000
    c564:	e2433c01 	sub	r3, r3, #256	; 0x100
    c568:	e2433001 	sub	r3, r3, #1	; 0x1
    c56c:	e3c3347f 	bic	r3, r3, #2130706432	; 0x7f000000
    c570:	e3c3387f 	bic	r3, r3, #8323072	; 0x7f0000
    c574:	e3c33c7f 	bic	r3, r3, #32512	; 0x7f00
    c578:	e3c3307f 	bic	r3, r3, #127	; 0x7f
    c57c:	e1d32002 	bics	r2, r3, r2
    c580:	0a000002 	beq	c590 <strchr+0x90>
    c584:	ea000015 	b	c5e0 <strchr+0xe0>
    c588:	e1dce00e 	bics	lr, ip, lr
    c58c:	1a000013 	bne	c5e0 <strchr+0xe0>
    c590:	e5b02004 	ldr	r2, [r0, #4]!
    c594:	e022e004 	eor	lr, r2, r4
    c598:	e28e34ff 	add	r3, lr, #-16777216	; 0xff000000
    c59c:	e2433801 	sub	r3, r3, #65536	; 0x10000
    c5a0:	e2433c01 	sub	r3, r3, #256	; 0x100
    c5a4:	e2433001 	sub	r3, r3, #1	; 0x1
    c5a8:	e3c3c47f 	bic	ip, r3, #2130706432	; 0x7f000000
    c5ac:	e28234ff 	add	r3, r2, #-16777216	; 0xff000000
    c5b0:	e2433801 	sub	r3, r3, #65536	; 0x10000
    c5b4:	e2433c01 	sub	r3, r3, #256	; 0x100
    c5b8:	e2433001 	sub	r3, r3, #1	; 0x1
    c5bc:	e3c3347f 	bic	r3, r3, #2130706432	; 0x7f000000
    c5c0:	e3c3387f 	bic	r3, r3, #8323072	; 0x7f0000
    c5c4:	e3c33c7f 	bic	r3, r3, #32512	; 0x7f00
    c5c8:	e3ccc87f 	bic	ip, ip, #8323072	; 0x7f0000
    c5cc:	e3c3307f 	bic	r3, r3, #127	; 0x7f
    c5d0:	e3cccc7f 	bic	ip, ip, #32512	; 0x7f00
    c5d4:	e1d32002 	bics	r2, r3, r2
    c5d8:	e3ccc07f 	bic	ip, ip, #127	; 0x7f
    c5dc:	0affffe9 	beq	c588 <strchr+0x88>
    c5e0:	e5d03000 	ldrb	r3, [r0]
    c5e4:	e3530000 	cmp	r3, #0	; 0x0
    c5e8:	0a000004 	beq	c600 <strchr+0x100>
    c5ec:	e1510003 	cmp	r1, r3
    c5f0:	08bd8010 	ldmeqia	sp!, {r4, pc}
    c5f4:	e5f03001 	ldrb	r3, [r0, #1]!
    c5f8:	e3530000 	cmp	r3, #0	; 0x0
    c5fc:	1afffffa 	bne	c5ec <strchr+0xec>
    c600:	e3510000 	cmp	r1, #0	; 0x0
    c604:	13a00000 	movne	r0, #0	; 0x0
    c608:	e8bd8010 	ldmia	sp!, {r4, pc}

0000c60c <strcmp>:
    c60c:	e1803001 	orr	r3, r0, r1
    c610:	e3130003 	tst	r3, #3	; 0x3
    c614:	e1a02000 	mov	r2, r0
    c618:	1a00001d 	bne	c694 <strcmp+0x88>
    c61c:	e5902000 	ldr	r2, [r0]
    c620:	e5913000 	ldr	r3, [r1]
    c624:	e1520003 	cmp	r2, r3
    c628:	1a000018 	bne	c690 <strcmp+0x84>
    c62c:	e28234ff 	add	r3, r2, #-16777216	; 0xff000000
    c630:	e2433801 	sub	r3, r3, #65536	; 0x10000
    c634:	e2433c01 	sub	r3, r3, #256	; 0x100
    c638:	e2433001 	sub	r3, r3, #1	; 0x1
    c63c:	e3c3347f 	bic	r3, r3, #2130706432	; 0x7f000000
    c640:	e3c3387f 	bic	r3, r3, #8323072	; 0x7f0000
    c644:	e3c33c7f 	bic	r3, r3, #32512	; 0x7f00
    c648:	e3c3307f 	bic	r3, r3, #127	; 0x7f
    c64c:	e1d32002 	bics	r2, r3, r2
    c650:	0a000002 	beq	c660 <strcmp+0x54>
    c654:	ea00001e 	b	c6d4 <strcmp+0xc8>
    c658:	e1d2c00c 	bics	ip, r2, ip
    c65c:	1a00001c 	bne	c6d4 <strcmp+0xc8>
    c660:	e5b0c004 	ldr	ip, [r0, #4]!
    c664:	e28c34ff 	add	r3, ip, #-16777216	; 0xff000000
    c668:	e2433801 	sub	r3, r3, #65536	; 0x10000
    c66c:	e2433c01 	sub	r3, r3, #256	; 0x100
    c670:	e2433001 	sub	r3, r3, #1	; 0x1
    c674:	e3c3247f 	bic	r2, r3, #2130706432	; 0x7f000000
    c678:	e5b13004 	ldr	r3, [r1, #4]!
    c67c:	e3c2287f 	bic	r2, r2, #8323072	; 0x7f0000
    c680:	e3c22c7f 	bic	r2, r2, #32512	; 0x7f00
    c684:	e15c0003 	cmp	ip, r3
    c688:	e3c2207f 	bic	r2, r2, #127	; 0x7f
    c68c:	0afffff1 	beq	c658 <strcmp+0x4c>
    c690:	e1a02000 	mov	r2, r0
    c694:	e5d23000 	ldrb	r3, [r2]
    c698:	e3530000 	cmp	r3, #0	; 0x0
    c69c:	1a000004 	bne	c6b4 <strcmp+0xa8>
    c6a0:	ea000008 	b	c6c8 <strcmp+0xbc>
    c6a4:	e5f23001 	ldrb	r3, [r2, #1]!
    c6a8:	e3530000 	cmp	r3, #0	; 0x0
    c6ac:	e2811001 	add	r1, r1, #1	; 0x1
    c6b0:	0a000004 	beq	c6c8 <strcmp+0xbc>
    c6b4:	e5d10000 	ldrb	r0, [r1]
    c6b8:	e1500003 	cmp	r0, r3
    c6bc:	0afffff8 	beq	c6a4 <strcmp+0x98>
    c6c0:	e0600003 	rsb	r0, r0, r3
    c6c4:	e12fff1e 	bx	lr
    c6c8:	e5d10000 	ldrb	r0, [r1]
    c6cc:	e0600003 	rsb	r0, r0, r3
    c6d0:	e12fff1e 	bx	lr
    c6d4:	e3a00000 	mov	r0, #0	; 0x0
    c6d8:	e12fff1e 	bx	lr

0000c6dc <strcpy>:
    c6dc:	e1813000 	orr	r3, r1, r0
    c6e0:	e3130003 	tst	r3, #3	; 0x3
    c6e4:	e52de004 	str	lr, [sp, #-4]!
    c6e8:	11a02000 	movne	r2, r0
    c6ec:	1a00001c 	bne	c764 <strcpy+0x88>
    c6f0:	e591c000 	ldr	ip, [r1]
    c6f4:	e28c34ff 	add	r3, ip, #-16777216	; 0xff000000
    c6f8:	e2433801 	sub	r3, r3, #65536	; 0x10000
    c6fc:	e2433c01 	sub	r3, r3, #256	; 0x100
    c700:	e2433001 	sub	r3, r3, #1	; 0x1
    c704:	e1e0200c 	mvn	r2, ip
    c708:	e0033002 	and	r3, r3, r2
    c70c:	e3c3347f 	bic	r3, r3, #2130706432	; 0x7f000000
    c710:	e3c3387f 	bic	r3, r3, #8323072	; 0x7f0000
    c714:	e3c33c7f 	bic	r3, r3, #32512	; 0x7f00
    c718:	e3c3307f 	bic	r3, r3, #127	; 0x7f
    c71c:	e3530000 	cmp	r3, #0	; 0x0
    c720:	e1a0e000 	mov	lr, r0
    c724:	1a00000d 	bne	c760 <strcpy+0x84>
    c728:	e48ec004 	str	ip, [lr], #4
    c72c:	e5b1c004 	ldr	ip, [r1, #4]!
    c730:	e28c34ff 	add	r3, ip, #-16777216	; 0xff000000
    c734:	e2433801 	sub	r3, r3, #65536	; 0x10000
    c738:	e2433c01 	sub	r3, r3, #256	; 0x100
    c73c:	e2433001 	sub	r3, r3, #1	; 0x1
    c740:	e1e0200c 	mvn	r2, ip
    c744:	e0033002 	and	r3, r3, r2
    c748:	e3c3347f 	bic	r3, r3, #2130706432	; 0x7f000000
    c74c:	e3c3387f 	bic	r3, r3, #8323072	; 0x7f0000
    c750:	e3c33c7f 	bic	r3, r3, #32512	; 0x7f00
    c754:	e3c3307f 	bic	r3, r3, #127	; 0x7f
    c758:	e3530000 	cmp	r3, #0	; 0x0
    c75c:	0afffff1 	beq	c728 <strcpy+0x4c>
    c760:	e1a0200e 	mov	r2, lr
    c764:	e4d13001 	ldrb	r3, [r1], #1
    c768:	e3530000 	cmp	r3, #0	; 0x0
    c76c:	e4c23001 	strb	r3, [r2], #1
    c770:	1afffffb 	bne	c764 <strcpy+0x88>
    c774:	e49df004 	ldr	pc, [sp], #4

0000c778 <strlen>:
    c778:	e3100003 	tst	r0, #3	; 0x3
    c77c:	e1a01000 	mov	r1, r0
    c780:	1a000018 	bne	c7e8 <strlen+0x70>
    c784:	e5902000 	ldr	r2, [r0]
    c788:	e28234ff 	add	r3, r2, #-16777216	; 0xff000000
    c78c:	e2433801 	sub	r3, r3, #65536	; 0x10000
    c790:	e2433c01 	sub	r3, r3, #256	; 0x100
    c794:	e2433001 	sub	r3, r3, #1	; 0x1
    c798:	e3c3347f 	bic	r3, r3, #2130706432	; 0x7f000000
    c79c:	e3c3387f 	bic	r3, r3, #8323072	; 0x7f0000
    c7a0:	e3c33c7f 	bic	r3, r3, #32512	; 0x7f00
    c7a4:	e3c3307f 	bic	r3, r3, #127	; 0x7f
    c7a8:	e1d32002 	bics	r2, r3, r2
    c7ac:	e1a02000 	mov	r2, r0
    c7b0:	1a00000b 	bne	c7e4 <strlen+0x6c>
    c7b4:	e5b02004 	ldr	r2, [r0, #4]!
    c7b8:	e28234ff 	add	r3, r2, #-16777216	; 0xff000000
    c7bc:	e2433801 	sub	r3, r3, #65536	; 0x10000
    c7c0:	e2433c01 	sub	r3, r3, #256	; 0x100
    c7c4:	e2433001 	sub	r3, r3, #1	; 0x1
    c7c8:	e3c3347f 	bic	r3, r3, #2130706432	; 0x7f000000
    c7cc:	e3c3387f 	bic	r3, r3, #8323072	; 0x7f0000
    c7d0:	e3c33c7f 	bic	r3, r3, #32512	; 0x7f00
    c7d4:	e3c3307f 	bic	r3, r3, #127	; 0x7f
    c7d8:	e1d32002 	bics	r2, r3, r2
    c7dc:	0afffff4 	beq	c7b4 <strlen+0x3c>
    c7e0:	e1a02000 	mov	r2, r0
    c7e4:	e1a00002 	mov	r0, r2
    c7e8:	e5d03000 	ldrb	r3, [r0]
    c7ec:	e3530000 	cmp	r3, #0	; 0x0
    c7f0:	0a000002 	beq	c800 <strlen+0x88>
    c7f4:	e5f03001 	ldrb	r3, [r0, #1]!
    c7f8:	e3530000 	cmp	r3, #0	; 0x0
    c7fc:	1afffffc 	bne	c7f4 <strlen+0x7c>
    c800:	e0610000 	rsb	r0, r1, r0
    c804:	e12fff1e 	bx	lr

0000c808 <strncat>:
    c808:	e3100003 	tst	r0, #3	; 0x3
    c80c:	e1a0c002 	mov	ip, r2
    c810:	e52de004 	str	lr, [sp, #-4]!
    c814:	11a02000 	movne	r2, r0
    c818:	1a000019 	bne	c884 <strncat+0x7c>
    c81c:	e5902000 	ldr	r2, [r0]
    c820:	e28234ff 	add	r3, r2, #-16777216	; 0xff000000
    c824:	e2433801 	sub	r3, r3, #65536	; 0x10000
    c828:	e2433c01 	sub	r3, r3, #256	; 0x100
    c82c:	e2433001 	sub	r3, r3, #1	; 0x1
    c830:	e3c3347f 	bic	r3, r3, #2130706432	; 0x7f000000
    c834:	e3c3387f 	bic	r3, r3, #8323072	; 0x7f0000
    c838:	e3c33c7f 	bic	r3, r3, #32512	; 0x7f00
    c83c:	e3c3307f 	bic	r3, r3, #127	; 0x7f
    c840:	e1d32002 	bics	r2, r3, r2
    c844:	e1a03000 	mov	r3, r0
    c848:	1a00000c 	bne	c880 <strncat+0x78>
    c84c:	e1a0e000 	mov	lr, r0
    c850:	e5be2004 	ldr	r2, [lr, #4]!
    c854:	e28234ff 	add	r3, r2, #-16777216	; 0xff000000
    c858:	e2433801 	sub	r3, r3, #65536	; 0x10000
    c85c:	e2433c01 	sub	r3, r3, #256	; 0x100
    c860:	e2433001 	sub	r3, r3, #1	; 0x1
    c864:	e3c3347f 	bic	r3, r3, #2130706432	; 0x7f000000
    c868:	e3c3387f 	bic	r3, r3, #8323072	; 0x7f0000
    c86c:	e3c33c7f 	bic	r3, r3, #32512	; 0x7f00
    c870:	e3c3307f 	bic	r3, r3, #127	; 0x7f
    c874:	e1d32002 	bics	r2, r3, r2
    c878:	0afffff4 	beq	c850 <strncat+0x48>
    c87c:	e1a0300e 	mov	r3, lr
    c880:	e1a02003 	mov	r2, r3
    c884:	e5d23000 	ldrb	r3, [r2]
    c888:	e3530000 	cmp	r3, #0	; 0x0
    c88c:	0a000008 	beq	c8b4 <strncat+0xac>
    c890:	e5f23001 	ldrb	r3, [r2, #1]!
    c894:	e3530000 	cmp	r3, #0	; 0x0
    c898:	1afffffc 	bne	c890 <strncat+0x88>
    c89c:	e25cc001 	subs	ip, ip, #1	; 0x1
    c8a0:	349df004 	ldrcc	pc, [sp], #4
    c8a4:	ea000004 	b	c8bc <strncat+0xb4>
    c8a8:	e35c0000 	cmp	ip, #0	; 0x0
    c8ac:	05c2c001 	streqb	ip, [r2, #1]
    c8b0:	e2822001 	add	r2, r2, #1	; 0x1
    c8b4:	e25cc001 	subs	ip, ip, #1	; 0x1
    c8b8:	349df004 	ldrcc	pc, [sp], #4
    c8bc:	e5d13000 	ldrb	r3, [r1]
    c8c0:	e3530000 	cmp	r3, #0	; 0x0
    c8c4:	e2811001 	add	r1, r1, #1	; 0x1
    c8c8:	e5c23000 	strb	r3, [r2]
    c8cc:	1afffff5 	bne	c8a8 <strncat+0xa0>
    c8d0:	e49df004 	ldr	pc, [sp], #4

0000c8d4 <strncmp>:
    c8d4:	e252c000 	subs	ip, r2, #0	; 0x0
    c8d8:	e92d4010 	stmdb	sp!, {r4, lr}
    c8dc:	e1a02000 	mov	r2, r0
    c8e0:	0a00004c 	beq	ca18 <strncmp+0x144>
    c8e4:	e1803001 	orr	r3, r0, r1
    c8e8:	e3130003 	tst	r3, #3	; 0x3
    c8ec:	1a00002a 	bne	c99c <strncmp+0xc8>
    c8f0:	e35c0003 	cmp	ip, #3	; 0x3
    c8f4:	e1a04000 	mov	r4, r0
    c8f8:	e1a0e001 	mov	lr, r1
    c8fc:	9a000024 	bls	c994 <strncmp+0xc0>
    c900:	e5900000 	ldr	r0, [r0]
    c904:	e5913000 	ldr	r3, [r1]
    c908:	e1500003 	cmp	r0, r3
    c90c:	1a000020 	bne	c994 <strncmp+0xc0>
    c910:	e25cc004 	subs	ip, ip, #4	; 0x4
    c914:	0a00003f 	beq	ca18 <strncmp+0x144>
    c918:	e28034ff 	add	r3, r0, #-16777216	; 0xff000000
    c91c:	e2433801 	sub	r3, r3, #65536	; 0x10000
    c920:	e2433c01 	sub	r3, r3, #256	; 0x100
    c924:	e2433001 	sub	r3, r3, #1	; 0x1
    c928:	e3c3347f 	bic	r3, r3, #2130706432	; 0x7f000000
    c92c:	e3c3387f 	bic	r3, r3, #8323072	; 0x7f0000
    c930:	e3c33c7f 	bic	r3, r3, #32512	; 0x7f00
    c934:	e3c3307f 	bic	r3, r3, #127	; 0x7f
    c938:	e1d30000 	bics	r0, r3, r0
    c93c:	0a000010 	beq	c984 <strncmp+0xb0>
    c940:	ea000034 	b	ca18 <strncmp+0x144>
    c944:	e5940000 	ldr	r0, [r4]
    c948:	e28034ff 	add	r3, r0, #-16777216	; 0xff000000
    c94c:	e2433801 	sub	r3, r3, #65536	; 0x10000
    c950:	e2433c01 	sub	r3, r3, #256	; 0x100
    c954:	e2433001 	sub	r3, r3, #1	; 0x1
    c958:	e3c3147f 	bic	r1, r3, #2130706432	; 0x7f000000
    c95c:	e59e3000 	ldr	r3, [lr]
    c960:	e3c1187f 	bic	r1, r1, #8323072	; 0x7f0000
    c964:	e3c11c7f 	bic	r1, r1, #32512	; 0x7f00
    c968:	e1500003 	cmp	r0, r3
    c96c:	e3c1107f 	bic	r1, r1, #127	; 0x7f
    c970:	1a000007 	bne	c994 <strncmp+0xc0>
    c974:	e25cc004 	subs	ip, ip, #4	; 0x4
    c978:	0a000026 	beq	ca18 <strncmp+0x144>
    c97c:	e1d10000 	bics	r0, r1, r0
    c980:	1a000024 	bne	ca18 <strncmp+0x144>
    c984:	e35c0003 	cmp	ip, #3	; 0x3
    c988:	e2844004 	add	r4, r4, #4	; 0x4
    c98c:	e28ee004 	add	lr, lr, #4	; 0x4
    c990:	8affffeb 	bhi	c944 <strncmp+0x70>
    c994:	e1a02004 	mov	r2, r4
    c998:	e1a0100e 	mov	r1, lr
    c99c:	e25c4001 	subs	r4, ip, #1	; 0x1
    c9a0:	3a000018 	bcc	ca08 <strncmp+0x134>
    c9a4:	e5d2e000 	ldrb	lr, [r2]
    c9a8:	e5d10000 	ldrb	r0, [r1]
    c9ac:	e150000e 	cmp	r0, lr
    c9b0:	1a000016 	bne	ca10 <strncmp+0x13c>
    c9b4:	e3540000 	cmp	r4, #0	; 0x0
    c9b8:	0a000016 	beq	ca18 <strncmp+0x144>
    c9bc:	e3500000 	cmp	r0, #0	; 0x0
    c9c0:	12822001 	addne	r2, r2, #1	; 0x1
    c9c4:	12811001 	addne	r1, r1, #1	; 0x1
    c9c8:	13a0c000 	movne	ip, #0	; 0x0
    c9cc:	0a000011 	beq	ca18 <strncmp+0x144>
    c9d0:	e5d10000 	ldrb	r0, [r1]
    c9d4:	e5d2e000 	ldrb	lr, [r2]
    c9d8:	e150000e 	cmp	r0, lr
    c9dc:	e2811001 	add	r1, r1, #1	; 0x1
    c9e0:	e2822001 	add	r2, r2, #1	; 0x1
    c9e4:	e2443001 	sub	r3, r4, #1	; 0x1
    c9e8:	1a000008 	bne	ca10 <strncmp+0x13c>
    c9ec:	e15c0003 	cmp	ip, r3
    c9f0:	0a000008 	beq	ca18 <strncmp+0x144>
    c9f4:	e3500000 	cmp	r0, #0	; 0x0
    c9f8:	e28cc001 	add	ip, ip, #1	; 0x1
    c9fc:	0a000005 	beq	ca18 <strncmp+0x144>
    ca00:	e15c0004 	cmp	ip, r4
    ca04:	1afffff1 	bne	c9d0 <strncmp+0xfc>
    ca08:	e5d2e000 	ldrb	lr, [r2]
    ca0c:	e5d10000 	ldrb	r0, [r1]
    ca10:	e060000e 	rsb	r0, r0, lr
    ca14:	e8bd8010 	ldmia	sp!, {r4, pc}
    ca18:	e3a00000 	mov	r0, #0	; 0x0
    ca1c:	e8bd8010 	ldmia	sp!, {r4, pc}

0000ca20 <strncpy>:
    ca20:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    ca24:	e1a04001 	mov	r4, r1
    ca28:	e1811000 	orr	r1, r1, r0
    ca2c:	e3110003 	tst	r1, #3	; 0x3
    ca30:	13a03000 	movne	r3, #0	; 0x0
    ca34:	03a03001 	moveq	r3, #1	; 0x1
    ca38:	e3520003 	cmp	r2, #3	; 0x3
    ca3c:	93a03000 	movls	r3, #0	; 0x0
    ca40:	82033001 	andhi	r3, r3, #1	; 0x1
    ca44:	e3530000 	cmp	r3, #0	; 0x0
    ca48:	01a01004 	moveq	r1, r4
    ca4c:	e1a05000 	mov	r5, r0
    ca50:	e1a0e002 	mov	lr, r2
    ca54:	01a04000 	moveq	r4, r0
    ca58:	0a000018 	beq	cac0 <strncpy+0xa0>
    ca5c:	e3520003 	cmp	r2, #3	; 0x3
    ca60:	e1a0c004 	mov	ip, r4
    ca64:	9a000013 	bls	cab8 <strncpy+0x98>
    ca68:	e5941000 	ldr	r1, [r4]
    ca6c:	ea000005 	b	ca88 <strncpy+0x68>
    ca70:	e24ee004 	sub	lr, lr, #4	; 0x4
    ca74:	e35e0003 	cmp	lr, #3	; 0x3
    ca78:	e4801004 	str	r1, [r0], #4
    ca7c:	e28cc004 	add	ip, ip, #4	; 0x4
    ca80:	9a00000c 	bls	cab8 <strncpy+0x98>
    ca84:	e59c1000 	ldr	r1, [ip]
    ca88:	e28134ff 	add	r3, r1, #-16777216	; 0xff000000
    ca8c:	e2433801 	sub	r3, r3, #65536	; 0x10000
    ca90:	e2433c01 	sub	r3, r3, #256	; 0x100
    ca94:	e2433001 	sub	r3, r3, #1	; 0x1
    ca98:	e1e02001 	mvn	r2, r1
    ca9c:	e0033002 	and	r3, r3, r2
    caa0:	e3c3347f 	bic	r3, r3, #2130706432	; 0x7f000000
    caa4:	e3c3387f 	bic	r3, r3, #8323072	; 0x7f0000
    caa8:	e3c33c7f 	bic	r3, r3, #32512	; 0x7f00
    caac:	e3c3307f 	bic	r3, r3, #127	; 0x7f
    cab0:	e3530000 	cmp	r3, #0	; 0x0
    cab4:	0affffed 	beq	ca70 <strncpy+0x50>
    cab8:	e1a04000 	mov	r4, r0
    cabc:	e1a0100c 	mov	r1, ip
    cac0:	e35e0000 	cmp	lr, #0	; 0x0
    cac4:	0a000018 	beq	cb2c <strncpy+0x10c>
    cac8:	e5d13000 	ldrb	r3, [r1]
    cacc:	e24e2001 	sub	r2, lr, #1	; 0x1
    cad0:	e3530000 	cmp	r3, #0	; 0x0
    cad4:	e1a0c004 	mov	ip, r4
    cad8:	e4cc3001 	strb	r3, [ip], #1
    cadc:	1284e002 	addne	lr, r4, #2	; 0x2
    cae0:	10810002 	addne	r0, r1, r2
    cae4:	0a000008 	beq	cb0c <strncpy+0xec>
    cae8:	e1500001 	cmp	r0, r1
    caec:	e1a0c00e 	mov	ip, lr
    caf0:	e2422001 	sub	r2, r2, #1	; 0x1
    caf4:	e28ee001 	add	lr, lr, #1	; 0x1
    caf8:	0a00000b 	beq	cb2c <strncpy+0x10c>
    cafc:	e5f13001 	ldrb	r3, [r1, #1]!
    cb00:	e3530000 	cmp	r3, #0	; 0x0
    cb04:	e54c3001 	strb	r3, [ip, #-1]
    cb08:	1afffff6 	bne	cae8 <strncpy+0xc8>
    cb0c:	e3520000 	cmp	r2, #0	; 0x0
    cb10:	0a000005 	beq	cb2c <strncpy+0x10c>
    cb14:	e3a03000 	mov	r3, #0	; 0x0
    cb18:	e1a01003 	mov	r1, r3
    cb1c:	e7c3100c 	strb	r1, [r3, ip]
    cb20:	e2833001 	add	r3, r3, #1	; 0x1
    cb24:	e1520003 	cmp	r2, r3
    cb28:	1afffffb 	bne	cb1c <strncpy+0xfc>
    cb2c:	e1a00005 	mov	r0, r5
    cb30:	e8bd8030 	ldmia	sp!, {r4, r5, pc}

0000cb34 <strrchr>:
    cb34:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    cb38:	e2514000 	subs	r4, r1, #0	; 0x0
    cb3c:	e1a03000 	mov	r3, r0
    cb40:	13a05000 	movne	r5, #0	; 0x0
    cb44:	1a000003 	bne	cb58 <strrchr+0x24>
    cb48:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
    cb4c:	eafffe6b 	b	c500 <strchr>
    cb50:	e1a05000 	mov	r5, r0
    cb54:	e2803001 	add	r3, r0, #1	; 0x1
    cb58:	e1a00003 	mov	r0, r3
    cb5c:	e1a01004 	mov	r1, r4
    cb60:	ebfffe66 	bl	c500 <strchr>
    cb64:	e3500000 	cmp	r0, #0	; 0x0
    cb68:	1afffff8 	bne	cb50 <strrchr+0x1c>
    cb6c:	e1a00005 	mov	r0, r5
    cb70:	e8bd8030 	ldmia	sp!, {r4, r5, pc}

0000cb74 <strstr>:
    cb74:	e5d03000 	ldrb	r3, [r0]
    cb78:	e3530000 	cmp	r3, #0	; 0x0
    cb7c:	13a0c000 	movne	ip, #0	; 0x0
    cb80:	0a00000c 	beq	cbb8 <strstr+0x44>
    cb84:	e7dc2001 	ldrb	r2, [ip, r1]
    cb88:	e3520000 	cmp	r2, #0	; 0x0
    cb8c:	012fff1e 	bxeq	lr
    cb90:	e7dc3000 	ldrb	r3, [ip, r0]
    cb94:	e1530002 	cmp	r3, r2
    cb98:	e28cc001 	add	ip, ip, #1	; 0x1
    cb9c:	0afffff8 	beq	cb84 <strstr+0x10>
    cba0:	e5f03001 	ldrb	r3, [r0, #1]!
    cba4:	e3530000 	cmp	r3, #0	; 0x0
    cba8:	e3a0c000 	mov	ip, #0	; 0x0
    cbac:	1afffff4 	bne	cb84 <strstr+0x10>
    cbb0:	e3a00000 	mov	r0, #0	; 0x0
    cbb4:	e12fff1e 	bx	lr
    cbb8:	e5d13000 	ldrb	r3, [r1]
    cbbc:	e3530000 	cmp	r3, #0	; 0x0
    cbc0:	012fff1e 	bxeq	lr
    cbc4:	eafffff9 	b	cbb0 <strstr+0x3c>

0000cbc8 <strtok>:
    cbc8:	e59f300c 	ldr	r3, [pc, #12]	; cbdc <prog+0xcb94>
    cbcc:	e5932000 	ldr	r2, [r3]
    cbd0:	e3a03001 	mov	r3, #1	; 0x1
    cbd4:	e282205c 	add	r2, r2, #92	; 0x5c
    cbd8:	ea000000 	b	cbe0 <__strtok_r>
    cbdc:	40000014 	andmi	r0, r0, r4, lsl r0

0000cbe0 <__strtok_r>:
    cbe0:	e3500000 	cmp	r0, #0	; 0x0
    cbe4:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
    cbe8:	e1a06002 	mov	r6, r2
    cbec:	e1a04003 	mov	r4, r3
    cbf0:	0a000026 	beq	cc90 <__strtok_r+0xb0>
    cbf4:	e4d03001 	ldrb	r3, [r0], #1
    cbf8:	e3a0e000 	mov	lr, #0	; 0x0
    cbfc:	e2402001 	sub	r2, r0, #1	; 0x1
    cc00:	e7dec001 	ldrb	ip, [lr, r1]
    cc04:	e35c0000 	cmp	ip, #0	; 0x0
    cc08:	e28ee001 	add	lr, lr, #1	; 0x1
    cc0c:	0a000008 	beq	cc34 <__strtok_r+0x54>
    cc10:	e153000c 	cmp	r3, ip
    cc14:	1afffff9 	bne	cc00 <__strtok_r+0x20>
    cc18:	e3540000 	cmp	r4, #0	; 0x0
    cc1c:	1afffff4 	bne	cbf4 <__strtok_r+0x14>
    cc20:	e1a01002 	mov	r1, r2
    cc24:	e5860000 	str	r0, [r6]
    cc28:	e5404001 	strb	r4, [r0, #-1]
    cc2c:	e1a00001 	mov	r0, r1
    cc30:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
    cc34:	e3530000 	cmp	r3, #0	; 0x0
    cc38:	e1a02000 	mov	r2, r0
    cc3c:	01a01003 	moveq	r1, r3
    cc40:	05863000 	streq	r3, [r6]
    cc44:	0a00000f 	beq	cc88 <__strtok_r+0xa8>
    cc48:	e3a0c000 	mov	ip, #0	; 0x0
    cc4c:	e4d0e001 	ldrb	lr, [r0], #1
    cc50:	e1a0500c 	mov	r5, ip
    cc54:	e2424001 	sub	r4, r2, #1	; 0x1
    cc58:	ea000001 	b	cc64 <__strtok_r+0x84>
    cc5c:	e3530000 	cmp	r3, #0	; 0x0
    cc60:	0afffff8 	beq	cc48 <__strtok_r+0x68>
    cc64:	e7dc3001 	ldrb	r3, [ip, r1]
    cc68:	e15e0003 	cmp	lr, r3
    cc6c:	e28cc001 	add	ip, ip, #1	; 0x1
    cc70:	1afffff9 	bne	cc5c <__strtok_r+0x7c>
    cc74:	e3530000 	cmp	r3, #0	; 0x0
    cc78:	01a00003 	moveq	r0, r3
    cc7c:	15405001 	strneb	r5, [r0, #-1]
    cc80:	e5860000 	str	r0, [r6]
    cc84:	e1a01004 	mov	r1, r4
    cc88:	e1a00001 	mov	r0, r1
    cc8c:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
    cc90:	e5920000 	ldr	r0, [r2]
    cc94:	e3500000 	cmp	r0, #0	; 0x0
    cc98:	03a01000 	moveq	r1, #0	; 0x0
    cc9c:	1affffd4 	bne	cbf4 <__strtok_r+0x14>
    cca0:	eafffff8 	b	cc88 <__strtok_r+0xa8>

0000cca4 <strtok_r>:
    cca4:	e3a03001 	mov	r3, #1	; 0x1
    cca8:	eaffffcc 	b	cbe0 <__strtok_r>

0000ccac <toupper>:
    ccac:	e59f3010 	ldr	r3, [pc, #16]	; ccc4 <prog+0xcc7c>
    ccb0:	e5932000 	ldr	r2, [r3]
    ccb4:	e7d23000 	ldrb	r3, [r2, r0]
    ccb8:	e3130002 	tst	r3, #2	; 0x2
    ccbc:	12400020 	subne	r0, r0, #32	; 0x20
    ccc0:	e12fff1e 	bx	lr
    ccc4:	40000828 	andmi	r0, r0, r8, lsr #16

0000ccc8 <__sprint>:
    ccc8:	e5913008 	ldr	r3, [r1, #8]
    cccc:	e3530000 	cmp	r3, #0	; 0x0
    ccd0:	e92d4010 	stmdb	sp!, {r4, lr}
    ccd4:	e1a02003 	mov	r2, r3
    ccd8:	e1a04001 	mov	r4, r1
    ccdc:	05813004 	streq	r3, [r1, #4]
    cce0:	1a000001 	bne	ccec <__sprint+0x24>
    cce4:	e1a00002 	mov	r0, r2
    cce8:	e8bd8010 	ldmia	sp!, {r4, pc}
    ccec:	eb0010a1 	bl	10f78 <__sfvwrite>
    ccf0:	e1a02000 	mov	r2, r0
    ccf4:	e3a03000 	mov	r3, #0	; 0x0
    ccf8:	e1a00002 	mov	r0, r2
    ccfc:	e5843004 	str	r3, [r4, #4]
    cd00:	e5843008 	str	r3, [r4, #8]
    cd04:	e8bd8010 	ldmia	sp!, {r4, pc}

0000cd08 <_vfprintf_r>:
    cd08:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cd0c:	e24dde6b 	sub	sp, sp, #1712	; 0x6b0
    cd10:	e1a0a001 	mov	sl, r1
    cd14:	e58d0010 	str	r0, [sp, #16]
    cd18:	e1a04002 	mov	r4, r2
    cd1c:	e1a09003 	mov	r9, r3
    cd20:	eb001199 	bl	1138c <localeconv>
    cd24:	e59d1010 	ldr	r1, [sp, #16]
    cd28:	e5900000 	ldr	r0, [r0]
    cd2c:	e3510000 	cmp	r1, #0	; 0x0
    cd30:	e58d0028 	str	r0, [sp, #40]
    cd34:	0a000002 	beq	cd44 <_vfprintf_r+0x3c>
    cd38:	e5913038 	ldr	r3, [r1, #56]
    cd3c:	e3530000 	cmp	r3, #0	; 0x0
    cd40:	0a0000cf 	beq	d084 <prog+0xd03c>
    cd44:	e1dac0bc 	ldrh	ip, [sl, #12]
    cd48:	e31c0008 	tst	ip, #8	; 0x8
    cd4c:	0a0000cf 	beq	d090 <prog+0xd048>
    cd50:	e59a3010 	ldr	r3, [sl, #16]
    cd54:	e3530000 	cmp	r3, #0	; 0x0
    cd58:	0a0000cc 	beq	d090 <prog+0xd048>
    cd5c:	e20c301a 	and	r3, ip, #26	; 0x1a
    cd60:	e353000a 	cmp	r3, #10	; 0xa
    cd64:	1a00002d 	bne	ce20 <_vfprintf_r+0x118>
    cd68:	e1da30fe 	ldrsh	r3, [sl, #14]
    cd6c:	e3530000 	cmp	r3, #0	; 0x0
    cd70:	ba00002a 	blt	ce20 <_vfprintf_r+0x118>
    cd74:	e3ccc002 	bic	ip, ip, #2	; 0x2
    cd78:	e28d8c05 	add	r8, sp, #1280	; 0x500
    cd7c:	e1c8ccb0 	strh	ip, [r8, #192]
    cd80:	e3a0c000 	mov	ip, #0	; 0x0
    cd84:	e58dc5cc 	str	ip, [sp, #1484]
    cd88:	e28d7e5b 	add	r7, sp, #1456	; 0x5b0
    cd8c:	e1dac0be 	ldrh	ip, [sl, #14]
    cd90:	e59a501c 	ldr	r5, [sl, #28]
    cd94:	e59a6024 	ldr	r6, [sl, #36]
    cd98:	e28de060 	add	lr, sp, #96	; 0x60
    cd9c:	e2877004 	add	r7, r7, #4	; 0x4
    cda0:	e24ee008 	sub	lr, lr, #8	; 0x8
    cda4:	e1a02004 	mov	r2, r4
    cda8:	e59d0010 	ldr	r0, [sp, #16]
    cdac:	e3a04b01 	mov	r4, #1024	; 0x400
    cdb0:	e1a03009 	mov	r3, r9
    cdb4:	e1a01007 	mov	r1, r7
    cdb8:	e1c8ccb2 	strh	ip, [r8, #194]
    cdbc:	e58d55d0 	str	r5, [sp, #1488]
    cdc0:	e58d65d8 	str	r6, [sp, #1496]
    cdc4:	e58de5c4 	str	lr, [sp, #1476]
    cdc8:	e58d45c8 	str	r4, [sp, #1480]
    cdcc:	e58de5b4 	str	lr, [sp, #1460]
    cdd0:	e58d45bc 	str	r4, [sp, #1468]
    cdd4:	ebffffcb 	bl	cd08 <_vfprintf_r>
    cdd8:	e3500000 	cmp	r0, #0	; 0x0
    cddc:	e58d0020 	str	r0, [sp, #32]
    cde0:	ba000005 	blt	cdfc <_vfprintf_r+0xf4>
    cde4:	e1a00007 	mov	r0, r7
    cde8:	ebfff98d 	bl	b424 <fflush>
    cdec:	e59d1020 	ldr	r1, [sp, #32]
    cdf0:	e3500000 	cmp	r0, #0	; 0x0
    cdf4:	13e01000 	mvnne	r1, #0	; 0x0
    cdf8:	e58d1020 	str	r1, [sp, #32]
    cdfc:	e28d2c05 	add	r2, sp, #1280	; 0x500
    ce00:	e1d23cb0 	ldrh	r3, [r2, #192]
    ce04:	e3130040 	tst	r3, #64	; 0x40
    ce08:	11da30bc 	ldrneh	r3, [sl, #12]
    ce0c:	13833040 	orrne	r3, r3, #64	; 0x40
    ce10:	11ca30bc 	strneh	r3, [sl, #12]
    ce14:	e59d0020 	ldr	r0, [sp, #32]
    ce18:	e28dde6b 	add	sp, sp, #1712	; 0x6b0
    ce1c:	e8bd8ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ce20:	e58d4018 	str	r4, [sp, #24]
    ce24:	e3a03000 	mov	r3, #0	; 0x0
    ce28:	e3a04000 	mov	r4, #0	; 0x0
    ce2c:	e3a06000 	mov	r6, #0	; 0x0
    ce30:	e28d8e61 	add	r8, sp, #1552	; 0x610
    ce34:	e58d3048 	str	r3, [sp, #72]
    ce38:	e58d404c 	str	r4, [sp, #76]
    ce3c:	e58d6020 	str	r6, [sp, #32]
    ce40:	e58d6030 	str	r6, [sp, #48]
    ce44:	e58d6040 	str	r6, [sp, #64]
    ce48:	e58d6044 	str	r6, [sp, #68]
    ce4c:	e58d8678 	str	r8, [sp, #1656]
    ce50:	e58d6680 	str	r6, [sp, #1664]
    ce54:	e58d667c 	str	r6, [sp, #1660]
    ce58:	e1a05006 	mov	r5, r6
    ce5c:	e59d4018 	ldr	r4, [sp, #24]
    ce60:	e5d43000 	ldrb	r3, [r4]
    ce64:	e3530000 	cmp	r3, #0	; 0x0
    ce68:	13530025 	cmpne	r3, #37	; 0x25
    ce6c:	0a000017 	beq	ced0 <_vfprintf_r+0x1c8>
    ce70:	e59d2018 	ldr	r2, [sp, #24]
    ce74:	e5f23001 	ldrb	r3, [r2, #1]!
    ce78:	e3530000 	cmp	r3, #0	; 0x0
    ce7c:	13530025 	cmpne	r3, #37	; 0x25
    ce80:	1afffffb 	bne	ce74 <_vfprintf_r+0x16c>
    ce84:	e59d5018 	ldr	r5, [sp, #24]
    ce88:	e0527005 	subs	r7, r2, r5
    ce8c:	e1a04002 	mov	r4, r2
    ce90:	0a00000e 	beq	ced0 <_vfprintf_r+0x1c8>
    ce94:	e59d567c 	ldr	r5, [sp, #1660]
    ce98:	e59d6680 	ldr	r6, [sp, #1664]
    ce9c:	e2855001 	add	r5, r5, #1	; 0x1
    cea0:	e59dc018 	ldr	ip, [sp, #24]
    cea4:	e3550007 	cmp	r5, #7	; 0x7
    cea8:	e0866007 	add	r6, r6, r7
    ceac:	e588c000 	str	ip, [r8]
    ceb0:	e5887004 	str	r7, [r8, #4]
    ceb4:	e58d6680 	str	r6, [sp, #1664]
    ceb8:	e58d567c 	str	r5, [sp, #1660]
    cebc:	d2888008 	addle	r8, r8, #8	; 0x8
    cec0:	ca00041d 	bgt	df3c <prog+0xdef4>
    cec4:	e59d1020 	ldr	r1, [sp, #32]
    cec8:	e0811007 	add	r1, r1, r7
    cecc:	e58d1020 	str	r1, [sp, #32]
    ced0:	e5d43000 	ldrb	r3, [r4]
    ced4:	e3530000 	cmp	r3, #0	; 0x0
    ced8:	0a0006ef 	beq	ea9c <prog+0xea54>
    cedc:	e3a03000 	mov	r3, #0	; 0x0
    cee0:	e5cd36af 	strb	r3, [sp, #1711]
    cee4:	e58d3024 	str	r3, [sp, #36]
    cee8:	e3a02000 	mov	r2, #0	; 0x0
    ceec:	e5d43001 	ldrb	r3, [r4, #1]
    cef0:	e2844001 	add	r4, r4, #1	; 0x1
    cef4:	e58d4018 	str	r4, [sp, #24]
    cef8:	e58d2054 	str	r2, [sp, #84]
    cefc:	e3e06000 	mvn	r6, #0	; 0x0
    cf00:	e59dc018 	ldr	ip, [sp, #24]
    cf04:	e28cc001 	add	ip, ip, #1	; 0x1
    cf08:	e58dc018 	str	ip, [sp, #24]
    cf0c:	e1a07003 	mov	r7, r3
    cf10:	e2473020 	sub	r3, r7, #32	; 0x20
    cf14:	e3530058 	cmp	r3, #88	; 0x58
    cf18:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    cf1c:	ea000198 	b	d584 <prog+0xd53c>
    cf20:	0000d39c 	muleq	r0, ip, r3
    cf24:	0000d584 	andeq	sp, r0, r4, lsl #11
    cf28:	0000d584 	andeq	sp, r0, r4, lsl #11
    cf2c:	0000d3b4 	streqh	sp, [r0], -r4
    cf30:	0000d584 	andeq	sp, r0, r4, lsl #11
    cf34:	0000d584 	andeq	sp, r0, r4, lsl #11
    cf38:	0000d584 	andeq	sp, r0, r4, lsl #11
    cf3c:	0000d584 	andeq	sp, r0, r4, lsl #11
    cf40:	0000d584 	andeq	sp, r0, r4, lsl #11
    cf44:	0000d584 	andeq	sp, r0, r4, lsl #11
    cf48:	0000d3cc 	andeq	sp, r0, ip, asr #7
    cf4c:	0000d3f0 	streqd	sp, [r0], -r0
    cf50:	0000d584 	andeq	sp, r0, r4, lsl #11
    cf54:	0000d384 	andeq	sp, r0, r4, lsl #7
    cf58:	0000dab0 	streqh	sp, [r0], -r0
    cf5c:	0000d584 	andeq	sp, r0, r4, lsl #11
    cf60:	0000da68 	andeq	sp, r0, r8, ror #20
    cf64:	0000da80 	andeq	sp, r0, r0, lsl #21
    cf68:	0000da80 	andeq	sp, r0, r0, lsl #21
    cf6c:	0000da80 	andeq	sp, r0, r0, lsl #21
    cf70:	0000da80 	andeq	sp, r0, r0, lsl #21
    cf74:	0000da80 	andeq	sp, r0, r0, lsl #21
    cf78:	0000da80 	andeq	sp, r0, r0, lsl #21
    cf7c:	0000da80 	andeq	sp, r0, r0, lsl #21
    cf80:	0000da80 	andeq	sp, r0, r0, lsl #21
    cf84:	0000da80 	andeq	sp, r0, r0, lsl #21
    cf88:	0000d584 	andeq	sp, r0, r4, lsl #11
    cf8c:	0000d584 	andeq	sp, r0, r4, lsl #11
    cf90:	0000d584 	andeq	sp, r0, r4, lsl #11
    cf94:	0000d584 	andeq	sp, r0, r4, lsl #11
    cf98:	0000d584 	andeq	sp, r0, r4, lsl #11
    cf9c:	0000d584 	andeq	sp, r0, r4, lsl #11
    cfa0:	0000d584 	andeq	sp, r0, r4, lsl #11
    cfa4:	0000d584 	andeq	sp, r0, r4, lsl #11
    cfa8:	0000d584 	andeq	sp, r0, r4, lsl #11
    cfac:	0000d458 	andeq	sp, r0, r8, asr r4
    cfb0:	0000d0f0 	streqd	sp, [r0], -r0
    cfb4:	0000d4d4 	ldreqd	sp, [r0], -r4
    cfb8:	0000d4d4 	ldreqd	sp, [r0], -r4
    cfbc:	0000d4d4 	ldreqd	sp, [r0], -r4
    cfc0:	0000d584 	andeq	sp, r0, r4, lsl #11
    cfc4:	0000d584 	andeq	sp, r0, r4, lsl #11
    cfc8:	0000d584 	andeq	sp, r0, r4, lsl #11
    cfcc:	0000d584 	andeq	sp, r0, r4, lsl #11
    cfd0:	0000da50 	andeq	sp, r0, r0, asr sl
    cfd4:	0000d584 	andeq	sp, r0, r4, lsl #11
    cfd8:	0000d584 	andeq	sp, r0, r4, lsl #11
    cfdc:	0000d188 	andeq	sp, r0, r8, lsl #3
    cfe0:	0000d584 	andeq	sp, r0, r4, lsl #11
    cfe4:	0000d584 	andeq	sp, r0, r4, lsl #11
    cfe8:	0000d584 	andeq	sp, r0, r4, lsl #11
    cfec:	0000d8a8 	andeq	sp, r0, r8, lsr #17
    cff0:	0000d584 	andeq	sp, r0, r4, lsl #11
    cff4:	0000d340 	andeq	sp, r0, r0, asr #6
    cff8:	0000d584 	andeq	sp, r0, r4, lsl #11
    cffc:	0000d584 	andeq	sp, r0, r4, lsl #11
    d000:	0000d404 	andeq	sp, r0, r4, lsl #8
    d004:	0000d584 	andeq	sp, r0, r4, lsl #11
    d008:	0000d584 	andeq	sp, r0, r4, lsl #11
    d00c:	0000d584 	andeq	sp, r0, r4, lsl #11
    d010:	0000d584 	andeq	sp, r0, r4, lsl #11
    d014:	0000d584 	andeq	sp, r0, r4, lsl #11
    d018:	0000d584 	andeq	sp, r0, r4, lsl #11
    d01c:	0000d584 	andeq	sp, r0, r4, lsl #11
    d020:	0000d584 	andeq	sp, r0, r4, lsl #11
    d024:	0000d584 	andeq	sp, r0, r4, lsl #11
    d028:	0000d584 	andeq	sp, r0, r4, lsl #11
    d02c:	0000d458 	andeq	sp, r0, r8, asr r4
    d030:	0000d0fc 	streqd	sp, [r0], -ip
    d034:	0000d4d4 	ldreqd	sp, [r0], -r4
    d038:	0000d4d4 	ldreqd	sp, [r0], -r4
    d03c:	0000d4d4 	ldreqd	sp, [r0], -r4
    d040:	0000d56c 	andeq	sp, r0, ip, ror #10
    d044:	0000d0fc 	streqd	sp, [r0], -ip
    d048:	0000d584 	andeq	sp, r0, r4, lsl #11
    d04c:	0000d584 	andeq	sp, r0, r4, lsl #11
    d050:	0000d9dc 	ldreqd	sp, [r0], -ip
    d054:	0000d584 	andeq	sp, r0, r4, lsl #11
    d058:	0000da0c 	andeq	sp, r0, ip, lsl #20
    d05c:	0000d194 	muleq	r0, r4, r1
    d060:	0000d864 	andeq	sp, r0, r4, ror #16
    d064:	0000d890 	muleq	r0, r0, r8
    d068:	0000d584 	andeq	sp, r0, r4, lsl #11
    d06c:	0000d8a8 	andeq	sp, r0, r8, lsr #17
    d070:	0000d584 	andeq	sp, r0, r4, lsl #11
    d074:	0000d34c 	andeq	sp, r0, ip, asr #6
    d078:	0000d584 	andeq	sp, r0, r4, lsl #11
    d07c:	0000d584 	andeq	sp, r0, r4, lsl #11
    d080:	0000d858 	andeq	sp, r0, r8, asr r8
    d084:	e1a00001 	mov	r0, r1
    d088:	ebfff938 	bl	b570 <__sinit>
    d08c:	eaffff2c 	b	cd44 <_vfprintf_r+0x3c>
    d090:	e1a0000a 	mov	r0, sl
    d094:	eb0008b4 	bl	f36c <__swsetup>
    d098:	e3500000 	cmp	r0, #0	; 0x0
    d09c:	1a000010 	bne	d0e4 <prog+0xd09c>
    d0a0:	e1dac0bc 	ldrh	ip, [sl, #12]
    d0a4:	eaffff2c 	b	cd5c <_vfprintf_r+0x54>
    d0a8:	e28d1e67 	add	r1, sp, #1648	; 0x670
    d0ac:	e1a0000a 	mov	r0, sl
    d0b0:	e2811008 	add	r1, r1, #8	; 0x8
    d0b4:	ebffff03 	bl	ccc8 <__sprint>
    d0b8:	e3500000 	cmp	r0, #0	; 0x0
    d0bc:	0a0001d8 	beq	d824 <prog+0xd7dc>
    d0c0:	e59d1044 	ldr	r1, [sp, #68]
    d0c4:	e3510000 	cmp	r1, #0	; 0x0
    d0c8:	0a000002 	beq	d0d8 <prog+0xd090>
    d0cc:	e59d0010 	ldr	r0, [sp, #16]
    d0d0:	e59d1044 	ldr	r1, [sp, #68]
    d0d4:	eb000eff 	bl	10cd8 <_free_r>
    d0d8:	e1da30bc 	ldrh	r3, [sl, #12]
    d0dc:	e3130040 	tst	r3, #64	; 0x40
    d0e0:	0affff4b 	beq	ce14 <_vfprintf_r+0x10c>
    d0e4:	e3e02000 	mvn	r2, #0	; 0x0
    d0e8:	e58d2020 	str	r2, [sp, #32]
    d0ec:	eaffff48 	b	ce14 <_vfprintf_r+0x10c>
    d0f0:	e59d3054 	ldr	r3, [sp, #84]
    d0f4:	e3833010 	orr	r3, r3, #16	; 0x10
    d0f8:	e58d3054 	str	r3, [sp, #84]
    d0fc:	e59d4054 	ldr	r4, [sp, #84]
    d100:	e3140010 	tst	r4, #16	; 0x10
    d104:	1a000002 	bne	d114 <prog+0xd0cc>
    d108:	e59d5054 	ldr	r5, [sp, #84]
    d10c:	e3150040 	tst	r5, #64	; 0x40
    d110:	1a000414 	bne	e168 <prog+0xe120>
    d114:	e5991000 	ldr	r1, [r9]
    d118:	e2899004 	add	r9, r9, #4	; 0x4
    d11c:	e58d9050 	str	r9, [sp, #80]
    d120:	e3510000 	cmp	r1, #0	; 0x0
    d124:	b3a0302d 	movlt	r3, #45	; 0x2d
    d128:	a3a02001 	movge	r2, #1	; 0x1
    d12c:	b2611000 	rsblt	r1, r1, #0	; 0x0
    d130:	b3a02001 	movlt	r2, #1	; 0x1
    d134:	b5cd36af 	strltb	r3, [sp, #1711]
    d138:	e3560000 	cmp	r6, #0	; 0x0
    d13c:	aa00001f 	bge	d1c0 <prog+0xd178>
    d140:	e3520001 	cmp	r2, #1	; 0x1
    d144:	0a000384 	beq	df5c <prog+0xdf14>
    d148:	328d0e5b 	addcc	r0, sp, #1456	; 0x5b0
    d14c:	32800004 	addcc	r0, r0, #4	; 0x4
    d150:	3a0002c1 	bcc	dc5c <prog+0xdc14>
    d154:	e3520002 	cmp	r2, #2	; 0x2
    d158:	0a00047e 	beq	e358 <prog+0xe310>
    d15c:	e59f0fcc 	ldr	r0, [pc, #4044]	; e130 <prog+0xe0e8>
    d160:	ebfffd84 	bl	c778 <strlen>
    d164:	e59fcfc4 	ldr	ip, [pc, #4036]	; e130 <prog+0xe0e8>
    d168:	e1560000 	cmp	r6, r0
    d16c:	a1a01006 	movge	r1, r6
    d170:	b1a01000 	movlt	r1, r0
    d174:	e1a0b000 	mov	fp, r0
    d178:	e58dc01c 	str	ip, [sp, #28]
    d17c:	e58d103c 	str	r1, [sp, #60]
    d180:	e58d6038 	str	r6, [sp, #56]
    d184:	ea00002c 	b	d23c <prog+0xd1f4>
    d188:	e59d2054 	ldr	r2, [sp, #84]
    d18c:	e3822010 	orr	r2, r2, #16	; 0x10
    d190:	e58d2054 	str	r2, [sp, #84]
    d194:	e59d3054 	ldr	r3, [sp, #84]
    d198:	e2132010 	ands	r2, r3, #16	; 0x10
    d19c:	0a0003a4 	beq	e034 <prog+0xdfec>
    d1a0:	e5991000 	ldr	r1, [r9]
    d1a4:	e2899004 	add	r9, r9, #4	; 0x4
    d1a8:	e58d9050 	str	r9, [sp, #80]
    d1ac:	e3a02000 	mov	r2, #0	; 0x0
    d1b0:	e3a03000 	mov	r3, #0	; 0x0
    d1b4:	e3560000 	cmp	r6, #0	; 0x0
    d1b8:	e5cd36af 	strb	r3, [sp, #1711]
    d1bc:	baffffdf 	blt	d140 <prog+0xd0f8>
    d1c0:	e59d3054 	ldr	r3, [sp, #84]
    d1c4:	e3560000 	cmp	r6, #0	; 0x0
    d1c8:	03510000 	cmpeq	r1, #0	; 0x0
    d1cc:	e3c33080 	bic	r3, r3, #128	; 0x80
    d1d0:	e58d3054 	str	r3, [sp, #84]
    d1d4:	1affffd9 	bne	d140 <prog+0xd0f8>
    d1d8:	e3520000 	cmp	r2, #0	; 0x0
    d1dc:	128d2e5b 	addne	r2, sp, #1456	; 0x5b0
    d1e0:	12822004 	addne	r2, r2, #4	; 0x4
    d1e4:	158d201c 	strne	r2, [sp, #28]
    d1e8:	1a000009 	bne	d214 <prog+0xd1cc>
    d1ec:	e59d3054 	ldr	r3, [sp, #84]
    d1f0:	e3130001 	tst	r3, #1	; 0x1
    d1f4:	028d4e5b 	addeq	r4, sp, #1456	; 0x5b0
    d1f8:	128d5e5b 	addne	r5, sp, #1456	; 0x5b0
    d1fc:	02844004 	addeq	r4, r4, #4	; 0x4
    d200:	13a03030 	movne	r3, #48	; 0x30
    d204:	12855003 	addne	r5, r5, #3	; 0x3
    d208:	058d401c 	streq	r4, [sp, #28]
    d20c:	15cd35b3 	strneb	r3, [sp, #1459]
    d210:	158d501c 	strne	r5, [sp, #28]
    d214:	e28d5e45 	add	r5, sp, #1104	; 0x450
    d218:	e59dc01c 	ldr	ip, [sp, #28]
    d21c:	e2855008 	add	r5, r5, #8	; 0x8
    d220:	e06c3005 	rsb	r3, ip, r5
    d224:	e283bf57 	add	fp, r3, #348	; 0x15c
    d228:	e156000b 	cmp	r6, fp
    d22c:	a1a01006 	movge	r1, r6
    d230:	b1a0100b 	movlt	r1, fp
    d234:	e58d103c 	str	r1, [sp, #60]
    d238:	e58d6038 	str	r6, [sp, #56]
    d23c:	e5dd36af 	ldrb	r3, [sp, #1711]
    d240:	e3530000 	cmp	r3, #0	; 0x0
    d244:	0a0000dc 	beq	d5bc <prog+0xd574>
    d248:	e59d103c 	ldr	r1, [sp, #60]
    d24c:	e59d4054 	ldr	r4, [sp, #84]
    d250:	e2811001 	add	r1, r1, #1	; 0x1
    d254:	e2144084 	ands	r4, r4, #132	; 0x84
    d258:	e58d103c 	str	r1, [sp, #60]
    d25c:	e58d4014 	str	r4, [sp, #20]
    d260:	1a0000de 	bne	d5e0 <prog+0xd598>
    d264:	e59d5024 	ldr	r5, [sp, #36]
    d268:	e59dc03c 	ldr	ip, [sp, #60]
    d26c:	e06c4005 	rsb	r4, ip, r5
    d270:	e3540000 	cmp	r4, #0	; 0x0
    d274:	da0000d9 	ble	d5e0 <prog+0xd598>
    d278:	e3540010 	cmp	r4, #16	; 0x10
    d27c:	da000484 	ble	e494 <prog+0xe44c>
    d280:	e59d6680 	ldr	r6, [sp, #1664]
    d284:	e59d567c 	ldr	r5, [sp, #1660]
    d288:	e59f9ec8 	ldr	r9, [pc, #3784]	; e158 <prog+0xe110>
    d28c:	ea000002 	b	d29c <prog+0xd254>
    d290:	e2444010 	sub	r4, r4, #16	; 0x10
    d294:	e3540010 	cmp	r4, #16	; 0x10
    d298:	da000015 	ble	d2f4 <prog+0xd2ac>
    d29c:	e2855001 	add	r5, r5, #1	; 0x1
    d2a0:	e28d1e67 	add	r1, sp, #1648	; 0x670
    d2a4:	e2866010 	add	r6, r6, #16	; 0x10
    d2a8:	e3a03010 	mov	r3, #16	; 0x10
    d2ac:	e3550007 	cmp	r5, #7	; 0x7
    d2b0:	e5883004 	str	r3, [r8, #4]
    d2b4:	e5889000 	str	r9, [r8]
    d2b8:	e1a0000a 	mov	r0, sl
    d2bc:	e2811008 	add	r1, r1, #8	; 0x8
    d2c0:	e2888008 	add	r8, r8, #8	; 0x8
    d2c4:	e58d6680 	str	r6, [sp, #1664]
    d2c8:	e58d567c 	str	r5, [sp, #1660]
    d2cc:	daffffef 	ble	d290 <prog+0xd248>
    d2d0:	ebfffe7c 	bl	ccc8 <__sprint>
    d2d4:	e3500000 	cmp	r0, #0	; 0x0
    d2d8:	1affff78 	bne	d0c0 <prog+0xd078>
    d2dc:	e2444010 	sub	r4, r4, #16	; 0x10
    d2e0:	e3540010 	cmp	r4, #16	; 0x10
    d2e4:	e28d8e61 	add	r8, sp, #1552	; 0x610
    d2e8:	e59d6680 	ldr	r6, [sp, #1664]
    d2ec:	e59d567c 	ldr	r5, [sp, #1660]
    d2f0:	caffffe9 	bgt	d29c <prog+0xd254>
    d2f4:	e2855001 	add	r5, r5, #1	; 0x1
    d2f8:	e0866004 	add	r6, r6, r4
    d2fc:	e3550007 	cmp	r5, #7	; 0x7
    d300:	e5889000 	str	r9, [r8]
    d304:	e5884004 	str	r4, [r8, #4]
    d308:	e58d6680 	str	r6, [sp, #1664]
    d30c:	e58d567c 	str	r5, [sp, #1660]
    d310:	d2888008 	addle	r8, r8, #8	; 0x8
    d314:	da0000b3 	ble	d5e8 <prog+0xd5a0>
    d318:	e28d1e67 	add	r1, sp, #1648	; 0x670
    d31c:	e1a0000a 	mov	r0, sl
    d320:	e2811008 	add	r1, r1, #8	; 0x8
    d324:	ebfffe67 	bl	ccc8 <__sprint>
    d328:	e3500000 	cmp	r0, #0	; 0x0
    d32c:	1affff63 	bne	d0c0 <prog+0xd078>
    d330:	e59d6680 	ldr	r6, [sp, #1664]
    d334:	e59d567c 	ldr	r5, [sp, #1660]
    d338:	e28d8e61 	add	r8, sp, #1552	; 0x610
    d33c:	ea0000a9 	b	d5e8 <prog+0xd5a0>
    d340:	e59d1054 	ldr	r1, [sp, #84]
    d344:	e3811010 	orr	r1, r1, #16	; 0x10
    d348:	e58d1054 	str	r1, [sp, #84]
    d34c:	e59d2054 	ldr	r2, [sp, #84]
    d350:	e3120010 	tst	r2, #16	; 0x10
    d354:	1a000002 	bne	d364 <prog+0xd31c>
    d358:	e59d3054 	ldr	r3, [sp, #84]
    d35c:	e3130040 	tst	r3, #64	; 0x40
    d360:	1a00036b 	bne	e114 <prog+0xe0cc>
    d364:	e5991000 	ldr	r1, [r9]
    d368:	e3a02001 	mov	r2, #1	; 0x1
    d36c:	e2899004 	add	r9, r9, #4	; 0x4
    d370:	e58d9050 	str	r9, [sp, #80]
    d374:	eaffff8d 	b	d1b0 <prog+0xd168>
    d378:	e26cc000 	rsb	ip, ip, #0	; 0x0
    d37c:	e58dc024 	str	ip, [sp, #36]
    d380:	e1a09002 	mov	r9, r2
    d384:	e59d1018 	ldr	r1, [sp, #24]
    d388:	e59d2054 	ldr	r2, [sp, #84]
    d38c:	e5d13000 	ldrb	r3, [r1]
    d390:	e3822004 	orr	r2, r2, #4	; 0x4
    d394:	e58d2054 	str	r2, [sp, #84]
    d398:	eafffed8 	b	cf00 <_vfprintf_r+0x1f8>
    d39c:	e5dd36af 	ldrb	r3, [sp, #1711]
    d3a0:	e3530000 	cmp	r3, #0	; 0x0
    d3a4:	0a000355 	beq	e100 <prog+0xe0b8>
    d3a8:	e59d5018 	ldr	r5, [sp, #24]
    d3ac:	e5d53000 	ldrb	r3, [r5]
    d3b0:	eafffed2 	b	cf00 <_vfprintf_r+0x1f8>
    d3b4:	e59d4018 	ldr	r4, [sp, #24]
    d3b8:	e59d5054 	ldr	r5, [sp, #84]
    d3bc:	e5d43000 	ldrb	r3, [r4]
    d3c0:	e3855001 	orr	r5, r5, #1	; 0x1
    d3c4:	e58d5054 	str	r5, [sp, #84]
    d3c8:	eafffecc 	b	cf00 <_vfprintf_r+0x1f8>
    d3cc:	e599c000 	ldr	ip, [r9]
    d3d0:	e35c0000 	cmp	ip, #0	; 0x0
    d3d4:	e58dc024 	str	ip, [sp, #36]
    d3d8:	e2892004 	add	r2, r9, #4	; 0x4
    d3dc:	baffffe5 	blt	d378 <prog+0xd330>
    d3e0:	e59d4018 	ldr	r4, [sp, #24]
    d3e4:	e5d43000 	ldrb	r3, [r4]
    d3e8:	e1a09002 	mov	r9, r2
    d3ec:	eafffec3 	b	cf00 <_vfprintf_r+0x1f8>
    d3f0:	e3a0302b 	mov	r3, #43	; 0x2b
    d3f4:	e5cd36af 	strb	r3, [sp, #1711]
    d3f8:	e59d4018 	ldr	r4, [sp, #24]
    d3fc:	e5d43000 	ldrb	r3, [r4]
    d400:	eafffebe 	b	cf00 <_vfprintf_r+0x1f8>
    d404:	e59f4d28 	ldr	r4, [pc, #3368]	; e134 <prog+0xe0ec>
    d408:	e58d4040 	str	r4, [sp, #64]
    d40c:	e59d5054 	ldr	r5, [sp, #84]
    d410:	e3150010 	tst	r5, #16	; 0x10
    d414:	1a000002 	bne	d424 <prog+0xd3dc>
    d418:	e59dc054 	ldr	ip, [sp, #84]
    d41c:	e31c0040 	tst	ip, #64	; 0x40
    d420:	1a000356 	bne	e180 <prog+0xe138>
    d424:	e5991000 	ldr	r1, [r9]
    d428:	e2899004 	add	r9, r9, #4	; 0x4
    d42c:	e58d9050 	str	r9, [sp, #80]
    d430:	e59d3054 	ldr	r3, [sp, #84]
    d434:	e3510000 	cmp	r1, #0	; 0x0
    d438:	03a03000 	moveq	r3, #0	; 0x0
    d43c:	12033001 	andne	r3, r3, #1	; 0x1
    d440:	e3530000 	cmp	r3, #0	; 0x0
    d444:	159d2054 	ldrne	r2, [sp, #84]
    d448:	13822002 	orrne	r2, r2, #2	; 0x2
    d44c:	158d2054 	strne	r2, [sp, #84]
    d450:	e3a02002 	mov	r2, #2	; 0x2
    d454:	eaffff55 	b	d1b0 <prog+0xd168>
    d458:	e3570043 	cmp	r7, #67	; 0x43
    d45c:	0a000002 	beq	d46c <prog+0xd424>
    d460:	e59d1054 	ldr	r1, [sp, #84]
    d464:	e3110010 	tst	r1, #16	; 0x10
    d468:	0a00037a 	beq	e258 <prog+0xe210>
    d46c:	e28d4d1a 	add	r4, sp, #1664	; 0x680
    d470:	e284400c 	add	r4, r4, #12	; 0xc
    d474:	e28d5e45 	add	r5, sp, #1104	; 0x450
    d478:	e3a01000 	mov	r1, #0	; 0x0
    d47c:	e3a02008 	mov	r2, #8	; 0x8
    d480:	e1a00004 	mov	r0, r4
    d484:	e2855008 	add	r5, r5, #8	; 0x8
    d488:	ebfffb29 	bl	c134 <memset>
    d48c:	e1a03004 	mov	r3, r4
    d490:	e59d0010 	ldr	r0, [sp, #16]
    d494:	e1a01005 	mov	r1, r5
    d498:	e5992000 	ldr	r2, [r9]
    d49c:	eb00062c 	bl	ed54 <_wcrtomb_r>
    d4a0:	e3700001 	cmn	r0, #1	; 0x1
    d4a4:	e1a0b000 	mov	fp, r0
    d4a8:	0a000565 	beq	ea44 <prog+0xe9fc>
    d4ac:	e2899004 	add	r9, r9, #4	; 0x4
    d4b0:	e58d9050 	str	r9, [sp, #80]
    d4b4:	e35b0000 	cmp	fp, #0	; 0x0
    d4b8:	a1a0200b 	movge	r2, fp
    d4bc:	b3a02000 	movlt	r2, #0	; 0x0
    d4c0:	e3a03000 	mov	r3, #0	; 0x0
    d4c4:	e58d203c 	str	r2, [sp, #60]
    d4c8:	e58d501c 	str	r5, [sp, #28]
    d4cc:	e5cd36af 	strb	r3, [sp, #1711]
    d4d0:	ea000037 	b	d5b4 <prog+0xd56c>
    d4d4:	e3760001 	cmn	r6, #1	; 0x1
    d4d8:	02866007 	addeq	r6, r6, #7	; 0x7
    d4dc:	0a000002 	beq	d4ec <prog+0xd4a4>
    d4e0:	e3570047 	cmp	r7, #71	; 0x47
    d4e4:	13570067 	cmpne	r7, #103	; 0x67
    d4e8:	0a000362 	beq	e278 <prog+0xe230>
    d4ec:	e59dc054 	ldr	ip, [sp, #84]
    d4f0:	e31c0008 	tst	ip, #8	; 0x8
    d4f4:	0a0002fb 	beq	e0e8 <prog+0xe0a0>
    d4f8:	e8990006 	ldmia	r9, {r1, r2}
    d4fc:	e2899008 	add	r9, r9, #8	; 0x8
    d500:	e58d1048 	str	r1, [sp, #72]
    d504:	e58d204c 	str	r2, [sp, #76]
    d508:	e58d9050 	str	r9, [sp, #80]
    d50c:	e28d0048 	add	r0, sp, #72	; 0x48
    d510:	e8900003 	ldmia	r0, {r0, r1}
    d514:	eb00150f 	bl	12958 <isinf>
    d518:	e2504000 	subs	r4, r0, #0	; 0x0
    d51c:	0a0003c4 	beq	e434 <prog+0xe3ec>
    d520:	e3a03000 	mov	r3, #0	; 0x0
    d524:	e28d0048 	add	r0, sp, #72	; 0x48
    d528:	e8900003 	ldmia	r0, {r0, r1}
    d52c:	e3a02000 	mov	r2, #0	; 0x0
    d530:	ebfff5b8 	bl	ac18 <__ltdf2>
    d534:	e3500000 	cmp	r0, #0	; 0x0
    d538:	b3a0302d 	movlt	r3, #45	; 0x2d
    d53c:	b5cd36af 	strltb	r3, [sp, #1711]
    d540:	e2473045 	sub	r3, r7, #69	; 0x45
    d544:	e3530002 	cmp	r3, #2	; 0x2
    d548:	8a0003a8 	bhi	e3f0 <prog+0xe3a8>
    d54c:	e3a03003 	mov	r3, #3	; 0x3
    d550:	e59f4be0 	ldr	r4, [pc, #3040]	; e138 <prog+0xe0f0>
    d554:	e3a05000 	mov	r5, #0	; 0x0
    d558:	e1a0b003 	mov	fp, r3
    d55c:	e58d303c 	str	r3, [sp, #60]
    d560:	e58d401c 	str	r4, [sp, #28]
    d564:	e58d5038 	str	r5, [sp, #56]
    d568:	eaffff33 	b	d23c <prog+0xd1f4>
    d56c:	e59d5018 	ldr	r5, [sp, #24]
    d570:	e59dc054 	ldr	ip, [sp, #84]
    d574:	e5d53000 	ldrb	r3, [r5]
    d578:	e38cc040 	orr	ip, ip, #64	; 0x40
    d57c:	e58dc054 	str	ip, [sp, #84]
    d580:	eafffe5e 	b	cf00 <_vfprintf_r+0x1f8>
    d584:	e3570000 	cmp	r7, #0	; 0x0
    d588:	0a000543 	beq	ea9c <prog+0xea54>
    d58c:	e28d3e45 	add	r3, sp, #1104	; 0x450
    d590:	e2833008 	add	r3, r3, #8	; 0x8
    d594:	e3a02001 	mov	r2, #1	; 0x1
    d598:	e58d301c 	str	r3, [sp, #28]
    d59c:	e3a03000 	mov	r3, #0	; 0x0
    d5a0:	e58d203c 	str	r2, [sp, #60]
    d5a4:	e58d9050 	str	r9, [sp, #80]
    d5a8:	e5cd36af 	strb	r3, [sp, #1711]
    d5ac:	e5cd7458 	strb	r7, [sp, #1112]
    d5b0:	e1a0b002 	mov	fp, r2
    d5b4:	e3a05000 	mov	r5, #0	; 0x0
    d5b8:	e58d5038 	str	r5, [sp, #56]
    d5bc:	e59d2054 	ldr	r2, [sp, #84]
    d5c0:	e3120002 	tst	r2, #2	; 0x2
    d5c4:	159d303c 	ldrne	r3, [sp, #60]
    d5c8:	e59d4054 	ldr	r4, [sp, #84]
    d5cc:	12833002 	addne	r3, r3, #2	; 0x2
    d5d0:	158d303c 	strne	r3, [sp, #60]
    d5d4:	e2144084 	ands	r4, r4, #132	; 0x84
    d5d8:	e58d4014 	str	r4, [sp, #20]
    d5dc:	0affff20 	beq	d264 <prog+0xd21c>
    d5e0:	e59d6680 	ldr	r6, [sp, #1664]
    d5e4:	e59d567c 	ldr	r5, [sp, #1660]
    d5e8:	e5dd36af 	ldrb	r3, [sp, #1711]
    d5ec:	e3530000 	cmp	r3, #0	; 0x0
    d5f0:	0a000147 	beq	db14 <prog+0xdacc>
    d5f4:	e2855001 	add	r5, r5, #1	; 0x1
    d5f8:	e28d3e6a 	add	r3, sp, #1696	; 0x6a0
    d5fc:	e2866001 	add	r6, r6, #1	; 0x1
    d600:	e283300f 	add	r3, r3, #15	; 0xf
    d604:	e3a02001 	mov	r2, #1	; 0x1
    d608:	e3550007 	cmp	r5, #7	; 0x7
    d60c:	e5883000 	str	r3, [r8]
    d610:	e5882004 	str	r2, [r8, #4]
    d614:	e58d6680 	str	r6, [sp, #1664]
    d618:	e58d567c 	str	r5, [sp, #1660]
    d61c:	ca00014d 	bgt	db58 <prog+0xdb10>
    d620:	e2888008 	add	r8, r8, #8	; 0x8
    d624:	e59d2014 	ldr	r2, [sp, #20]
    d628:	e3520080 	cmp	r2, #128	; 0x80
    d62c:	0a000155 	beq	db88 <prog+0xdb40>
    d630:	e59d1038 	ldr	r1, [sp, #56]
    d634:	e06b4001 	rsb	r4, fp, r1
    d638:	e3540000 	cmp	r4, #0	; 0x0
    d63c:	da00002e 	ble	d6fc <prog+0xd6b4>
    d640:	e3540010 	cmp	r4, #16	; 0x10
    d644:	da000367 	ble	e3e8 <prog+0xe3a0>
    d648:	e59f9b0c 	ldr	r9, [pc, #2828]	; e15c <prog+0xe114>
    d64c:	ea000002 	b	d65c <prog+0xd614>
    d650:	e2444010 	sub	r4, r4, #16	; 0x10
    d654:	e3540010 	cmp	r4, #16	; 0x10
    d658:	da000015 	ble	d6b4 <prog+0xd66c>
    d65c:	e2855001 	add	r5, r5, #1	; 0x1
    d660:	e28d1e67 	add	r1, sp, #1648	; 0x670
    d664:	e2866010 	add	r6, r6, #16	; 0x10
    d668:	e3a03010 	mov	r3, #16	; 0x10
    d66c:	e3550007 	cmp	r5, #7	; 0x7
    d670:	e5883004 	str	r3, [r8, #4]
    d674:	e5889000 	str	r9, [r8]
    d678:	e1a0000a 	mov	r0, sl
    d67c:	e2811008 	add	r1, r1, #8	; 0x8
    d680:	e2888008 	add	r8, r8, #8	; 0x8
    d684:	e58d6680 	str	r6, [sp, #1664]
    d688:	e58d567c 	str	r5, [sp, #1660]
    d68c:	daffffef 	ble	d650 <prog+0xd608>
    d690:	ebfffd8c 	bl	ccc8 <__sprint>
    d694:	e3500000 	cmp	r0, #0	; 0x0
    d698:	1afffe88 	bne	d0c0 <prog+0xd078>
    d69c:	e2444010 	sub	r4, r4, #16	; 0x10
    d6a0:	e3540010 	cmp	r4, #16	; 0x10
    d6a4:	e28d8e61 	add	r8, sp, #1552	; 0x610
    d6a8:	e59d6680 	ldr	r6, [sp, #1664]
    d6ac:	e59d567c 	ldr	r5, [sp, #1660]
    d6b0:	caffffe9 	bgt	d65c <prog+0xd614>
    d6b4:	e2855001 	add	r5, r5, #1	; 0x1
    d6b8:	e0866004 	add	r6, r6, r4
    d6bc:	e3550007 	cmp	r5, #7	; 0x7
    d6c0:	e5889000 	str	r9, [r8]
    d6c4:	e5884004 	str	r4, [r8, #4]
    d6c8:	e58d6680 	str	r6, [sp, #1664]
    d6cc:	e58d567c 	str	r5, [sp, #1660]
    d6d0:	d2888008 	addle	r8, r8, #8	; 0x8
    d6d4:	da000008 	ble	d6fc <prog+0xd6b4>
    d6d8:	e28d1e67 	add	r1, sp, #1648	; 0x670
    d6dc:	e1a0000a 	mov	r0, sl
    d6e0:	e2811008 	add	r1, r1, #8	; 0x8
    d6e4:	ebfffd77 	bl	ccc8 <__sprint>
    d6e8:	e3500000 	cmp	r0, #0	; 0x0
    d6ec:	1afffe73 	bne	d0c0 <prog+0xd078>
    d6f0:	e59d6680 	ldr	r6, [sp, #1664]
    d6f4:	e59d567c 	ldr	r5, [sp, #1660]
    d6f8:	e28d8e61 	add	r8, sp, #1552	; 0x610
    d6fc:	e59d2054 	ldr	r2, [sp, #84]
    d700:	e3120c01 	tst	r2, #256	; 0x100
    d704:	1a000163 	bne	dc98 <prog+0xdc50>
    d708:	e2855001 	add	r5, r5, #1	; 0x1
    d70c:	e59d301c 	ldr	r3, [sp, #28]
    d710:	e086600b 	add	r6, r6, fp
    d714:	e3550007 	cmp	r5, #7	; 0x7
    d718:	e8880808 	stmia	r8, {r3, fp}
    d71c:	e58d6680 	str	r6, [sp, #1664]
    d720:	e58d567c 	str	r5, [sp, #1660]
    d724:	d288c008 	addle	ip, r8, #8	; 0x8
    d728:	ca0001c6 	bgt	de48 <prog+0xde00>
    d72c:	e59d1054 	ldr	r1, [sp, #84]
    d730:	e3110004 	tst	r1, #4	; 0x4
    d734:	0a000031 	beq	d800 <prog+0xd7b8>
    d738:	e59d2024 	ldr	r2, [sp, #36]
    d73c:	e59d303c 	ldr	r3, [sp, #60]
    d740:	e0634002 	rsb	r4, r3, r2
    d744:	e3540000 	cmp	r4, #0	; 0x0
    d748:	da00002c 	ble	d800 <prog+0xd7b8>
    d74c:	e3540010 	cmp	r4, #16	; 0x10
    d750:	da000393 	ble	e5a4 <prog+0xe55c>
    d754:	e59d567c 	ldr	r5, [sp, #1660]
    d758:	e59f99f8 	ldr	r9, [pc, #2552]	; e158 <prog+0xe110>
    d75c:	ea000002 	b	d76c <prog+0xd724>
    d760:	e2444010 	sub	r4, r4, #16	; 0x10
    d764:	e3540010 	cmp	r4, #16	; 0x10
    d768:	da000015 	ble	d7c4 <prog+0xd77c>
    d76c:	e2855001 	add	r5, r5, #1	; 0x1
    d770:	e28d1e67 	add	r1, sp, #1648	; 0x670
    d774:	e2866010 	add	r6, r6, #16	; 0x10
    d778:	e3a03010 	mov	r3, #16	; 0x10
    d77c:	e3550007 	cmp	r5, #7	; 0x7
    d780:	e58c3004 	str	r3, [ip, #4]
    d784:	e58c9000 	str	r9, [ip]
    d788:	e1a0000a 	mov	r0, sl
    d78c:	e2811008 	add	r1, r1, #8	; 0x8
    d790:	e28cc008 	add	ip, ip, #8	; 0x8
    d794:	e58d6680 	str	r6, [sp, #1664]
    d798:	e58d567c 	str	r5, [sp, #1660]
    d79c:	daffffef 	ble	d760 <prog+0xd718>
    d7a0:	ebfffd48 	bl	ccc8 <__sprint>
    d7a4:	e3500000 	cmp	r0, #0	; 0x0
    d7a8:	1afffe44 	bne	d0c0 <prog+0xd078>
    d7ac:	e2444010 	sub	r4, r4, #16	; 0x10
    d7b0:	e3540010 	cmp	r4, #16	; 0x10
    d7b4:	e28dce61 	add	ip, sp, #1552	; 0x610
    d7b8:	e59d6680 	ldr	r6, [sp, #1664]
    d7bc:	e59d567c 	ldr	r5, [sp, #1660]
    d7c0:	caffffe9 	bgt	d76c <prog+0xd724>
    d7c4:	e2855001 	add	r5, r5, #1	; 0x1
    d7c8:	e0866004 	add	r6, r6, r4
    d7cc:	e3550007 	cmp	r5, #7	; 0x7
    d7d0:	e58c9000 	str	r9, [ip]
    d7d4:	e58c4004 	str	r4, [ip, #4]
    d7d8:	e58d6680 	str	r6, [sp, #1664]
    d7dc:	e58d567c 	str	r5, [sp, #1660]
    d7e0:	da000006 	ble	d800 <prog+0xd7b8>
    d7e4:	e28d1e67 	add	r1, sp, #1648	; 0x670
    d7e8:	e1a0000a 	mov	r0, sl
    d7ec:	e2811008 	add	r1, r1, #8	; 0x8
    d7f0:	ebfffd34 	bl	ccc8 <__sprint>
    d7f4:	e3500000 	cmp	r0, #0	; 0x0
    d7f8:	1afffe30 	bne	d0c0 <prog+0xd078>
    d7fc:	e59d6680 	ldr	r6, [sp, #1664]
    d800:	e28d4020 	add	r4, sp, #32	; 0x20
    d804:	e8940030 	ldmia	r4, {r4, r5}
    d808:	e59d803c 	ldr	r8, [sp, #60]
    d80c:	e1550008 	cmp	r5, r8
    d810:	a0844005 	addge	r4, r4, r5
    d814:	b0844008 	addlt	r4, r4, r8
    d818:	e3560000 	cmp	r6, #0	; 0x0
    d81c:	e58d4020 	str	r4, [sp, #32]
    d820:	1afffe20 	bne	d0a8 <prog+0xd060>
    d824:	e59dc044 	ldr	ip, [sp, #68]
    d828:	e3a05000 	mov	r5, #0	; 0x0
    d82c:	e35c0000 	cmp	ip, #0	; 0x0
    d830:	e58d567c 	str	r5, [sp, #1660]
    d834:	028d8e61 	addeq	r8, sp, #1552	; 0x610
    d838:	0a000004 	beq	d850 <prog+0xd808>
    d83c:	e1a0100c 	mov	r1, ip
    d840:	e59d0010 	ldr	r0, [sp, #16]
    d844:	eb000d23 	bl	10cd8 <_free_r>
    d848:	e58d5044 	str	r5, [sp, #68]
    d84c:	e28d8e61 	add	r8, sp, #1552	; 0x610
    d850:	e59d9050 	ldr	r9, [sp, #80]
    d854:	eafffd80 	b	ce5c <_vfprintf_r+0x154>
    d858:	e59f18dc 	ldr	r1, [pc, #2268]	; e13c <prog+0xe0f4>
    d85c:	e58d1040 	str	r1, [sp, #64]
    d860:	eafffee9 	b	d40c <prog+0xd3c4>
    d864:	e59dc054 	ldr	ip, [sp, #84]
    d868:	e5991000 	ldr	r1, [r9]
    d86c:	e59f58c8 	ldr	r5, [pc, #2248]	; e13c <prog+0xe0f4>
    d870:	e38cc002 	orr	ip, ip, #2	; 0x2
    d874:	e2899004 	add	r9, r9, #4	; 0x4
    d878:	e3a07078 	mov	r7, #120	; 0x78
    d87c:	e3a02002 	mov	r2, #2	; 0x2
    d880:	e58d5040 	str	r5, [sp, #64]
    d884:	e58dc054 	str	ip, [sp, #84]
    d888:	e58d9050 	str	r9, [sp, #80]
    d88c:	eafffe47 	b	d1b0 <prog+0xd168>
    d890:	e59d5018 	ldr	r5, [sp, #24]
    d894:	e59dc054 	ldr	ip, [sp, #84]
    d898:	e5d53000 	ldrb	r3, [r5]
    d89c:	e38cc010 	orr	ip, ip, #16	; 0x10
    d8a0:	e58dc054 	str	ip, [sp, #84]
    d8a4:	eafffd95 	b	cf00 <_vfprintf_r+0x1f8>
    d8a8:	e3a04000 	mov	r4, #0	; 0x0
    d8ac:	e5cd46af 	strb	r4, [sp, #1711]
    d8b0:	e5991000 	ldr	r1, [r9]
    d8b4:	e2899004 	add	r9, r9, #4	; 0x4
    d8b8:	e1510004 	cmp	r1, r4
    d8bc:	e58d101c 	str	r1, [sp, #28]
    d8c0:	e58d9050 	str	r9, [sp, #80]
    d8c4:	0a000330 	beq	e58c <prog+0xe544>
    d8c8:	e3570053 	cmp	r7, #83	; 0x53
    d8cc:	0a000002 	beq	d8dc <prog+0xd894>
    d8d0:	e59d2054 	ldr	r2, [sp, #84]
    d8d4:	e2125010 	ands	r5, r2, #16	; 0x10
    d8d8:	0a000269 	beq	e284 <prog+0xe23c>
    d8dc:	e28d9d1a 	add	r9, sp, #1664	; 0x680
    d8e0:	e59d301c 	ldr	r3, [sp, #28]
    d8e4:	e2899004 	add	r9, r9, #4	; 0x4
    d8e8:	e1a00009 	mov	r0, r9
    d8ec:	e1a01004 	mov	r1, r4
    d8f0:	e3a02008 	mov	r2, #8	; 0x8
    d8f4:	e58d36a4 	str	r3, [sp, #1700]
    d8f8:	ebfffa0d 	bl	c134 <memset>
    d8fc:	e3560000 	cmp	r6, #0	; 0x0
    d900:	ba000443 	blt	ea14 <prog+0xe9cc>
    d904:	e28d5e45 	add	r5, sp, #1104	; 0x450
    d908:	e1a0b004 	mov	fp, r4
    d90c:	e2855008 	add	r5, r5, #8	; 0x8
    d910:	e59d36a4 	ldr	r3, [sp, #1700]
    d914:	e793c004 	ldr	ip, [r3, r4]
    d918:	e35c0000 	cmp	ip, #0	; 0x0
    d91c:	e1a0200c 	mov	r2, ip
    d920:	e59d0010 	ldr	r0, [sp, #16]
    d924:	e1a01005 	mov	r1, r5
    d928:	e1a03009 	mov	r3, r9
    d92c:	0a000009 	beq	d958 <prog+0xd910>
    d930:	eb000507 	bl	ed54 <_wcrtomb_r>
    d934:	e3700001 	cmn	r0, #1	; 0x1
    d938:	e08b3000 	add	r3, fp, r0
    d93c:	0a000440 	beq	ea44 <prog+0xe9fc>
    d940:	e1560003 	cmp	r6, r3
    d944:	ba000003 	blt	d958 <prog+0xd910>
    d948:	e1a0b003 	mov	fp, r3
    d94c:	e2844004 	add	r4, r4, #4	; 0x4
    d950:	1affffee 	bne	d910 <prog+0xd8c8>
    d954:	e1a0b006 	mov	fp, r6
    d958:	e35b0000 	cmp	fp, #0	; 0x0
    d95c:	058db038 	streq	fp, [sp, #56]
    d960:	058db03c 	streq	fp, [sp, #60]
    d964:	0afffe34 	beq	d23c <prog+0xd1f4>
    d968:	e59d0010 	ldr	r0, [sp, #16]
    d96c:	e28b1001 	add	r1, fp, #1	; 0x1
    d970:	ebfff7c5 	bl	b88c <_malloc_r>
    d974:	e3500000 	cmp	r0, #0	; 0x0
    d978:	0a000431 	beq	ea44 <prog+0xe9fc>
    d97c:	e58d0044 	str	r0, [sp, #68]
    d980:	e3a01000 	mov	r1, #0	; 0x0
    d984:	e3a02008 	mov	r2, #8	; 0x8
    d988:	e1a00009 	mov	r0, r9
    d98c:	ebfff9e8 	bl	c134 <memset>
    d990:	e28d2e6a 	add	r2, sp, #1696	; 0x6a0
    d994:	e59d0010 	ldr	r0, [sp, #16]
    d998:	e59d1044 	ldr	r1, [sp, #68]
    d99c:	e2822004 	add	r2, r2, #4	; 0x4
    d9a0:	e1a0300b 	mov	r3, fp
    d9a4:	e58d9000 	str	r9, [sp]
    d9a8:	eb000509 	bl	edd4 <_wcsrtombs_r>
    d9ac:	e15b0000 	cmp	fp, r0
    d9b0:	1a000492 	bne	ec00 <prog+0xebb8>
    d9b4:	e3a03000 	mov	r3, #0	; 0x0
    d9b8:	e59dc044 	ldr	ip, [sp, #68]
    d9bc:	e15b0003 	cmp	fp, r3
    d9c0:	a1a0500b 	movge	r5, fp
    d9c4:	b1a05003 	movlt	r5, r3
    d9c8:	e58d503c 	str	r5, [sp, #60]
    d9cc:	e58d3038 	str	r3, [sp, #56]
    d9d0:	e58dc01c 	str	ip, [sp, #28]
    d9d4:	e7cc300b 	strb	r3, [ip, fp]
    d9d8:	eafffe17 	b	d23c <prog+0xd1f4>
    d9dc:	e59d1018 	ldr	r1, [sp, #24]
    d9e0:	e5d13000 	ldrb	r3, [r1]
    d9e4:	e353006c 	cmp	r3, #108	; 0x6c
    d9e8:	059d2054 	ldreq	r2, [sp, #84]
    d9ec:	159d4054 	ldrne	r4, [sp, #84]
    d9f0:	05f13001 	ldreqb	r3, [r1, #1]!
    d9f4:	03822010 	orreq	r2, r2, #16	; 0x10
    d9f8:	13844010 	orrne	r4, r4, #16	; 0x10
    d9fc:	058d1018 	streq	r1, [sp, #24]
    da00:	058d2054 	streq	r2, [sp, #84]
    da04:	158d4054 	strne	r4, [sp, #84]
    da08:	eafffd3c 	b	cf00 <_vfprintf_r+0x1f8>
    da0c:	e59d3054 	ldr	r3, [sp, #84]
    da10:	e3130010 	tst	r3, #16	; 0x10
    da14:	1a0001df 	bne	e198 <prog+0xe150>
    da18:	e59d5054 	ldr	r5, [sp, #84]
    da1c:	e3150040 	tst	r5, #64	; 0x40
    da20:	15993000 	ldrne	r3, [r9]
    da24:	05993000 	ldreq	r3, [r9]
    da28:	12899004 	addne	r9, r9, #4	; 0x4
    da2c:	02899004 	addeq	r9, r9, #4	; 0x4
    da30:	158d9050 	strne	r9, [sp, #80]
    da34:	058d9050 	streq	r9, [sp, #80]
    da38:	159dc020 	ldrne	ip, [sp, #32]
    da3c:	059d1020 	ldreq	r1, [sp, #32]
    da40:	e59d9050 	ldr	r9, [sp, #80]
    da44:	11c3c0b0 	strneh	ip, [r3]
    da48:	05831000 	streq	r1, [r3]
    da4c:	eafffd02 	b	ce5c <_vfprintf_r+0x154>
    da50:	e59d2018 	ldr	r2, [sp, #24]
    da54:	e59d4054 	ldr	r4, [sp, #84]
    da58:	e5d23000 	ldrb	r3, [r2]
    da5c:	e3844008 	orr	r4, r4, #8	; 0x8
    da60:	e58d4054 	str	r4, [sp, #84]
    da64:	eafffd25 	b	cf00 <_vfprintf_r+0x1f8>
    da68:	e59d5018 	ldr	r5, [sp, #24]
    da6c:	e59dc054 	ldr	ip, [sp, #84]
    da70:	e5d53000 	ldrb	r3, [r5]
    da74:	e38cc080 	orr	ip, ip, #128	; 0x80
    da78:	e58dc054 	str	ip, [sp, #84]
    da7c:	eafffd1f 	b	cf00 <_vfprintf_r+0x1f8>
    da80:	e3a03000 	mov	r3, #0	; 0x0
    da84:	e59d1018 	ldr	r1, [sp, #24]
    da88:	e0832103 	add	r2, r3, r3, lsl #2
    da8c:	e0872082 	add	r2, r7, r2, lsl #1
    da90:	e4d17001 	ldrb	r7, [r1], #1
    da94:	e2473030 	sub	r3, r7, #48	; 0x30
    da98:	e3530009 	cmp	r3, #9	; 0x9
    da9c:	e58d1018 	str	r1, [sp, #24]
    daa0:	e2423030 	sub	r3, r2, #48	; 0x30
    daa4:	9afffff6 	bls	da84 <prog+0xda3c>
    daa8:	e58d3024 	str	r3, [sp, #36]
    daac:	eafffd17 	b	cf10 <_vfprintf_r+0x208>
    dab0:	e59d2018 	ldr	r2, [sp, #24]
    dab4:	e4d23001 	ldrb	r3, [r2], #1
    dab8:	e353002a 	cmp	r3, #42	; 0x2a
    dabc:	0a000439 	beq	eba8 <prog+0xeb60>
    dac0:	e1a07003 	mov	r7, r3
    dac4:	e2433030 	sub	r3, r3, #48	; 0x30
    dac8:	e3530009 	cmp	r3, #9	; 0x9
    dacc:	83a06000 	movhi	r6, #0	; 0x0
    dad0:	8a00000d 	bhi	db0c <prog+0xdac4>
    dad4:	e59d1018 	ldr	r1, [sp, #24]
    dad8:	e3a02000 	mov	r2, #0	; 0x0
    dadc:	e0822102 	add	r2, r2, r2, lsl #2
    dae0:	e0872082 	add	r2, r7, r2, lsl #1
    dae4:	e5f17001 	ldrb	r7, [r1, #1]!
    dae8:	e2473030 	sub	r3, r7, #48	; 0x30
    daec:	e3530009 	cmp	r3, #9	; 0x9
    daf0:	e2422030 	sub	r2, r2, #48	; 0x30
    daf4:	9afffff8 	bls	dadc <prog+0xda94>
    daf8:	e3e03000 	mvn	r3, #0	; 0x0
    dafc:	e1520003 	cmp	r2, r3
    db00:	a1a06002 	movge	r6, r2
    db04:	b1a06003 	movlt	r6, r3
    db08:	e2812001 	add	r2, r1, #1	; 0x1
    db0c:	e58d2018 	str	r2, [sp, #24]
    db10:	eafffcfe 	b	cf10 <_vfprintf_r+0x208>
    db14:	e59d1054 	ldr	r1, [sp, #84]
    db18:	e3110002 	tst	r1, #2	; 0x2
    db1c:	0afffec0 	beq	d624 <prog+0xd5dc>
    db20:	e3a03030 	mov	r3, #48	; 0x30
    db24:	e5cd36ad 	strb	r3, [sp, #1709]
    db28:	e2855001 	add	r5, r5, #1	; 0x1
    db2c:	e28d3e6a 	add	r3, sp, #1696	; 0x6a0
    db30:	e2866002 	add	r6, r6, #2	; 0x2
    db34:	e283300d 	add	r3, r3, #13	; 0xd
    db38:	e3a02002 	mov	r2, #2	; 0x2
    db3c:	e3550007 	cmp	r5, #7	; 0x7
    db40:	e5cd76ae 	strb	r7, [sp, #1710]
    db44:	e58d6680 	str	r6, [sp, #1664]
    db48:	e5883000 	str	r3, [r8]
    db4c:	e5882004 	str	r2, [r8, #4]
    db50:	e58d567c 	str	r5, [sp, #1660]
    db54:	dafffeb1 	ble	d620 <prog+0xd5d8>
    db58:	e28d1e67 	add	r1, sp, #1648	; 0x670
    db5c:	e1a0000a 	mov	r0, sl
    db60:	e2811008 	add	r1, r1, #8	; 0x8
    db64:	ebfffc57 	bl	ccc8 <__sprint>
    db68:	e3500000 	cmp	r0, #0	; 0x0
    db6c:	1afffd53 	bne	d0c0 <prog+0xd078>
    db70:	e59d2014 	ldr	r2, [sp, #20]
    db74:	e3520080 	cmp	r2, #128	; 0x80
    db78:	e59d6680 	ldr	r6, [sp, #1664]
    db7c:	e59d567c 	ldr	r5, [sp, #1660]
    db80:	e28d8e61 	add	r8, sp, #1552	; 0x610
    db84:	1afffea9 	bne	d630 <prog+0xd5e8>
    db88:	e59d3024 	ldr	r3, [sp, #36]
    db8c:	e59dc03c 	ldr	ip, [sp, #60]
    db90:	e06c4003 	rsb	r4, ip, r3
    db94:	e3540000 	cmp	r4, #0	; 0x0
    db98:	dafffea4 	ble	d630 <prog+0xd5e8>
    db9c:	e3540010 	cmp	r4, #16	; 0x10
    dba0:	da00032e 	ble	e860 <prog+0xe818>
    dba4:	e59f95b0 	ldr	r9, [pc, #1456]	; e15c <prog+0xe114>
    dba8:	ea000002 	b	dbb8 <prog+0xdb70>
    dbac:	e2444010 	sub	r4, r4, #16	; 0x10
    dbb0:	e3540010 	cmp	r4, #16	; 0x10
    dbb4:	da000015 	ble	dc10 <prog+0xdbc8>
    dbb8:	e2855001 	add	r5, r5, #1	; 0x1
    dbbc:	e28d1e67 	add	r1, sp, #1648	; 0x670
    dbc0:	e2866010 	add	r6, r6, #16	; 0x10
    dbc4:	e3a03010 	mov	r3, #16	; 0x10
    dbc8:	e3550007 	cmp	r5, #7	; 0x7
    dbcc:	e5883004 	str	r3, [r8, #4]
    dbd0:	e5889000 	str	r9, [r8]
    dbd4:	e1a0000a 	mov	r0, sl
    dbd8:	e2811008 	add	r1, r1, #8	; 0x8
    dbdc:	e2888008 	add	r8, r8, #8	; 0x8
    dbe0:	e58d6680 	str	r6, [sp, #1664]
    dbe4:	e58d567c 	str	r5, [sp, #1660]
    dbe8:	daffffef 	ble	dbac <prog+0xdb64>
    dbec:	ebfffc35 	bl	ccc8 <__sprint>
    dbf0:	e3500000 	cmp	r0, #0	; 0x0
    dbf4:	1afffd31 	bne	d0c0 <prog+0xd078>
    dbf8:	e2444010 	sub	r4, r4, #16	; 0x10
    dbfc:	e3540010 	cmp	r4, #16	; 0x10
    dc00:	e28d8e61 	add	r8, sp, #1552	; 0x610
    dc04:	e59d6680 	ldr	r6, [sp, #1664]
    dc08:	e59d567c 	ldr	r5, [sp, #1660]
    dc0c:	caffffe9 	bgt	dbb8 <prog+0xdb70>
    dc10:	e2855001 	add	r5, r5, #1	; 0x1
    dc14:	e0866004 	add	r6, r6, r4
    dc18:	e3550007 	cmp	r5, #7	; 0x7
    dc1c:	e5889000 	str	r9, [r8]
    dc20:	e5884004 	str	r4, [r8, #4]
    dc24:	e58d6680 	str	r6, [sp, #1664]
    dc28:	e58d567c 	str	r5, [sp, #1660]
    dc2c:	d2888008 	addle	r8, r8, #8	; 0x8
    dc30:	dafffe7e 	ble	d630 <prog+0xd5e8>
    dc34:	e28d1e67 	add	r1, sp, #1648	; 0x670
    dc38:	e1a0000a 	mov	r0, sl
    dc3c:	e2811008 	add	r1, r1, #8	; 0x8
    dc40:	ebfffc20 	bl	ccc8 <__sprint>
    dc44:	e3500000 	cmp	r0, #0	; 0x0
    dc48:	1afffd1c 	bne	d0c0 <prog+0xd078>
    dc4c:	e59d6680 	ldr	r6, [sp, #1664]
    dc50:	e59d567c 	ldr	r5, [sp, #1660]
    dc54:	e28d8e61 	add	r8, sp, #1552	; 0x610
    dc58:	eafffe74 	b	d630 <prog+0xd5e8>
    dc5c:	e2013007 	and	r3, r1, #7	; 0x7
    dc60:	e2833030 	add	r3, r3, #48	; 0x30
    dc64:	e1b011a1 	movs	r1, r1, lsr #3
    dc68:	e5603001 	strb	r3, [r0, #-1]!
    dc6c:	1afffffa 	bne	dc5c <prog+0xdc14>
    dc70:	e59d5054 	ldr	r5, [sp, #84]
    dc74:	e3150001 	tst	r5, #1	; 0x1
    dc78:	e58d001c 	str	r0, [sp, #28]
    dc7c:	0afffd64 	beq	d214 <prog+0xd1cc>
    dc80:	e3530030 	cmp	r3, #48	; 0x30
    dc84:	11a0c000 	movne	ip, r0
    dc88:	13a03030 	movne	r3, #48	; 0x30
    dc8c:	156c3001 	strneb	r3, [ip, #-1]!
    dc90:	158dc01c 	strne	ip, [sp, #28]
    dc94:	eafffd5e 	b	d214 <prog+0xd1cc>
    dc98:	e3570065 	cmp	r7, #101	; 0x65
    dc9c:	da000072 	ble	de6c <prog+0xde24>
    dca0:	e28d0048 	add	r0, sp, #72	; 0x48
    dca4:	e8900003 	ldmia	r0, {r0, r1}
    dca8:	e3a02000 	mov	r2, #0	; 0x0
    dcac:	e3a03000 	mov	r3, #0	; 0x0
    dcb0:	eb001532 	bl	13180 <__eqdf2>
    dcb4:	e3500000 	cmp	r0, #0	; 0x0
    dcb8:	1a00003a 	bne	dda8 <prog+0xdd60>
    dcbc:	e2855001 	add	r5, r5, #1	; 0x1
    dcc0:	e59f3488 	ldr	r3, [pc, #1160]	; e150 <prog+0xe108>
    dcc4:	e3550007 	cmp	r5, #7	; 0x7
    dcc8:	e2866001 	add	r6, r6, #1	; 0x1
    dccc:	e3a02001 	mov	r2, #1	; 0x1
    dcd0:	e5883000 	str	r3, [r8]
    dcd4:	e5882004 	str	r2, [r8, #4]
    dcd8:	e58d6680 	str	r6, [sp, #1664]
    dcdc:	e58d567c 	str	r5, [sp, #1660]
    dce0:	d288c008 	addle	ip, r8, #8	; 0x8
    dce4:	ca0001c9 	bgt	e410 <prog+0xe3c8>
    dce8:	e59d36a8 	ldr	r3, [sp, #1704]
    dcec:	e59d4034 	ldr	r4, [sp, #52]
    dcf0:	e1530004 	cmp	r3, r4
    dcf4:	aa0000f7 	bge	e0d8 <prog+0xe090>
    dcf8:	e59d567c 	ldr	r5, [sp, #1660]
    dcfc:	e59d8028 	ldr	r8, [sp, #40]
    dd00:	e2855001 	add	r5, r5, #1	; 0x1
    dd04:	e3550007 	cmp	r5, #7	; 0x7
    dd08:	e2866001 	add	r6, r6, #1	; 0x1
    dd0c:	e3a03001 	mov	r3, #1	; 0x1
    dd10:	e58c3004 	str	r3, [ip, #4]
    dd14:	e58c8000 	str	r8, [ip]
    dd18:	e58d6680 	str	r6, [sp, #1664]
    dd1c:	e58d567c 	str	r5, [sp, #1660]
    dd20:	d28cc008 	addle	ip, ip, #8	; 0x8
    dd24:	ca0001d1 	bgt	e470 <prog+0xe428>
    dd28:	e59d1034 	ldr	r1, [sp, #52]
    dd2c:	e2414001 	sub	r4, r1, #1	; 0x1
    dd30:	e3540000 	cmp	r4, #0	; 0x0
    dd34:	dafffe7c 	ble	d72c <prog+0xd6e4>
    dd38:	e3540010 	cmp	r4, #16	; 0x10
    dd3c:	da00018f 	ble	e380 <prog+0xe338>
    dd40:	e59d567c 	ldr	r5, [sp, #1660]
    dd44:	e59f9410 	ldr	r9, [pc, #1040]	; e15c <prog+0xe114>
    dd48:	ea000002 	b	dd58 <prog+0xdd10>
    dd4c:	e2444010 	sub	r4, r4, #16	; 0x10
    dd50:	e3540010 	cmp	r4, #16	; 0x10
    dd54:	da00018b 	ble	e388 <prog+0xe340>
    dd58:	e2855001 	add	r5, r5, #1	; 0x1
    dd5c:	e28d1e67 	add	r1, sp, #1648	; 0x670
    dd60:	e2866010 	add	r6, r6, #16	; 0x10
    dd64:	e3a03010 	mov	r3, #16	; 0x10
    dd68:	e3550007 	cmp	r5, #7	; 0x7
    dd6c:	e58c3004 	str	r3, [ip, #4]
    dd70:	e58c9000 	str	r9, [ip]
    dd74:	e1a0000a 	mov	r0, sl
    dd78:	e2811008 	add	r1, r1, #8	; 0x8
    dd7c:	e28cc008 	add	ip, ip, #8	; 0x8
    dd80:	e58d6680 	str	r6, [sp, #1664]
    dd84:	e58d567c 	str	r5, [sp, #1660]
    dd88:	daffffef 	ble	dd4c <prog+0xdd04>
    dd8c:	ebfffbcd 	bl	ccc8 <__sprint>
    dd90:	e3500000 	cmp	r0, #0	; 0x0
    dd94:	1afffcc9 	bne	d0c0 <prog+0xd078>
    dd98:	e59d6680 	ldr	r6, [sp, #1664]
    dd9c:	e59d567c 	ldr	r5, [sp, #1660]
    dda0:	e28dce61 	add	ip, sp, #1552	; 0x610
    dda4:	eaffffe8 	b	dd4c <prog+0xdd04>
    dda8:	e59d06a8 	ldr	r0, [sp, #1704]
    ddac:	e3500000 	cmp	r0, #0	; 0x0
    ddb0:	da0001bb 	ble	e4a4 <prog+0xe45c>
    ddb4:	e59dc034 	ldr	ip, [sp, #52]
    ddb8:	e150000c 	cmp	r0, ip
    ddbc:	aa0000fc 	bge	e1b4 <prog+0xe16c>
    ddc0:	e2855001 	add	r5, r5, #1	; 0x1
    ddc4:	e59d401c 	ldr	r4, [sp, #28]
    ddc8:	e0866000 	add	r6, r6, r0
    ddcc:	e3550007 	cmp	r5, #7	; 0x7
    ddd0:	e5884000 	str	r4, [r8]
    ddd4:	e5880004 	str	r0, [r8, #4]
    ddd8:	e58d6680 	str	r6, [sp, #1664]
    dddc:	e58d567c 	str	r5, [sp, #1660]
    dde0:	d2881008 	addle	r1, r8, #8	; 0x8
    dde4:	ca000288 	bgt	e80c <prog+0xe7c4>
    dde8:	e2855001 	add	r5, r5, #1	; 0x1
    ddec:	e59f3350 	ldr	r3, [pc, #848]	; e144 <prog+0xe0fc>
    ddf0:	e2866001 	add	r6, r6, #1	; 0x1
    ddf4:	e3550007 	cmp	r5, #7	; 0x7
    ddf8:	e3a02001 	mov	r2, #1	; 0x1
    ddfc:	e5813000 	str	r3, [r1]
    de00:	e5812004 	str	r2, [r1, #4]
    de04:	e58d6680 	str	r6, [sp, #1664]
    de08:	e58d567c 	str	r5, [sp, #1660]
    de0c:	e1a04000 	mov	r4, r0
    de10:	d281c008 	addle	ip, r1, #8	; 0x8
    de14:	ca000271 	bgt	e7e0 <prog+0xe798>
    de18:	e59d8034 	ldr	r8, [sp, #52]
    de1c:	e59d101c 	ldr	r1, [sp, #28]
    de20:	e0602008 	rsb	r2, r0, r8
    de24:	e2855001 	add	r5, r5, #1	; 0x1
    de28:	e0843001 	add	r3, r4, r1
    de2c:	e0866002 	add	r6, r6, r2
    de30:	e3550007 	cmp	r5, #7	; 0x7
    de34:	e58c3000 	str	r3, [ip]
    de38:	e58c2004 	str	r2, [ip, #4]
    de3c:	e58d6680 	str	r6, [sp, #1664]
    de40:	e58d567c 	str	r5, [sp, #1660]
    de44:	da000141 	ble	e350 <prog+0xe308>
    de48:	e28d1e67 	add	r1, sp, #1648	; 0x670
    de4c:	e1a0000a 	mov	r0, sl
    de50:	e2811008 	add	r1, r1, #8	; 0x8
    de54:	ebfffb9b 	bl	ccc8 <__sprint>
    de58:	e3500000 	cmp	r0, #0	; 0x0
    de5c:	1afffc97 	bne	d0c0 <prog+0xd078>
    de60:	e59d6680 	ldr	r6, [sp, #1664]
    de64:	e28dce61 	add	ip, sp, #1552	; 0x610
    de68:	eafffe2f 	b	d72c <prog+0xd6e4>
    de6c:	e59d2034 	ldr	r2, [sp, #52]
    de70:	e3520001 	cmp	r2, #1	; 0x1
    de74:	da00014d 	ble	e3b0 <prog+0xe368>
    de78:	e59d401c 	ldr	r4, [sp, #28]
    de7c:	e5d42000 	ldrb	r2, [r4]
    de80:	e2855001 	add	r5, r5, #1	; 0x1
    de84:	e5cd26ad 	strb	r2, [sp, #1709]
    de88:	e3a0302e 	mov	r3, #46	; 0x2e
    de8c:	e28d2e6a 	add	r2, sp, #1696	; 0x6a0
    de90:	e5cd36ae 	strb	r3, [sp, #1710]
    de94:	e2866002 	add	r6, r6, #2	; 0x2
    de98:	e3550007 	cmp	r5, #7	; 0x7
    de9c:	e282200d 	add	r2, r2, #13	; 0xd
    dea0:	e243302c 	sub	r3, r3, #44	; 0x2c
    dea4:	e888000c 	stmia	r8, {r2, r3}
    dea8:	e58d6680 	str	r6, [sp, #1664]
    deac:	e58d567c 	str	r5, [sp, #1660]
    deb0:	d2884008 	addle	r4, r8, #8	; 0x8
    deb4:	ca00007d 	bgt	e0b0 <prog+0xe068>
    deb8:	e28d0048 	add	r0, sp, #72	; 0x48
    debc:	e8900003 	ldmia	r0, {r0, r1}
    dec0:	e3a02000 	mov	r2, #0	; 0x0
    dec4:	e3a03000 	mov	r3, #0	; 0x0
    dec8:	ebfff2ec 	bl	aa80 <__nedf2>
    decc:	e3500000 	cmp	r0, #0	; 0x0
    ded0:	0a000038 	beq	dfb8 <prog+0xdf70>
    ded4:	e59d8034 	ldr	r8, [sp, #52]
    ded8:	e59dc01c 	ldr	ip, [sp, #28]
    dedc:	e2855001 	add	r5, r5, #1	; 0x1
    dee0:	e0883006 	add	r3, r8, r6
    dee4:	e2436001 	sub	r6, r3, #1	; 0x1
    dee8:	e28c2001 	add	r2, ip, #1	; 0x1
    deec:	e2483001 	sub	r3, r8, #1	; 0x1
    def0:	e3550007 	cmp	r5, #7	; 0x7
    def4:	e884000c 	stmia	r4, {r2, r3}
    def8:	e58d6680 	str	r6, [sp, #1664]
    defc:	e58d567c 	str	r5, [sp, #1660]
    df00:	ca000060 	bgt	e088 <prog+0xe040>
    df04:	e2844008 	add	r4, r4, #8	; 0x8
    df08:	e59d3030 	ldr	r3, [sp, #48]
    df0c:	e2855001 	add	r5, r5, #1	; 0x1
    df10:	e0866003 	add	r6, r6, r3
    df14:	e59d8030 	ldr	r8, [sp, #48]
    df18:	e28d3e69 	add	r3, sp, #1680	; 0x690
    df1c:	e3550007 	cmp	r5, #7	; 0x7
    df20:	e2833005 	add	r3, r3, #5	; 0x5
    df24:	e8840108 	stmia	r4, {r3, r8}
    df28:	e58d6680 	str	r6, [sp, #1664]
    df2c:	e58d567c 	str	r5, [sp, #1660]
    df30:	d284c008 	addle	ip, r4, #8	; 0x8
    df34:	dafffdfc 	ble	d72c <prog+0xd6e4>
    df38:	eaffffc2 	b	de48 <prog+0xde00>
    df3c:	e28d1e67 	add	r1, sp, #1648	; 0x670
    df40:	e1a0000a 	mov	r0, sl
    df44:	e2811008 	add	r1, r1, #8	; 0x8
    df48:	ebfffb5e 	bl	ccc8 <__sprint>
    df4c:	e3500000 	cmp	r0, #0	; 0x0
    df50:	1afffc60 	bne	d0d8 <prog+0xd090>
    df54:	e28d8e61 	add	r8, sp, #1552	; 0x610
    df58:	eafffbd9 	b	cec4 <_vfprintf_r+0x1bc>
    df5c:	e3510009 	cmp	r1, #9	; 0x9
    df60:	928d4e5b 	addls	r4, sp, #1456	; 0x5b0
    df64:	92844003 	addls	r4, r4, #3	; 0x3
    df68:	958d401c 	strls	r4, [sp, #28]
    df6c:	9a00000d 	bls	dfa8 <prog+0xdf60>
    df70:	e28d0e5b 	add	r0, sp, #1456	; 0x5b0
    df74:	e59fc1c4 	ldr	ip, [pc, #452]	; e140 <prog+0xe0f8>
    df78:	e2800004 	add	r0, r0, #4	; 0x4
    df7c:	e083219c 	umull	r2, r3, ip, r1
    df80:	e1a031a3 	mov	r3, r3, lsr #3
    df84:	e0832103 	add	r2, r3, r3, lsl #2
    df88:	e0412082 	sub	r2, r1, r2, lsl #1
    df8c:	e2822030 	add	r2, r2, #48	; 0x30
    df90:	e3530009 	cmp	r3, #9	; 0x9
    df94:	e1a01003 	mov	r1, r3
    df98:	e5602001 	strb	r2, [r0, #-1]!
    df9c:	8afffff6 	bhi	df7c <prog+0xdf34>
    dfa0:	e2400001 	sub	r0, r0, #1	; 0x1
    dfa4:	e58d001c 	str	r0, [sp, #28]
    dfa8:	e59d401c 	ldr	r4, [sp, #28]
    dfac:	e2813030 	add	r3, r1, #48	; 0x30
    dfb0:	e5c43000 	strb	r3, [r4]
    dfb4:	eafffc96 	b	d214 <prog+0xd1cc>
    dfb8:	e59d1034 	ldr	r1, [sp, #52]
    dfbc:	e2417001 	sub	r7, r1, #1	; 0x1
    dfc0:	e3570000 	cmp	r7, #0	; 0x0
    dfc4:	daffffcf 	ble	df08 <prog+0xdec0>
    dfc8:	e3570010 	cmp	r7, #16	; 0x10
    dfcc:	da000024 	ble	e064 <prog+0xe01c>
    dfd0:	e59f9184 	ldr	r9, [pc, #388]	; e15c <prog+0xe114>
    dfd4:	ea000002 	b	dfe4 <prog+0xdf9c>
    dfd8:	e2477010 	sub	r7, r7, #16	; 0x10
    dfdc:	e3570010 	cmp	r7, #16	; 0x10
    dfe0:	da000020 	ble	e068 <prog+0xe020>
    dfe4:	e2855001 	add	r5, r5, #1	; 0x1
    dfe8:	e28d1e67 	add	r1, sp, #1648	; 0x670
    dfec:	e2866010 	add	r6, r6, #16	; 0x10
    dff0:	e3a03010 	mov	r3, #16	; 0x10
    dff4:	e3550007 	cmp	r5, #7	; 0x7
    dff8:	e5843004 	str	r3, [r4, #4]
    dffc:	e5849000 	str	r9, [r4]
    e000:	e1a0000a 	mov	r0, sl
    e004:	e2811008 	add	r1, r1, #8	; 0x8
    e008:	e2844008 	add	r4, r4, #8	; 0x8
    e00c:	e58d6680 	str	r6, [sp, #1664]
    e010:	e58d567c 	str	r5, [sp, #1660]
    e014:	daffffef 	ble	dfd8 <prog+0xdf90>
    e018:	ebfffb2a 	bl	ccc8 <__sprint>
    e01c:	e3500000 	cmp	r0, #0	; 0x0
    e020:	1afffc26 	bne	d0c0 <prog+0xd078>
    e024:	e59d6680 	ldr	r6, [sp, #1664]
    e028:	e59d567c 	ldr	r5, [sp, #1660]
    e02c:	e28d4e61 	add	r4, sp, #1552	; 0x610
    e030:	eaffffe8 	b	dfd8 <prog+0xdf90>
    e034:	e59d4054 	ldr	r4, [sp, #84]
    e038:	e2143040 	ands	r3, r4, #64	; 0x40
    e03c:	15993000 	ldrne	r3, [r9]
    e040:	05991000 	ldreq	r1, [r9]
    e044:	11a03803 	movne	r3, r3, lsl #16
    e048:	12899004 	addne	r9, r9, #4	; 0x4
    e04c:	02899004 	addeq	r9, r9, #4	; 0x4
    e050:	11a01823 	movne	r1, r3, lsr #16
    e054:	01a02003 	moveq	r2, r3
    e058:	158d9050 	strne	r9, [sp, #80]
    e05c:	058d9050 	streq	r9, [sp, #80]
    e060:	eafffc52 	b	d1b0 <prog+0xd168>
    e064:	e59f90f0 	ldr	r9, [pc, #240]	; e15c <prog+0xe114>
    e068:	e2855001 	add	r5, r5, #1	; 0x1
    e06c:	e0866007 	add	r6, r6, r7
    e070:	e3550007 	cmp	r5, #7	; 0x7
    e074:	e5849000 	str	r9, [r4]
    e078:	e5847004 	str	r7, [r4, #4]
    e07c:	e58d6680 	str	r6, [sp, #1664]
    e080:	e58d567c 	str	r5, [sp, #1660]
    e084:	daffff9e 	ble	df04 <prog+0xdebc>
    e088:	e28d1e67 	add	r1, sp, #1648	; 0x670
    e08c:	e1a0000a 	mov	r0, sl
    e090:	e2811008 	add	r1, r1, #8	; 0x8
    e094:	ebfffb0b 	bl	ccc8 <__sprint>
    e098:	e3500000 	cmp	r0, #0	; 0x0
    e09c:	1afffc07 	bne	d0c0 <prog+0xd078>
    e0a0:	e59d6680 	ldr	r6, [sp, #1664]
    e0a4:	e59d567c 	ldr	r5, [sp, #1660]
    e0a8:	e28d4e61 	add	r4, sp, #1552	; 0x610
    e0ac:	eaffff95 	b	df08 <prog+0xdec0>
    e0b0:	e28d1e67 	add	r1, sp, #1648	; 0x670
    e0b4:	e1a0000a 	mov	r0, sl
    e0b8:	e2811008 	add	r1, r1, #8	; 0x8
    e0bc:	ebfffb01 	bl	ccc8 <__sprint>
    e0c0:	e3500000 	cmp	r0, #0	; 0x0
    e0c4:	1afffbfd 	bne	d0c0 <prog+0xd078>
    e0c8:	e59d6680 	ldr	r6, [sp, #1664]
    e0cc:	e59d567c 	ldr	r5, [sp, #1660]
    e0d0:	e28d4e61 	add	r4, sp, #1552	; 0x610
    e0d4:	eaffff77 	b	deb8 <prog+0xde70>
    e0d8:	e59d5054 	ldr	r5, [sp, #84]
    e0dc:	e3150001 	tst	r5, #1	; 0x1
    e0e0:	0afffd91 	beq	d72c <prog+0xd6e4>
    e0e4:	eaffff03 	b	dcf8 <prog+0xdcb0>
    e0e8:	e899000c 	ldmia	r9, {r2, r3}
    e0ec:	e2899008 	add	r9, r9, #8	; 0x8
    e0f0:	e58d2048 	str	r2, [sp, #72]
    e0f4:	e58d304c 	str	r3, [sp, #76]
    e0f8:	e58d9050 	str	r9, [sp, #80]
    e0fc:	eafffd02 	b	d50c <prog+0xd4c4>
    e100:	e2833020 	add	r3, r3, #32	; 0x20
    e104:	e5cd36af 	strb	r3, [sp, #1711]
    e108:	e59d2018 	ldr	r2, [sp, #24]
    e10c:	e5d23000 	ldrb	r3, [r2]
    e110:	eafffb7a 	b	cf00 <_vfprintf_r+0x1f8>
    e114:	e5993000 	ldr	r3, [r9]
    e118:	e1a03803 	mov	r3, r3, lsl #16
    e11c:	e2899004 	add	r9, r9, #4	; 0x4
    e120:	e1a01823 	mov	r1, r3, lsr #16
    e124:	e3a02001 	mov	r2, #1	; 0x1
    e128:	e58d9050 	str	r9, [sp, #80]
    e12c:	eafffc1f 	b	d1b0 <prog+0xd168>
    e130:	00014ebc 	streqh	r4, [r1], -ip
    e134:	00014ea8 	andeq	r4, r1, r8, lsr #29
    e138:	00014e9c 	muleq	r1, ip, lr
    e13c:	00014e88 	andeq	r4, r1, r8, lsl #29
    e140:	cccccccd 	stcgtl	12, cr12, [ip], {205}
    e144:	00014af4 	streqd	r4, [r1], -r4
    e148:	00014ed8 	ldreqd	r4, [r1], -r8
    e14c:	00014ea0 	andeq	r4, r1, r0, lsr #29
    e150:	00014848 	andeq	r4, r1, r8, asr #16
    e154:	00014edc 	ldreqd	r4, [r1], -ip
    e158:	00014448 	andeq	r4, r1, r8, asr #8
    e15c:	00014438 	andeq	r4, r1, r8, lsr r4
    e160:	00014ea4 	andeq	r4, r1, r4, lsr #29
    e164:	66666667 	strvsbt	r6, [r6], -r7, ror #12
    e168:	e5993000 	ldr	r3, [r9]
    e16c:	e1a03803 	mov	r3, r3, lsl #16
    e170:	e2899004 	add	r9, r9, #4	; 0x4
    e174:	e1a01843 	mov	r1, r3, asr #16
    e178:	e58d9050 	str	r9, [sp, #80]
    e17c:	eafffbe7 	b	d120 <prog+0xd0d8>
    e180:	e5993000 	ldr	r3, [r9]
    e184:	e1a03803 	mov	r3, r3, lsl #16
    e188:	e2899004 	add	r9, r9, #4	; 0x4
    e18c:	e1a01823 	mov	r1, r3, lsr #16
    e190:	e58d9050 	str	r9, [sp, #80]
    e194:	eafffca5 	b	d430 <prog+0xd3e8>
    e198:	e5993000 	ldr	r3, [r9]
    e19c:	e2899004 	add	r9, r9, #4	; 0x4
    e1a0:	e58d9050 	str	r9, [sp, #80]
    e1a4:	e59d4020 	ldr	r4, [sp, #32]
    e1a8:	e59d9050 	ldr	r9, [sp, #80]
    e1ac:	e5834000 	str	r4, [r3]
    e1b0:	eafffb29 	b	ce5c <_vfprintf_r+0x154>
    e1b4:	e2855001 	add	r5, r5, #1	; 0x1
    e1b8:	e59d101c 	ldr	r1, [sp, #28]
    e1bc:	e086600c 	add	r6, r6, ip
    e1c0:	e3550007 	cmp	r5, #7	; 0x7
    e1c4:	e8881002 	stmia	r8, {r1, ip}
    e1c8:	e58d6680 	str	r6, [sp, #1664]
    e1cc:	e58d567c 	str	r5, [sp, #1660]
    e1d0:	d288c008 	addle	ip, r8, #8	; 0x8
    e1d4:	ca000197 	bgt	e838 <prog+0xe7f0>
    e1d8:	e59d2034 	ldr	r2, [sp, #52]
    e1dc:	e0624000 	rsb	r4, r2, r0
    e1e0:	e3540000 	cmp	r4, #0	; 0x0
    e1e4:	da00004b 	ble	e318 <prog+0xe2d0>
    e1e8:	e3540010 	cmp	r4, #16	; 0x10
    e1ec:	da000036 	ble	e2cc <prog+0xe284>
    e1f0:	e59d567c 	ldr	r5, [sp, #1660]
    e1f4:	e51f90a0 	ldr	r9, [pc, #-160]	; e15c <prog+0xe114>
    e1f8:	ea000002 	b	e208 <prog+0xe1c0>
    e1fc:	e2444010 	sub	r4, r4, #16	; 0x10
    e200:	e3540010 	cmp	r4, #16	; 0x10
    e204:	da000032 	ble	e2d4 <prog+0xe28c>
    e208:	e2855001 	add	r5, r5, #1	; 0x1
    e20c:	e28d1e67 	add	r1, sp, #1648	; 0x670
    e210:	e2866010 	add	r6, r6, #16	; 0x10
    e214:	e3a03010 	mov	r3, #16	; 0x10
    e218:	e3550007 	cmp	r5, #7	; 0x7
    e21c:	e58c3004 	str	r3, [ip, #4]
    e220:	e58c9000 	str	r9, [ip]
    e224:	e1a0000a 	mov	r0, sl
    e228:	e2811008 	add	r1, r1, #8	; 0x8
    e22c:	e28cc008 	add	ip, ip, #8	; 0x8
    e230:	e58d6680 	str	r6, [sp, #1664]
    e234:	e58d567c 	str	r5, [sp, #1660]
    e238:	daffffef 	ble	e1fc <prog+0xe1b4>
    e23c:	ebfffaa1 	bl	ccc8 <__sprint>
    e240:	e3500000 	cmp	r0, #0	; 0x0
    e244:	1afffb9d 	bne	d0c0 <prog+0xd078>
    e248:	e59d6680 	ldr	r6, [sp, #1664]
    e24c:	e59d567c 	ldr	r5, [sp, #1660]
    e250:	e28dce61 	add	ip, sp, #1552	; 0x610
    e254:	eaffffe8 	b	e1fc <prog+0xe1b4>
    e258:	e5993000 	ldr	r3, [r9]
    e25c:	e28d5e45 	add	r5, sp, #1104	; 0x450
    e260:	e2899004 	add	r9, r9, #4	; 0x4
    e264:	e3a0b001 	mov	fp, #1	; 0x1
    e268:	e2855008 	add	r5, r5, #8	; 0x8
    e26c:	e5cd3458 	strb	r3, [sp, #1112]
    e270:	e58d9050 	str	r9, [sp, #80]
    e274:	eafffc8e 	b	d4b4 <prog+0xd46c>
    e278:	e3560000 	cmp	r6, #0	; 0x0
    e27c:	03a06001 	moveq	r6, #1	; 0x1
    e280:	eafffc99 	b	d4ec <prog+0xd4a4>
    e284:	e3560000 	cmp	r6, #0	; 0x0
    e288:	ba000187 	blt	e8ac <prog+0xe864>
    e28c:	e59d001c 	ldr	r0, [sp, #28]
    e290:	e1a01005 	mov	r1, r5
    e294:	e1a02006 	mov	r2, r6
    e298:	eb000cb4 	bl	11570 <memchr>
    e29c:	e3500000 	cmp	r0, #0	; 0x0
    e2a0:	0a0001f6 	beq	ea80 <prog+0xea38>
    e2a4:	e59d201c 	ldr	r2, [sp, #28]
    e2a8:	e062b000 	rsb	fp, r2, r0
    e2ac:	e156000b 	cmp	r6, fp
    e2b0:	ba00016c 	blt	e868 <prog+0xe820>
    e2b4:	e35b0000 	cmp	fp, #0	; 0x0
    e2b8:	a1a0300b 	movge	r3, fp
    e2bc:	b3a03000 	movlt	r3, #0	; 0x0
    e2c0:	e58d303c 	str	r3, [sp, #60]
    e2c4:	e58d5038 	str	r5, [sp, #56]
    e2c8:	eafffbdb 	b	d23c <prog+0xd1f4>
    e2cc:	e59d567c 	ldr	r5, [sp, #1660]
    e2d0:	e51f917c 	ldr	r9, [pc, #-380]	; e15c <prog+0xe114>
    e2d4:	e2855001 	add	r5, r5, #1	; 0x1
    e2d8:	e0866004 	add	r6, r6, r4
    e2dc:	e3550007 	cmp	r5, #7	; 0x7
    e2e0:	e58c9000 	str	r9, [ip]
    e2e4:	e58c4004 	str	r4, [ip, #4]
    e2e8:	e58d6680 	str	r6, [sp, #1664]
    e2ec:	e58d567c 	str	r5, [sp, #1660]
    e2f0:	d28cc008 	addle	ip, ip, #8	; 0x8
    e2f4:	da000007 	ble	e318 <prog+0xe2d0>
    e2f8:	e28d1e67 	add	r1, sp, #1648	; 0x670
    e2fc:	e1a0000a 	mov	r0, sl
    e300:	e2811008 	add	r1, r1, #8	; 0x8
    e304:	ebfffa6f 	bl	ccc8 <__sprint>
    e308:	e3500000 	cmp	r0, #0	; 0x0
    e30c:	1afffb6b 	bne	d0c0 <prog+0xd078>
    e310:	e59d6680 	ldr	r6, [sp, #1664]
    e314:	e28dce61 	add	ip, sp, #1552	; 0x610
    e318:	e59d3054 	ldr	r3, [sp, #84]
    e31c:	e3130001 	tst	r3, #1	; 0x1
    e320:	0afffd01 	beq	d72c <prog+0xd6e4>
    e324:	e59d567c 	ldr	r5, [sp, #1660]
    e328:	e51f31ec 	ldr	r3, [pc, #-492]	; e144 <prog+0xe0fc>
    e32c:	e2855001 	add	r5, r5, #1	; 0x1
    e330:	e2866001 	add	r6, r6, #1	; 0x1
    e334:	e3a02001 	mov	r2, #1	; 0x1
    e338:	e3550007 	cmp	r5, #7	; 0x7
    e33c:	e58c3000 	str	r3, [ip]
    e340:	e58c2004 	str	r2, [ip, #4]
    e344:	e58d6680 	str	r6, [sp, #1664]
    e348:	e58d567c 	str	r5, [sp, #1660]
    e34c:	cafffebd 	bgt	de48 <prog+0xde00>
    e350:	e28cc008 	add	ip, ip, #8	; 0x8
    e354:	eafffcf4 	b	d72c <prog+0xd6e4>
    e358:	e28d0e5b 	add	r0, sp, #1456	; 0x5b0
    e35c:	e2800004 	add	r0, r0, #4	; 0x4
    e360:	e59d5040 	ldr	r5, [sp, #64]
    e364:	e201300f 	and	r3, r1, #15	; 0xf
    e368:	e7d52003 	ldrb	r2, [r5, r3]
    e36c:	e1b01221 	movs	r1, r1, lsr #4
    e370:	e5602001 	strb	r2, [r0, #-1]!
    e374:	1afffff9 	bne	e360 <prog+0xe318>
    e378:	e58d001c 	str	r0, [sp, #28]
    e37c:	eafffba4 	b	d214 <prog+0xd1cc>
    e380:	e59d567c 	ldr	r5, [sp, #1660]
    e384:	e51f9230 	ldr	r9, [pc, #-560]	; e15c <prog+0xe114>
    e388:	e2855001 	add	r5, r5, #1	; 0x1
    e38c:	e0866004 	add	r6, r6, r4
    e390:	e3550007 	cmp	r5, #7	; 0x7
    e394:	e58c9000 	str	r9, [ip]
    e398:	e58c4004 	str	r4, [ip, #4]
    e39c:	e58d6680 	str	r6, [sp, #1664]
    e3a0:	e58d567c 	str	r5, [sp, #1660]
    e3a4:	cafffea7 	bgt	de48 <prog+0xde00>
    e3a8:	e28cc008 	add	ip, ip, #8	; 0x8
    e3ac:	eafffcde 	b	d72c <prog+0xd6e4>
    e3b0:	e59d3054 	ldr	r3, [sp, #84]
    e3b4:	e3130001 	tst	r3, #1	; 0x1
    e3b8:	1afffeae 	bne	de78 <prog+0xde30>
    e3bc:	e2855001 	add	r5, r5, #1	; 0x1
    e3c0:	e59d201c 	ldr	r2, [sp, #28]
    e3c4:	e2866001 	add	r6, r6, #1	; 0x1
    e3c8:	e3550007 	cmp	r5, #7	; 0x7
    e3cc:	e3a03001 	mov	r3, #1	; 0x1
    e3d0:	e888000c 	stmia	r8, {r2, r3}
    e3d4:	e58d6680 	str	r6, [sp, #1664]
    e3d8:	e58d567c 	str	r5, [sp, #1660]
    e3dc:	d2884008 	addle	r4, r8, #8	; 0x8
    e3e0:	dafffec8 	ble	df08 <prog+0xdec0>
    e3e4:	eaffff27 	b	e088 <prog+0xe040>
    e3e8:	e51f9294 	ldr	r9, [pc, #-660]	; e15c <prog+0xe114>
    e3ec:	eafffcb0 	b	d6b4 <prog+0xd66c>
    e3f0:	e3a04003 	mov	r4, #3	; 0x3
    e3f4:	e51f52b4 	ldr	r5, [pc, #-692]	; e148 <prog+0xe100>
    e3f8:	e3a0c000 	mov	ip, #0	; 0x0
    e3fc:	e1a0b004 	mov	fp, r4
    e400:	e58d403c 	str	r4, [sp, #60]
    e404:	e58d501c 	str	r5, [sp, #28]
    e408:	e58dc038 	str	ip, [sp, #56]
    e40c:	eafffb8a 	b	d23c <prog+0xd1f4>
    e410:	e28d1e67 	add	r1, sp, #1648	; 0x670
    e414:	e1a0000a 	mov	r0, sl
    e418:	e2811008 	add	r1, r1, #8	; 0x8
    e41c:	ebfffa29 	bl	ccc8 <__sprint>
    e420:	e3500000 	cmp	r0, #0	; 0x0
    e424:	1afffb25 	bne	d0c0 <prog+0xd078>
    e428:	e59d6680 	ldr	r6, [sp, #1664]
    e42c:	e28dce61 	add	ip, sp, #1552	; 0x610
    e430:	eafffe2c 	b	dce8 <prog+0xdca0>
    e434:	e28d0048 	add	r0, sp, #72	; 0x48
    e438:	e8900003 	ldmia	r0, {r0, r1}
    e43c:	eb001154 	bl	12994 <isnan>
    e440:	e3500000 	cmp	r0, #0	; 0x0
    e444:	0a000059 	beq	e5b0 <prog+0xe568>
    e448:	e2473045 	sub	r3, r7, #69	; 0x45
    e44c:	e3530002 	cmp	r3, #2	; 0x2
    e450:	8a00011e 	bhi	e8d0 <prog+0xe888>
    e454:	e3a0c003 	mov	ip, #3	; 0x3
    e458:	e51f1314 	ldr	r1, [pc, #-788]	; e14c <prog+0xe104>
    e45c:	e1a0b00c 	mov	fp, ip
    e460:	e58dc03c 	str	ip, [sp, #60]
    e464:	e58d101c 	str	r1, [sp, #28]
    e468:	e58d4038 	str	r4, [sp, #56]
    e46c:	eafffb72 	b	d23c <prog+0xd1f4>
    e470:	e28d1e67 	add	r1, sp, #1648	; 0x670
    e474:	e1a0000a 	mov	r0, sl
    e478:	e2811008 	add	r1, r1, #8	; 0x8
    e47c:	ebfffa11 	bl	ccc8 <__sprint>
    e480:	e3500000 	cmp	r0, #0	; 0x0
    e484:	1afffb0d 	bne	d0c0 <prog+0xd078>
    e488:	e59d6680 	ldr	r6, [sp, #1664]
    e48c:	e28dce61 	add	ip, sp, #1552	; 0x610
    e490:	eafffe24 	b	dd28 <prog+0xdce0>
    e494:	e59d6680 	ldr	r6, [sp, #1664]
    e498:	e59d567c 	ldr	r5, [sp, #1660]
    e49c:	e51f934c 	ldr	r9, [pc, #-844]	; e158 <prog+0xe110>
    e4a0:	eafffb93 	b	d2f4 <prog+0xd2ac>
    e4a4:	e2855001 	add	r5, r5, #1	; 0x1
    e4a8:	e51f3360 	ldr	r3, [pc, #-864]	; e150 <prog+0xe108>
    e4ac:	e3550007 	cmp	r5, #7	; 0x7
    e4b0:	e2866001 	add	r6, r6, #1	; 0x1
    e4b4:	e3a02001 	mov	r2, #1	; 0x1
    e4b8:	e5883000 	str	r3, [r8]
    e4bc:	e5882004 	str	r2, [r8, #4]
    e4c0:	e58d6680 	str	r6, [sp, #1664]
    e4c4:	e58d567c 	str	r5, [sp, #1660]
    e4c8:	d288c008 	addle	ip, r8, #8	; 0x8
    e4cc:	ca0000ec 	bgt	e884 <prog+0xe83c>
    e4d0:	e3500000 	cmp	r0, #0	; 0x0
    e4d4:	1a000002 	bne	e4e4 <prog+0xe49c>
    e4d8:	e59d2034 	ldr	r2, [sp, #52]
    e4dc:	e3520000 	cmp	r2, #0	; 0x0
    e4e0:	0afffc91 	beq	d72c <prog+0xd6e4>
    e4e4:	e59d567c 	ldr	r5, [sp, #1660]
    e4e8:	e3a03001 	mov	r3, #1	; 0x1
    e4ec:	e2855001 	add	r5, r5, #1	; 0x1
    e4f0:	e58c3004 	str	r3, [ip, #4]
    e4f4:	e59d3028 	ldr	r3, [sp, #40]
    e4f8:	e2866001 	add	r6, r6, #1	; 0x1
    e4fc:	e3550007 	cmp	r5, #7	; 0x7
    e500:	e58c3000 	str	r3, [ip]
    e504:	e58d6680 	str	r6, [sp, #1664]
    e508:	e58d567c 	str	r5, [sp, #1660]
    e50c:	d28c2008 	addle	r2, ip, #8	; 0x8
    e510:	ca00014f 	bgt	ea54 <prog+0xea0c>
    e514:	e2604000 	rsb	r4, r0, #0	; 0x0
    e518:	e3540000 	cmp	r4, #0	; 0x0
    e51c:	da0000a3 	ble	e7b0 <prog+0xe768>
    e520:	e3540010 	cmp	r4, #16	; 0x10
    e524:	da00008e 	ble	e764 <prog+0xe71c>
    e528:	e51f93d4 	ldr	r9, [pc, #-980]	; e15c <prog+0xe114>
    e52c:	ea000002 	b	e53c <prog+0xe4f4>
    e530:	e2444010 	sub	r4, r4, #16	; 0x10
    e534:	e3540010 	cmp	r4, #16	; 0x10
    e538:	da00008a 	ble	e768 <prog+0xe720>
    e53c:	e2855001 	add	r5, r5, #1	; 0x1
    e540:	e28d1e67 	add	r1, sp, #1648	; 0x670
    e544:	e2866010 	add	r6, r6, #16	; 0x10
    e548:	e3a03010 	mov	r3, #16	; 0x10
    e54c:	e3550007 	cmp	r5, #7	; 0x7
    e550:	e5823004 	str	r3, [r2, #4]
    e554:	e5829000 	str	r9, [r2]
    e558:	e1a0000a 	mov	r0, sl
    e55c:	e2811008 	add	r1, r1, #8	; 0x8
    e560:	e2822008 	add	r2, r2, #8	; 0x8
    e564:	e58d6680 	str	r6, [sp, #1664]
    e568:	e58d567c 	str	r5, [sp, #1660]
    e56c:	daffffef 	ble	e530 <prog+0xe4e8>
    e570:	ebfff9d4 	bl	ccc8 <__sprint>
    e574:	e3500000 	cmp	r0, #0	; 0x0
    e578:	1afffad0 	bne	d0c0 <prog+0xd078>
    e57c:	e59d6680 	ldr	r6, [sp, #1664]
    e580:	e59d567c 	ldr	r5, [sp, #1660]
    e584:	e28d2e61 	add	r2, sp, #1552	; 0x610
    e588:	eaffffe8 	b	e530 <prog+0xe4e8>
    e58c:	e3a03006 	mov	r3, #6	; 0x6
    e590:	e51f4444 	ldr	r4, [pc, #-1092]	; e154 <prog+0xe10c>
    e594:	e1a0b003 	mov	fp, r3
    e598:	e58d303c 	str	r3, [sp, #60]
    e59c:	e58d401c 	str	r4, [sp, #28]
    e5a0:	eafffc03 	b	d5b4 <prog+0xd56c>
    e5a4:	e59d567c 	ldr	r5, [sp, #1660]
    e5a8:	e51f9458 	ldr	r9, [pc, #-1112]	; e158 <prog+0xe110>
    e5ac:	eafffc84 	b	d7c4 <prog+0xd77c>
    e5b0:	e59d4054 	ldr	r4, [sp, #84]
    e5b4:	e3570066 	cmp	r7, #102	; 0x66
    e5b8:	e3844c01 	orr	r4, r4, #256	; 0x100
    e5bc:	e58d4054 	str	r4, [sp, #84]
    e5c0:	01a0b006 	moveq	fp, r6
    e5c4:	03a02003 	moveq	r2, #3	; 0x3
    e5c8:	0a000005 	beq	e5e4 <prog+0xe59c>
    e5cc:	e3570045 	cmp	r7, #69	; 0x45
    e5d0:	13570065 	cmpne	r7, #101	; 0x65
    e5d4:	11a0b006 	movne	fp, r6
    e5d8:	13a02002 	movne	r2, #2	; 0x2
    e5dc:	0286b001 	addeq	fp, r6, #1	; 0x1
    e5e0:	03a02002 	moveq	r2, #2	; 0x2
    e5e4:	e28d3048 	add	r3, sp, #72	; 0x48
    e5e8:	e8930018 	ldmia	r3, {r3, r4}
    e5ec:	e3530000 	cmp	r3, #0	; 0x0
    e5f0:	a3a0c000 	movge	ip, #0	; 0x0
    e5f4:	b3a0c02d 	movlt	ip, #45	; 0x2d
    e5f8:	b59d1048 	ldrlt	r1, [sp, #72]
    e5fc:	b59d304c 	ldrlt	r3, [sp, #76]
    e600:	a58dc02c 	strge	ip, [sp, #44]
    e604:	b58dc02c 	strlt	ip, [sp, #44]
    e608:	e28dce6a 	add	ip, sp, #1696	; 0x6a0
    e60c:	e28cc008 	add	ip, ip, #8	; 0x8
    e610:	a1a05004 	movge	r5, r4
    e614:	b1a05003 	movlt	r5, r3
    e618:	a1a04003 	movge	r4, r3
    e61c:	b2814102 	addlt	r4, r1, #-2147483648	; 0x80000000
    e620:	e58dc004 	str	ip, [sp, #4]
    e624:	e28dce69 	add	ip, sp, #1680	; 0x690
    e628:	e1a03002 	mov	r3, r2
    e62c:	e28dee6a 	add	lr, sp, #1696	; 0x6a0
    e630:	e28cc00c 	add	ip, ip, #12	; 0xc
    e634:	e59d0010 	ldr	r0, [sp, #16]
    e638:	e1a01004 	mov	r1, r4
    e63c:	e1a02005 	mov	r2, r5
    e640:	e58de008 	str	lr, [sp, #8]
    e644:	e58dc00c 	str	ip, [sp, #12]
    e648:	e58db000 	str	fp, [sp]
    e64c:	eb000406 	bl	f66c <_dtoa_r>
    e650:	e3570067 	cmp	r7, #103	; 0x67
    e654:	13570047 	cmpne	r7, #71	; 0x47
    e658:	e58d001c 	str	r0, [sp, #28]
    e65c:	1a000003 	bne	e670 <prog+0xe628>
    e660:	e59d1054 	ldr	r1, [sp, #84]
    e664:	e3110001 	tst	r1, #1	; 0x1
    e668:	059d269c 	ldreq	r2, [sp, #1692]
    e66c:	0a000019 	beq	e6d8 <prog+0xe690>
    e670:	e59d201c 	ldr	r2, [sp, #28]
    e674:	e3570066 	cmp	r7, #102	; 0x66
    e678:	e082900b 	add	r9, r2, fp
    e67c:	0a00012d 	beq	eb38 <prog+0xeaf0>
    e680:	e3a02000 	mov	r2, #0	; 0x0
    e684:	e1a00004 	mov	r0, r4
    e688:	e1a01005 	mov	r1, r5
    e68c:	e3a03000 	mov	r3, #0	; 0x0
    e690:	eb0012ba 	bl	13180 <__eqdf2>
    e694:	e3500000 	cmp	r0, #0	; 0x0
    e698:	01a02009 	moveq	r2, r9
    e69c:	058d269c 	streq	r2, [sp, #1692]
    e6a0:	0a00000c 	beq	e6d8 <prog+0xe690>
    e6a4:	e59d269c 	ldr	r2, [sp, #1692]
    e6a8:	e1590002 	cmp	r9, r2
    e6ac:	9a000009 	bls	e6d8 <prog+0xe690>
    e6b0:	e0623009 	rsb	r3, r2, r9
    e6b4:	e0833002 	add	r3, r3, r2
    e6b8:	e2821001 	add	r1, r2, #1	; 0x1
    e6bc:	e3a00030 	mov	r0, #48	; 0x30
    e6c0:	e1510003 	cmp	r1, r3
    e6c4:	e5410001 	strb	r0, [r1, #-1]
    e6c8:	e1a02001 	mov	r2, r1
    e6cc:	e58d169c 	str	r1, [sp, #1692]
    e6d0:	e2811001 	add	r1, r1, #1	; 0x1
    e6d4:	1afffff9 	bne	e6c0 <prog+0xe678>
    e6d8:	e59d401c 	ldr	r4, [sp, #28]
    e6dc:	e3570067 	cmp	r7, #103	; 0x67
    e6e0:	13a03000 	movne	r3, #0	; 0x0
    e6e4:	03a03001 	moveq	r3, #1	; 0x1
    e6e8:	e3570067 	cmp	r7, #103	; 0x67
    e6ec:	13570047 	cmpne	r7, #71	; 0x47
    e6f0:	e0645002 	rsb	r5, r4, r2
    e6f4:	1a000082 	bne	e904 <prog+0xe8bc>
    e6f8:	e59d06a8 	ldr	r0, [sp, #1704]
    e6fc:	e3700004 	cmn	r0, #4	; 0x4
    e700:	da0000bd 	ble	e9fc <prog+0xe9b4>
    e704:	e1560000 	cmp	r6, r0
    e708:	a3a07067 	movge	r7, #103	; 0x67
    e70c:	ba0000ba 	blt	e9fc <prog+0xe9b4>
    e710:	e1550000 	cmp	r5, r0
    e714:	e1a0b000 	mov	fp, r0
    e718:	ca0000fd 	bgt	eb14 <prog+0xeacc>
    e71c:	e59d1054 	ldr	r1, [sp, #84]
    e720:	e3110001 	tst	r1, #1	; 0x1
    e724:	1280b001 	addne	fp, r0, #1	; 0x1
    e728:	1a0000f4 	bne	eb00 <prog+0xeab8>
    e72c:	e35b0000 	cmp	fp, #0	; 0x0
    e730:	a1a0200b 	movge	r2, fp
    e734:	b3a02000 	movlt	r2, #0	; 0x0
    e738:	e58d203c 	str	r2, [sp, #60]
    e73c:	e59dc02c 	ldr	ip, [sp, #44]
    e740:	e35c0000 	cmp	ip, #0	; 0x0
    e744:	1a000068 	bne	e8ec <prog+0xe8a4>
    e748:	e35b0000 	cmp	fp, #0	; 0x0
    e74c:	a1a0100b 	movge	r1, fp
    e750:	b3a01000 	movlt	r1, #0	; 0x0
    e754:	e58d103c 	str	r1, [sp, #60]
    e758:	e58d5034 	str	r5, [sp, #52]
    e75c:	e58dc038 	str	ip, [sp, #56]
    e760:	eafffab5 	b	d23c <prog+0xd1f4>
    e764:	e51f9610 	ldr	r9, [pc, #-1552]	; e15c <prog+0xe114>
    e768:	e2855001 	add	r5, r5, #1	; 0x1
    e76c:	e0866004 	add	r6, r6, r4
    e770:	e3550007 	cmp	r5, #7	; 0x7
    e774:	e5829000 	str	r9, [r2]
    e778:	e5824004 	str	r4, [r2, #4]
    e77c:	e58d6680 	str	r6, [sp, #1664]
    e780:	e58d567c 	str	r5, [sp, #1660]
    e784:	d2822008 	addle	r2, r2, #8	; 0x8
    e788:	da000008 	ble	e7b0 <prog+0xe768>
    e78c:	e28d1e67 	add	r1, sp, #1648	; 0x670
    e790:	e1a0000a 	mov	r0, sl
    e794:	e2811008 	add	r1, r1, #8	; 0x8
    e798:	ebfff94a 	bl	ccc8 <__sprint>
    e79c:	e3500000 	cmp	r0, #0	; 0x0
    e7a0:	1afffa46 	bne	d0c0 <prog+0xd078>
    e7a4:	e59d6680 	ldr	r6, [sp, #1664]
    e7a8:	e59d567c 	ldr	r5, [sp, #1660]
    e7ac:	e28d2e61 	add	r2, sp, #1552	; 0x610
    e7b0:	e59d4034 	ldr	r4, [sp, #52]
    e7b4:	e2855001 	add	r5, r5, #1	; 0x1
    e7b8:	e59d801c 	ldr	r8, [sp, #28]
    e7bc:	e3550007 	cmp	r5, #7	; 0x7
    e7c0:	e0866004 	add	r6, r6, r4
    e7c4:	e5828000 	str	r8, [r2]
    e7c8:	e5824004 	str	r4, [r2, #4]
    e7cc:	e58d6680 	str	r6, [sp, #1664]
    e7d0:	e58d567c 	str	r5, [sp, #1660]
    e7d4:	d282c008 	addle	ip, r2, #8	; 0x8
    e7d8:	dafffbd3 	ble	d72c <prog+0xd6e4>
    e7dc:	eafffd99 	b	de48 <prog+0xde00>
    e7e0:	e28d1e67 	add	r1, sp, #1648	; 0x670
    e7e4:	e1a0000a 	mov	r0, sl
    e7e8:	e2811008 	add	r1, r1, #8	; 0x8
    e7ec:	ebfff935 	bl	ccc8 <__sprint>
    e7f0:	e3500000 	cmp	r0, #0	; 0x0
    e7f4:	1afffa31 	bne	d0c0 <prog+0xd078>
    e7f8:	e59d6680 	ldr	r6, [sp, #1664]
    e7fc:	e59d567c 	ldr	r5, [sp, #1660]
    e800:	e59d06a8 	ldr	r0, [sp, #1704]
    e804:	e28dce61 	add	ip, sp, #1552	; 0x610
    e808:	eafffd82 	b	de18 <prog+0xddd0>
    e80c:	e28d1e67 	add	r1, sp, #1648	; 0x670
    e810:	e1a0000a 	mov	r0, sl
    e814:	e2811008 	add	r1, r1, #8	; 0x8
    e818:	ebfff92a 	bl	ccc8 <__sprint>
    e81c:	e3500000 	cmp	r0, #0	; 0x0
    e820:	1afffa26 	bne	d0c0 <prog+0xd078>
    e824:	e59d6680 	ldr	r6, [sp, #1664]
    e828:	e59d567c 	ldr	r5, [sp, #1660]
    e82c:	e59d06a8 	ldr	r0, [sp, #1704]
    e830:	e28d1e61 	add	r1, sp, #1552	; 0x610
    e834:	eafffd6b 	b	dde8 <prog+0xdda0>
    e838:	e28d1e67 	add	r1, sp, #1648	; 0x670
    e83c:	e1a0000a 	mov	r0, sl
    e840:	e2811008 	add	r1, r1, #8	; 0x8
    e844:	ebfff91f 	bl	ccc8 <__sprint>
    e848:	e3500000 	cmp	r0, #0	; 0x0
    e84c:	1afffa1b 	bne	d0c0 <prog+0xd078>
    e850:	e59d6680 	ldr	r6, [sp, #1664]
    e854:	e59d06a8 	ldr	r0, [sp, #1704]
    e858:	e28dce61 	add	ip, sp, #1552	; 0x610
    e85c:	eafffe5d 	b	e1d8 <prog+0xe190>
    e860:	e51f970c 	ldr	r9, [pc, #-1804]	; e15c <prog+0xe114>
    e864:	eafffce9 	b	dc10 <prog+0xdbc8>
    e868:	e3560000 	cmp	r6, #0	; 0x0
    e86c:	a1a04006 	movge	r4, r6
    e870:	b3a04000 	movlt	r4, #0	; 0x0
    e874:	e1a0b006 	mov	fp, r6
    e878:	e58d403c 	str	r4, [sp, #60]
    e87c:	e58d5038 	str	r5, [sp, #56]
    e880:	eafffa6d 	b	d23c <prog+0xd1f4>
    e884:	e28d1e67 	add	r1, sp, #1648	; 0x670
    e888:	e1a0000a 	mov	r0, sl
    e88c:	e2811008 	add	r1, r1, #8	; 0x8
    e890:	ebfff90c 	bl	ccc8 <__sprint>
    e894:	e3500000 	cmp	r0, #0	; 0x0
    e898:	1afffa08 	bne	d0c0 <prog+0xd078>
    e89c:	e59d6680 	ldr	r6, [sp, #1664]
    e8a0:	e59d06a8 	ldr	r0, [sp, #1704]
    e8a4:	e28dce61 	add	ip, sp, #1552	; 0x610
    e8a8:	eaffff08 	b	e4d0 <prog+0xe488>
    e8ac:	e59d001c 	ldr	r0, [sp, #28]
    e8b0:	ebfff7b0 	bl	c778 <strlen>
    e8b4:	e3500000 	cmp	r0, #0	; 0x0
    e8b8:	a1a0c000 	movge	ip, r0
    e8bc:	b3a0c000 	movlt	ip, #0	; 0x0
    e8c0:	e1a0b000 	mov	fp, r0
    e8c4:	e58dc03c 	str	ip, [sp, #60]
    e8c8:	e58d5038 	str	r5, [sp, #56]
    e8cc:	eafffa5a 	b	d23c <prog+0xd1f4>
    e8d0:	e3a02003 	mov	r2, #3	; 0x3
    e8d4:	e51f377c 	ldr	r3, [pc, #-1916]	; e160 <prog+0xe118>
    e8d8:	e1a0b002 	mov	fp, r2
    e8dc:	e58d203c 	str	r2, [sp, #60]
    e8e0:	e58d301c 	str	r3, [sp, #28]
    e8e4:	e58d4038 	str	r4, [sp, #56]
    e8e8:	eafffa53 	b	d23c <prog+0xd1f4>
    e8ec:	e3a02000 	mov	r2, #0	; 0x0
    e8f0:	e3a0302d 	mov	r3, #45	; 0x2d
    e8f4:	e58d5034 	str	r5, [sp, #52]
    e8f8:	e58d2038 	str	r2, [sp, #56]
    e8fc:	e5cd36af 	strb	r3, [sp, #1711]
    e900:	eafffa50 	b	d248 <prog+0xd200>
    e904:	e3570065 	cmp	r7, #101	; 0x65
    e908:	ca000069 	bgt	eab4 <prog+0xea6c>
    e90c:	e59d06a8 	ldr	r0, [sp, #1704]
    e910:	e20730ff 	and	r3, r7, #255	; 0xff
    e914:	e2400001 	sub	r0, r0, #1	; 0x1
    e918:	e3500000 	cmp	r0, #0	; 0x0
    e91c:	e5cd3695 	strb	r3, [sp, #1685]
    e920:	e1a0c000 	mov	ip, r0
    e924:	b3a0302d 	movlt	r3, #45	; 0x2d
    e928:	a3a0302b 	movge	r3, #43	; 0x2b
    e92c:	b260c000 	rsblt	ip, r0, #0	; 0x0
    e930:	b5cd3696 	strltb	r3, [sp, #1686]
    e934:	a5cd3696 	strgeb	r3, [sp, #1686]
    e938:	e35c0009 	cmp	ip, #9	; 0x9
    e93c:	d28c2030 	addle	r2, ip, #48	; 0x30
    e940:	d5cd2698 	strleb	r2, [sp, #1688]
    e944:	d3a03030 	movle	r3, #48	; 0x30
    e948:	d28d2e69 	addle	r2, sp, #1680	; 0x690
    e94c:	e58d06a8 	str	r0, [sp, #1704]
    e950:	d5cd3697 	strleb	r3, [sp, #1687]
    e954:	d2822009 	addle	r2, r2, #9	; 0x9
    e958:	da00001a 	ble	e9c8 <prog+0xe980>
    e95c:	e28d4e67 	add	r4, sp, #1648	; 0x670
    e960:	e2844008 	add	r4, r4, #8	; 0x8
    e964:	e51f0808 	ldr	r0, [pc, #-2056]	; e164 <prog+0xe11c>
    e968:	e1a0e004 	mov	lr, r4
    e96c:	e0c31c90 	smull	r1, r3, r0, ip
    e970:	e1a02fcc 	mov	r2, ip, asr #31
    e974:	e0622143 	rsb	r2, r2, r3, asr #2
    e978:	e0821102 	add	r1, r2, r2, lsl #2
    e97c:	e04c1081 	sub	r1, ip, r1, lsl #1
    e980:	e2811030 	add	r1, r1, #48	; 0x30
    e984:	e3520009 	cmp	r2, #9	; 0x9
    e988:	e1a0c002 	mov	ip, r2
    e98c:	e56e1001 	strb	r1, [lr, #-1]!
    e990:	cafffff5 	bgt	e96c <prog+0xe924>
    e994:	e24e0001 	sub	r0, lr, #1	; 0x1
    e998:	e1500004 	cmp	r0, r4
    e99c:	e2823030 	add	r3, r2, #48	; 0x30
    e9a0:	228d2e69 	addcs	r2, sp, #1680	; 0x690
    e9a4:	e54e3001 	strb	r3, [lr, #-1]
    e9a8:	22822007 	addcs	r2, r2, #7	; 0x7
    e9ac:	2a000005 	bcs	e9c8 <prog+0xe980>
    e9b0:	e28d2e69 	add	r2, sp, #1680	; 0x690
    e9b4:	e2822007 	add	r2, r2, #7	; 0x7
    e9b8:	e4d03001 	ldrb	r3, [r0], #1
    e9bc:	e1500004 	cmp	r0, r4
    e9c0:	e4c23001 	strb	r3, [r2], #1
    e9c4:	3afffffb 	bcc	e9b8 <prog+0xe970>
    e9c8:	e28d3e69 	add	r3, sp, #1680	; 0x690
    e9cc:	e2833005 	add	r3, r3, #5	; 0x5
    e9d0:	e0632002 	rsb	r2, r3, r2
    e9d4:	e3550001 	cmp	r5, #1	; 0x1
    e9d8:	e58d2030 	str	r2, [sp, #48]
    e9dc:	e085b002 	add	fp, r5, r2
    e9e0:	da000043 	ble	eaf4 <prog+0xeaac>
    e9e4:	e28bb001 	add	fp, fp, #1	; 0x1
    e9e8:	e35b0000 	cmp	fp, #0	; 0x0
    e9ec:	a1a0400b 	movge	r4, fp
    e9f0:	b3a04000 	movlt	r4, #0	; 0x0
    e9f4:	e58d403c 	str	r4, [sp, #60]
    e9f8:	eaffff4f 	b	e73c <prog+0xe6f4>
    e9fc:	e3530000 	cmp	r3, #0	; 0x0
    ea00:	13a03065 	movne	r3, #101	; 0x65
    ea04:	11a07003 	movne	r7, r3
    ea08:	03a03045 	moveq	r3, #69	; 0x45
    ea0c:	01a07003 	moveq	r7, r3
    ea10:	eaffffbf 	b	e914 <prog+0xe8cc>
    ea14:	e3a01000 	mov	r1, #0	; 0x0
    ea18:	e28d2e6a 	add	r2, sp, #1696	; 0x6a0
    ea1c:	e59d0010 	ldr	r0, [sp, #16]
    ea20:	e2822004 	add	r2, r2, #4	; 0x4
    ea24:	e1a03001 	mov	r3, r1
    ea28:	e58d9000 	str	r9, [sp]
    ea2c:	eb0000e8 	bl	edd4 <_wcsrtombs_r>
    ea30:	e3700001 	cmn	r0, #1	; 0x1
    ea34:	e1a0b000 	mov	fp, r0
    ea38:	159d401c 	ldrne	r4, [sp, #28]
    ea3c:	158d46a4 	strne	r4, [sp, #1700]
    ea40:	1afffbc4 	bne	d958 <prog+0xd910>
    ea44:	e1da30bc 	ldrh	r3, [sl, #12]
    ea48:	e3833040 	orr	r3, r3, #64	; 0x40
    ea4c:	e1ca30bc 	strh	r3, [sl, #12]
    ea50:	eafff9a0 	b	d0d8 <prog+0xd090>
    ea54:	e28d1e67 	add	r1, sp, #1648	; 0x670
    ea58:	e1a0000a 	mov	r0, sl
    ea5c:	e2811008 	add	r1, r1, #8	; 0x8
    ea60:	ebfff898 	bl	ccc8 <__sprint>
    ea64:	e3500000 	cmp	r0, #0	; 0x0
    ea68:	1afff994 	bne	d0c0 <prog+0xd078>
    ea6c:	e59d6680 	ldr	r6, [sp, #1664]
    ea70:	e59d567c 	ldr	r5, [sp, #1660]
    ea74:	e59d06a8 	ldr	r0, [sp, #1704]
    ea78:	e28d2e61 	add	r2, sp, #1552	; 0x610
    ea7c:	eafffea4 	b	e514 <prog+0xe4cc>
    ea80:	e3560000 	cmp	r6, #0	; 0x0
    ea84:	a1a01006 	movge	r1, r6
    ea88:	b3a01000 	movlt	r1, #0	; 0x0
    ea8c:	e1a0b006 	mov	fp, r6
    ea90:	e58d103c 	str	r1, [sp, #60]
    ea94:	e58d0038 	str	r0, [sp, #56]
    ea98:	eafff9e7 	b	d23c <prog+0xd1f4>
    ea9c:	e59d3680 	ldr	r3, [sp, #1664]
    eaa0:	e3530000 	cmp	r3, #0	; 0x0
    eaa4:	1a000031 	bne	eb70 <prog+0xeb28>
    eaa8:	e3a03000 	mov	r3, #0	; 0x0
    eaac:	e58d367c 	str	r3, [sp, #1660]
    eab0:	eafff988 	b	d0d8 <prog+0xd090>
    eab4:	e3570066 	cmp	r7, #102	; 0x66
    eab8:	159d06a8 	ldrne	r0, [sp, #1704]
    eabc:	1affff13 	bne	e710 <prog+0xe6c8>
    eac0:	e59db6a8 	ldr	fp, [sp, #1704]
    eac4:	e35b0000 	cmp	fp, #0	; 0x0
    eac8:	da00003e 	ble	ebc8 <prog+0xeb80>
    eacc:	e3560000 	cmp	r6, #0	; 0x0
    ead0:	1a00002d 	bne	eb8c <prog+0xeb44>
    ead4:	e59dc054 	ldr	ip, [sp, #84]
    ead8:	e31c0001 	tst	ip, #1	; 0x1
    eadc:	1a00002a 	bne	eb8c <prog+0xeb44>
    eae0:	e35b0000 	cmp	fp, #0	; 0x0
    eae4:	a1a0100b 	movge	r1, fp
    eae8:	b3a01000 	movlt	r1, #0	; 0x0
    eaec:	e58d103c 	str	r1, [sp, #60]
    eaf0:	eaffff11 	b	e73c <prog+0xe6f4>
    eaf4:	e59d2054 	ldr	r2, [sp, #84]
    eaf8:	e3120001 	tst	r2, #1	; 0x1
    eafc:	1affffb8 	bne	e9e4 <prog+0xe99c>
    eb00:	e35b0000 	cmp	fp, #0	; 0x0
    eb04:	a1a0300b 	movge	r3, fp
    eb08:	b3a03000 	movlt	r3, #0	; 0x0
    eb0c:	e58d303c 	str	r3, [sp, #60]
    eb10:	eaffff09 	b	e73c <prog+0xe6f4>
    eb14:	e3500000 	cmp	r0, #0	; 0x0
    eb18:	c3a00001 	movgt	r0, #1	; 0x1
    eb1c:	d26b0002 	rsble	r0, fp, #2	; 0x2
    eb20:	e080b005 	add	fp, r0, r5
    eb24:	e35b0000 	cmp	fp, #0	; 0x0
    eb28:	a1a0400b 	movge	r4, fp
    eb2c:	b3a04000 	movlt	r4, #0	; 0x0
    eb30:	e58d403c 	str	r4, [sp, #60]
    eb34:	eaffff00 	b	e73c <prog+0xe6f4>
    eb38:	e5d23000 	ldrb	r3, [r2]
    eb3c:	e3530030 	cmp	r3, #48	; 0x30
    eb40:	1a000007 	bne	eb64 <prog+0xeb1c>
    eb44:	e1a00004 	mov	r0, r4
    eb48:	e1a01005 	mov	r1, r5
    eb4c:	e3a02000 	mov	r2, #0	; 0x0
    eb50:	e3a03000 	mov	r3, #0	; 0x0
    eb54:	ebffefc9 	bl	aa80 <__nedf2>
    eb58:	e3500000 	cmp	r0, #0	; 0x0
    eb5c:	126b0001 	rsbne	r0, fp, #1	; 0x1
    eb60:	158d06a8 	strne	r0, [sp, #1704]
    eb64:	e59d06a8 	ldr	r0, [sp, #1704]
    eb68:	e0899000 	add	r9, r9, r0
    eb6c:	eafffec3 	b	e680 <prog+0xe638>
    eb70:	e28d1e67 	add	r1, sp, #1648	; 0x670
    eb74:	e1a0000a 	mov	r0, sl
    eb78:	e2811008 	add	r1, r1, #8	; 0x8
    eb7c:	ebfff851 	bl	ccc8 <__sprint>
    eb80:	e3500000 	cmp	r0, #0	; 0x0
    eb84:	1afff953 	bne	d0d8 <prog+0xd090>
    eb88:	eaffffc6 	b	eaa8 <prog+0xea60>
    eb8c:	e28b3001 	add	r3, fp, #1	; 0x1
    eb90:	e086b003 	add	fp, r6, r3
    eb94:	e35b0000 	cmp	fp, #0	; 0x0
    eb98:	a1a0200b 	movge	r2, fp
    eb9c:	b3a02000 	movlt	r2, #0	; 0x0
    eba0:	e58d203c 	str	r2, [sp, #60]
    eba4:	eafffee4 	b	e73c <prog+0xe6f4>
    eba8:	e5996000 	ldr	r6, [r9]
    ebac:	e3560000 	cmp	r6, #0	; 0x0
    ebb0:	e2891004 	add	r1, r9, #4	; 0x4
    ebb4:	ba000015 	blt	ec10 <prog+0xebc8>
    ebb8:	e58d2018 	str	r2, [sp, #24]
    ebbc:	e5d23000 	ldrb	r3, [r2]
    ebc0:	e1a09001 	mov	r9, r1
    ebc4:	eafff8cd 	b	cf00 <_vfprintf_r+0x1f8>
    ebc8:	e3560000 	cmp	r6, #0	; 0x0
    ebcc:	1a000005 	bne	ebe8 <prog+0xeba0>
    ebd0:	e59d3054 	ldr	r3, [sp, #84]
    ebd4:	e3130001 	tst	r3, #1	; 0x1
    ebd8:	03a04001 	moveq	r4, #1	; 0x1
    ebdc:	058d403c 	streq	r4, [sp, #60]
    ebe0:	01a0b004 	moveq	fp, r4
    ebe4:	0afffed4 	beq	e73c <prog+0xe6f4>
    ebe8:	e286b002 	add	fp, r6, #2	; 0x2
    ebec:	e35b0000 	cmp	fp, #0	; 0x0
    ebf0:	a1a0c00b 	movge	ip, fp
    ebf4:	b3a0c000 	movlt	ip, #0	; 0x0
    ebf8:	e58dc03c 	str	ip, [sp, #60]
    ebfc:	eafffece 	b	e73c <prog+0xe6f4>
    ec00:	e1da30bc 	ldrh	r3, [sl, #12]
    ec04:	e3833040 	orr	r3, r3, #64	; 0x40
    ec08:	e1ca30bc 	strh	r3, [sl, #12]
    ec0c:	eafff92e 	b	d0cc <prog+0xd084>
    ec10:	e58d2018 	str	r2, [sp, #24]
    ec14:	e5d23000 	ldrb	r3, [r2]
    ec18:	e1a09001 	mov	r9, r1
    ec1c:	e3e06000 	mvn	r6, #0	; 0x0
    ec20:	eafff8b6 	b	cf00 <_vfprintf_r+0x1f8>

0000ec24 <vfprintf>:
    ec24:	e52de004 	str	lr, [sp, #-4]!
    ec28:	e1a03002 	mov	r3, r2
    ec2c:	e59f2018 	ldr	r2, [pc, #24]	; ec4c <prog+0xec04>
    ec30:	e1a0c000 	mov	ip, r0
    ec34:	e1a0e001 	mov	lr, r1
    ec38:	e5920000 	ldr	r0, [r2]
    ec3c:	e1a0100c 	mov	r1, ip
    ec40:	e1a0200e 	mov	r2, lr
    ec44:	e49de004 	ldr	lr, [sp], #4
    ec48:	eafff82e 	b	cd08 <_vfprintf_r>
    ec4c:	40000014 	andmi	r0, r0, r4, lsl r0

0000ec50 <__swbuf>:
    ec50:	e59f30f8 	ldr	r3, [pc, #248]	; ed50 <prog+0xed08>
    ec54:	e5932000 	ldr	r2, [r3]
    ec58:	e3520000 	cmp	r2, #0	; 0x0
    ec5c:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    ec60:	e1a05000 	mov	r5, r0
    ec64:	e1a04001 	mov	r4, r1
    ec68:	0a000002 	beq	ec78 <__swbuf+0x28>
    ec6c:	e5923038 	ldr	r3, [r2, #56]
    ec70:	e3530000 	cmp	r3, #0	; 0x0
    ec74:	0a000025 	beq	ed10 <__swbuf+0xc0>
    ec78:	e1d430bc 	ldrh	r3, [r4, #12]
    ec7c:	e5942018 	ldr	r2, [r4, #24]
    ec80:	e3130008 	tst	r3, #8	; 0x8
    ec84:	e5842008 	str	r2, [r4, #8]
    ec88:	0a000023 	beq	ed1c <__swbuf+0xcc>
    ec8c:	e5942010 	ldr	r2, [r4, #16]
    ec90:	e3520000 	cmp	r2, #0	; 0x0
    ec94:	0a000020 	beq	ed1c <__swbuf+0xcc>
    ec98:	e5941000 	ldr	r1, [r4]
    ec9c:	e5943014 	ldr	r3, [r4, #20]
    eca0:	e0622001 	rsb	r2, r2, r1
    eca4:	e1520003 	cmp	r2, r3
    eca8:	b2822001 	addlt	r2, r2, #1	; 0x1
    ecac:	aa000020 	bge	ed34 <__swbuf+0xe4>
    ecb0:	e5943008 	ldr	r3, [r4, #8]
    ecb4:	e20550ff 	and	r5, r5, #255	; 0xff
    ecb8:	e2433001 	sub	r3, r3, #1	; 0x1
    ecbc:	e5843008 	str	r3, [r4, #8]
    ecc0:	e4c15001 	strb	r5, [r1], #1
    ecc4:	e5943014 	ldr	r3, [r4, #20]
    ecc8:	e1530002 	cmp	r3, r2
    eccc:	e5841000 	str	r1, [r4]
    ecd0:	0a000007 	beq	ecf4 <__swbuf+0xa4>
    ecd4:	e5d4300c 	ldrb	r3, [r4, #12]
    ecd8:	e355000a 	cmp	r5, #10	; 0xa
    ecdc:	13a03000 	movne	r3, #0	; 0x0
    ece0:	02033001 	andeq	r3, r3, #1	; 0x1
    ece4:	e3530000 	cmp	r3, #0	; 0x0
    ece8:	1a000001 	bne	ecf4 <__swbuf+0xa4>
    ecec:	e1a00005 	mov	r0, r5
    ecf0:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
    ecf4:	e1a00004 	mov	r0, r4
    ecf8:	ebfff1c9 	bl	b424 <fflush>
    ecfc:	e3500000 	cmp	r0, #0	; 0x0
    ed00:	0afffff9 	beq	ecec <__swbuf+0x9c>
    ed04:	e3e05000 	mvn	r5, #0	; 0x0
    ed08:	e1a00005 	mov	r0, r5
    ed0c:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
    ed10:	e1a00002 	mov	r0, r2
    ed14:	ebfff215 	bl	b570 <__sinit>
    ed18:	eaffffd6 	b	ec78 <__swbuf+0x28>
    ed1c:	e1a00004 	mov	r0, r4
    ed20:	eb000191 	bl	f36c <__swsetup>
    ed24:	e3500000 	cmp	r0, #0	; 0x0
    ed28:	1afffff5 	bne	ed04 <__swbuf+0xb4>
    ed2c:	e5942010 	ldr	r2, [r4, #16]
    ed30:	eaffffd8 	b	ec98 <__swbuf+0x48>
    ed34:	e1a00004 	mov	r0, r4
    ed38:	ebfff1b9 	bl	b424 <fflush>
    ed3c:	e3500000 	cmp	r0, #0	; 0x0
    ed40:	1affffef 	bne	ed04 <__swbuf+0xb4>
    ed44:	e5941000 	ldr	r1, [r4]
    ed48:	e3a02001 	mov	r2, #1	; 0x1
    ed4c:	eaffffd7 	b	ecb0 <__swbuf+0x60>
    ed50:	40000014 	andmi	r0, r0, r4, lsl r0

0000ed54 <_wcrtomb_r>:
    ed54:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    ed58:	e251c000 	subs	ip, r1, #0	; 0x0
    ed5c:	e24dd00c 	sub	sp, sp, #12	; 0xc
    ed60:	e1a05000 	mov	r5, r0
    ed64:	e1a04003 	mov	r4, r3
    ed68:	0a00000a 	beq	ed98 <_wcrtomb_r+0x44>
    ed6c:	eb000076 	bl	ef4c <_wctomb_r>
    ed70:	e3700001 	cmn	r0, #1	; 0x1
    ed74:	e1a01000 	mov	r1, r0
    ed78:	11a01000 	movne	r1, r0
    ed7c:	03a03000 	moveq	r3, #0	; 0x0
    ed80:	03a0208a 	moveq	r2, #138	; 0x8a
    ed84:	e1a00001 	mov	r0, r1
    ed88:	05843000 	streq	r3, [r4]
    ed8c:	05852000 	streq	r2, [r5]
    ed90:	e28dd00c 	add	sp, sp, #12	; 0xc
    ed94:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
    ed98:	e1a0200c 	mov	r2, ip
    ed9c:	e28d1002 	add	r1, sp, #2	; 0x2
    eda0:	eb000069 	bl	ef4c <_wctomb_r>
    eda4:	eafffff1 	b	ed70 <_wcrtomb_r+0x1c>

0000eda8 <wcrtomb>:
    eda8:	e52de004 	str	lr, [sp, #-4]!
    edac:	e1a03002 	mov	r3, r2
    edb0:	e59f2018 	ldr	r2, [pc, #24]	; edd0 <prog+0xed88>
    edb4:	e1a0c000 	mov	ip, r0
    edb8:	e1a0e001 	mov	lr, r1
    edbc:	e5920000 	ldr	r0, [r2]
    edc0:	e1a0100c 	mov	r1, ip
    edc4:	e1a0200e 	mov	r2, lr
    edc8:	e49de004 	ldr	lr, [sp], #4
    edcc:	eaffffe0 	b	ed54 <_wcrtomb_r>
    edd0:	40000014 	andmi	r0, r0, r4, lsl r0

0000edd4 <_wcsrtombs_r>:
    edd4:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    edd8:	e3510000 	cmp	r1, #0	; 0x0
    eddc:	e24dd014 	sub	sp, sp, #20	; 0x14
    ede0:	e58d1000 	str	r1, [sp]
    ede4:	e58d0004 	str	r0, [sp, #4]
    ede8:	e1a0b002 	mov	fp, r2
    edec:	e1a06003 	mov	r6, r3
    edf0:	e59d9038 	ldr	r9, [sp, #56]
    edf4:	0a000039 	beq	eee0 <_wcsrtombs_r+0x10c>
    edf8:	e3530000 	cmp	r3, #0	; 0x0
    edfc:	e5928000 	ldr	r8, [r2]
    ee00:	0a000039 	beq	eeec <_wcsrtombs_r+0x118>
    ee04:	e59d4000 	ldr	r4, [sp]
    ee08:	e3a05000 	mov	r5, #0	; 0x0
    ee0c:	e59d0004 	ldr	r0, [sp, #4]
    ee10:	e28d100a 	add	r1, sp, #10	; 0xa
    ee14:	e5982000 	ldr	r2, [r8]
    ee18:	e1a03009 	mov	r3, r9
    ee1c:	e599a000 	ldr	sl, [r9]
    ee20:	e5997004 	ldr	r7, [r9, #4]
    ee24:	ebffffca 	bl	ed54 <_wcrtomb_r>
    ee28:	e3700001 	cmn	r0, #1	; 0x1
    ee2c:	0a00001f 	beq	eeb0 <_wcsrtombs_r+0xdc>
    ee30:	e0603006 	rsb	r3, r0, r6
    ee34:	e1530005 	cmp	r3, r5
    ee38:	33a02000 	movcc	r2, #0	; 0x0
    ee3c:	23a02001 	movcs	r2, #1	; 0x1
    ee40:	e1500006 	cmp	r0, r6
    ee44:	23a02000 	movcs	r2, #0	; 0x0
    ee48:	e3520000 	cmp	r2, #0	; 0x0
    ee4c:	0a000020 	beq	eed4 <_wcsrtombs_r+0x100>
    ee50:	e59d1000 	ldr	r1, [sp]
    ee54:	e3510000 	cmp	r1, #0	; 0x0
    ee58:	e0855000 	add	r5, r5, r0
    ee5c:	0a00000c 	beq	ee94 <_wcsrtombs_r+0xc0>
    ee60:	e3500000 	cmp	r0, #0	; 0x0
    ee64:	da000007 	ble	ee88 <_wcsrtombs_r+0xb4>
    ee68:	e3a02000 	mov	r2, #0	; 0x0
    ee6c:	e282100a 	add	r1, r2, #10	; 0xa
    ee70:	e7d1300d 	ldrb	r3, [r1, sp]
    ee74:	e7c23004 	strb	r3, [r2, r4]
    ee78:	e2822001 	add	r2, r2, #1	; 0x1
    ee7c:	e1500002 	cmp	r0, r2
    ee80:	1afffff9 	bne	ee6c <_wcsrtombs_r+0x98>
    ee84:	e0844000 	add	r4, r4, r0
    ee88:	e59b3000 	ldr	r3, [fp]
    ee8c:	e2833004 	add	r3, r3, #4	; 0x4
    ee90:	e58b3000 	str	r3, [fp]
    ee94:	e5983000 	ldr	r3, [r8]
    ee98:	e3530000 	cmp	r3, #0	; 0x0
    ee9c:	0a000014 	beq	eef4 <_wcsrtombs_r+0x120>
    eea0:	e1550006 	cmp	r5, r6
    eea4:	2a000007 	bcs	eec8 <_wcsrtombs_r+0xf4>
    eea8:	e2888004 	add	r8, r8, #4	; 0x4
    eeac:	eaffffd6 	b	ee0c <_wcsrtombs_r+0x38>
    eeb0:	e59d1004 	ldr	r1, [sp, #4]
    eeb4:	e3a0308a 	mov	r3, #138	; 0x8a
    eeb8:	e3a02000 	mov	r2, #0	; 0x0
    eebc:	e5813000 	str	r3, [r1]
    eec0:	e5892000 	str	r2, [r9]
    eec4:	e1a05000 	mov	r5, r0
    eec8:	e1a00005 	mov	r0, r5
    eecc:	e28dd014 	add	sp, sp, #20	; 0x14
    eed0:	e8bd8ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eed4:	e5897004 	str	r7, [r9, #4]
    eed8:	e589a000 	str	sl, [r9]
    eedc:	eafffff9 	b	eec8 <_wcsrtombs_r+0xf4>
    eee0:	e5928000 	ldr	r8, [r2]
    eee4:	e3e06000 	mvn	r6, #0	; 0x0
    eee8:	eaffffc5 	b	ee04 <_wcsrtombs_r+0x30>
    eeec:	e3a05000 	mov	r5, #0	; 0x0
    eef0:	eafffff4 	b	eec8 <_wcsrtombs_r+0xf4>
    eef4:	e59d2000 	ldr	r2, [sp]
    eef8:	e2455001 	sub	r5, r5, #1	; 0x1
    eefc:	e3520000 	cmp	r2, #0	; 0x0
    ef00:	158b3000 	strne	r3, [fp]
    ef04:	e5893000 	str	r3, [r9]
    ef08:	eaffffee 	b	eec8 <_wcsrtombs_r+0xf4>

0000ef0c <wcsrtombs>:
    ef0c:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    ef10:	e59fc030 	ldr	ip, [pc, #48]	; ef48 <prog+0xef00>
    ef14:	e59ce000 	ldr	lr, [ip]
    ef18:	e1a04000 	mov	r4, r0
    ef1c:	e1a0c001 	mov	ip, r1
    ef20:	e1a05002 	mov	r5, r2
    ef24:	e24dd004 	sub	sp, sp, #4	; 0x4
    ef28:	e58d3000 	str	r3, [sp]
    ef2c:	e1a0000e 	mov	r0, lr
    ef30:	e1a01004 	mov	r1, r4
    ef34:	e1a0200c 	mov	r2, ip
    ef38:	e1a03005 	mov	r3, r5
    ef3c:	ebffffa4 	bl	edd4 <_wcsrtombs_r>
    ef40:	e28dd004 	add	sp, sp, #4	; 0x4
    ef44:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
    ef48:	40000014 	andmi	r0, r0, r4, lsl r0

0000ef4c <_wctomb_r>:
    ef4c:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
    ef50:	e59f0400 	ldr	r0, [pc, #1024]	; f358 <prog+0xf310>
    ef54:	e1a07001 	mov	r7, r1
    ef58:	e1a04002 	mov	r4, r2
    ef5c:	e1a05003 	mov	r5, r3
    ef60:	ebfff604 	bl	c778 <strlen>
    ef64:	e3500001 	cmp	r0, #1	; 0x1
    ef68:	9a000025 	bls	f004 <_wctomb_r+0xb8>
    ef6c:	e59f03e4 	ldr	r0, [pc, #996]	; f358 <prog+0xf310>
    ef70:	e59f13e4 	ldr	r1, [pc, #996]	; f35c <prog+0xf314>
    ef74:	ebfff5a4 	bl	c60c <strcmp>
    ef78:	e3500000 	cmp	r0, #0	; 0x0
    ef7c:	1a000012 	bne	efcc <_wctomb_r+0x80>
    ef80:	e3570000 	cmp	r7, #0	; 0x0
    ef84:	0a000020 	beq	f00c <_wctomb_r+0xc0>
    ef88:	e354007f 	cmp	r4, #127	; 0x7f
    ef8c:	da000018 	ble	eff4 <_wctomb_r+0xa8>
    ef90:	e2443080 	sub	r3, r4, #128	; 0x80
    ef94:	e3530d1e 	cmp	r3, #1920	; 0x780
    ef98:	2a000063 	bcs	f12c <_wctomb_r+0x1e0>
    ef9c:	e2043d1f 	and	r3, r4, #1984	; 0x7c0
    efa0:	e204203f 	and	r2, r4, #63	; 0x3f
    efa4:	e1a03343 	mov	r3, r3, asr #6
    efa8:	e3a06002 	mov	r6, #2	; 0x2
    efac:	e1e03d03 	mvn	r3, r3, lsl #26
    efb0:	e1e02c82 	mvn	r2, r2, lsl #25
    efb4:	e1e03d23 	mvn	r3, r3, lsr #26
    efb8:	e1e02ca2 	mvn	r2, r2, lsr #25
    efbc:	e1a00006 	mov	r0, r6
    efc0:	e5c72001 	strb	r2, [r7, #1]
    efc4:	e5c73000 	strb	r3, [r7]
    efc8:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
    efcc:	e59f0384 	ldr	r0, [pc, #900]	; f358 <prog+0xf310>
    efd0:	e59f1388 	ldr	r1, [pc, #904]	; f360 <prog+0xf318>
    efd4:	ebfff58c 	bl	c60c <strcmp>
    efd8:	e3500000 	cmp	r0, #0	; 0x0
    efdc:	1a00000d 	bne	f018 <_wctomb_r+0xcc>
    efe0:	e3570000 	cmp	r7, #0	; 0x0
    efe4:	0a000008 	beq	f00c <_wctomb_r+0xc0>
    efe8:	e1a03444 	mov	r3, r4, asr #8
    efec:	e213e0ff 	ands	lr, r3, #255	; 0xff
    eff0:	1a000034 	bne	f0c8 <_wctomb_r+0x17c>
    eff4:	e5c74000 	strb	r4, [r7]
    eff8:	e3a06001 	mov	r6, #1	; 0x1
    effc:	e1a00006 	mov	r0, r6
    f000:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
    f004:	e3570000 	cmp	r7, #0	; 0x0
    f008:	1afffff9 	bne	eff4 <_wctomb_r+0xa8>
    f00c:	e3a06000 	mov	r6, #0	; 0x0
    f010:	e1a00006 	mov	r0, r6
    f014:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
    f018:	e59f0338 	ldr	r0, [pc, #824]	; f358 <prog+0xf310>
    f01c:	e59f1340 	ldr	r1, [pc, #832]	; f364 <prog+0xf31c>
    f020:	ebfff579 	bl	c60c <strcmp>
    f024:	e3500000 	cmp	r0, #0	; 0x0
    f028:	1a00000a 	bne	f058 <_wctomb_r+0x10c>
    f02c:	e3570000 	cmp	r7, #0	; 0x0
    f030:	0afffff5 	beq	f00c <_wctomb_r+0xc0>
    f034:	e1a03444 	mov	r3, r4, asr #8
    f038:	e213e0ff 	ands	lr, r3, #255	; 0xff
    f03c:	0affffec 	beq	eff4 <_wctomb_r+0xa8>
    f040:	e28e305f 	add	r3, lr, #95	; 0x5f
    f044:	e20330ff 	and	r3, r3, #255	; 0xff
    f048:	e353005d 	cmp	r3, #93	; 0x5d
    f04c:	9a00002f 	bls	f110 <_wctomb_r+0x1c4>
    f050:	e3e06000 	mvn	r6, #0	; 0x0
    f054:	eaffffe8 	b	effc <_wctomb_r+0xb0>
    f058:	e59f02f8 	ldr	r0, [pc, #760]	; f358 <prog+0xf310>
    f05c:	e59f1304 	ldr	r1, [pc, #772]	; f368 <prog+0xf320>
    f060:	ebfff569 	bl	c60c <strcmp>
    f064:	e3500000 	cmp	r0, #0	; 0x0
    f068:	1affffe5 	bne	f004 <_wctomb_r+0xb8>
    f06c:	e3570000 	cmp	r7, #0	; 0x0
    f070:	03a06001 	moveq	r6, #1	; 0x1
    f074:	0affffe0 	beq	effc <_wctomb_r+0xb0>
    f078:	e1a03444 	mov	r3, r4, asr #8
    f07c:	e213e0ff 	ands	lr, r3, #255	; 0xff
    f080:	e20400ff 	and	r0, r4, #255	; 0xff
    f084:	1a000044 	bne	f19c <_wctomb_r+0x250>
    f088:	e5953000 	ldr	r3, [r5]
    f08c:	e3530000 	cmp	r3, #0	; 0x0
    f090:	03a06001 	moveq	r6, #1	; 0x1
    f094:	0a000009 	beq	f0c0 <_wctomb_r+0x174>
    f098:	e1a01007 	mov	r1, r7
    f09c:	e3a0301b 	mov	r3, #27	; 0x1b
    f0a0:	e585e000 	str	lr, [r5]
    f0a4:	e4c13001 	strb	r3, [r1], #1
    f0a8:	e3a02028 	mov	r2, #40	; 0x28
    f0ac:	e2833027 	add	r3, r3, #39	; 0x27
    f0b0:	e5c72001 	strb	r2, [r7, #1]
    f0b4:	e5c13001 	strb	r3, [r1, #1]
    f0b8:	e2817002 	add	r7, r1, #2	; 0x2
    f0bc:	e3a06004 	mov	r6, #4	; 0x4
    f0c0:	e5c70000 	strb	r0, [r7]
    f0c4:	eaffffcc 	b	effc <_wctomb_r+0xb0>
    f0c8:	e28e207f 	add	r2, lr, #127	; 0x7f
    f0cc:	e28e3020 	add	r3, lr, #32	; 0x20
    f0d0:	e20220ff 	and	r2, r2, #255	; 0xff
    f0d4:	e20330ff 	and	r3, r3, #255	; 0xff
    f0d8:	e353000f 	cmp	r3, #15	; 0xf
    f0dc:	8352001e 	cmphi	r2, #30	; 0x1e
    f0e0:	8affffda 	bhi	f050 <_wctomb_r+0x104>
    f0e4:	e20400ff 	and	r0, r4, #255	; 0xff
    f0e8:	e2403080 	sub	r3, r0, #128	; 0x80
    f0ec:	e20330ff 	and	r3, r3, #255	; 0xff
    f0f0:	e2402040 	sub	r2, r0, #64	; 0x40
    f0f4:	e353007c 	cmp	r3, #124	; 0x7c
    f0f8:	8352003e 	cmphi	r2, #62	; 0x3e
    f0fc:	8affffd3 	bhi	f050 <_wctomb_r+0x104>
    f100:	e3a06002 	mov	r6, #2	; 0x2
    f104:	e5c70001 	strb	r0, [r7, #1]
    f108:	e5c7e000 	strb	lr, [r7]
    f10c:	eaffffba 	b	effc <_wctomb_r+0xb0>
    f110:	e20400ff 	and	r0, r4, #255	; 0xff
    f114:	e280305f 	add	r3, r0, #95	; 0x5f
    f118:	e20330ff 	and	r3, r3, #255	; 0xff
    f11c:	e353005d 	cmp	r3, #93	; 0x5d
    f120:	9afffff6 	bls	f100 <_wctomb_r+0x1b4>
    f124:	e3e06000 	mvn	r6, #0	; 0x0
    f128:	eaffffb3 	b	effc <_wctomb_r+0xb0>
    f12c:	e2443b02 	sub	r3, r4, #2048	; 0x800
    f130:	e3530b3e 	cmp	r3, #63488	; 0xf800
    f134:	3a00004f 	bcc	f278 <_wctomb_r+0x32c>
    f138:	e2443801 	sub	r3, r4, #65536	; 0x10000
    f13c:	e353081f 	cmp	r3, #2031616	; 0x1f0000
    f140:	2a00002d 	bcs	f1fc <_wctomb_r+0x2b0>
    f144:	e2043707 	and	r3, r4, #1835008	; 0x1c0000
    f148:	e1a03943 	mov	r3, r3, asr #18
    f14c:	e1e03e03 	mvn	r3, r3, lsl #28
    f150:	e2042a3f 	and	r2, r4, #258048	; 0x3f000
    f154:	e2041d3f 	and	r1, r4, #4032	; 0xfc0
    f158:	e1a0c007 	mov	ip, r7
    f15c:	e1e03e23 	mvn	r3, r3, lsr #28
    f160:	e1a02642 	mov	r2, r2, asr #12
    f164:	e1a01341 	mov	r1, r1, asr #6
    f168:	e204003f 	and	r0, r4, #63	; 0x3f
    f16c:	e4cc3001 	strb	r3, [ip], #1
    f170:	e1e02c82 	mvn	r2, r2, lsl #25
    f174:	e1e01c81 	mvn	r1, r1, lsl #25
    f178:	e1e00c80 	mvn	r0, r0, lsl #25
    f17c:	e1e02ca2 	mvn	r2, r2, lsr #25
    f180:	e1e01ca1 	mvn	r1, r1, lsr #25
    f184:	e1e00ca0 	mvn	r0, r0, lsr #25
    f188:	e3a06004 	mov	r6, #4	; 0x4
    f18c:	e5c72001 	strb	r2, [r7, #1]
    f190:	e5cc0002 	strb	r0, [ip, #2]
    f194:	e5cc1001 	strb	r1, [ip, #1]
    f198:	eaffff97 	b	effc <_wctomb_r+0xb0>
    f19c:	e24e3021 	sub	r3, lr, #33	; 0x21
    f1a0:	e353005d 	cmp	r3, #93	; 0x5d
    f1a4:	8affffa9 	bhi	f050 <_wctomb_r+0x104>
    f1a8:	e2403021 	sub	r3, r0, #33	; 0x21
    f1ac:	e353005d 	cmp	r3, #93	; 0x5d
    f1b0:	8affffa6 	bhi	f050 <_wctomb_r+0x104>
    f1b4:	e5953000 	ldr	r3, [r5]
    f1b8:	e3530000 	cmp	r3, #0	; 0x0
    f1bc:	13a06002 	movne	r6, #2	; 0x2
    f1c0:	1a00000a 	bne	f1f0 <_wctomb_r+0x2a4>
    f1c4:	e1a01007 	mov	r1, r7
    f1c8:	e3a03001 	mov	r3, #1	; 0x1
    f1cc:	e3a0201b 	mov	r2, #27	; 0x1b
    f1d0:	e5853000 	str	r3, [r5]
    f1d4:	e4c12001 	strb	r2, [r1], #1
    f1d8:	e2833023 	add	r3, r3, #35	; 0x23
    f1dc:	e2822027 	add	r2, r2, #39	; 0x27
    f1e0:	e5c73001 	strb	r3, [r7, #1]
    f1e4:	e5c12001 	strb	r2, [r1, #1]
    f1e8:	e2817002 	add	r7, r1, #2	; 0x2
    f1ec:	e3a06005 	mov	r6, #5	; 0x5
    f1f0:	e5c70001 	strb	r0, [r7, #1]
    f1f4:	e5c7e000 	strb	lr, [r7]
    f1f8:	eaffff7f 	b	effc <_wctomb_r+0xb0>
    f1fc:	e2443602 	sub	r3, r4, #2097152	; 0x200000
    f200:	e353063e 	cmp	r3, #65011712	; 0x3e00000
    f204:	2a00002f 	bcs	f2c8 <_wctomb_r+0x37c>
    f208:	e2043403 	and	r3, r4, #50331648	; 0x3000000
    f20c:	e1a03c43 	mov	r3, r3, asr #24
    f210:	e1e03e83 	mvn	r3, r3, lsl #29
    f214:	e1a0e007 	mov	lr, r7
    f218:	e1e03ea3 	mvn	r3, r3, lsr #29
    f21c:	e204273f 	and	r2, r4, #16515072	; 0xfc0000
    f220:	e2041a3f 	and	r1, r4, #258048	; 0x3f000
    f224:	e2040d3f 	and	r0, r4, #4032	; 0xfc0
    f228:	e4ce3001 	strb	r3, [lr], #1
    f22c:	e1a02942 	mov	r2, r2, asr #18
    f230:	e1a01641 	mov	r1, r1, asr #12
    f234:	e1a00340 	mov	r0, r0, asr #6
    f238:	e204303f 	and	r3, r4, #63	; 0x3f
    f23c:	e1e02c82 	mvn	r2, r2, lsl #25
    f240:	e1e01c81 	mvn	r1, r1, lsl #25
    f244:	e1e00c80 	mvn	r0, r0, lsl #25
    f248:	e1e03c83 	mvn	r3, r3, lsl #25
    f24c:	e28ec001 	add	ip, lr, #1	; 0x1
    f250:	e1e02ca2 	mvn	r2, r2, lsr #25
    f254:	e1e01ca1 	mvn	r1, r1, lsr #25
    f258:	e1e00ca0 	mvn	r0, r0, lsr #25
    f25c:	e1e03ca3 	mvn	r3, r3, lsr #25
    f260:	e3a06005 	mov	r6, #5	; 0x5
    f264:	e5c72001 	strb	r2, [r7, #1]
    f268:	e5ce1001 	strb	r1, [lr, #1]
    f26c:	e5cc3002 	strb	r3, [ip, #2]
    f270:	e5cc0001 	strb	r0, [ip, #1]
    f274:	eaffff60 	b	effc <_wctomb_r+0xb0>
    f278:	e2443b36 	sub	r3, r4, #55296	; 0xd800
    f27c:	e3530b02 	cmp	r3, #2048	; 0x800
    f280:	3affff72 	bcc	f050 <_wctomb_r+0x104>
    f284:	e2043a0f 	and	r3, r4, #61440	; 0xf000
    f288:	e1a03643 	mov	r3, r3, asr #12
    f28c:	e1e03d83 	mvn	r3, r3, lsl #27
    f290:	e2042d3f 	and	r2, r4, #4032	; 0xfc0
    f294:	e1a00007 	mov	r0, r7
    f298:	e1e03da3 	mvn	r3, r3, lsr #27
    f29c:	e1a02342 	mov	r2, r2, asr #6
    f2a0:	e204103f 	and	r1, r4, #63	; 0x3f
    f2a4:	e4c03001 	strb	r3, [r0], #1
    f2a8:	e1e02c82 	mvn	r2, r2, lsl #25
    f2ac:	e1e01c81 	mvn	r1, r1, lsl #25
    f2b0:	e1e02ca2 	mvn	r2, r2, lsr #25
    f2b4:	e1e01ca1 	mvn	r1, r1, lsr #25
    f2b8:	e3a06003 	mov	r6, #3	; 0x3
    f2bc:	e5c72001 	strb	r2, [r7, #1]
    f2c0:	e5c01001 	strb	r1, [r0, #1]
    f2c4:	eaffff4c 	b	effc <_wctomb_r+0xb0>
    f2c8:	e374037f 	cmn	r4, #-67108863	; 0xfc000001
    f2cc:	daffff5f 	ble	f050 <_wctomb_r+0x104>
    f2d0:	e2043101 	and	r3, r4, #1073741824	; 0x40000000
    f2d4:	e1a03f43 	mov	r3, r3, asr #30
    f2d8:	e1e03f03 	mvn	r3, r3, lsl #30
    f2dc:	e1a0e007 	mov	lr, r7
    f2e0:	e1e03f23 	mvn	r3, r3, lsr #30
    f2e4:	e4ce3001 	strb	r3, [lr], #1
    f2e8:	e204243f 	and	r2, r4, #1056964608	; 0x3f000000
    f2ec:	e204373f 	and	r3, r4, #16515072	; 0xfc0000
    f2f0:	e2041a3f 	and	r1, r4, #258048	; 0x3f000
    f2f4:	e2040d3f 	and	r0, r4, #4032	; 0xfc0
    f2f8:	e204c03f 	and	ip, r4, #63	; 0x3f
    f2fc:	e1a02c42 	mov	r2, r2, asr #24
    f300:	e1a03943 	mov	r3, r3, asr #18
    f304:	e1a01641 	mov	r1, r1, asr #12
    f308:	e1a00340 	mov	r0, r0, asr #6
    f30c:	e28e5001 	add	r5, lr, #1	; 0x1
    f310:	e1e02c82 	mvn	r2, r2, lsl #25
    f314:	e1e03c83 	mvn	r3, r3, lsl #25
    f318:	e1e01c81 	mvn	r1, r1, lsl #25
    f31c:	e1e00c80 	mvn	r0, r0, lsl #25
    f320:	e1e0cc8c 	mvn	ip, ip, lsl #25
    f324:	e2854001 	add	r4, r5, #1	; 0x1
    f328:	e1e02ca2 	mvn	r2, r2, lsr #25
    f32c:	e1e03ca3 	mvn	r3, r3, lsr #25
    f330:	e1e01ca1 	mvn	r1, r1, lsr #25
    f334:	e1e00ca0 	mvn	r0, r0, lsr #25
    f338:	e1e0ccac 	mvn	ip, ip, lsr #25
    f33c:	e3a06006 	mov	r6, #6	; 0x6
    f340:	e5c72001 	strb	r2, [r7, #1]
    f344:	e5ce3001 	strb	r3, [lr, #1]
    f348:	e5c51001 	strb	r1, [r5, #1]
    f34c:	e5c4c002 	strb	ip, [r4, #2]
    f350:	e5c40001 	strb	r0, [r4, #1]
    f354:	eaffff28 	b	effc <_wctomb_r+0xb0>
    f358:	40000830 	andmi	r0, r0, r0, lsr r8
    f35c:	00014ee4 	andeq	r4, r1, r4, ror #29
    f360:	00014eec 	andeq	r4, r1, ip, ror #29
    f364:	00014ef4 	streqd	r4, [r1], -r4
    f368:	00014efc 	streqd	r4, [r1], -ip

0000f36c <__swsetup>:
    f36c:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
    f370:	e59f60ec 	ldr	r6, [pc, #236]	; f464 <prog+0xf41c>
    f374:	e5962000 	ldr	r2, [r6]
    f378:	e3520000 	cmp	r2, #0	; 0x0
    f37c:	e1a04000 	mov	r4, r0
    f380:	0a000002 	beq	f390 <__swsetup+0x24>
    f384:	e5923038 	ldr	r3, [r2, #56]
    f388:	e3530000 	cmp	r3, #0	; 0x0
    f38c:	0a000015 	beq	f3e8 <__swsetup+0x7c>
    f390:	e1d420bc 	ldrh	r2, [r4, #12]
    f394:	e2125008 	ands	r5, r2, #8	; 0x8
    f398:	15941010 	ldrne	r1, [r4, #16]
    f39c:	0a000017 	beq	f400 <__swsetup+0x94>
    f3a0:	e3510000 	cmp	r1, #0	; 0x0
    f3a4:	0a000012 	beq	f3f4 <__swsetup+0x88>
    f3a8:	e1d430bc 	ldrh	r3, [r4, #12]
    f3ac:	e2132001 	ands	r2, r3, #1	; 0x1
    f3b0:	1a000005 	bne	f3cc <__swsetup+0x60>
    f3b4:	e3130002 	tst	r3, #2	; 0x2
    f3b8:	05943014 	ldreq	r3, [r4, #20]
    f3bc:	11a03002 	movne	r3, r2
    f3c0:	e3a00000 	mov	r0, #0	; 0x0
    f3c4:	e5843008 	str	r3, [r4, #8]
    f3c8:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
    f3cc:	e5943014 	ldr	r3, [r4, #20]
    f3d0:	e3a02000 	mov	r2, #0	; 0x0
    f3d4:	e2633000 	rsb	r3, r3, #0	; 0x0
    f3d8:	e1a00002 	mov	r0, r2
    f3dc:	e5843018 	str	r3, [r4, #24]
    f3e0:	e5842008 	str	r2, [r4, #8]
    f3e4:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
    f3e8:	e1a00002 	mov	r0, r2
    f3ec:	ebfff05f 	bl	b570 <__sinit>
    f3f0:	eaffffe6 	b	f390 <__swsetup+0x24>
    f3f4:	e1a00004 	mov	r0, r4
    f3f8:	eb000807 	bl	1141c <__smakebuf>
    f3fc:	eaffffe9 	b	f3a8 <__swsetup+0x3c>
    f400:	e3120010 	tst	r2, #16	; 0x10
    f404:	03e00000 	mvneq	r0, #0	; 0x0
    f408:	08bd8070 	ldmeqia	sp!, {r4, r5, r6, pc}
    f40c:	e3120004 	tst	r2, #4	; 0x4
    f410:	05941010 	ldreq	r1, [r4, #16]
    f414:	0a00000f 	beq	f458 <__swsetup+0xec>
    f418:	e5941030 	ldr	r1, [r4, #48]
    f41c:	e3510000 	cmp	r1, #0	; 0x0
    f420:	0a000006 	beq	f440 <__swsetup+0xd4>
    f424:	e2843040 	add	r3, r4, #64	; 0x40
    f428:	e1510003 	cmp	r1, r3
    f42c:	0a000002 	beq	f43c <__swsetup+0xd0>
    f430:	e5960000 	ldr	r0, [r6]
    f434:	eb000627 	bl	10cd8 <_free_r>
    f438:	e1d420bc 	ldrh	r2, [r4, #12]
    f43c:	e5845030 	str	r5, [r4, #48]
    f440:	e3c23024 	bic	r3, r2, #36	; 0x24
    f444:	e1c430bc 	strh	r3, [r4, #12]
    f448:	e5941010 	ldr	r1, [r4, #16]
    f44c:	e3a03000 	mov	r3, #0	; 0x0
    f450:	e1d420bc 	ldrh	r2, [r4, #12]
    f454:	e884000a 	stmia	r4, {r1, r3}
    f458:	e3823008 	orr	r3, r2, #8	; 0x8
    f45c:	e1c430bc 	strh	r3, [r4, #12]
    f460:	eaffffce 	b	f3a0 <__swsetup+0x34>
    f464:	40000014 	andmi	r0, r0, r4, lsl r0

0000f468 <quorem>:
    f468:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f46c:	e5903010 	ldr	r3, [r0, #16]
    f470:	e5912010 	ldr	r2, [r1, #16]
    f474:	e24dd00c 	sub	sp, sp, #12	; 0xc
    f478:	e1520003 	cmp	r2, r3
    f47c:	e58d0000 	str	r0, [sp]
    f480:	e1a09001 	mov	r9, r1
    f484:	c3a00000 	movgt	r0, #0	; 0x0
    f488:	ca000044 	bgt	f5a0 <quorem+0x138>
    f48c:	e2815014 	add	r5, r1, #20	; 0x14
    f490:	e59d1000 	ldr	r1, [sp]
    f494:	e2427001 	sub	r7, r2, #1	; 0x1
    f498:	e1a03107 	mov	r3, r7, lsl #2
    f49c:	e2818014 	add	r8, r1, #20	; 0x14
    f4a0:	e7932008 	ldr	r2, [r3, r8]
    f4a4:	e7951003 	ldr	r1, [r5, r3]
    f4a8:	e1a00002 	mov	r0, r2
    f4ac:	e2811001 	add	r1, r1, #1	; 0x1
    f4b0:	e085b003 	add	fp, r5, r3
    f4b4:	e0833008 	add	r3, r3, r8
    f4b8:	e98d000c 	stmib	sp, {r2, r3}
    f4bc:	ebffea6d 	bl	9e78 <__aeabi_uidiv>
    f4c0:	e250a000 	subs	sl, r0, #0	; 0x0
    f4c4:	1a000037 	bne	f5a8 <quorem+0x140>
    f4c8:	e1a01009 	mov	r1, r9
    f4cc:	e59d0000 	ldr	r0, [sp]
    f4d0:	eb0008e8 	bl	11878 <__mcmp>
    f4d4:	e3500000 	cmp	r0, #0	; 0x0
    f4d8:	ba00002f 	blt	f59c <quorem+0x134>
    f4dc:	e3a04000 	mov	r4, #0	; 0x0
    f4e0:	e28aa001 	add	sl, sl, #1	; 0x1
    f4e4:	e1a0e008 	mov	lr, r8
    f4e8:	e1a00004 	mov	r0, r4
    f4ec:	e4952004 	ldr	r2, [r5], #4
    f4f0:	e1a03802 	mov	r3, r2, lsl #16
    f4f4:	e1a03823 	mov	r3, r3, lsr #16
    f4f8:	e59ec000 	ldr	ip, [lr]
    f4fc:	e0803003 	add	r3, r0, r3
    f500:	e1a00823 	mov	r0, r3, lsr #16
    f504:	e0800822 	add	r0, r0, r2, lsr #16
    f508:	e1a03803 	mov	r3, r3, lsl #16
    f50c:	e1a0180c 	mov	r1, ip, lsl #16
    f510:	e1a02800 	mov	r2, r0, lsl #16
    f514:	e1a01821 	mov	r1, r1, lsr #16
    f518:	e1a03823 	mov	r3, r3, lsr #16
    f51c:	e0631001 	rsb	r1, r3, r1
    f520:	e1a02822 	mov	r2, r2, lsr #16
    f524:	e0811004 	add	r1, r1, r4
    f528:	e062282c 	rsb	r2, r2, ip, lsr #16
    f52c:	e0822841 	add	r2, r2, r1, asr #16
    f530:	e15b0005 	cmp	fp, r5
    f534:	e1ce20b2 	strh	r2, [lr, #2]
    f538:	e1a00820 	mov	r0, r0, lsr #16
    f53c:	e0ce10b4 	strh	r1, [lr], #4
    f540:	e1a04842 	mov	r4, r2, asr #16
    f544:	2affffe8 	bcs	f4ec <quorem+0x84>
    f548:	e1a02107 	mov	r2, r7, lsl #2
    f54c:	e7983002 	ldr	r3, [r8, r2]
    f550:	e3530000 	cmp	r3, #0	; 0x0
    f554:	e0883002 	add	r3, r8, r2
    f558:	1a00000f 	bne	f59c <quorem+0x134>
    f55c:	e2432004 	sub	r2, r3, #4	; 0x4
    f560:	e1580002 	cmp	r8, r2
    f564:	2a00000a 	bcs	f594 <quorem+0x12c>
    f568:	e5133004 	ldr	r3, [r3, #-4]
    f56c:	e3530000 	cmp	r3, #0	; 0x0
    f570:	0a000003 	beq	f584 <quorem+0x11c>
    f574:	ea000006 	b	f594 <quorem+0x12c>
    f578:	e5923000 	ldr	r3, [r2]
    f57c:	e3530000 	cmp	r3, #0	; 0x0
    f580:	1a000003 	bne	f594 <quorem+0x12c>
    f584:	e2422004 	sub	r2, r2, #4	; 0x4
    f588:	e1580002 	cmp	r8, r2
    f58c:	e2477001 	sub	r7, r7, #1	; 0x1
    f590:	3afffff8 	bcc	f578 <quorem+0x110>
    f594:	e59d3000 	ldr	r3, [sp]
    f598:	e5837010 	str	r7, [r3, #16]
    f59c:	e1a0000a 	mov	r0, sl
    f5a0:	e28dd00c 	add	sp, sp, #12	; 0xc
    f5a4:	e8bd8ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f5a8:	e3a06000 	mov	r6, #0	; 0x0
    f5ac:	e1a0e008 	mov	lr, r8
    f5b0:	e1a04005 	mov	r4, r5
    f5b4:	e1a0c006 	mov	ip, r6
    f5b8:	e4942004 	ldr	r2, [r4], #4
    f5bc:	e1a03802 	mov	r3, r2, lsl #16
    f5c0:	e1a03823 	mov	r3, r3, lsr #16
    f5c4:	e021ca93 	mla	r1, r3, sl, ip
    f5c8:	e1a02822 	mov	r2, r2, lsr #16
    f5cc:	e1a03821 	mov	r3, r1, lsr #16
    f5d0:	e02c3a92 	mla	ip, r2, sl, r3
    f5d4:	e59e0000 	ldr	r0, [lr]
    f5d8:	e1a01801 	mov	r1, r1, lsl #16
    f5dc:	e1a02800 	mov	r2, r0, lsl #16
    f5e0:	e1a0380c 	mov	r3, ip, lsl #16
    f5e4:	e1a02822 	mov	r2, r2, lsr #16
    f5e8:	e1a01821 	mov	r1, r1, lsr #16
    f5ec:	e0612002 	rsb	r2, r1, r2
    f5f0:	e1a03823 	mov	r3, r3, lsr #16
    f5f4:	e0822006 	add	r2, r2, r6
    f5f8:	e0633820 	rsb	r3, r3, r0, lsr #16
    f5fc:	e0833842 	add	r3, r3, r2, asr #16
    f600:	e15b0004 	cmp	fp, r4
    f604:	e1ce30b2 	strh	r3, [lr, #2]
    f608:	e1a0c82c 	mov	ip, ip, lsr #16
    f60c:	e0ce20b4 	strh	r2, [lr], #4
    f610:	e1a06843 	mov	r6, r3, asr #16
    f614:	2affffe7 	bcs	f5b8 <quorem+0x150>
    f618:	e59d3004 	ldr	r3, [sp, #4]
    f61c:	e3530000 	cmp	r3, #0	; 0x0
    f620:	1affffa8 	bne	f4c8 <quorem+0x60>
    f624:	e59d1008 	ldr	r1, [sp, #8]
    f628:	e2412004 	sub	r2, r1, #4	; 0x4
    f62c:	e1580002 	cmp	r8, r2
    f630:	2a00000a 	bcs	f660 <quorem+0x1f8>
    f634:	e5113004 	ldr	r3, [r1, #-4]
    f638:	e3530000 	cmp	r3, #0	; 0x0
    f63c:	0a000003 	beq	f650 <quorem+0x1e8>
    f640:	ea000006 	b	f660 <quorem+0x1f8>
    f644:	e5923000 	ldr	r3, [r2]
    f648:	e3530000 	cmp	r3, #0	; 0x0
    f64c:	1a000003 	bne	f660 <quorem+0x1f8>
    f650:	e2422004 	sub	r2, r2, #4	; 0x4
    f654:	e1580002 	cmp	r8, r2
    f658:	e2477001 	sub	r7, r7, #1	; 0x1
    f65c:	3afffff8 	bcc	f644 <quorem+0x1dc>
    f660:	e59d2000 	ldr	r2, [sp]
    f664:	e5827010 	str	r7, [r2, #16]
    f668:	eaffff96 	b	f4c8 <quorem+0x60>

0000f66c <_dtoa_r>:
    f66c:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f670:	e590c040 	ldr	ip, [r0, #64]
    f674:	e24dd050 	sub	sp, sp, #80	; 0x50
    f678:	e35c0000 	cmp	ip, #0	; 0x0
    f67c:	e58d0008 	str	r0, [sp, #8]
    f680:	e58d3004 	str	r3, [sp, #4]
    f684:	e1a08001 	mov	r8, r1
    f688:	e1a09002 	mov	r9, r2
    f68c:	e59d407c 	ldr	r4, [sp, #124]
    f690:	0a00000a 	beq	f6c0 <_dtoa_r+0x54>
    f694:	e5903044 	ldr	r3, [r0, #68]
    f698:	e58c3004 	str	r3, [ip, #4]
    f69c:	e5902044 	ldr	r2, [r0, #68]
    f6a0:	e3a03001 	mov	r3, #1	; 0x1
    f6a4:	e1a03213 	mov	r3, r3, lsl r2
    f6a8:	e1a0100c 	mov	r1, ip
    f6ac:	e58c3008 	str	r3, [ip, #8]
    f6b0:	eb00082e 	bl	11770 <_Bfree>
    f6b4:	e59d2008 	ldr	r2, [sp, #8]
    f6b8:	e3a03000 	mov	r3, #0	; 0x0
    f6bc:	e5823040 	str	r3, [r2, #64]
    f6c0:	e2583000 	subs	r3, r8, #0	; 0x0
    f6c4:	b3c38102 	biclt	r8, r3, #-2147483648	; 0x80000000
    f6c8:	a3a03000 	movge	r3, #0	; 0x0
    f6cc:	b3a03001 	movlt	r3, #1	; 0x1
    f6d0:	e3c82102 	bic	r2, r8, #-2147483648	; 0x80000000
    f6d4:	b5843000 	strlt	r3, [r4]
    f6d8:	a5843000 	strge	r3, [r4]
    f6dc:	e1a02a22 	mov	r2, r2, lsr #20
    f6e0:	e3a0347f 	mov	r3, #2130706432	; 0x7f000000
    f6e4:	e283360f 	add	r3, r3, #15728640	; 0xf00000
    f6e8:	e1a02a02 	mov	r2, r2, lsl #20
    f6ec:	e1520003 	cmp	r2, r3
    f6f0:	e1a04008 	mov	r4, r8
    f6f4:	0a000087 	beq	f918 <prog+0xf8d0>
    f6f8:	e1a00008 	mov	r0, r8
    f6fc:	e1a01009 	mov	r1, r9
    f700:	e3a02000 	mov	r2, #0	; 0x0
    f704:	e3a03000 	mov	r3, #0	; 0x0
    f708:	e58d800c 	str	r8, [sp, #12]
    f70c:	e58d9010 	str	r9, [sp, #16]
    f710:	ebffecda 	bl	aa80 <__nedf2>
    f714:	e3500000 	cmp	r0, #0	; 0x0
    f718:	1a00000b 	bne	f74c <_dtoa_r+0xe0>
    f71c:	e59d2080 	ldr	r2, [sp, #128]
    f720:	e59dc078 	ldr	ip, [sp, #120]
    f724:	e3520000 	cmp	r2, #0	; 0x0
    f728:	e3a03001 	mov	r3, #1	; 0x1
    f72c:	e58c3000 	str	r3, [ip]
    f730:	159de080 	ldrne	lr, [sp, #128]
    f734:	159f3448 	ldrne	r3, [pc, #1096]	; fb84 <prog+0xfb3c>
    f738:	059f0448 	ldreq	r0, [pc, #1096]	; fb88 <prog+0xfb40>
    f73c:	158e3000 	strne	r3, [lr]
    f740:	12430001 	subne	r0, r3, #1	; 0x1
    f744:	e28dd050 	add	sp, sp, #80	; 0x50
    f748:	e8bd8ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f74c:	e28d100c 	add	r1, sp, #12	; 0xc
    f750:	e8910006 	ldmia	r1, {r1, r2}
    f754:	e28d3048 	add	r3, sp, #72	; 0x48
    f758:	e28dc04c 	add	ip, sp, #76	; 0x4c
    f75c:	e59d0008 	ldr	r0, [sp, #8]
    f760:	e58dc000 	str	ip, [sp]
    f764:	eb0008f7 	bl	11b48 <_d2b>
    f768:	e1a03a28 	mov	r3, r8, lsr #20
    f76c:	e1a02a83 	mov	r2, r3, lsl #21
    f770:	e1a02aa2 	mov	r2, r2, lsr #21
    f774:	e3520000 	cmp	r2, #0	; 0x0
    f778:	e58d0038 	str	r0, [sp, #56]
    f77c:	0a00007c 	beq	f974 <prog+0xf92c>
    f780:	e28d000c 	add	r0, sp, #12	; 0xc
    f784:	e8900003 	ldmia	r0, {r0, r1}
    f788:	e3c034ff 	bic	r3, r0, #-16777216	; 0xff000000
    f78c:	e2426fff 	sub	r6, r2, #1020	; 0x3fc
    f790:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
    f794:	e3a02000 	mov	r2, #0	; 0x0
    f798:	e38305ff 	orr	r0, r3, #1069547520	; 0x3fc00000
    f79c:	e59d704c 	ldr	r7, [sp, #76]
    f7a0:	e58d2034 	str	r2, [sp, #52]
    f7a4:	e2466003 	sub	r6, r6, #3	; 0x3
    f7a8:	e3800603 	orr	r0, r0, #3145728	; 0x300000
    f7ac:	e3a025ff 	mov	r2, #1069547520	; 0x3fc00000
    f7b0:	e282270e 	add	r2, r2, #3670016	; 0x380000
    f7b4:	e3a03000 	mov	r3, #0	; 0x0
    f7b8:	ebffeb04 	bl	a3d0 <__subdf3>
    f7bc:	e28f2fea 	add	r2, pc, #936	; 0x3a8
    f7c0:	e892000c 	ldmia	r2, {r2, r3}
    f7c4:	ebffeb40 	bl	a4cc <__muldf3>
    f7c8:	e28f2fe9 	add	r2, pc, #932	; 0x3a4
    f7cc:	e892000c 	ldmia	r2, {r2, r3}
    f7d0:	ebffeb16 	bl	a430 <__adddf3>
    f7d4:	e1a04000 	mov	r4, r0
    f7d8:	e1a00006 	mov	r0, r6
    f7dc:	e1a05001 	mov	r5, r1
    f7e0:	ebffed29 	bl	ac8c <__floatsidf>
    f7e4:	e28f2e39 	add	r2, pc, #912	; 0x390
    f7e8:	e892000c 	ldmia	r2, {r2, r3}
    f7ec:	ebffeb36 	bl	a4cc <__muldf3>
    f7f0:	e1a02000 	mov	r2, r0
    f7f4:	e1a03001 	mov	r3, r1
    f7f8:	e1a00004 	mov	r0, r4
    f7fc:	e1a01005 	mov	r1, r5
    f800:	ebffeb0a 	bl	a430 <__adddf3>
    f804:	e1a04000 	mov	r4, r0
    f808:	e1a05001 	mov	r5, r1
    f80c:	ebffed5c 	bl	ad84 <__fixdfsi>
    f810:	e1a01005 	mov	r1, r5
    f814:	e58d0024 	str	r0, [sp, #36]
    f818:	e3a02000 	mov	r2, #0	; 0x0
    f81c:	e1a00004 	mov	r0, r4
    f820:	e3a03000 	mov	r3, #0	; 0x0
    f824:	ebffecfb 	bl	ac18 <__ltdf2>
    f828:	e3500000 	cmp	r0, #0	; 0x0
    f82c:	ba0002fd 	blt	10428 <prog+0x103e0>
    f830:	e59de024 	ldr	lr, [sp, #36]
    f834:	e35e0016 	cmp	lr, #22	; 0x16
    f838:	83a00001 	movhi	r0, #1	; 0x1
    f83c:	858d0028 	strhi	r0, [sp, #40]
    f840:	8a00000e 	bhi	f880 <_dtoa_r+0x214>
    f844:	e59d2024 	ldr	r2, [sp, #36]
    f848:	e59f1344 	ldr	r1, [pc, #836]	; fb94 <prog+0xfb4c>
    f84c:	e0811182 	add	r1, r1, r2, lsl #3
    f850:	e891000c 	ldmia	r1, {r2, r3}
    f854:	e28d000c 	add	r0, sp, #12	; 0xc
    f858:	e8900003 	ldmia	r0, {r0, r1}
    f85c:	ebffeced 	bl	ac18 <__ltdf2>
    f860:	e3500000 	cmp	r0, #0	; 0x0
    f864:	b59dc024 	ldrlt	ip, [sp, #36]
    f868:	a3a03000 	movge	r3, #0	; 0x0
    f86c:	b24cc001 	sublt	ip, ip, #1	; 0x1
    f870:	b3a0e000 	movlt	lr, #0	; 0x0
    f874:	a58d3028 	strge	r3, [sp, #40]
    f878:	b58dc024 	strlt	ip, [sp, #36]
    f87c:	b58de028 	strlt	lr, [sp, #40]
    f880:	e0663007 	rsb	r3, r6, r7
    f884:	e2532001 	subs	r2, r3, #1	; 0x1
    f888:	e59d1024 	ldr	r1, [sp, #36]
    f88c:	42622000 	rsbmi	r2, r2, #0	; 0x0
    f890:	53a00000 	movpl	r0, #0	; 0x0
    f894:	51a0b002 	movpl	fp, r2
    f898:	458d2014 	strmi	r2, [sp, #20]
    f89c:	43a0b000 	movmi	fp, #0	; 0x0
    f8a0:	558d0014 	strpl	r0, [sp, #20]
    f8a4:	e3510000 	cmp	r1, #0	; 0x0
    f8a8:	a3a02000 	movge	r2, #0	; 0x0
    f8ac:	a08bb001 	addge	fp, fp, r1
    f8b0:	a58d1030 	strge	r1, [sp, #48]
    f8b4:	a58d2018 	strge	r2, [sp, #24]
    f8b8:	ba0002e6 	blt	10458 <prog+0x10410>
    f8bc:	e59d1004 	ldr	r1, [sp, #4]
    f8c0:	e3510009 	cmp	r1, #9	; 0x9
    f8c4:	83a02000 	movhi	r2, #0	; 0x0
    f8c8:	858d2004 	strhi	r2, [sp, #4]
    f8cc:	83a05001 	movhi	r5, #1	; 0x1
    f8d0:	8a00003e 	bhi	f9d0 <prog+0xf988>
    f8d4:	e59d3004 	ldr	r3, [sp, #4]
    f8d8:	e3530005 	cmp	r3, #5	; 0x5
    f8dc:	c59dc004 	ldrgt	ip, [sp, #4]
    f8e0:	c24cc004 	subgt	ip, ip, #4	; 0x4
    f8e4:	c58dc004 	strgt	ip, [sp, #4]
    f8e8:	e59de004 	ldr	lr, [sp, #4]
    f8ec:	d3a00001 	movle	r0, #1	; 0x1
    f8f0:	c3a00000 	movgt	r0, #0	; 0x0
    f8f4:	e35e0005 	cmp	lr, #5	; 0x5
    f8f8:	979ff10e 	ldrls	pc, [pc, lr, lsl #2]
    f8fc:	ea000279 	b	102e8 <prog+0x102a0>
    f900:	0000f9cc 	andeq	pc, r0, ip, asr #19
    f904:	0000f9cc 	andeq	pc, r0, ip, asr #19
    f908:	000103d8 	ldreqd	r0, [r1], -r8
    f90c:	0001034c 	andeq	r0, r1, ip, asr #6
    f910:	00010390 	muleq	r1, r0, r3
    f914:	000103cc 	andeq	r0, r1, ip, asr #7
    f918:	e3a03c27 	mov	r3, #9984	; 0x2700
    f91c:	e59dc078 	ldr	ip, [sp, #120]
    f920:	e283300f 	add	r3, r3, #15	; 0xf
    f924:	e3590000 	cmp	r9, #0	; 0x0
    f928:	e58c3000 	str	r3, [ip]
    f92c:	0a00000a 	beq	f95c <prog+0xf914>
    f930:	e59f0254 	ldr	r0, [pc, #596]	; fb8c <prog+0xfb44>
    f934:	e59de080 	ldr	lr, [sp, #128]
    f938:	e35e0000 	cmp	lr, #0	; 0x0
    f93c:	0affff80 	beq	f744 <_dtoa_r+0xd8>
    f940:	e5d03003 	ldrb	r3, [r0, #3]
    f944:	e59d1080 	ldr	r1, [sp, #128]
    f948:	e3530000 	cmp	r3, #0	; 0x0
    f94c:	e2803003 	add	r3, r0, #3	; 0x3
    f950:	12803008 	addne	r3, r0, #8	; 0x8
    f954:	e5813000 	str	r3, [r1]
    f958:	eaffff79 	b	f744 <_dtoa_r+0xd8>
    f95c:	e3c834ff 	bic	r3, r8, #-16777216	; 0xff000000
    f960:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
    f964:	e3530000 	cmp	r3, #0	; 0x0
    f968:	059f0220 	ldreq	r0, [pc, #544]	; fb90 <prog+0xfb48>
    f96c:	0afffff0 	beq	f934 <prog+0xf8ec>
    f970:	eaffffee 	b	f930 <prog+0xf8e8>
    f974:	e28d2048 	add	r2, sp, #72	; 0x48
    f978:	e8920084 	ldmia	r2, {r2, r7}
    f97c:	e2873e43 	add	r3, r7, #1072	; 0x430
    f980:	e2833002 	add	r3, r3, #2	; 0x2
    f984:	e0835002 	add	r5, r3, r2
    f988:	e3550020 	cmp	r5, #32	; 0x20
    f98c:	c2453020 	subgt	r3, r5, #32	; 0x20
    f990:	c1a03339 	movgt	r3, r9, lsr r3
    f994:	c2652040 	rsbgt	r2, r5, #64	; 0x40
    f998:	d2653020 	rsble	r3, r5, #32	; 0x20
    f99c:	c1834218 	orrgt	r4, r3, r8, lsl r2
    f9a0:	d1a04319 	movle	r4, r9, lsl r3
    f9a4:	e1a00004 	mov	r0, r4
    f9a8:	ebffecb7 	bl	ac8c <__floatsidf>
    f9ac:	e3540000 	cmp	r4, #0	; 0x0
    f9b0:	ba0003c4 	blt	108c8 <prog+0x10880>
    f9b4:	e2456e43 	sub	r6, r5, #1072	; 0x430
    f9b8:	e3a03001 	mov	r3, #1	; 0x1
    f9bc:	e2466003 	sub	r6, r6, #3	; 0x3
    f9c0:	e240061f 	sub	r0, r0, #32505856	; 0x1f00000
    f9c4:	e58d3034 	str	r3, [sp, #52]
    f9c8:	eaffff77 	b	f7ac <_dtoa_r+0x140>
    f9cc:	e1a05000 	mov	r5, r0
    f9d0:	e3a03000 	mov	r3, #0	; 0x0
    f9d4:	e3e0c000 	mvn	ip, #0	; 0x0
    f9d8:	e3a0e001 	mov	lr, #1	; 0x1
    f9dc:	e58d3074 	str	r3, [sp, #116]
    f9e0:	e58dc020 	str	ip, [sp, #32]
    f9e4:	e58dc01c 	str	ip, [sp, #28]
    f9e8:	e58de02c 	str	lr, [sp, #44]
    f9ec:	e1a04003 	mov	r4, r3
    f9f0:	e59dc008 	ldr	ip, [sp, #8]
    f9f4:	e3a03000 	mov	r3, #0	; 0x0
    f9f8:	e58c3044 	str	r3, [ip, #68]
    f9fc:	e59d0008 	ldr	r0, [sp, #8]
    fa00:	e5901044 	ldr	r1, [r0, #68]
    fa04:	eb000829 	bl	11ab0 <_Balloc>
    fa08:	e59dc008 	ldr	ip, [sp, #8]
    fa0c:	e1150004 	tst	r5, r4
    fa10:	e58d0040 	str	r0, [sp, #64]
    fa14:	e58c0040 	str	r0, [ip, #64]
    fa18:	0a0000d8 	beq	fd80 <prog+0xfd38>
    fa1c:	e59de024 	ldr	lr, [sp, #36]
    fa20:	e35e0000 	cmp	lr, #0	; 0x0
    fa24:	da000385 	ble	10840 <prog+0x107f8>
    fa28:	e59f3164 	ldr	r3, [pc, #356]	; fb94 <prog+0xfb4c>
    fa2c:	e20e200f 	and	r2, lr, #15	; 0xf
    fa30:	e1a0424e 	mov	r4, lr, asr #4
    fa34:	e0833182 	add	r3, r3, r2, lsl #3
    fa38:	e3140010 	tst	r4, #16	; 0x10
    fa3c:	e8930060 	ldmia	r3, {r5, r6}
    fa40:	03a0a002 	moveq	sl, #2	; 0x2
    fa44:	1a0001b0 	bne	1010c <prog+0x100c4>
    fa48:	e3540000 	cmp	r4, #0	; 0x0
    fa4c:	0a00000c 	beq	fa84 <prog+0xfa3c>
    fa50:	e59f7140 	ldr	r7, [pc, #320]	; fb98 <prog+0xfb50>
    fa54:	e3140001 	tst	r4, #1	; 0x1
    fa58:	e1a00005 	mov	r0, r5
    fa5c:	e1a01006 	mov	r1, r6
    fa60:	0a000004 	beq	fa78 <prog+0xfa30>
    fa64:	e897000c 	ldmia	r7, {r2, r3}
    fa68:	ebffea97 	bl	a4cc <__muldf3>
    fa6c:	e28aa001 	add	sl, sl, #1	; 0x1
    fa70:	e1a05000 	mov	r5, r0
    fa74:	e1a06001 	mov	r6, r1
    fa78:	e1b040c4 	movs	r4, r4, asr #1
    fa7c:	e2877008 	add	r7, r7, #8	; 0x8
    fa80:	1afffff3 	bne	fa54 <prog+0xfa0c>
    fa84:	e1a00008 	mov	r0, r8
    fa88:	e1a01009 	mov	r1, r9
    fa8c:	e1a02005 	mov	r2, r5
    fa90:	e1a03006 	mov	r3, r6
    fa94:	ebffeb70 	bl	a85c <__divdf3>
    fa98:	e1a08000 	mov	r8, r0
    fa9c:	e1a09001 	mov	r9, r1
    faa0:	e59d1028 	ldr	r1, [sp, #40]
    faa4:	e3510000 	cmp	r1, #0	; 0x0
    faa8:	0a00003b 	beq	fb9c <prog+0xfb54>
    faac:	e3a025ff 	mov	r2, #1069547520	; 0x3fc00000
    fab0:	e2822603 	add	r2, r2, #3145728	; 0x300000
    fab4:	e3a03000 	mov	r3, #0	; 0x0
    fab8:	e1a00008 	mov	r0, r8
    fabc:	e1a01009 	mov	r1, r9
    fac0:	ebffec54 	bl	ac18 <__ltdf2>
    fac4:	e59d201c 	ldr	r2, [sp, #28]
    fac8:	e3500000 	cmp	r0, #0	; 0x0
    facc:	e3a03000 	mov	r3, #0	; 0x0
    fad0:	b3a03001 	movlt	r3, #1	; 0x1
    fad4:	e3520000 	cmp	r2, #0	; 0x0
    fad8:	d3a03000 	movle	r3, #0	; 0x0
    fadc:	c2033001 	andgt	r3, r3, #1	; 0x1
    fae0:	e3530000 	cmp	r3, #0	; 0x0
    fae4:	e1a04008 	mov	r4, r8
    fae8:	e1a05009 	mov	r5, r9
    faec:	0a00002a 	beq	fb9c <prog+0xfb54>
    faf0:	e59d3020 	ldr	r3, [sp, #32]
    faf4:	e3530000 	cmp	r3, #0	; 0x0
    faf8:	da00009e 	ble	fd78 <prog+0xfd30>
    fafc:	e3a02101 	mov	r2, #1073741824	; 0x40000000
    fb00:	e2822709 	add	r2, r2, #2359296	; 0x240000
    fb04:	e3a03000 	mov	r3, #0	; 0x0
    fb08:	e1a00008 	mov	r0, r8
    fb0c:	e1a01009 	mov	r1, r9
    fb10:	ebffea6d 	bl	a4cc <__muldf3>
    fb14:	e1a04000 	mov	r4, r0
    fb18:	e28a0001 	add	r0, sl, #1	; 0x1
    fb1c:	e1a05001 	mov	r5, r1
    fb20:	ebffec59 	bl	ac8c <__floatsidf>
    fb24:	e1a02000 	mov	r2, r0
    fb28:	e1a03001 	mov	r3, r1
    fb2c:	e1a00004 	mov	r0, r4
    fb30:	e1a01005 	mov	r1, r5
    fb34:	ebffea64 	bl	a4cc <__muldf3>
    fb38:	e3a02101 	mov	r2, #1073741824	; 0x40000000
    fb3c:	e2822707 	add	r2, r2, #1835008	; 0x1c0000
    fb40:	e3a03000 	mov	r3, #0	; 0x0
    fb44:	ebffea39 	bl	a430 <__adddf3>
    fb48:	e28da020 	add	sl, sp, #32	; 0x20
    fb4c:	e89a1400 	ldmia	sl, {sl, ip}
    fb50:	e24cc001 	sub	ip, ip, #1	; 0x1
    fb54:	e1a07001 	mov	r7, r1
    fb58:	e1a08004 	mov	r8, r4
    fb5c:	e1a09005 	mov	r9, r5
    fb60:	e240650d 	sub	r6, r0, #54525952	; 0x3400000
    fb64:	e58dc044 	str	ip, [sp, #68]
    fb68:	ea00001c 	b	fbe0 <prog+0xfb98>
    fb6c:	3fd287a7 	swicc	0x00d287a7
    fb70:	636f4361 	cmnvs	pc, #-2080374783	; 0x84000001
    fb74:	3fc68a28 	swicc	0x00c68a28
    fb78:	8b60c8b3 	blhi	1841e4c <__data_beg_src__+0x182cf28>
    fb7c:	3fd34413 	swicc	0x00d34413
    fb80:	509f79fb 	ldrplsh	r7, [pc], fp
    fb84:	00014849 	andeq	r4, r1, r9, asr #16
    fb88:	00014848 	andeq	r4, r1, r8, asr #16
    fb8c:	00014f10 	andeq	r4, r1, r0, lsl pc
    fb90:	00014f04 	andeq	r4, r1, r4, lsl #30
    fb94:	00014590 	muleq	r1, r0, r5
    fb98:	00014658 	andeq	r4, r1, r8, asr r6
    fb9c:	e1a0000a 	mov	r0, sl
    fba0:	ebffec39 	bl	ac8c <__floatsidf>
    fba4:	e1a02008 	mov	r2, r8
    fba8:	e1a03009 	mov	r3, r9
    fbac:	ebffea46 	bl	a4cc <__muldf3>
    fbb0:	e3a02101 	mov	r2, #1073741824	; 0x40000000
    fbb4:	e2822707 	add	r2, r2, #1835008	; 0x1c0000
    fbb8:	e3a03000 	mov	r3, #0	; 0x0
    fbbc:	ebffea1b 	bl	a430 <__adddf3>
    fbc0:	e59de01c 	ldr	lr, [sp, #28]
    fbc4:	e35e0000 	cmp	lr, #0	; 0x0
    fbc8:	e1a07001 	mov	r7, r1
    fbcc:	e240650d 	sub	r6, r0, #54525952	; 0x3400000
    fbd0:	0a000158 	beq	10138 <prog+0x100f0>
    fbd4:	e59d0024 	ldr	r0, [sp, #36]
    fbd8:	e59da01c 	ldr	sl, [sp, #28]
    fbdc:	e58d0044 	str	r0, [sp, #68]
    fbe0:	e59d102c 	ldr	r1, [sp, #44]
    fbe4:	e3510000 	cmp	r1, #0	; 0x0
    fbe8:	0a0002c1 	beq	106f4 <prog+0x106ac>
    fbec:	e51f1060 	ldr	r1, [pc, #-96]	; fb94 <prog+0xfb4c>
    fbf0:	e3a005ff 	mov	r0, #1069547520	; 0x3fc00000
    fbf4:	e081118a 	add	r1, r1, sl, lsl #3
    fbf8:	e911000c 	ldmdb	r1, {r2, r3}
    fbfc:	e2800602 	add	r0, r0, #2097152	; 0x200000
    fc00:	e3a01000 	mov	r1, #0	; 0x0
    fc04:	ebffeb14 	bl	a85c <__divdf3>
    fc08:	e1a02006 	mov	r2, r6
    fc0c:	e1a03007 	mov	r3, r7
    fc10:	ebffe9ee 	bl	a3d0 <__subdf3>
    fc14:	e1a06008 	mov	r6, r8
    fc18:	e1a07009 	mov	r7, r9
    fc1c:	e1a08000 	mov	r8, r0
    fc20:	e1a09001 	mov	r9, r1
    fc24:	e1a00006 	mov	r0, r6
    fc28:	e1a01007 	mov	r1, r7
    fc2c:	ebffec54 	bl	ad84 <__fixdfsi>
    fc30:	e1a04000 	mov	r4, r0
    fc34:	ebffec14 	bl	ac8c <__floatsidf>
    fc38:	e1a02000 	mov	r2, r0
    fc3c:	e1a03001 	mov	r3, r1
    fc40:	e1a00006 	mov	r0, r6
    fc44:	e1a01007 	mov	r1, r7
    fc48:	ebffe9e0 	bl	a3d0 <__subdf3>
    fc4c:	e59d7040 	ldr	r7, [sp, #64]
    fc50:	e2844030 	add	r4, r4, #48	; 0x30
    fc54:	e4c74001 	strb	r4, [r7], #1
    fc58:	e1a02008 	mov	r2, r8
    fc5c:	e1a03009 	mov	r3, r9
    fc60:	e1a05000 	mov	r5, r0
    fc64:	e1a06001 	mov	r6, r1
    fc68:	ebffebea 	bl	ac18 <__ltdf2>
    fc6c:	e3500000 	cmp	r0, #0	; 0x0
    fc70:	ba00003d 	blt	fd6c <prog+0xfd24>
    fc74:	e3a005ff 	mov	r0, #1069547520	; 0x3fc00000
    fc78:	e1a02005 	mov	r2, r5
    fc7c:	e1a03006 	mov	r3, r6
    fc80:	e2800603 	add	r0, r0, #3145728	; 0x300000
    fc84:	e3a01000 	mov	r1, #0	; 0x0
    fc88:	ebffe9d0 	bl	a3d0 <__subdf3>
    fc8c:	e1a02008 	mov	r2, r8
    fc90:	e1a03009 	mov	r3, r9
    fc94:	ebffebdf 	bl	ac18 <__ltdf2>
    fc98:	e3500000 	cmp	r0, #0	; 0x0
    fc9c:	ba000088 	blt	fec4 <prog+0xfe7c>
    fca0:	e35a0001 	cmp	sl, #1	; 0x1
    fca4:	ca00000a 	bgt	fcd4 <prog+0xfc8c>
    fca8:	ea000032 	b	fd78 <prog+0xfd30>
    fcac:	ebffe9c7 	bl	a3d0 <__subdf3>
    fcb0:	e1a02008 	mov	r2, r8
    fcb4:	e1a03009 	mov	r3, r9
    fcb8:	ebffebd6 	bl	ac18 <__ltdf2>
    fcbc:	e59d2040 	ldr	r2, [sp, #64]
    fcc0:	e3500000 	cmp	r0, #0	; 0x0
    fcc4:	e08a3002 	add	r3, sl, r2
    fcc8:	ba00007d 	blt	fec4 <prog+0xfe7c>
    fccc:	e1570003 	cmp	r7, r3
    fcd0:	0a000028 	beq	fd78 <prog+0xfd30>
    fcd4:	e3a02101 	mov	r2, #1073741824	; 0x40000000
    fcd8:	e1a00008 	mov	r0, r8
    fcdc:	e1a01009 	mov	r1, r9
    fce0:	e2822709 	add	r2, r2, #2359296	; 0x240000
    fce4:	e3a03000 	mov	r3, #0	; 0x0
    fce8:	ebffe9f7 	bl	a4cc <__muldf3>
    fcec:	e3a02101 	mov	r2, #1073741824	; 0x40000000
    fcf0:	e2822709 	add	r2, r2, #2359296	; 0x240000
    fcf4:	e3a03000 	mov	r3, #0	; 0x0
    fcf8:	e1a08000 	mov	r8, r0
    fcfc:	e1a09001 	mov	r9, r1
    fd00:	e1a00005 	mov	r0, r5
    fd04:	e1a01006 	mov	r1, r6
    fd08:	ebffe9ef 	bl	a4cc <__muldf3>
    fd0c:	e1a06001 	mov	r6, r1
    fd10:	e1a05000 	mov	r5, r0
    fd14:	ebffec1a 	bl	ad84 <__fixdfsi>
    fd18:	e1a04000 	mov	r4, r0
    fd1c:	ebffebda 	bl	ac8c <__floatsidf>
    fd20:	e1a02000 	mov	r2, r0
    fd24:	e1a03001 	mov	r3, r1
    fd28:	e1a00005 	mov	r0, r5
    fd2c:	e1a01006 	mov	r1, r6
    fd30:	ebffe9a6 	bl	a3d0 <__subdf3>
    fd34:	e2844030 	add	r4, r4, #48	; 0x30
    fd38:	e1a02008 	mov	r2, r8
    fd3c:	e1a03009 	mov	r3, r9
    fd40:	e4c74001 	strb	r4, [r7], #1
    fd44:	e1a06001 	mov	r6, r1
    fd48:	e1a05000 	mov	r5, r0
    fd4c:	ebffebb1 	bl	ac18 <__ltdf2>
    fd50:	e3500000 	cmp	r0, #0	; 0x0
    fd54:	e3a005ff 	mov	r0, #1069547520	; 0x3fc00000
    fd58:	e1a02005 	mov	r2, r5
    fd5c:	e1a03006 	mov	r3, r6
    fd60:	e2800603 	add	r0, r0, #3145728	; 0x300000
    fd64:	e3a01000 	mov	r1, #0	; 0x0
    fd68:	aaffffcf 	bge	fcac <prog+0xfc64>
    fd6c:	e59d3044 	ldr	r3, [sp, #68]
    fd70:	e58d3024 	str	r3, [sp, #36]
    fd74:	ea00011a 	b	101e4 <prog+0x1019c>
    fd78:	e28d800c 	add	r8, sp, #12	; 0xc
    fd7c:	e8980300 	ldmia	r8, {r8, r9}
    fd80:	e59d2048 	ldr	r2, [sp, #72]
    fd84:	e59de024 	ldr	lr, [sp, #36]
    fd88:	e1e03002 	mvn	r3, r2
    fd8c:	e1a03fa3 	mov	r3, r3, lsr #31
    fd90:	e35e000e 	cmp	lr, #14	; 0xe
    fd94:	c3a03000 	movgt	r3, #0	; 0x0
    fd98:	e3530000 	cmp	r3, #0	; 0x0
    fd9c:	0a00005d 	beq	ff18 <prog+0xfed0>
    fda0:	e59d001c 	ldr	r0, [sp, #28]
    fda4:	e59d1074 	ldr	r1, [sp, #116]
    fda8:	e51f321c 	ldr	r3, [pc, #-540]	; fb94 <prog+0xfb4c>
    fdac:	e3500000 	cmp	r0, #0	; 0x0
    fdb0:	c3a02000 	movgt	r2, #0	; 0x0
    fdb4:	d3a02001 	movle	r2, #1	; 0x1
    fdb8:	e083318e 	add	r3, r3, lr, lsl #3
    fdbc:	e0121fa1 	ands	r1, r2, r1, lsr #31
    fdc0:	e8930c00 	ldmia	r3, {sl, fp}
    fdc4:	1a000137 	bne	102a8 <prog+0x10260>
    fdc8:	e59d3040 	ldr	r3, [sp, #64]
    fdcc:	e59d201c 	ldr	r2, [sp, #28]
    fdd0:	e1a04008 	mov	r4, r8
    fdd4:	e1a05009 	mov	r5, r9
    fdd8:	e0828003 	add	r8, r2, r3
    fddc:	e1a07003 	mov	r7, r3
    fde0:	ea000007 	b	fe04 <prog+0xfdbc>
    fde4:	ebffe9b8 	bl	a4cc <__muldf3>
    fde8:	e3a02000 	mov	r2, #0	; 0x0
    fdec:	e3a03000 	mov	r3, #0	; 0x0
    fdf0:	e1a04000 	mov	r4, r0
    fdf4:	e1a05001 	mov	r5, r1
    fdf8:	ebffeb20 	bl	aa80 <__nedf2>
    fdfc:	e3500000 	cmp	r0, #0	; 0x0
    fe00:	0a0000f7 	beq	101e4 <prog+0x1019c>
    fe04:	e1a0200a 	mov	r2, sl
    fe08:	e1a0300b 	mov	r3, fp
    fe0c:	e1a00004 	mov	r0, r4
    fe10:	e1a01005 	mov	r1, r5
    fe14:	ebffea90 	bl	a85c <__divdf3>
    fe18:	ebffebd9 	bl	ad84 <__fixdfsi>
    fe1c:	e1a06000 	mov	r6, r0
    fe20:	ebffeb99 	bl	ac8c <__floatsidf>
    fe24:	e1a02000 	mov	r2, r0
    fe28:	e1a03001 	mov	r3, r1
    fe2c:	e1a0000a 	mov	r0, sl
    fe30:	e1a0100b 	mov	r1, fp
    fe34:	ebffe9a4 	bl	a4cc <__muldf3>
    fe38:	e1a02000 	mov	r2, r0
    fe3c:	e1a03001 	mov	r3, r1
    fe40:	e1a00004 	mov	r0, r4
    fe44:	e1a01005 	mov	r1, r5
    fe48:	ebffe960 	bl	a3d0 <__subdf3>
    fe4c:	e286c030 	add	ip, r6, #48	; 0x30
    fe50:	e4c7c001 	strb	ip, [r7], #1
    fe54:	e3a02101 	mov	r2, #1073741824	; 0x40000000
    fe58:	e1580007 	cmp	r8, r7
    fe5c:	e2822709 	add	r2, r2, #2359296	; 0x240000
    fe60:	e3a03000 	mov	r3, #0	; 0x0
    fe64:	1affffde 	bne	fde4 <prog+0xfd9c>
    fe68:	e1a02000 	mov	r2, r0
    fe6c:	e1a03001 	mov	r3, r1
    fe70:	ebffe96e 	bl	a430 <__adddf3>
    fe74:	e1a04000 	mov	r4, r0
    fe78:	e1a05001 	mov	r5, r1
    fe7c:	e1a0000a 	mov	r0, sl
    fe80:	e1a0100b 	mov	r1, fp
    fe84:	e1a02004 	mov	r2, r4
    fe88:	e1a03005 	mov	r3, r5
    fe8c:	ebffeb61 	bl	ac18 <__ltdf2>
    fe90:	e3500000 	cmp	r0, #0	; 0x0
    fe94:	ba000008 	blt	febc <prog+0xfe74>
    fe98:	e1a0000a 	mov	r0, sl
    fe9c:	e1a0100b 	mov	r1, fp
    fea0:	e1a02004 	mov	r2, r4
    fea4:	e1a03005 	mov	r3, r5
    fea8:	eb000cb4 	bl	13180 <__eqdf2>
    feac:	e3500000 	cmp	r0, #0	; 0x0
    feb0:	1a0000cb 	bne	101e4 <prog+0x1019c>
    feb4:	e3160001 	tst	r6, #1	; 0x1
    feb8:	0a0000c9 	beq	101e4 <prog+0x1019c>
    febc:	e59d0024 	ldr	r0, [sp, #36]
    fec0:	e58d0044 	str	r0, [sp, #68]
    fec4:	e1a02007 	mov	r2, r7
    fec8:	e59d3040 	ldr	r3, [sp, #64]
    fecc:	e0671003 	rsb	r1, r7, r3
    fed0:	e5723001 	ldrb	r3, [r2, #-1]!
    fed4:	e3530039 	cmp	r3, #57	; 0x39
    fed8:	1a000008 	bne	ff00 <prog+0xfeb8>
    fedc:	e59dc040 	ldr	ip, [sp, #64]
    fee0:	e15c0002 	cmp	ip, r2
    fee4:	1afffff7 	bne	fec8 <prog+0xfe80>
    fee8:	e3a03030 	mov	r3, #48	; 0x30
    feec:	e5cc3000 	strb	r3, [ip]
    fef0:	e59de044 	ldr	lr, [sp, #68]
    fef4:	e28ee001 	add	lr, lr, #1	; 0x1
    fef8:	e7d13007 	ldrb	r3, [r1, r7]
    fefc:	e58de044 	str	lr, [sp, #68]
    ff00:	e2833001 	add	r3, r3, #1	; 0x1
    ff04:	e4c23001 	strb	r3, [r2], #1
    ff08:	e59dc044 	ldr	ip, [sp, #68]
    ff0c:	e1a07002 	mov	r7, r2
    ff10:	e58dc024 	str	ip, [sp, #36]
    ff14:	ea0000b2 	b	101e4 <prog+0x1019c>
    ff18:	e59de02c 	ldr	lr, [sp, #44]
    ff1c:	e35e0000 	cmp	lr, #0	; 0x0
    ff20:	1a0000bf 	bne	10224 <prog+0x101dc>
    ff24:	e59d7014 	ldr	r7, [sp, #20]
    ff28:	e59d5018 	ldr	r5, [sp, #24]
    ff2c:	e1a0a00e 	mov	sl, lr
    ff30:	e3570000 	cmp	r7, #0	; 0x0
    ff34:	c35b0000 	cmpgt	fp, #0	; 0x0
    ff38:	da000007 	ble	ff5c <prog+0xff14>
    ff3c:	e59de014 	ldr	lr, [sp, #20]
    ff40:	e157000b 	cmp	r7, fp
    ff44:	b1a03007 	movlt	r3, r7
    ff48:	a1a0300b 	movge	r3, fp
    ff4c:	e063e00e 	rsb	lr, r3, lr
    ff50:	e58de014 	str	lr, [sp, #20]
    ff54:	e063b00b 	rsb	fp, r3, fp
    ff58:	e0637007 	rsb	r7, r3, r7
    ff5c:	e59d0018 	ldr	r0, [sp, #24]
    ff60:	e3500000 	cmp	r0, #0	; 0x0
    ff64:	da000015 	ble	ffc0 <prog+0xff78>
    ff68:	e59d102c 	ldr	r1, [sp, #44]
    ff6c:	e3510000 	cmp	r1, #0	; 0x0
    ff70:	0a00027b 	beq	10964 <prog+0x1091c>
    ff74:	e3550000 	cmp	r5, #0	; 0x0
    ff78:	da00000d 	ble	ffb4 <prog+0xff6c>
    ff7c:	e1a0100a 	mov	r1, sl
    ff80:	e1a02005 	mov	r2, r5
    ff84:	e59d0008 	ldr	r0, [sp, #8]
    ff88:	eb00086f 	bl	1214c <_pow5mult>
    ff8c:	e1a0a000 	mov	sl, r0
    ff90:	e1a0100a 	mov	r1, sl
    ff94:	e59d2038 	ldr	r2, [sp, #56]
    ff98:	e59d0008 	ldr	r0, [sp, #8]
    ff9c:	eb0007c0 	bl	11ea4 <_multiply>
    ffa0:	e59d1038 	ldr	r1, [sp, #56]
    ffa4:	e1a04000 	mov	r4, r0
    ffa8:	e59d0008 	ldr	r0, [sp, #8]
    ffac:	eb0005ef 	bl	11770 <_Bfree>
    ffb0:	e58d4038 	str	r4, [sp, #56]
    ffb4:	e59d3018 	ldr	r3, [sp, #24]
    ffb8:	e0532005 	subs	r2, r3, r5
    ffbc:	1a000270 	bne	10984 <prog+0x1093c>
    ffc0:	e59d0008 	ldr	r0, [sp, #8]
    ffc4:	e3a01001 	mov	r1, #1	; 0x1
    ffc8:	eb000825 	bl	12064 <_i2b>
    ffcc:	e59dc030 	ldr	ip, [sp, #48]
    ffd0:	e35c0000 	cmp	ip, #0	; 0x0
    ffd4:	e1a06000 	mov	r6, r0
    ffd8:	da000004 	ble	fff0 <prog+0xffa8>
    ffdc:	e1a01000 	mov	r1, r0
    ffe0:	e1a0200c 	mov	r2, ip
    ffe4:	e59d0008 	ldr	r0, [sp, #8]
    ffe8:	eb000857 	bl	1214c <_pow5mult>
    ffec:	e1a06000 	mov	r6, r0
    fff0:	e59de004 	ldr	lr, [sp, #4]
    fff4:	e35e0001 	cmp	lr, #1	; 0x1
    fff8:	da0000f9 	ble	103e4 <prog+0x1039c>
    fffc:	e3a04000 	mov	r4, #0	; 0x0
   10000:	e59d1030 	ldr	r1, [sp, #48]
   10004:	e3510000 	cmp	r1, #0	; 0x0
   10008:	03a03001 	moveq	r3, #1	; 0x1
   1000c:	1a000232 	bne	108dc <prog+0x10894>
   10010:	e08b3003 	add	r3, fp, r3
   10014:	e213301f 	ands	r3, r3, #31	; 0x1f
   10018:	03a0301c 	moveq	r3, #28	; 0x1c
   1001c:	0a000119 	beq	10488 <prog+0x10440>
   10020:	e2633020 	rsb	r3, r3, #32	; 0x20
   10024:	e3530004 	cmp	r3, #4	; 0x4
   10028:	da000113 	ble	1047c <prog+0x10434>
   1002c:	e59d2014 	ldr	r2, [sp, #20]
   10030:	e2433004 	sub	r3, r3, #4	; 0x4
   10034:	e0822003 	add	r2, r2, r3
   10038:	e58d2014 	str	r2, [sp, #20]
   1003c:	e08bb003 	add	fp, fp, r3
   10040:	e0877003 	add	r7, r7, r3
   10044:	e59de014 	ldr	lr, [sp, #20]
   10048:	e35e0000 	cmp	lr, #0	; 0x0
   1004c:	da000004 	ble	10064 <prog+0x1001c>
   10050:	e59d1038 	ldr	r1, [sp, #56]
   10054:	e1a0200e 	mov	r2, lr
   10058:	e59d0008 	ldr	r0, [sp, #8]
   1005c:	eb000753 	bl	11db0 <_lshift>
   10060:	e58d0038 	str	r0, [sp, #56]
   10064:	e35b0000 	cmp	fp, #0	; 0x0
   10068:	da000004 	ble	10080 <prog+0x10038>
   1006c:	e1a01006 	mov	r1, r6
   10070:	e1a0200b 	mov	r2, fp
   10074:	e59d0008 	ldr	r0, [sp, #8]
   10078:	eb00074c 	bl	11db0 <_lshift>
   1007c:	e1a06000 	mov	r6, r0
   10080:	e59d0028 	ldr	r0, [sp, #40]
   10084:	e3500000 	cmp	r0, #0	; 0x0
   10088:	1a000219 	bne	108f4 <prog+0x108ac>
   1008c:	e59de01c 	ldr	lr, [sp, #28]
   10090:	e59d0004 	ldr	r0, [sp, #4]
   10094:	e35e0000 	cmp	lr, #0	; 0x0
   10098:	c3a03000 	movgt	r3, #0	; 0x0
   1009c:	d3a03001 	movle	r3, #1	; 0x1
   100a0:	e3500002 	cmp	r0, #2	; 0x2
   100a4:	d3a03000 	movle	r3, #0	; 0x0
   100a8:	e3530000 	cmp	r3, #0	; 0x0
   100ac:	0a0000fb 	beq	104a0 <prog+0x10458>
   100b0:	e35e0000 	cmp	lr, #0	; 0x0
   100b4:	ba000037 	blt	10198 <prog+0x10150>
   100b8:	e1a01006 	mov	r1, r6
   100bc:	e3a02005 	mov	r2, #5	; 0x5
   100c0:	e3a03000 	mov	r3, #0	; 0x0
   100c4:	e59d0008 	ldr	r0, [sp, #8]
   100c8:	eb0007ed 	bl	12084 <_multadd>
   100cc:	e1a06000 	mov	r6, r0
   100d0:	e1a01006 	mov	r1, r6
   100d4:	e59d0038 	ldr	r0, [sp, #56]
   100d8:	eb0005e6 	bl	11878 <__mcmp>
   100dc:	e3500000 	cmp	r0, #0	; 0x0
   100e0:	da00002c 	ble	10198 <prog+0x10150>
   100e4:	e59d7040 	ldr	r7, [sp, #64]
   100e8:	e3a03031 	mov	r3, #49	; 0x31
   100ec:	e4c73001 	strb	r3, [r7], #1
   100f0:	e59d3024 	ldr	r3, [sp, #36]
   100f4:	e3a0c000 	mov	ip, #0	; 0x0
   100f8:	e2833001 	add	r3, r3, #1	; 0x1
   100fc:	e1a0b00a 	mov	fp, sl
   10100:	e58d3024 	str	r3, [sp, #36]
   10104:	e58dc03c 	str	ip, [sp, #60]
   10108:	ea000029 	b	101b4 <prog+0x1016c>
   1010c:	e51f157c 	ldr	r1, [pc, #-1404]	; fb98 <prog+0xfb50>
   10110:	e2812020 	add	r2, r1, #32	; 0x20
   10114:	e892000c 	ldmia	r2, {r2, r3}
   10118:	e28d000c 	add	r0, sp, #12	; 0xc
   1011c:	e8900003 	ldmia	r0, {r0, r1}
   10120:	ebffe9cd 	bl	a85c <__divdf3>
   10124:	e204400f 	and	r4, r4, #15	; 0xf
   10128:	e1a08000 	mov	r8, r0
   1012c:	e1a09001 	mov	r9, r1
   10130:	e3a0a003 	mov	sl, #3	; 0x3
   10134:	eafffe43 	b	fa48 <prog+0xfa00>
   10138:	e3a02101 	mov	r2, #1073741824	; 0x40000000
   1013c:	e1a00008 	mov	r0, r8
   10140:	e1a01009 	mov	r1, r9
   10144:	e2822705 	add	r2, r2, #1310720	; 0x140000
   10148:	e3a03000 	mov	r3, #0	; 0x0
   1014c:	ebffe89f 	bl	a3d0 <__subdf3>
   10150:	e1a02006 	mov	r2, r6
   10154:	e1a03007 	mov	r3, r7
   10158:	e1a08000 	mov	r8, r0
   1015c:	e1a09001 	mov	r9, r1
   10160:	ebffea68 	bl	ab08 <__gtdf2>
   10164:	e3500000 	cmp	r0, #0	; 0x0
   10168:	e1a04006 	mov	r4, r6
   1016c:	e1a05007 	mov	r5, r7
   10170:	ca000059 	bgt	102dc <prog+0x10294>
   10174:	e2862102 	add	r2, r6, #-2147483648	; 0x80000000
   10178:	e1a03007 	mov	r3, r7
   1017c:	e1a00008 	mov	r0, r8
   10180:	e1a01009 	mov	r1, r9
   10184:	ebffeaa3 	bl	ac18 <__ltdf2>
   10188:	e3500000 	cmp	r0, #0	; 0x0
   1018c:	aafffef9 	bge	fd78 <prog+0xfd30>
   10190:	e3a06000 	mov	r6, #0	; 0x0
   10194:	e1a0a006 	mov	sl, r6
   10198:	e59d1074 	ldr	r1, [sp, #116]
   1019c:	e3a02000 	mov	r2, #0	; 0x0
   101a0:	e1e01001 	mvn	r1, r1
   101a4:	e58d1024 	str	r1, [sp, #36]
   101a8:	e59d7040 	ldr	r7, [sp, #64]
   101ac:	e58d203c 	str	r2, [sp, #60]
   101b0:	e1a0b00a 	mov	fp, sl
   101b4:	e1a01006 	mov	r1, r6
   101b8:	e59d0008 	ldr	r0, [sp, #8]
   101bc:	eb00056b 	bl	11770 <_Bfree>
   101c0:	e35b0000 	cmp	fp, #0	; 0x0
   101c4:	0a000006 	beq	101e4 <prog+0x1019c>
   101c8:	e59d203c 	ldr	r2, [sp, #60]
   101cc:	e3520000 	cmp	r2, #0	; 0x0
   101d0:	1152000b 	cmpne	r2, fp
   101d4:	1a000142 	bne	106e4 <prog+0x1069c>
   101d8:	e1a0100b 	mov	r1, fp
   101dc:	e59d0008 	ldr	r0, [sp, #8]
   101e0:	eb000562 	bl	11770 <_Bfree>
   101e4:	e59d1038 	ldr	r1, [sp, #56]
   101e8:	e59d0008 	ldr	r0, [sp, #8]
   101ec:	eb00055f 	bl	11770 <_Bfree>
   101f0:	e3a03000 	mov	r3, #0	; 0x0
   101f4:	e59dc024 	ldr	ip, [sp, #36]
   101f8:	e59de080 	ldr	lr, [sp, #128]
   101fc:	e5c73000 	strb	r3, [r7]
   10200:	e59d0078 	ldr	r0, [sp, #120]
   10204:	e35e0000 	cmp	lr, #0	; 0x0
   10208:	e28c2001 	add	r2, ip, #1	; 0x1
   1020c:	e5802000 	str	r2, [r0]
   10210:	159d1080 	ldrne	r1, [sp, #128]
   10214:	059d0040 	ldreq	r0, [sp, #64]
   10218:	159d0040 	ldrne	r0, [sp, #64]
   1021c:	15817000 	strne	r7, [r1]
   10220:	eafffd47 	b	f744 <_dtoa_r+0xd8>
   10224:	e59d0004 	ldr	r0, [sp, #4]
   10228:	e3500001 	cmp	r0, #1	; 0x1
   1022c:	da0001d9 	ble	10998 <prog+0x10950>
   10230:	e59d301c 	ldr	r3, [sp, #28]
   10234:	e59dc018 	ldr	ip, [sp, #24]
   10238:	e2432001 	sub	r2, r3, #1	; 0x1
   1023c:	e15c0002 	cmp	ip, r2
   10240:	b59de018 	ldrlt	lr, [sp, #24]
   10244:	b59d0030 	ldrlt	r0, [sp, #48]
   10248:	b06e3002 	rsblt	r3, lr, r2
   1024c:	e59d101c 	ldr	r1, [sp, #28]
   10250:	b08ee003 	addlt	lr, lr, r3
   10254:	b0800003 	addlt	r0, r0, r3
   10258:	a062500c 	rsbge	r5, r2, ip
   1025c:	b58de018 	strlt	lr, [sp, #24]
   10260:	b58d0030 	strlt	r0, [sp, #48]
   10264:	b3a05000 	movlt	r5, #0	; 0x0
   10268:	e3510000 	cmp	r1, #0	; 0x0
   1026c:	b59d301c 	ldrlt	r3, [sp, #28]
   10270:	b59d2014 	ldrlt	r2, [sp, #20]
   10274:	a59d7014 	ldrge	r7, [sp, #20]
   10278:	b0637002 	rsblt	r7, r3, r2
   1027c:	a1a03001 	movge	r3, r1
   10280:	b3a03000 	movlt	r3, #0	; 0x0
   10284:	e59dc014 	ldr	ip, [sp, #20]
   10288:	e59d0008 	ldr	r0, [sp, #8]
   1028c:	e08cc003 	add	ip, ip, r3
   10290:	e3a01001 	mov	r1, #1	; 0x1
   10294:	e08bb003 	add	fp, fp, r3
   10298:	e58dc014 	str	ip, [sp, #20]
   1029c:	eb000770 	bl	12064 <_i2b>
   102a0:	e1a0a000 	mov	sl, r0
   102a4:	eaffff21 	b	ff30 <prog+0xfee8>
   102a8:	e3500000 	cmp	r0, #0	; 0x0
   102ac:	baffffb7 	blt	10190 <prog+0x10148>
   102b0:	e3a02101 	mov	r2, #1073741824	; 0x40000000
   102b4:	e2822705 	add	r2, r2, #1310720	; 0x140000
   102b8:	e3a03000 	mov	r3, #0	; 0x0
   102bc:	e1a0000a 	mov	r0, sl
   102c0:	e1a0100b 	mov	r1, fp
   102c4:	ebffe880 	bl	a4cc <__muldf3>
   102c8:	e1a02008 	mov	r2, r8
   102cc:	e1a03009 	mov	r3, r9
   102d0:	ebffea2e 	bl	ab90 <__gedf2>
   102d4:	e3500000 	cmp	r0, #0	; 0x0
   102d8:	aaffffac 	bge	10190 <prog+0x10148>
   102dc:	e3a06000 	mov	r6, #0	; 0x0
   102e0:	e1a0a006 	mov	sl, r6
   102e4:	eaffff7e 	b	100e4 <prog+0x1009c>
   102e8:	e3e02000 	mvn	r2, #0	; 0x0
   102ec:	e3a03001 	mov	r3, #1	; 0x1
   102f0:	e58d2020 	str	r2, [sp, #32]
   102f4:	e58d201c 	str	r2, [sp, #28]
   102f8:	e58d302c 	str	r3, [sp, #44]
   102fc:	e59dc008 	ldr	ip, [sp, #8]
   10300:	e3560017 	cmp	r6, #23	; 0x17
   10304:	e3a03000 	mov	r3, #0	; 0x0
   10308:	e58c3044 	str	r3, [ip, #68]
   1030c:	81a01003 	movhi	r1, r3
   10310:	83a02004 	movhi	r2, #4	; 0x4
   10314:	9a0001e0 	bls	10a9c <prog+0x10a54>
   10318:	e1a02082 	mov	r2, r2, lsl #1
   1031c:	e2823014 	add	r3, r2, #20	; 0x14
   10320:	e1560003 	cmp	r6, r3
   10324:	e2811001 	add	r1, r1, #1	; 0x1
   10328:	2afffffa 	bcs	10318 <prog+0x102d0>
   1032c:	e59d301c 	ldr	r3, [sp, #28]
   10330:	e59d2008 	ldr	r2, [sp, #8]
   10334:	e353000e 	cmp	r3, #14	; 0xe
   10338:	83a04000 	movhi	r4, #0	; 0x0
   1033c:	93a04001 	movls	r4, #1	; 0x1
   10340:	e1a05000 	mov	r5, r0
   10344:	e5821044 	str	r1, [r2, #68]
   10348:	eafffdab 	b	f9fc <prog+0xf9b4>
   1034c:	e3a03000 	mov	r3, #0	; 0x0
   10350:	e58d302c 	str	r3, [sp, #44]
   10354:	e59dc074 	ldr	ip, [sp, #116]
   10358:	e59de024 	ldr	lr, [sp, #36]
   1035c:	e28c3001 	add	r3, ip, #1	; 0x1
   10360:	e08e6003 	add	r6, lr, r3
   10364:	e3560000 	cmp	r6, #0	; 0x0
   10368:	e2461001 	sub	r1, r6, #1	; 0x1
   1036c:	e58d1020 	str	r1, [sp, #32]
   10370:	c58d601c 	strgt	r6, [sp, #28]
   10374:	caffffe0 	bgt	102fc <prog+0x102b4>
   10378:	e356000e 	cmp	r6, #14	; 0xe
   1037c:	83a04000 	movhi	r4, #0	; 0x0
   10380:	93a04001 	movls	r4, #1	; 0x1
   10384:	e1a05000 	mov	r5, r0
   10388:	e58d601c 	str	r6, [sp, #28]
   1038c:	eafffd97 	b	f9f0 <prog+0xf9a8>
   10390:	e3a02001 	mov	r2, #1	; 0x1
   10394:	e58d202c 	str	r2, [sp, #44]
   10398:	e59d2074 	ldr	r2, [sp, #116]
   1039c:	e3520000 	cmp	r2, #0	; 0x0
   103a0:	c58d2020 	strgt	r2, [sp, #32]
   103a4:	c1a06002 	movgt	r6, r2
   103a8:	c58d201c 	strgt	r2, [sp, #28]
   103ac:	caffffd2 	bgt	102fc <prog+0x102b4>
   103b0:	e3a02001 	mov	r2, #1	; 0x1
   103b4:	e1a04002 	mov	r4, r2
   103b8:	e1a05000 	mov	r5, r0
   103bc:	e58d201c 	str	r2, [sp, #28]
   103c0:	e58d2074 	str	r2, [sp, #116]
   103c4:	e58d2020 	str	r2, [sp, #32]
   103c8:	eafffd88 	b	f9f0 <prog+0xf9a8>
   103cc:	e3a01001 	mov	r1, #1	; 0x1
   103d0:	e58d102c 	str	r1, [sp, #44]
   103d4:	eaffffde 	b	10354 <prog+0x1030c>
   103d8:	e3a01000 	mov	r1, #0	; 0x0
   103dc:	e58d102c 	str	r1, [sp, #44]
   103e0:	eaffffec 	b	10398 <prog+0x10350>
   103e4:	e3590000 	cmp	r9, #0	; 0x0
   103e8:	1affff03 	bne	fffc <prog+0xffb4>
   103ec:	e3c834ff 	bic	r3, r8, #-16777216	; 0xff000000
   103f0:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
   103f4:	e3530000 	cmp	r3, #0	; 0x0
   103f8:	1afffeff 	bne	fffc <prog+0xffb4>
   103fc:	e3c83102 	bic	r3, r8, #-2147483648	; 0x80000000
   10400:	e1a03a23 	mov	r3, r3, lsr #20
   10404:	e1a03a03 	mov	r3, r3, lsl #20
   10408:	e3530000 	cmp	r3, #0	; 0x0
   1040c:	0afffefa 	beq	fffc <prog+0xffb4>
   10410:	e59d0014 	ldr	r0, [sp, #20]
   10414:	e28bb001 	add	fp, fp, #1	; 0x1
   10418:	e2800001 	add	r0, r0, #1	; 0x1
   1041c:	e3a04001 	mov	r4, #1	; 0x1
   10420:	e58d0014 	str	r0, [sp, #20]
   10424:	eafffef5 	b	10000 <prog+0xffb8>
   10428:	e59d0024 	ldr	r0, [sp, #36]
   1042c:	ebffea16 	bl	ac8c <__floatsidf>
   10430:	e1a02000 	mov	r2, r0
   10434:	e1a03001 	mov	r3, r1
   10438:	e1a00004 	mov	r0, r4
   1043c:	e1a01005 	mov	r1, r5
   10440:	ebffe98e 	bl	aa80 <__nedf2>
   10444:	e3500000 	cmp	r0, #0	; 0x0
   10448:	159dc024 	ldrne	ip, [sp, #36]
   1044c:	124cc001 	subne	ip, ip, #1	; 0x1
   10450:	158dc024 	strne	ip, [sp, #36]
   10454:	eafffcf5 	b	f830 <_dtoa_r+0x1c4>
   10458:	e59d3014 	ldr	r3, [sp, #20]
   1045c:	e59dc024 	ldr	ip, [sp, #36]
   10460:	e3a00000 	mov	r0, #0	; 0x0
   10464:	e06c3003 	rsb	r3, ip, r3
   10468:	e26ce000 	rsb	lr, ip, #0	; 0x0
   1046c:	e58d3014 	str	r3, [sp, #20]
   10470:	e58de018 	str	lr, [sp, #24]
   10474:	e58d0030 	str	r0, [sp, #48]
   10478:	eafffd0f 	b	f8bc <_dtoa_r+0x250>
   1047c:	e3530003 	cmp	r3, #3	; 0x3
   10480:	cafffeef 	bgt	10044 <prog+0xfffc>
   10484:	e283301c 	add	r3, r3, #28	; 0x1c
   10488:	e59dc014 	ldr	ip, [sp, #20]
   1048c:	e08bb003 	add	fp, fp, r3
   10490:	e08cc003 	add	ip, ip, r3
   10494:	e0877003 	add	r7, r7, r3
   10498:	e58dc014 	str	ip, [sp, #20]
   1049c:	eafffee8 	b	10044 <prog+0xfffc>
   104a0:	e59de02c 	ldr	lr, [sp, #44]
   104a4:	e35e0000 	cmp	lr, #0	; 0x0
   104a8:	03a04000 	moveq	r4, #0	; 0x0
   104ac:	0a00004c 	beq	105e4 <prog+0x1059c>
   104b0:	e3570000 	cmp	r7, #0	; 0x0
   104b4:	da000004 	ble	104cc <prog+0x10484>
   104b8:	e1a0100a 	mov	r1, sl
   104bc:	e1a02007 	mov	r2, r7
   104c0:	e59d0008 	ldr	r0, [sp, #8]
   104c4:	eb000639 	bl	11db0 <_lshift>
   104c8:	e1a0a000 	mov	sl, r0
   104cc:	e3540000 	cmp	r4, #0	; 0x0
   104d0:	01a0b00a 	moveq	fp, sl
   104d4:	1a00014f 	bne	10a18 <prog+0x109d0>
   104d8:	e58da03c 	str	sl, [sp, #60]
   104dc:	e59d5040 	ldr	r5, [sp, #64]
   104e0:	e2097001 	and	r7, r9, #1	; 0x1
   104e4:	e1a01006 	mov	r1, r6
   104e8:	e59d0038 	ldr	r0, [sp, #56]
   104ec:	ebfffbdd 	bl	f468 <quorem>
   104f0:	e59d103c 	ldr	r1, [sp, #60]
   104f4:	e2809030 	add	r9, r0, #48	; 0x30
   104f8:	e59d0038 	ldr	r0, [sp, #56]
   104fc:	eb0004dd 	bl	11878 <__mcmp>
   10500:	e1a01006 	mov	r1, r6
   10504:	e1a08000 	mov	r8, r0
   10508:	e1a0200b 	mov	r2, fp
   1050c:	e59d0008 	ldr	r0, [sp, #8]
   10510:	eb0005d9 	bl	11c7c <__mdiff>
   10514:	e590300c 	ldr	r3, [r0, #12]
   10518:	e3530000 	cmp	r3, #0	; 0x0
   1051c:	e1a04000 	mov	r4, r0
   10520:	13a0a001 	movne	sl, #1	; 0x1
   10524:	0a000061 	beq	106b0 <prog+0x10668>
   10528:	e1a01004 	mov	r1, r4
   1052c:	e59d0008 	ldr	r0, [sp, #8]
   10530:	eb00048e 	bl	11770 <_Bfree>
   10534:	e59d2004 	ldr	r2, [sp, #4]
   10538:	e19a2002 	orrs	r2, sl, r2
   1053c:	1a000001 	bne	10548 <prog+0x10500>
   10540:	e3570000 	cmp	r7, #0	; 0x0
   10544:	0a00014b 	beq	10a78 <prog+0x10a30>
   10548:	e3580000 	cmp	r8, #0	; 0x0
   1054c:	ba000120 	blt	109d4 <prog+0x1098c>
   10550:	e59d3004 	ldr	r3, [sp, #4]
   10554:	e1983003 	orrs	r3, r8, r3
   10558:	1a000001 	bne	10564 <prog+0x1051c>
   1055c:	e3570000 	cmp	r7, #0	; 0x0
   10560:	0a00011b 	beq	109d4 <prog+0x1098c>
   10564:	e35a0000 	cmp	sl, #0	; 0x0
   10568:	ca00013a 	bgt	10a58 <prog+0x10a10>
   1056c:	e4c59001 	strb	r9, [r5], #1
   10570:	e59dc01c 	ldr	ip, [sp, #28]
   10574:	e59de040 	ldr	lr, [sp, #64]
   10578:	e08c300e 	add	r3, ip, lr
   1057c:	e1550003 	cmp	r5, r3
   10580:	0a00002a 	beq	10630 <prog+0x105e8>
   10584:	e59d1038 	ldr	r1, [sp, #56]
   10588:	e59d0008 	ldr	r0, [sp, #8]
   1058c:	e3a0200a 	mov	r2, #10	; 0xa
   10590:	e3a03000 	mov	r3, #0	; 0x0
   10594:	eb0006ba 	bl	12084 <_multadd>
   10598:	e58d0038 	str	r0, [sp, #56]
   1059c:	e59d003c 	ldr	r0, [sp, #60]
   105a0:	e150000b 	cmp	r0, fp
   105a4:	0a000046 	beq	106c4 <prog+0x1067c>
   105a8:	e59d103c 	ldr	r1, [sp, #60]
   105ac:	e3a0200a 	mov	r2, #10	; 0xa
   105b0:	e3a03000 	mov	r3, #0	; 0x0
   105b4:	e59d0008 	ldr	r0, [sp, #8]
   105b8:	eb0006b1 	bl	12084 <_multadd>
   105bc:	e1a0100b 	mov	r1, fp
   105c0:	e58d003c 	str	r0, [sp, #60]
   105c4:	e3a0200a 	mov	r2, #10	; 0xa
   105c8:	e59d0008 	ldr	r0, [sp, #8]
   105cc:	e3a03000 	mov	r3, #0	; 0x0
   105d0:	eb0006ab 	bl	12084 <_multadd>
   105d4:	e1a0b000 	mov	fp, r0
   105d8:	eaffffc1 	b	104e4 <prog+0x1049c>
   105dc:	eb0006a8 	bl	12084 <_multadd>
   105e0:	e58d0038 	str	r0, [sp, #56]
   105e4:	e1a01006 	mov	r1, r6
   105e8:	e59d0038 	ldr	r0, [sp, #56]
   105ec:	ebfffb9d 	bl	f468 <quorem>
   105f0:	e59dc040 	ldr	ip, [sp, #64]
   105f4:	e2809030 	add	r9, r0, #48	; 0x30
   105f8:	e59d1038 	ldr	r1, [sp, #56]
   105fc:	e59d0008 	ldr	r0, [sp, #8]
   10600:	e7c4900c 	strb	r9, [r4, ip]
   10604:	e59de01c 	ldr	lr, [sp, #28]
   10608:	e2844001 	add	r4, r4, #1	; 0x1
   1060c:	e15e0004 	cmp	lr, r4
   10610:	e3a0200a 	mov	r2, #10	; 0xa
   10614:	e3a03000 	mov	r3, #0	; 0x0
   10618:	caffffef 	bgt	105dc <prog+0x10594>
   1061c:	e59d0040 	ldr	r0, [sp, #64]
   10620:	e3a01000 	mov	r1, #0	; 0x0
   10624:	e58d103c 	str	r1, [sp, #60]
   10628:	e0805004 	add	r5, r0, r4
   1062c:	e1a0b00a 	mov	fp, sl
   10630:	e59d1038 	ldr	r1, [sp, #56]
   10634:	e3a02001 	mov	r2, #1	; 0x1
   10638:	e59d0008 	ldr	r0, [sp, #8]
   1063c:	eb0005db 	bl	11db0 <_lshift>
   10640:	e1a01006 	mov	r1, r6
   10644:	e58d0038 	str	r0, [sp, #56]
   10648:	eb00048a 	bl	11878 <__mcmp>
   1064c:	e3500000 	cmp	r0, #0	; 0x0
   10650:	da00000d 	ble	1068c <prog+0x10644>
   10654:	e1a02005 	mov	r2, r5
   10658:	e5723001 	ldrb	r3, [r2, #-1]!
   1065c:	e3530039 	cmp	r3, #57	; 0x39
   10660:	1a0000d7 	bne	109c4 <prog+0x1097c>
   10664:	e59d0040 	ldr	r0, [sp, #64]
   10668:	e1500002 	cmp	r0, r2
   1066c:	1afffff9 	bne	10658 <prog+0x10610>
   10670:	e1a07000 	mov	r7, r0
   10674:	e3a03031 	mov	r3, #49	; 0x31
   10678:	e4c73001 	strb	r3, [r7], #1
   1067c:	e59d1024 	ldr	r1, [sp, #36]
   10680:	e2811001 	add	r1, r1, #1	; 0x1
   10684:	e58d1024 	str	r1, [sp, #36]
   10688:	eafffec9 	b	101b4 <prog+0x1016c>
   1068c:	1a000001 	bne	10698 <prog+0x10650>
   10690:	e3190001 	tst	r9, #1	; 0x1
   10694:	1affffee 	bne	10654 <prog+0x1060c>
   10698:	e1a02005 	mov	r2, r5
   1069c:	e5723001 	ldrb	r3, [r2, #-1]!
   106a0:	e3530030 	cmp	r3, #48	; 0x30
   106a4:	0afffffc 	beq	1069c <prog+0x10654>
   106a8:	e2827001 	add	r7, r2, #1	; 0x1
   106ac:	eafffec0 	b	101b4 <prog+0x1016c>
   106b0:	e59d0038 	ldr	r0, [sp, #56]
   106b4:	e1a01004 	mov	r1, r4
   106b8:	eb00046e 	bl	11878 <__mcmp>
   106bc:	e1a0a000 	mov	sl, r0
   106c0:	eaffff98 	b	10528 <prog+0x104e0>
   106c4:	e1a0100b 	mov	r1, fp
   106c8:	e59d0008 	ldr	r0, [sp, #8]
   106cc:	e3a0200a 	mov	r2, #10	; 0xa
   106d0:	e3a03000 	mov	r3, #0	; 0x0
   106d4:	eb00066a 	bl	12084 <_multadd>
   106d8:	e1a0b000 	mov	fp, r0
   106dc:	e58d003c 	str	r0, [sp, #60]
   106e0:	eaffff7f 	b	104e4 <prog+0x1049c>
   106e4:	e1a01002 	mov	r1, r2
   106e8:	e59d0008 	ldr	r0, [sp, #8]
   106ec:	eb00041f 	bl	11770 <_Bfree>
   106f0:	eafffeb8 	b	101d8 <prog+0x10190>
   106f4:	e51fcb68 	ldr	ip, [pc, #-2920]	; fb94 <prog+0xfb4c>
   106f8:	e08cc18a 	add	ip, ip, sl, lsl #3
   106fc:	e91c000c 	ldmdb	ip, {r2, r3}
   10700:	e1a00006 	mov	r0, r6
   10704:	e1a01007 	mov	r1, r7
   10708:	ebffe76f 	bl	a4cc <__muldf3>
   1070c:	e1a05008 	mov	r5, r8
   10710:	e1a06009 	mov	r6, r9
   10714:	e1a08000 	mov	r8, r0
   10718:	e1a09001 	mov	r9, r1
   1071c:	e1a00005 	mov	r0, r5
   10720:	e1a01006 	mov	r1, r6
   10724:	ebffe996 	bl	ad84 <__fixdfsi>
   10728:	e1a04000 	mov	r4, r0
   1072c:	ebffe956 	bl	ac8c <__floatsidf>
   10730:	e1a02000 	mov	r2, r0
   10734:	e1a03001 	mov	r3, r1
   10738:	e1a00005 	mov	r0, r5
   1073c:	e1a01006 	mov	r1, r6
   10740:	ebffe722 	bl	a3d0 <__subdf3>
   10744:	e59d7040 	ldr	r7, [sp, #64]
   10748:	e2844030 	add	r4, r4, #48	; 0x30
   1074c:	e35a0001 	cmp	sl, #1	; 0x1
   10750:	e4c74001 	strb	r4, [r7], #1
   10754:	e1a05000 	mov	r5, r0
   10758:	e1a06001 	mov	r6, r1
   1075c:	13a07001 	movne	r7, #1	; 0x1
   10760:	0a000018 	beq	107c8 <prog+0x10780>
   10764:	e3a02101 	mov	r2, #1073741824	; 0x40000000
   10768:	e2822709 	add	r2, r2, #2359296	; 0x240000
   1076c:	e3a03000 	mov	r3, #0	; 0x0
   10770:	e1a00005 	mov	r0, r5
   10774:	e1a01006 	mov	r1, r6
   10778:	ebffe753 	bl	a4cc <__muldf3>
   1077c:	e1a06001 	mov	r6, r1
   10780:	e1a05000 	mov	r5, r0
   10784:	ebffe97e 	bl	ad84 <__fixdfsi>
   10788:	e1a04000 	mov	r4, r0
   1078c:	ebffe93e 	bl	ac8c <__floatsidf>
   10790:	e1a02000 	mov	r2, r0
   10794:	e1a03001 	mov	r3, r1
   10798:	e1a00005 	mov	r0, r5
   1079c:	e1a01006 	mov	r1, r6
   107a0:	ebffe70a 	bl	a3d0 <__subdf3>
   107a4:	e59dc040 	ldr	ip, [sp, #64]
   107a8:	e2844030 	add	r4, r4, #48	; 0x30
   107ac:	e7c7400c 	strb	r4, [r7, ip]
   107b0:	e2877001 	add	r7, r7, #1	; 0x1
   107b4:	e157000a 	cmp	r7, sl
   107b8:	e1a05000 	mov	r5, r0
   107bc:	e1a06001 	mov	r6, r1
   107c0:	1affffe7 	bne	10764 <prog+0x1071c>
   107c4:	e08c7007 	add	r7, ip, r7
   107c8:	e3a025ff 	mov	r2, #1069547520	; 0x3fc00000
   107cc:	e2822602 	add	r2, r2, #2097152	; 0x200000
   107d0:	e3a03000 	mov	r3, #0	; 0x0
   107d4:	e1a00008 	mov	r0, r8
   107d8:	e1a01009 	mov	r1, r9
   107dc:	ebffe713 	bl	a430 <__adddf3>
   107e0:	e1a02005 	mov	r2, r5
   107e4:	e1a03006 	mov	r3, r6
   107e8:	ebffe90a 	bl	ac18 <__ltdf2>
   107ec:	e3500000 	cmp	r0, #0	; 0x0
   107f0:	bafffdb3 	blt	fec4 <prog+0xfe7c>
   107f4:	e3a005ff 	mov	r0, #1069547520	; 0x3fc00000
   107f8:	e1a02008 	mov	r2, r8
   107fc:	e1a03009 	mov	r3, r9
   10800:	e2800602 	add	r0, r0, #2097152	; 0x200000
   10804:	e3a01000 	mov	r1, #0	; 0x0
   10808:	ebffe6f0 	bl	a3d0 <__subdf3>
   1080c:	e1a02005 	mov	r2, r5
   10810:	e1a03006 	mov	r3, r6
   10814:	ebffe8bb 	bl	ab08 <__gtdf2>
   10818:	e3500000 	cmp	r0, #0	; 0x0
   1081c:	dafffd55 	ble	fd78 <prog+0xfd30>
   10820:	e1a02007 	mov	r2, r7
   10824:	e5723001 	ldrb	r3, [r2, #-1]!
   10828:	e3530030 	cmp	r3, #48	; 0x30
   1082c:	0afffffc 	beq	10824 <prog+0x107dc>
   10830:	e59d3044 	ldr	r3, [sp, #68]
   10834:	e2827001 	add	r7, r2, #1	; 0x1
   10838:	e58d3024 	str	r3, [sp, #36]
   1083c:	eafffe68 	b	101e4 <prog+0x1019c>
   10840:	e59d0024 	ldr	r0, [sp, #36]
   10844:	e2605000 	rsb	r5, r0, #0	; 0x0
   10848:	e3550000 	cmp	r5, #0	; 0x0
   1084c:	0a00004a 	beq	1097c <prog+0x10934>
   10850:	e51f1cc4 	ldr	r1, [pc, #-3268]	; fb94 <prog+0xfb4c>
   10854:	e205300f 	and	r3, r5, #15	; 0xf
   10858:	e0811183 	add	r1, r1, r3, lsl #3
   1085c:	e891000c 	ldmia	r1, {r2, r3}
   10860:	e28d000c 	add	r0, sp, #12	; 0xc
   10864:	e8900003 	ldmia	r0, {r0, r1}
   10868:	ebffe717 	bl	a4cc <__muldf3>
   1086c:	e1b05245 	movs	r5, r5, asr #4
   10870:	e1a03000 	mov	r3, r0
   10874:	e1a04001 	mov	r4, r1
   10878:	e1a08000 	mov	r8, r0
   1087c:	e1a09001 	mov	r9, r1
   10880:	0a00003d 	beq	1097c <prog+0x10934>
   10884:	e51f6cf4 	ldr	r6, [pc, #-3316]	; fb98 <prog+0xfb50>
   10888:	e3a0a002 	mov	sl, #2	; 0x2
   1088c:	e3150001 	tst	r5, #1	; 0x1
   10890:	e1a00003 	mov	r0, r3
   10894:	e1a01004 	mov	r1, r4
   10898:	0a000004 	beq	108b0 <prog+0x10868>
   1089c:	e896000c 	ldmia	r6, {r2, r3}
   108a0:	ebffe709 	bl	a4cc <__muldf3>
   108a4:	e28aa001 	add	sl, sl, #1	; 0x1
   108a8:	e1a03000 	mov	r3, r0
   108ac:	e1a04001 	mov	r4, r1
   108b0:	e1b050c5 	movs	r5, r5, asr #1
   108b4:	e2866008 	add	r6, r6, #8	; 0x8
   108b8:	1afffff3 	bne	1088c <prog+0x10844>
   108bc:	e1a08003 	mov	r8, r3
   108c0:	e1a09004 	mov	r9, r4
   108c4:	eafffc75 	b	faa0 <prog+0xfa58>
   108c8:	e3a02441 	mov	r2, #1090519040	; 0x41000000
   108cc:	e282260f 	add	r2, r2, #15728640	; 0xf00000
   108d0:	e3a03000 	mov	r3, #0	; 0x0
   108d4:	ebffe6d5 	bl	a430 <__adddf3>
   108d8:	eafffc35 	b	f9b4 <prog+0xf96c>
   108dc:	e5963010 	ldr	r3, [r6, #16]
   108e0:	e0863103 	add	r3, r6, r3, lsl #2
   108e4:	e5930010 	ldr	r0, [r3, #16]
   108e8:	eb0003a7 	bl	1178c <_hi0bits>
   108ec:	e2603020 	rsb	r3, r0, #32	; 0x20
   108f0:	eafffdc6 	b	10010 <prog+0xffc8>
   108f4:	e59d0038 	ldr	r0, [sp, #56]
   108f8:	e1a01006 	mov	r1, r6
   108fc:	eb0003dd 	bl	11878 <__mcmp>
   10900:	e3500000 	cmp	r0, #0	; 0x0
   10904:	aafffde0 	bge	1008c <prog+0x10044>
   10908:	e3a03000 	mov	r3, #0	; 0x0
   1090c:	e59d1038 	ldr	r1, [sp, #56]
   10910:	e3a0200a 	mov	r2, #10	; 0xa
   10914:	e59d0008 	ldr	r0, [sp, #8]
   10918:	eb0005d9 	bl	12084 <_multadd>
   1091c:	e59d102c 	ldr	r1, [sp, #44]
   10920:	e59d2024 	ldr	r2, [sp, #36]
   10924:	e3510000 	cmp	r1, #0	; 0x0
   10928:	059d3020 	ldreq	r3, [sp, #32]
   1092c:	e2422001 	sub	r2, r2, #1	; 0x1
   10930:	e58d0038 	str	r0, [sp, #56]
   10934:	e58d2024 	str	r2, [sp, #36]
   10938:	058d301c 	streq	r3, [sp, #28]
   1093c:	0afffdd2 	beq	1008c <prog+0x10044>
   10940:	e1a0100a 	mov	r1, sl
   10944:	e59d0008 	ldr	r0, [sp, #8]
   10948:	e3a0200a 	mov	r2, #10	; 0xa
   1094c:	e3a03000 	mov	r3, #0	; 0x0
   10950:	eb0005cb 	bl	12084 <_multadd>
   10954:	e59dc020 	ldr	ip, [sp, #32]
   10958:	e1a0a000 	mov	sl, r0
   1095c:	e58dc01c 	str	ip, [sp, #28]
   10960:	eafffdc9 	b	1008c <prog+0x10044>
   10964:	e59d1038 	ldr	r1, [sp, #56]
   10968:	e59d2018 	ldr	r2, [sp, #24]
   1096c:	e59d0008 	ldr	r0, [sp, #8]
   10970:	eb0005f5 	bl	1214c <_pow5mult>
   10974:	e58d0038 	str	r0, [sp, #56]
   10978:	eafffd90 	b	ffc0 <prog+0xff78>
   1097c:	e3a0a002 	mov	sl, #2	; 0x2
   10980:	eafffc46 	b	faa0 <prog+0xfa58>
   10984:	e59d1038 	ldr	r1, [sp, #56]
   10988:	e59d0008 	ldr	r0, [sp, #8]
   1098c:	eb0005ee 	bl	1214c <_pow5mult>
   10990:	e58d0038 	str	r0, [sp, #56]
   10994:	eafffd89 	b	ffc0 <prog+0xff78>
   10998:	e59d1034 	ldr	r1, [sp, #52]
   1099c:	e3510000 	cmp	r1, #0	; 0x0
   109a0:	059d304c 	ldreq	r3, [sp, #76]
   109a4:	12823e43 	addne	r3, r2, #1072	; 0x430
   109a8:	159d7014 	ldrne	r7, [sp, #20]
   109ac:	159d5018 	ldrne	r5, [sp, #24]
   109b0:	059d7014 	ldreq	r7, [sp, #20]
   109b4:	059d5018 	ldreq	r5, [sp, #24]
   109b8:	12833003 	addne	r3, r3, #3	; 0x3
   109bc:	02633036 	rsbeq	r3, r3, #54	; 0x36
   109c0:	eafffe2f 	b	10284 <prog+0x1023c>
   109c4:	e2833001 	add	r3, r3, #1	; 0x1
   109c8:	e4c23001 	strb	r3, [r2], #1
   109cc:	e1a07002 	mov	r7, r2
   109d0:	eafffdf7 	b	101b4 <prog+0x1016c>
   109d4:	e35a0000 	cmp	sl, #0	; 0x0
   109d8:	da00000b 	ble	10a0c <prog+0x109c4>
   109dc:	e59d1038 	ldr	r1, [sp, #56]
   109e0:	e3a02001 	mov	r2, #1	; 0x1
   109e4:	e59d0008 	ldr	r0, [sp, #8]
   109e8:	eb0004f0 	bl	11db0 <_lshift>
   109ec:	e1a01006 	mov	r1, r6
   109f0:	e58d0038 	str	r0, [sp, #56]
   109f4:	eb00039f 	bl	11878 <__mcmp>
   109f8:	e3500000 	cmp	r0, #0	; 0x0
   109fc:	da000022 	ble	10a8c <prog+0x10a44>
   10a00:	e2899001 	add	r9, r9, #1	; 0x1
   10a04:	e359003a 	cmp	r9, #58	; 0x3a
   10a08:	0a000017 	beq	10a6c <prog+0x10a24>
   10a0c:	e4c59001 	strb	r9, [r5], #1
   10a10:	e1a07005 	mov	r7, r5
   10a14:	eafffde6 	b	101b4 <prog+0x1016c>
   10a18:	e59a1004 	ldr	r1, [sl, #4]
   10a1c:	e59d0008 	ldr	r0, [sp, #8]
   10a20:	eb000422 	bl	11ab0 <_Balloc>
   10a24:	e59a2010 	ldr	r2, [sl, #16]
   10a28:	e1a02102 	mov	r2, r2, lsl #2
   10a2c:	e1a04000 	mov	r4, r0
   10a30:	e2822008 	add	r2, r2, #8	; 0x8
   10a34:	e28a100c 	add	r1, sl, #12	; 0xc
   10a38:	e280000c 	add	r0, r0, #12	; 0xc
   10a3c:	ebffed94 	bl	c094 <memcpy>
   10a40:	e59d0008 	ldr	r0, [sp, #8]
   10a44:	e1a01004 	mov	r1, r4
   10a48:	e3a02001 	mov	r2, #1	; 0x1
   10a4c:	eb0004d7 	bl	11db0 <_lshift>
   10a50:	e1a0b000 	mov	fp, r0
   10a54:	eafffe9f 	b	104d8 <prog+0x10490>
   10a58:	e3590039 	cmp	r9, #57	; 0x39
   10a5c:	12893001 	addne	r3, r9, #1	; 0x1
   10a60:	14c53001 	strneb	r3, [r5], #1
   10a64:	11a07005 	movne	r7, r5
   10a68:	1afffdd1 	bne	101b4 <prog+0x1016c>
   10a6c:	e3a03039 	mov	r3, #57	; 0x39
   10a70:	e4c53001 	strb	r3, [r5], #1
   10a74:	eafffef6 	b	10654 <prog+0x1060c>
   10a78:	e3590039 	cmp	r9, #57	; 0x39
   10a7c:	0afffffa 	beq	10a6c <prog+0x10a24>
   10a80:	e3580000 	cmp	r8, #0	; 0x0
   10a84:	c2899001 	addgt	r9, r9, #1	; 0x1
   10a88:	eaffffdf 	b	10a0c <prog+0x109c4>
   10a8c:	1affffde 	bne	10a0c <prog+0x109c4>
   10a90:	e3190001 	tst	r9, #1	; 0x1
   10a94:	0affffdc 	beq	10a0c <prog+0x109c4>
   10a98:	eaffffd8 	b	10a00 <prog+0x109b8>
   10a9c:	e59de01c 	ldr	lr, [sp, #28]
   10aa0:	e1a05000 	mov	r5, r0
   10aa4:	e35e000e 	cmp	lr, #14	; 0xe
   10aa8:	83a04000 	movhi	r4, #0	; 0x0
   10aac:	93a04001 	movls	r4, #1	; 0x1
   10ab0:	eafffbd1 	b	f9fc <prog+0xf9b4>

00010ab4 <_fclose_r>:
   10ab4:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
   10ab8:	e2515000 	subs	r5, r1, #0	; 0x0
   10abc:	e1a06000 	mov	r6, r0
   10ac0:	01a04005 	moveq	r4, r5
   10ac4:	0a00002b 	beq	10b78 <_fclose_r+0xc4>
   10ac8:	ebffeaa4 	bl	b560 <__sfp_lock_acquire>
   10acc:	e3560000 	cmp	r6, #0	; 0x0
   10ad0:	0a000002 	beq	10ae0 <_fclose_r+0x2c>
   10ad4:	e5963038 	ldr	r3, [r6, #56]
   10ad8:	e3530000 	cmp	r3, #0	; 0x0
   10adc:	0a000027 	beq	10b80 <_fclose_r+0xcc>
   10ae0:	e1d540bc 	ldrh	r4, [r5, #12]
   10ae4:	e3540000 	cmp	r4, #0	; 0x0
   10ae8:	0a000021 	beq	10b74 <_fclose_r+0xc0>
   10aec:	e2140008 	ands	r0, r4, #8	; 0x8
   10af0:	1a000025 	bne	10b8c <_fclose_r+0xd8>
   10af4:	e595302c 	ldr	r3, [r5, #44]
   10af8:	e3530000 	cmp	r3, #0	; 0x0
   10afc:	e1a04000 	mov	r4, r0
   10b00:	0a000004 	beq	10b18 <_fclose_r+0x64>
   10b04:	e595001c 	ldr	r0, [r5, #28]
   10b08:	e1a0e00f 	mov	lr, pc
   10b0c:	e12fff13 	bx	r3
   10b10:	e3500000 	cmp	r0, #0	; 0x0
   10b14:	b3e04000 	mvnlt	r4, #0	; 0x0
   10b18:	e1d530bc 	ldrh	r3, [r5, #12]
   10b1c:	e3130080 	tst	r3, #128	; 0x80
   10b20:	1a000020 	bne	10ba8 <_fclose_r+0xf4>
   10b24:	e5951030 	ldr	r1, [r5, #48]
   10b28:	e3510000 	cmp	r1, #0	; 0x0
   10b2c:	0a000006 	beq	10b4c <_fclose_r+0x98>
   10b30:	e2853040 	add	r3, r5, #64	; 0x40
   10b34:	e1510003 	cmp	r1, r3
   10b38:	159f3084 	ldrne	r3, [pc, #132]	; 10bc4 <prog+0x10b7c>
   10b3c:	15930000 	ldrne	r0, [r3]
   10b40:	1b000064 	blne	10cd8 <_free_r>
   10b44:	e3a03000 	mov	r3, #0	; 0x0
   10b48:	e5853030 	str	r3, [r5, #48]
   10b4c:	e5951044 	ldr	r1, [r5, #68]
   10b50:	e3510000 	cmp	r1, #0	; 0x0
   10b54:	0a000004 	beq	10b6c <_fclose_r+0xb8>
   10b58:	e59f3064 	ldr	r3, [pc, #100]	; 10bc4 <prog+0x10b7c>
   10b5c:	e5930000 	ldr	r0, [r3]
   10b60:	eb00005c 	bl	10cd8 <_free_r>
   10b64:	e3a03000 	mov	r3, #0	; 0x0
   10b68:	e5853044 	str	r3, [r5, #68]
   10b6c:	e3a03000 	mov	r3, #0	; 0x0
   10b70:	e1c530bc 	strh	r3, [r5, #12]
   10b74:	ebffea7a 	bl	b564 <__sfp_lock_release>
   10b78:	e1a00004 	mov	r0, r4
   10b7c:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
   10b80:	e1a00006 	mov	r0, r6
   10b84:	ebffea79 	bl	b570 <__sinit>
   10b88:	eaffffd4 	b	10ae0 <_fclose_r+0x2c>
   10b8c:	e1a00005 	mov	r0, r5
   10b90:	ebffea23 	bl	b424 <fflush>
   10b94:	e595302c 	ldr	r3, [r5, #44]
   10b98:	e3530000 	cmp	r3, #0	; 0x0
   10b9c:	e1a04000 	mov	r4, r0
   10ba0:	1affffd7 	bne	10b04 <_fclose_r+0x50>
   10ba4:	eaffffdb 	b	10b18 <_fclose_r+0x64>
   10ba8:	e5951010 	ldr	r1, [r5, #16]
   10bac:	e1a00006 	mov	r0, r6
   10bb0:	eb000048 	bl	10cd8 <_free_r>
   10bb4:	e5951030 	ldr	r1, [r5, #48]
   10bb8:	e3510000 	cmp	r1, #0	; 0x0
   10bbc:	1affffdb 	bne	10b30 <_fclose_r+0x7c>
   10bc0:	eaffffe1 	b	10b4c <_fclose_r+0x98>
   10bc4:	40000014 	andmi	r0, r0, r4, lsl r0

00010bc8 <fclose>:
   10bc8:	e59f3008 	ldr	r3, [pc, #8]	; 10bd8 <prog+0x10b90>
   10bcc:	e1a01000 	mov	r1, r0
   10bd0:	e5930000 	ldr	r0, [r3]
   10bd4:	eaffffb6 	b	10ab4 <_fclose_r>
   10bd8:	40000014 	andmi	r0, r0, r4, lsl r0

00010bdc <_malloc_trim_r>:
   10bdc:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
   10be0:	e59f70e4 	ldr	r7, [pc, #228]	; 10ccc <prog+0x10c84>
   10be4:	e1a04001 	mov	r4, r1
   10be8:	e1a05000 	mov	r5, r0
   10bec:	ebffed76 	bl	c1cc <__malloc_lock>
   10bf0:	e5973008 	ldr	r3, [r7, #8]
   10bf4:	e5932004 	ldr	r2, [r3, #4]
   10bf8:	e3c26003 	bic	r6, r2, #3	; 0x3
   10bfc:	e0644006 	rsb	r4, r4, r6
   10c00:	e2844efe 	add	r4, r4, #4064	; 0xfe0
   10c04:	e284400f 	add	r4, r4, #15	; 0xf
   10c08:	e1a04624 	mov	r4, r4, lsr #12
   10c0c:	e2444001 	sub	r4, r4, #1	; 0x1
   10c10:	e1a04604 	mov	r4, r4, lsl #12
   10c14:	e3540a01 	cmp	r4, #4096	; 0x1000
   10c18:	e3a01000 	mov	r1, #0	; 0x0
   10c1c:	e1a00005 	mov	r0, r5
   10c20:	ba000006 	blt	10c40 <_malloc_trim_r+0x64>
   10c24:	ebffbecc 	bl	75c <_sbrk_r>
   10c28:	e5973008 	ldr	r3, [r7, #8]
   10c2c:	e0863003 	add	r3, r6, r3
   10c30:	e1500003 	cmp	r0, r3
   10c34:	e2641000 	rsb	r1, r4, #0	; 0x0
   10c38:	e1a00005 	mov	r0, r5
   10c3c:	0a000002 	beq	10c4c <_malloc_trim_r+0x70>
   10c40:	ebffed62 	bl	c1d0 <__malloc_unlock>
   10c44:	e3a00000 	mov	r0, #0	; 0x0
   10c48:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
   10c4c:	ebffbec2 	bl	75c <_sbrk_r>
   10c50:	e0643006 	rsb	r3, r4, r6
   10c54:	e3700001 	cmn	r0, #1	; 0x1
   10c58:	e3a01000 	mov	r1, #0	; 0x0
   10c5c:	e59fe06c 	ldr	lr, [pc, #108]	; 10cd0 <prog+0x10c88>
   10c60:	e383c001 	orr	ip, r3, #1	; 0x1
   10c64:	e1a00005 	mov	r0, r5
   10c68:	0a000008 	beq	10c90 <_malloc_trim_r+0xb4>
   10c6c:	e59e3000 	ldr	r3, [lr]
   10c70:	e5972008 	ldr	r2, [r7, #8]
   10c74:	e0643003 	rsb	r3, r4, r3
   10c78:	e1a00005 	mov	r0, r5
   10c7c:	e582c004 	str	ip, [r2, #4]
   10c80:	e58e3000 	str	r3, [lr]
   10c84:	ebffed51 	bl	c1d0 <__malloc_unlock>
   10c88:	e3a00001 	mov	r0, #1	; 0x1
   10c8c:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
   10c90:	ebffbeb1 	bl	75c <_sbrk_r>
   10c94:	e5971008 	ldr	r1, [r7, #8]
   10c98:	e1a0e000 	mov	lr, r0
   10c9c:	e061300e 	rsb	r3, r1, lr
   10ca0:	e353000f 	cmp	r3, #15	; 0xf
   10ca4:	e1a00005 	mov	r0, r5
   10ca8:	e383c001 	orr	ip, r3, #1	; 0x1
   10cac:	daffffe3 	ble	10c40 <_malloc_trim_r+0x64>
   10cb0:	e59f301c 	ldr	r3, [pc, #28]	; 10cd4 <prog+0x10c8c>
   10cb4:	e5932000 	ldr	r2, [r3]
   10cb8:	e59f3010 	ldr	r3, [pc, #16]	; 10cd0 <prog+0x10c88>
   10cbc:	e062200e 	rsb	r2, r2, lr
   10cc0:	e5832000 	str	r2, [r3]
   10cc4:	e581c004 	str	ip, [r1, #4]
   10cc8:	eaffffdc 	b	10c40 <_malloc_trim_r+0x64>
   10ccc:	40000418 	andmi	r0, r0, r8, lsl r4
   10cd0:	40001574 	andmi	r1, r0, r4, ror r5
   10cd4:	40000824 	andmi	r0, r0, r4, lsr #16

00010cd8 <_free_r>:
   10cd8:	e92d45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
   10cdc:	e2514000 	subs	r4, r1, #0	; 0x0
   10ce0:	e1a08000 	mov	r8, r0
   10ce4:	08bd85f0 	ldmeqia	sp!, {r4, r5, r6, r7, r8, sl, pc}
   10ce8:	ebffed37 	bl	c1cc <__malloc_lock>
   10cec:	e244e008 	sub	lr, r4, #8	; 0x8
   10cf0:	e59e0004 	ldr	r0, [lr, #4]
   10cf4:	e59f726c 	ldr	r7, [pc, #620]	; 10f68 <prog+0x10f20>
   10cf8:	e3c01001 	bic	r1, r0, #1	; 0x1
   10cfc:	e08ec001 	add	ip, lr, r1
   10d00:	e5973008 	ldr	r3, [r7, #8]
   10d04:	e59c2004 	ldr	r2, [ip, #4]
   10d08:	e15c0003 	cmp	ip, r3
   10d0c:	e3c25003 	bic	r5, r2, #3	; 0x3
   10d10:	e1a0a007 	mov	sl, r7
   10d14:	0a000077 	beq	10ef8 <_free_r+0x220>
   10d18:	e2106001 	ands	r6, r0, #1	; 0x1
   10d1c:	e58c5004 	str	r5, [ip, #4]
   10d20:	13a00000 	movne	r0, #0	; 0x0
   10d24:	0a000018 	beq	10d8c <_free_r+0xb4>
   10d28:	e08c3005 	add	r3, ip, r5
   10d2c:	e5932004 	ldr	r2, [r3, #4]
   10d30:	e3120001 	tst	r2, #1	; 0x1
   10d34:	0a000007 	beq	10d58 <_free_r+0x80>
   10d38:	e3813001 	orr	r3, r1, #1	; 0x1
   10d3c:	e3500000 	cmp	r0, #0	; 0x0
   10d40:	e58e3004 	str	r3, [lr, #4]
   10d44:	e781100e 	str	r1, [r1, lr]
   10d48:	0a00001f 	beq	10dcc <_free_r+0xf4>
   10d4c:	e1a00008 	mov	r0, r8
   10d50:	e8bd45f0 	ldmia	sp!, {r4, r5, r6, r7, r8, sl, lr}
   10d54:	eaffed1d 	b	c1d0 <__malloc_unlock>
   10d58:	e3500000 	cmp	r0, #0	; 0x0
   10d5c:	e0811005 	add	r1, r1, r5
   10d60:	159c2008 	ldrne	r2, [ip, #8]
   10d64:	0a00004a 	beq	10e94 <_free_r+0x1bc>
   10d68:	e59c300c 	ldr	r3, [ip, #12]
   10d6c:	e3500000 	cmp	r0, #0	; 0x0
   10d70:	e5832008 	str	r2, [r3, #8]
   10d74:	e582300c 	str	r3, [r2, #12]
   10d78:	e3813001 	orr	r3, r1, #1	; 0x1
   10d7c:	e58e3004 	str	r3, [lr, #4]
   10d80:	e781100e 	str	r1, [r1, lr]
   10d84:	1afffff0 	bne	10d4c <_free_r+0x74>
   10d88:	ea00000f 	b	10dcc <_free_r+0xf4>
   10d8c:	e5142008 	ldr	r2, [r4, #-8]
   10d90:	e062e00e 	rsb	lr, r2, lr
   10d94:	e59e0008 	ldr	r0, [lr, #8]
   10d98:	e2873008 	add	r3, r7, #8	; 0x8
   10d9c:	e1500003 	cmp	r0, r3
   10da0:	159e300c 	ldrne	r3, [lr, #12]
   10da4:	15830008 	strne	r0, [r3, #8]
   10da8:	1580300c 	strne	r3, [r0, #12]
   10dac:	e08c3005 	add	r3, ip, r5
   10db0:	e0811002 	add	r1, r1, r2
   10db4:	e5932004 	ldr	r2, [r3, #4]
   10db8:	03a00001 	moveq	r0, #1	; 0x1
   10dbc:	11a00006 	movne	r0, r6
   10dc0:	e3120001 	tst	r2, #1	; 0x1
   10dc4:	1affffdb 	bne	10d38 <_free_r+0x60>
   10dc8:	eaffffe2 	b	10d58 <_free_r+0x80>
   10dcc:	e3510c02 	cmp	r1, #512	; 0x200
   10dd0:	3a00003b 	bcc	10ec4 <_free_r+0x1ec>
   10dd4:	e1b024a1 	movs	r2, r1, lsr #9
   10dd8:	01a021a1 	moveq	r2, r1, lsr #3
   10ddc:	01a03182 	moveq	r3, r2, lsl #3
   10de0:	0a00001a 	beq	10e50 <_free_r+0x178>
   10de4:	e3520004 	cmp	r2, #4	; 0x4
   10de8:	91a03321 	movls	r3, r1, lsr #6
   10dec:	92832038 	addls	r2, r3, #56	; 0x38
   10df0:	91a03182 	movls	r3, r2, lsl #3
   10df4:	9a000015 	bls	10e50 <_free_r+0x178>
   10df8:	e3520014 	cmp	r2, #20	; 0x14
   10dfc:	9282205b 	addls	r2, r2, #91	; 0x5b
   10e00:	91a03182 	movls	r3, r2, lsl #3
   10e04:	9a000011 	bls	10e50 <_free_r+0x178>
   10e08:	e3520054 	cmp	r2, #84	; 0x54
   10e0c:	91a03621 	movls	r3, r1, lsr #12
   10e10:	9283206e 	addls	r2, r3, #110	; 0x6e
   10e14:	91a03182 	movls	r3, r2, lsl #3
   10e18:	9a00000c 	bls	10e50 <_free_r+0x178>
   10e1c:	e3520f55 	cmp	r2, #340	; 0x154
   10e20:	91a037a1 	movls	r3, r1, lsr #15
   10e24:	92832077 	addls	r2, r3, #119	; 0x77
   10e28:	91a03182 	movls	r3, r2, lsl #3
   10e2c:	9a000007 	bls	10e50 <_free_r+0x178>
   10e30:	e3a03e55 	mov	r3, #1360	; 0x550
   10e34:	e2833004 	add	r3, r3, #4	; 0x4
   10e38:	e1520003 	cmp	r2, r3
   10e3c:	91a03921 	movls	r3, r1, lsr #18
   10e40:	9283207c 	addls	r2, r3, #124	; 0x7c
   10e44:	83a0207e 	movhi	r2, #126	; 0x7e
   10e48:	82433f59 	subhi	r3, r3, #356	; 0x164
   10e4c:	91a03182 	movls	r3, r2, lsl #3
   10e50:	e083c00a 	add	ip, r3, sl
   10e54:	e59c0008 	ldr	r0, [ip, #8]
   10e58:	e15c0000 	cmp	ip, r0
   10e5c:	0a00003b 	beq	10f50 <_free_r+0x278>
   10e60:	e5903004 	ldr	r3, [r0, #4]
   10e64:	e3c33003 	bic	r3, r3, #3	; 0x3
   10e68:	e1510003 	cmp	r1, r3
   10e6c:	2a000002 	bcs	10e7c <_free_r+0x1a4>
   10e70:	e5900008 	ldr	r0, [r0, #8]
   10e74:	e15c0000 	cmp	ip, r0
   10e78:	1afffff8 	bne	10e60 <_free_r+0x188>
   10e7c:	e590c00c 	ldr	ip, [r0, #12]
   10e80:	e58ec00c 	str	ip, [lr, #12]
   10e84:	e58e0008 	str	r0, [lr, #8]
   10e88:	e580e00c 	str	lr, [r0, #12]
   10e8c:	e58ce008 	str	lr, [ip, #8]
   10e90:	eaffffad 	b	10d4c <_free_r+0x74>
   10e94:	e59c2008 	ldr	r2, [ip, #8]
   10e98:	e59f30cc 	ldr	r3, [pc, #204]	; 10f6c <prog+0x10f24>
   10e9c:	e1520003 	cmp	r2, r3
   10ea0:	1affffb0 	bne	10d68 <_free_r+0x90>
   10ea4:	e3813001 	orr	r3, r1, #1	; 0x1
   10ea8:	e582e00c 	str	lr, [r2, #12]
   10eac:	e582e008 	str	lr, [r2, #8]
   10eb0:	e781100e 	str	r1, [r1, lr]
   10eb4:	e58e3004 	str	r3, [lr, #4]
   10eb8:	e58e2008 	str	r2, [lr, #8]
   10ebc:	e58e200c 	str	r2, [lr, #12]
   10ec0:	eaffffa1 	b	10d4c <_free_r+0x74>
   10ec4:	e1a011a1 	mov	r1, r1, lsr #3
   10ec8:	e5972004 	ldr	r2, [r7, #4]
   10ecc:	e1a00121 	mov	r0, r1, lsr #2
   10ed0:	e3a03001 	mov	r3, #1	; 0x1
   10ed4:	e1822013 	orr	r2, r2, r3, lsl r0
   10ed8:	e08a1181 	add	r1, sl, r1, lsl #3
   10edc:	e5913008 	ldr	r3, [r1, #8]
   10ee0:	e58e100c 	str	r1, [lr, #12]
   10ee4:	e58e3008 	str	r3, [lr, #8]
   10ee8:	e5872004 	str	r2, [r7, #4]
   10eec:	e583e00c 	str	lr, [r3, #12]
   10ef0:	e581e008 	str	lr, [r1, #8]
   10ef4:	eaffff94 	b	10d4c <_free_r+0x74>
   10ef8:	e3100001 	tst	r0, #1	; 0x1
   10efc:	e0810005 	add	r0, r1, r5
   10f00:	1a000006 	bne	10f20 <_free_r+0x248>
   10f04:	e5141008 	ldr	r1, [r4, #-8]
   10f08:	e061e00e 	rsb	lr, r1, lr
   10f0c:	e59e200c 	ldr	r2, [lr, #12]
   10f10:	e59e3008 	ldr	r3, [lr, #8]
   10f14:	e5823008 	str	r3, [r2, #8]
   10f18:	e583200c 	str	r2, [r3, #12]
   10f1c:	e0800001 	add	r0, r0, r1
   10f20:	e59f3048 	ldr	r3, [pc, #72]	; 10f70 <prog+0x10f28>
   10f24:	e5932000 	ldr	r2, [r3]
   10f28:	e3803001 	orr	r3, r0, #1	; 0x1
   10f2c:	e1500002 	cmp	r0, r2
   10f30:	e587e008 	str	lr, [r7, #8]
   10f34:	e58e3004 	str	r3, [lr, #4]
   10f38:	3affff83 	bcc	10d4c <_free_r+0x74>
   10f3c:	e59f3030 	ldr	r3, [pc, #48]	; 10f74 <prog+0x10f2c>
   10f40:	e1a00008 	mov	r0, r8
   10f44:	e5931000 	ldr	r1, [r3]
   10f48:	ebffff23 	bl	10bdc <_malloc_trim_r>
   10f4c:	eaffff7e 	b	10d4c <_free_r+0x74>
   10f50:	e5973004 	ldr	r3, [r7, #4]
   10f54:	e1a01122 	mov	r1, r2, lsr #2
   10f58:	e3a02001 	mov	r2, #1	; 0x1
   10f5c:	e1833112 	orr	r3, r3, r2, lsl r1
   10f60:	e5873004 	str	r3, [r7, #4]
   10f64:	eaffffc5 	b	10e80 <_free_r+0x1a8>
   10f68:	40000418 	andmi	r0, r0, r8, lsl r4
   10f6c:	40000420 	andmi	r0, r0, r0, lsr #8
   10f70:	40000820 	andmi	r0, r0, r0, lsr #16
   10f74:	40001568 	andmi	r1, r0, r8, ror #10

00010f78 <__sfvwrite>:
   10f78:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f7c:	e5913008 	ldr	r3, [r1, #8]
   10f80:	e3530000 	cmp	r3, #0	; 0x0
   10f84:	e24dd004 	sub	sp, sp, #4	; 0x4
   10f88:	e1a0a001 	mov	sl, r1
   10f8c:	e1a06000 	mov	r6, r0
   10f90:	0a00001c 	beq	11008 <__sfvwrite+0x90>
   10f94:	e1d010bc 	ldrh	r1, [r0, #12]
   10f98:	e3110008 	tst	r1, #8	; 0x8
   10f9c:	0a0000e8 	beq	11344 <__sfvwrite+0x3cc>
   10fa0:	e5903010 	ldr	r3, [r0, #16]
   10fa4:	e3530000 	cmp	r3, #0	; 0x0
   10fa8:	0a0000e5 	beq	11344 <__sfvwrite+0x3cc>
   10fac:	e3110002 	tst	r1, #2	; 0x2
   10fb0:	13a04000 	movne	r4, #0	; 0x0
   10fb4:	e59a8000 	ldr	r8, [sl]
   10fb8:	11a05004 	movne	r5, r4
   10fbc:	0a000018 	beq	11024 <__sfvwrite+0xac>
   10fc0:	e3540000 	cmp	r4, #0	; 0x0
   10fc4:	e1a01005 	mov	r1, r5
   10fc8:	0a000011 	beq	11014 <__sfvwrite+0x9c>
   10fcc:	e3540b01 	cmp	r4, #1024	; 0x400
   10fd0:	31a02004 	movcc	r2, r4
   10fd4:	23a02b01 	movcs	r2, #1024	; 0x400
   10fd8:	e596001c 	ldr	r0, [r6, #28]
   10fdc:	e1a0e00f 	mov	lr, pc
   10fe0:	e596f024 	ldr	pc, [r6, #36]
   10fe4:	e3500000 	cmp	r0, #0	; 0x0
   10fe8:	e0604004 	rsb	r4, r0, r4
   10fec:	e0855000 	add	r5, r5, r0
   10ff0:	da00005b 	ble	11164 <__sfvwrite+0x1ec>
   10ff4:	e59a3008 	ldr	r3, [sl, #8]
   10ff8:	e0603003 	rsb	r3, r0, r3
   10ffc:	e3530000 	cmp	r3, #0	; 0x0
   11000:	e58a3008 	str	r3, [sl, #8]
   11004:	1affffed 	bne	10fc0 <__sfvwrite+0x48>
   11008:	e3a00000 	mov	r0, #0	; 0x0
   1100c:	e28dd004 	add	sp, sp, #4	; 0x4
   11010:	e8bd8ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11014:	e5985000 	ldr	r5, [r8]
   11018:	e5984004 	ldr	r4, [r8, #4]
   1101c:	e2888008 	add	r8, r8, #8	; 0x8
   11020:	eaffffe6 	b	10fc0 <__sfvwrite+0x48>
   11024:	e2112001 	ands	r2, r1, #1	; 0x1
   11028:	13a07000 	movne	r7, #0	; 0x0
   1102c:	11a09007 	movne	r9, r7
   11030:	158d7000 	strne	r7, [sp]
   11034:	11a0b007 	movne	fp, r7
   11038:	0a00005b 	beq	111ac <__sfvwrite+0x234>
   1103c:	e3570000 	cmp	r7, #0	; 0x0
   11040:	0a000025 	beq	110dc <__sfvwrite+0x164>
   11044:	e59d3000 	ldr	r3, [sp]
   11048:	e3530000 	cmp	r3, #0	; 0x0
   1104c:	0a000049 	beq	11178 <__sfvwrite+0x200>
   11050:	e596c014 	ldr	ip, [r6, #20]
   11054:	e5961008 	ldr	r1, [r6, #8]
   11058:	e5960000 	ldr	r0, [r6]
   1105c:	e5962010 	ldr	r2, [r6, #16]
   11060:	e157000b 	cmp	r7, fp
   11064:	31a05007 	movcc	r5, r7
   11068:	21a0500b 	movcs	r5, fp
   1106c:	e08c4001 	add	r4, ip, r1
   11070:	e1500002 	cmp	r0, r2
   11074:	93a03000 	movls	r3, #0	; 0x0
   11078:	83a03001 	movhi	r3, #1	; 0x1
   1107c:	e1550004 	cmp	r5, r4
   11080:	d3a03000 	movle	r3, #0	; 0x0
   11084:	e3530000 	cmp	r3, #0	; 0x0
   11088:	1a00002b 	bne	1113c <__sfvwrite+0x1c4>
   1108c:	e155000c 	cmp	r5, ip
   11090:	ba000017 	blt	110f4 <__sfvwrite+0x17c>
   11094:	e1a0200c 	mov	r2, ip
   11098:	e596001c 	ldr	r0, [r6, #28]
   1109c:	e1a01009 	mov	r1, r9
   110a0:	e1a0e00f 	mov	lr, pc
   110a4:	e596f024 	ldr	pc, [r6, #36]
   110a8:	e2504000 	subs	r4, r0, #0	; 0x0
   110ac:	da00002c 	ble	11164 <__sfvwrite+0x1ec>
   110b0:	e05bb004 	subs	fp, fp, r4
   110b4:	0a00001a 	beq	11124 <__sfvwrite+0x1ac>
   110b8:	e59a3008 	ldr	r3, [sl, #8]
   110bc:	e0643003 	rsb	r3, r4, r3
   110c0:	e3530000 	cmp	r3, #0	; 0x0
   110c4:	e58a3008 	str	r3, [sl, #8]
   110c8:	0affffce 	beq	11008 <__sfvwrite+0x90>
   110cc:	e0647007 	rsb	r7, r4, r7
   110d0:	e3570000 	cmp	r7, #0	; 0x0
   110d4:	e0899004 	add	r9, r9, r4
   110d8:	1affffd9 	bne	11044 <__sfvwrite+0xcc>
   110dc:	e5989000 	ldr	r9, [r8]
   110e0:	e5987004 	ldr	r7, [r8, #4]
   110e4:	e3a03000 	mov	r3, #0	; 0x0
   110e8:	e2888008 	add	r8, r8, #8	; 0x8
   110ec:	e58d3000 	str	r3, [sp]
   110f0:	eaffffd1 	b	1103c <__sfvwrite+0xc4>
   110f4:	e1a02005 	mov	r2, r5
   110f8:	e1a01009 	mov	r1, r9
   110fc:	eb00015c 	bl	11674 <memmove>
   11100:	e5963008 	ldr	r3, [r6, #8]
   11104:	e5962000 	ldr	r2, [r6]
   11108:	e1a04005 	mov	r4, r5
   1110c:	e0653003 	rsb	r3, r5, r3
   11110:	e0822005 	add	r2, r2, r5
   11114:	e05bb004 	subs	fp, fp, r4
   11118:	e5863008 	str	r3, [r6, #8]
   1111c:	e5862000 	str	r2, [r6]
   11120:	1affffe4 	bne	110b8 <__sfvwrite+0x140>
   11124:	e1a00006 	mov	r0, r6
   11128:	ebffe8bd 	bl	b424 <fflush>
   1112c:	e3500000 	cmp	r0, #0	; 0x0
   11130:	1a00000b 	bne	11164 <__sfvwrite+0x1ec>
   11134:	e58d0000 	str	r0, [sp]
   11138:	eaffffde 	b	110b8 <__sfvwrite+0x140>
   1113c:	e1a01009 	mov	r1, r9
   11140:	e1a02004 	mov	r2, r4
   11144:	eb00014a 	bl	11674 <memmove>
   11148:	e5963000 	ldr	r3, [r6]
   1114c:	e0833004 	add	r3, r3, r4
   11150:	e5863000 	str	r3, [r6]
   11154:	e1a00006 	mov	r0, r6
   11158:	ebffe8b1 	bl	b424 <fflush>
   1115c:	e3500000 	cmp	r0, #0	; 0x0
   11160:	0affffd2 	beq	110b0 <__sfvwrite+0x138>
   11164:	e1d630bc 	ldrh	r3, [r6, #12]
   11168:	e3e00000 	mvn	r0, #0	; 0x0
   1116c:	e3833040 	orr	r3, r3, #64	; 0x40
   11170:	e1c630bc 	strh	r3, [r6, #12]
   11174:	eaffffa4 	b	1100c <__sfvwrite+0x94>
   11178:	e1a00009 	mov	r0, r9
   1117c:	e3a0100a 	mov	r1, #10	; 0xa
   11180:	e1a02007 	mov	r2, r7
   11184:	eb0000f9 	bl	11570 <memchr>
   11188:	e3500000 	cmp	r0, #0	; 0x0
   1118c:	10693000 	rsbne	r3, r9, r0
   11190:	1283b001 	addne	fp, r3, #1	; 0x1
   11194:	03a03001 	moveq	r3, #1	; 0x1
   11198:	13a03001 	movne	r3, #1	; 0x1
   1119c:	0287b001 	addeq	fp, r7, #1	; 0x1
   111a0:	158d3000 	strne	r3, [sp]
   111a4:	058d3000 	streq	r3, [sp]
   111a8:	eaffffa8 	b	11050 <__sfvwrite+0xd8>
   111ac:	e1a07002 	mov	r7, r2
   111b0:	e1a09002 	mov	r9, r2
   111b4:	e3570000 	cmp	r7, #0	; 0x0
   111b8:	0a000020 	beq	11240 <__sfvwrite+0x2c8>
   111bc:	e3110c02 	tst	r1, #512	; 0x200
   111c0:	e5964008 	ldr	r4, [r6, #8]
   111c4:	0a000021 	beq	11250 <__sfvwrite+0x2d8>
   111c8:	e1570004 	cmp	r7, r4
   111cc:	e1a02004 	mov	r2, r4
   111d0:	9a000001 	bls	111dc <__sfvwrite+0x264>
   111d4:	e3110080 	tst	r1, #128	; 0x80
   111d8:	1a000047 	bne	112fc <__sfvwrite+0x384>
   111dc:	e1570002 	cmp	r7, r2
   111e0:	31a02007 	movcc	r2, r7
   111e4:	e5960000 	ldr	r0, [r6]
   111e8:	e1a01009 	mov	r1, r9
   111ec:	31a04007 	movcc	r4, r7
   111f0:	eb00011f 	bl	11674 <memmove>
   111f4:	e5963008 	ldr	r3, [r6, #8]
   111f8:	e5962000 	ldr	r2, [r6]
   111fc:	e0643003 	rsb	r3, r4, r3
   11200:	e0822004 	add	r2, r2, r4
   11204:	e5863008 	str	r3, [r6, #8]
   11208:	e5862000 	str	r2, [r6]
   1120c:	e1a05007 	mov	r5, r7
   11210:	e1a00007 	mov	r0, r7
   11214:	e1a04007 	mov	r4, r7
   11218:	e59a3008 	ldr	r3, [sl, #8]
   1121c:	e0643003 	rsb	r3, r4, r3
   11220:	e3530000 	cmp	r3, #0	; 0x0
   11224:	e58a3008 	str	r3, [sl, #8]
   11228:	0affff76 	beq	11008 <__sfvwrite+0x90>
   1122c:	e0657007 	rsb	r7, r5, r7
   11230:	e3570000 	cmp	r7, #0	; 0x0
   11234:	e1d610bc 	ldrh	r1, [r6, #12]
   11238:	e0899000 	add	r9, r9, r0
   1123c:	1affffde 	bne	111bc <__sfvwrite+0x244>
   11240:	e5989000 	ldr	r9, [r8]
   11244:	e5987004 	ldr	r7, [r8, #4]
   11248:	e2888008 	add	r8, r8, #8	; 0x8
   1124c:	eaffffd8 	b	111b4 <__sfvwrite+0x23c>
   11250:	e5960000 	ldr	r0, [r6]
   11254:	e5963010 	ldr	r3, [r6, #16]
   11258:	e1500003 	cmp	r0, r3
   1125c:	81570004 	cmphi	r7, r4
   11260:	e1a05004 	mov	r5, r4
   11264:	8a000018 	bhi	112cc <__sfvwrite+0x354>
   11268:	e5962014 	ldr	r2, [r6, #20]
   1126c:	e1570002 	cmp	r7, r2
   11270:	3a000008 	bcc	11298 <__sfvwrite+0x320>
   11274:	e596001c 	ldr	r0, [r6, #28]
   11278:	e1a01009 	mov	r1, r9
   1127c:	e1a0e00f 	mov	lr, pc
   11280:	e596f024 	ldr	pc, [r6, #36]
   11284:	e2504000 	subs	r4, r0, #0	; 0x0
   11288:	daffffb5 	ble	11164 <__sfvwrite+0x1ec>
   1128c:	e1a05004 	mov	r5, r4
   11290:	e1a00004 	mov	r0, r4
   11294:	eaffffdf 	b	11218 <__sfvwrite+0x2a0>
   11298:	e1a02007 	mov	r2, r7
   1129c:	e1a01009 	mov	r1, r9
   112a0:	eb0000f3 	bl	11674 <memmove>
   112a4:	e5963008 	ldr	r3, [r6, #8]
   112a8:	e5962000 	ldr	r2, [r6]
   112ac:	e0673003 	rsb	r3, r7, r3
   112b0:	e0822007 	add	r2, r2, r7
   112b4:	e1a04007 	mov	r4, r7
   112b8:	e1a05007 	mov	r5, r7
   112bc:	e1a00007 	mov	r0, r7
   112c0:	e5863008 	str	r3, [r6, #8]
   112c4:	e5862000 	str	r2, [r6]
   112c8:	eaffffd2 	b	11218 <__sfvwrite+0x2a0>
   112cc:	e1a01009 	mov	r1, r9
   112d0:	e1a02004 	mov	r2, r4
   112d4:	eb0000e6 	bl	11674 <memmove>
   112d8:	e5963000 	ldr	r3, [r6]
   112dc:	e0833004 	add	r3, r3, r4
   112e0:	e5863000 	str	r3, [r6]
   112e4:	e1a00006 	mov	r0, r6
   112e8:	ebffe84d 	bl	b424 <fflush>
   112ec:	e3500000 	cmp	r0, #0	; 0x0
   112f0:	e1a00004 	mov	r0, r4
   112f4:	0affffc7 	beq	11218 <__sfvwrite+0x2a0>
   112f8:	eaffff99 	b	11164 <__sfvwrite+0x1ec>
   112fc:	e5961010 	ldr	r1, [r6, #16]
   11300:	e5963000 	ldr	r3, [r6]
   11304:	e59fb060 	ldr	fp, [pc, #96]	; 1136c <prog+0x11324>
   11308:	e0614003 	rsb	r4, r1, r3
   1130c:	e0875004 	add	r5, r7, r4
   11310:	e59b0000 	ldr	r0, [fp]
   11314:	e1a02005 	mov	r2, r5
   11318:	eb000400 	bl	12320 <_realloc_r>
   1131c:	e3500000 	cmp	r0, #0	; 0x0
   11320:	0a00000d 	beq	1135c <__sfvwrite+0x3e4>
   11324:	e0803004 	add	r3, r0, r4
   11328:	e1a02007 	mov	r2, r7
   1132c:	e1a04007 	mov	r4, r7
   11330:	e5863000 	str	r3, [r6]
   11334:	e5865014 	str	r5, [r6, #20]
   11338:	e5860010 	str	r0, [r6, #16]
   1133c:	e5867008 	str	r7, [r6, #8]
   11340:	eaffffa5 	b	111dc <__sfvwrite+0x264>
   11344:	ebfff808 	bl	f36c <__swsetup>
   11348:	e3500000 	cmp	r0, #0	; 0x0
   1134c:	13e00000 	mvnne	r0, #0	; 0x0
   11350:	1affff2d 	bne	1100c <__sfvwrite+0x94>
   11354:	e1d610bc 	ldrh	r1, [r6, #12]
   11358:	eaffff13 	b	10fac <__sfvwrite+0x34>
   1135c:	e59b0000 	ldr	r0, [fp]
   11360:	e5961010 	ldr	r1, [r6, #16]
   11364:	ebfffe5b 	bl	10cd8 <_free_r>
   11368:	eaffff7d 	b	11164 <__sfvwrite+0x1ec>
   1136c:	40000014 	andmi	r0, r0, r4, lsl r0

00011370 <__locale_charset>:
   11370:	e59f3004 	ldr	r3, [pc, #4]	; 1137c <prog+0x11334>
   11374:	e5930000 	ldr	r0, [r3]
   11378:	e12fff1e 	bx	lr
   1137c:	0001458c 	andeq	r4, r1, ip, lsl #11

00011380 <_localeconv_r>:
   11380:	e59f0000 	ldr	r0, [pc, #0]	; 11388 <prog+0x11340>
   11384:	e12fff1e 	bx	lr
   11388:	0001455c 	andeq	r4, r1, ip, asr r5

0001138c <localeconv>:
   1138c:	e59f3004 	ldr	r3, [pc, #4]	; 11398 <prog+0x11350>
   11390:	e5930000 	ldr	r0, [r3]
   11394:	eafffff9 	b	11380 <_localeconv_r>
   11398:	40000014 	andmi	r0, r0, r4, lsl r0

0001139c <_setlocale_r>:
   1139c:	e59f3054 	ldr	r3, [pc, #84]	; 113f8 <prog+0x113b0>
   113a0:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
   113a4:	e2524000 	subs	r4, r2, #0	; 0x0
   113a8:	e1a05000 	mov	r5, r0
   113ac:	e1a06001 	mov	r6, r1
   113b0:	e1a00004 	mov	r0, r4
   113b4:	e1a01003 	mov	r1, r3
   113b8:	0a000007 	beq	113dc <_setlocale_r+0x40>
   113bc:	ebffec92 	bl	c60c <strcmp>
   113c0:	e3500000 	cmp	r0, #0	; 0x0
   113c4:	e59f1030 	ldr	r1, [pc, #48]	; 113fc <prog+0x113b4>
   113c8:	e1a00004 	mov	r0, r4
   113cc:	1a000004 	bne	113e4 <_setlocale_r+0x48>
   113d0:	e5854034 	str	r4, [r5, #52]
   113d4:	e5856030 	str	r6, [r5, #48]
   113d8:	e59f3018 	ldr	r3, [pc, #24]	; 113f8 <prog+0x113b0>
   113dc:	e1a00003 	mov	r0, r3
   113e0:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
   113e4:	ebffec88 	bl	c60c <strcmp>
   113e8:	e3500000 	cmp	r0, #0	; 0x0
   113ec:	e3a03000 	mov	r3, #0	; 0x0
   113f0:	0afffff6 	beq	113d0 <_setlocale_r+0x34>
   113f4:	eafffff8 	b	113dc <_setlocale_r+0x40>
   113f8:	00014e84 	andeq	r4, r1, r4, lsl #29
   113fc:	000148ec 	andeq	r4, r1, ip, ror #17

00011400 <setlocale>:
   11400:	e1a02001 	mov	r2, r1
   11404:	e59f100c 	ldr	r1, [pc, #12]	; 11418 <prog+0x113d0>
   11408:	e1a03000 	mov	r3, r0
   1140c:	e5910000 	ldr	r0, [r1]
   11410:	e1a01003 	mov	r1, r3
   11414:	eaffffe0 	b	1139c <_setlocale_r>
   11418:	40000014 	andmi	r0, r0, r4, lsl r0

0001141c <__smakebuf>:
   1141c:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
   11420:	e1d030bc 	ldrh	r3, [r0, #12]
   11424:	e3130002 	tst	r3, #2	; 0x2
   11428:	12802043 	addne	r2, r0, #67	; 0x43
   1142c:	13a03001 	movne	r3, #1	; 0x1
   11430:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   11434:	e1a04000 	mov	r4, r0
   11438:	15803014 	strne	r3, [r0, #20]
   1143c:	15802010 	strne	r2, [r0, #16]
   11440:	15802000 	strne	r2, [r0]
   11444:	1a000025 	bne	114e0 <__smakebuf+0xc4>
   11448:	e1d010fe 	ldrsh	r1, [r0, #14]
   1144c:	e3510000 	cmp	r1, #0	; 0x0
   11450:	ba000024 	blt	114e8 <__smakebuf+0xcc>
   11454:	e59f5108 	ldr	r5, [pc, #264]	; 11564 <prog+0x1151c>
   11458:	e1a0200d 	mov	r2, sp
   1145c:	e5950000 	ldr	r0, [r5]
   11460:	ebffbcb3 	bl	734 <_fstat_r>
   11464:	e3500000 	cmp	r0, #0	; 0x0
   11468:	b1d430bc 	ldrlth	r3, [r4, #12]
   1146c:	ba00001e 	blt	114ec <__smakebuf+0xd0>
   11470:	e59d3004 	ldr	r3, [sp, #4]
   11474:	e2033a0f 	and	r3, r3, #61440	; 0xf000
   11478:	e3530a02 	cmp	r3, #8192	; 0x2000
   1147c:	13a06000 	movne	r6, #0	; 0x0
   11480:	03a06001 	moveq	r6, #1	; 0x1
   11484:	e3530902 	cmp	r3, #32768	; 0x8000
   11488:	0a000022 	beq	11518 <__smakebuf+0xfc>
   1148c:	e1d430bc 	ldrh	r3, [r4, #12]
   11490:	e3833b02 	orr	r3, r3, #2048	; 0x800
   11494:	e1c430bc 	strh	r3, [r4, #12]
   11498:	e5950000 	ldr	r0, [r5]
   1149c:	e3a01b01 	mov	r1, #1024	; 0x400
   114a0:	ebffe8f9 	bl	b88c <_malloc_r>
   114a4:	e3500000 	cmp	r0, #0	; 0x0
   114a8:	0a000024 	beq	11540 <__smakebuf+0x124>
   114ac:	e59f30b0 	ldr	r3, [pc, #176]	; 11564 <prog+0x1151c>
   114b0:	e1d420bc 	ldrh	r2, [r4, #12]
   114b4:	e5931000 	ldr	r1, [r3]
   114b8:	e59f30a8 	ldr	r3, [pc, #168]	; 11568 <prog+0x11520>
   114bc:	e3822080 	orr	r2, r2, #128	; 0x80
   114c0:	e581303c 	str	r3, [r1, #60]
   114c4:	e3560000 	cmp	r6, #0	; 0x0
   114c8:	e3a03b01 	mov	r3, #1024	; 0x400
   114cc:	e1c420bc 	strh	r2, [r4, #12]
   114d0:	e5840010 	str	r0, [r4, #16]
   114d4:	e5843014 	str	r3, [r4, #20]
   114d8:	e5840000 	str	r0, [r4]
   114dc:	1a000006 	bne	114fc <__smakebuf+0xe0>
   114e0:	e28dd03c 	add	sp, sp, #60	; 0x3c
   114e4:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
   114e8:	e59f5074 	ldr	r5, [pc, #116]	; 11564 <prog+0x1151c>
   114ec:	e3833b02 	orr	r3, r3, #2048	; 0x800
   114f0:	e3a06000 	mov	r6, #0	; 0x0
   114f4:	e1c430bc 	strh	r3, [r4, #12]
   114f8:	eaffffe6 	b	11498 <__smakebuf+0x7c>
   114fc:	e1d400fe 	ldrsh	r0, [r4, #14]
   11500:	eb000542 	bl	12a10 <isatty>
   11504:	e3500000 	cmp	r0, #0	; 0x0
   11508:	11d430bc 	ldrneh	r3, [r4, #12]
   1150c:	13833001 	orrne	r3, r3, #1	; 0x1
   11510:	11c430bc 	strneh	r3, [r4, #12]
   11514:	eafffff1 	b	114e0 <__smakebuf+0xc4>
   11518:	e5942028 	ldr	r2, [r4, #40]
   1151c:	e59f3048 	ldr	r3, [pc, #72]	; 1156c <prog+0x11524>
   11520:	e1520003 	cmp	r2, r3
   11524:	1affffd8 	bne	1148c <__smakebuf+0x70>
   11528:	e1d430bc 	ldrh	r3, [r4, #12]
   1152c:	e3a02b01 	mov	r2, #1024	; 0x400
   11530:	e3833b01 	orr	r3, r3, #1024	; 0x400
   11534:	e1c430bc 	strh	r3, [r4, #12]
   11538:	e584204c 	str	r2, [r4, #76]
   1153c:	eaffffd5 	b	11498 <__smakebuf+0x7c>
   11540:	e1d430bc 	ldrh	r3, [r4, #12]
   11544:	e2841043 	add	r1, r4, #67	; 0x43
   11548:	e3833002 	orr	r3, r3, #2	; 0x2
   1154c:	e3a02001 	mov	r2, #1	; 0x1
   11550:	e5842014 	str	r2, [r4, #20]
   11554:	e1c430bc 	strh	r3, [r4, #12]
   11558:	e5841010 	str	r1, [r4, #16]
   1155c:	e5841000 	str	r1, [r4]
   11560:	eaffffde 	b	114e0 <__smakebuf+0xc4>
   11564:	40000014 	andmi	r0, r0, r4, lsl r0
   11568:	0000b628 	andeq	fp, r0, r8, lsr #12
   1156c:	0000c380 	andeq	ip, r0, r0, lsl #7

00011570 <memchr>:
   11570:	e1a0c002 	mov	ip, r2
   11574:	e35c0003 	cmp	ip, #3	; 0x3
   11578:	e52de004 	str	lr, [sp, #-4]!
   1157c:	e1a02000 	mov	r2, r0
   11580:	e20110ff 	and	r1, r1, #255	; 0xff
   11584:	9a000001 	bls	11590 <memchr+0x20>
   11588:	e2103003 	ands	r3, r0, #3	; 0x3
   1158c:	0a00000e 	beq	115cc <memchr+0x5c>
   11590:	e25c2001 	subs	r2, ip, #1	; 0x1
   11594:	3a00000a 	bcc	115c4 <memchr+0x54>
   11598:	e5d03000 	ldrb	r3, [r0]
   1159c:	e1510003 	cmp	r1, r3
   115a0:	049df004 	ldreq	pc, [sp], #4
   115a4:	e3a0c000 	mov	ip, #0	; 0x0
   115a8:	ea000002 	b	115b8 <memchr+0x48>
   115ac:	e5f03001 	ldrb	r3, [r0, #1]!
   115b0:	e1510003 	cmp	r1, r3
   115b4:	0a00002b 	beq	11668 <memchr+0xf8>
   115b8:	e152000c 	cmp	r2, ip
   115bc:	e28cc001 	add	ip, ip, #1	; 0x1
   115c0:	1afffff9 	bne	115ac <memchr+0x3c>
   115c4:	e3a00000 	mov	r0, #0	; 0x0
   115c8:	e49df004 	ldr	pc, [sp], #4
   115cc:	e1a0e003 	mov	lr, r3
   115d0:	e2833001 	add	r3, r3, #1	; 0x1
   115d4:	e3530004 	cmp	r3, #4	; 0x4
   115d8:	e081e40e 	add	lr, r1, lr, lsl #8
   115dc:	1afffffb 	bne	115d0 <memchr+0x60>
   115e0:	e1a00002 	mov	r0, r2
   115e4:	e5902000 	ldr	r2, [r0]
   115e8:	e022200e 	eor	r2, r2, lr
   115ec:	e28234ff 	add	r3, r2, #-16777216	; 0xff000000
   115f0:	e2433801 	sub	r3, r3, #65536	; 0x10000
   115f4:	e2433c01 	sub	r3, r3, #256	; 0x100
   115f8:	e2433001 	sub	r3, r3, #1	; 0x1
   115fc:	e3c3347f 	bic	r3, r3, #2130706432	; 0x7f000000
   11600:	e3c3387f 	bic	r3, r3, #8323072	; 0x7f0000
   11604:	e3c33c7f 	bic	r3, r3, #32512	; 0x7f00
   11608:	e3c3307f 	bic	r3, r3, #127	; 0x7f
   1160c:	e1d32002 	bics	r2, r3, r2
   11610:	e24cc004 	sub	ip, ip, #4	; 0x4
   11614:	0a00000f 	beq	11658 <memchr+0xe8>
   11618:	e5d03000 	ldrb	r3, [r0]
   1161c:	e1510003 	cmp	r1, r3
   11620:	e1a02000 	mov	r2, r0
   11624:	0a000010 	beq	1166c <memchr+0xfc>
   11628:	e5d03001 	ldrb	r3, [r0, #1]
   1162c:	e1510003 	cmp	r1, r3
   11630:	e2802001 	add	r2, r0, #1	; 0x1
   11634:	0a00000c 	beq	1166c <memchr+0xfc>
   11638:	e5d03002 	ldrb	r3, [r0, #2]
   1163c:	e1510003 	cmp	r1, r3
   11640:	e2802002 	add	r2, r0, #2	; 0x2
   11644:	0a000008 	beq	1166c <memchr+0xfc>
   11648:	e5d03003 	ldrb	r3, [r0, #3]
   1164c:	e1510003 	cmp	r1, r3
   11650:	e2802003 	add	r2, r0, #3	; 0x3
   11654:	0a000004 	beq	1166c <memchr+0xfc>
   11658:	e35c0003 	cmp	ip, #3	; 0x3
   1165c:	e2800004 	add	r0, r0, #4	; 0x4
   11660:	8affffdf 	bhi	115e4 <memchr+0x74>
   11664:	eaffffc9 	b	11590 <memchr+0x20>
   11668:	e49df004 	ldr	pc, [sp], #4
   1166c:	e1a00002 	mov	r0, r2
   11670:	e49df004 	ldr	pc, [sp], #4

00011674 <memmove>:
   11674:	e1500001 	cmp	r0, r1
   11678:	e92d4010 	stmdb	sp!, {r4, lr}
   1167c:	e1a0c000 	mov	ip, r0
   11680:	e1a04001 	mov	r4, r1
   11684:	e1a0e002 	mov	lr, r2
   11688:	9a000011 	bls	116d4 <memmove+0x60>
   1168c:	e0813002 	add	r3, r1, r2
   11690:	e1500003 	cmp	r0, r3
   11694:	2a00000e 	bcs	116d4 <memmove+0x60>
   11698:	e2522001 	subs	r2, r2, #1	; 0x1
   1169c:	38bd8010 	ldmccia	sp!, {r4, pc}
   116a0:	e1a01003 	mov	r1, r3
   116a4:	e0623003 	rsb	r3, r2, r3
   116a8:	e243c001 	sub	ip, r3, #1	; 0x1
   116ac:	e080200e 	add	r2, r0, lr
   116b0:	e5713001 	ldrb	r3, [r1, #-1]!
   116b4:	e15c0001 	cmp	ip, r1
   116b8:	e5623001 	strb	r3, [r2, #-1]!
   116bc:	08bd8010 	ldmeqia	sp!, {r4, pc}
   116c0:	e5713001 	ldrb	r3, [r1, #-1]!
   116c4:	e15c0001 	cmp	ip, r1
   116c8:	e5623001 	strb	r3, [r2, #-1]!
   116cc:	1afffff7 	bne	116b0 <memmove+0x3c>
   116d0:	e8bd8010 	ldmia	sp!, {r4, pc}
   116d4:	e35e000f 	cmp	lr, #15	; 0xf
   116d8:	8a000008 	bhi	11700 <memmove+0x8c>
   116dc:	e35e0000 	cmp	lr, #0	; 0x0
   116e0:	08bd8010 	ldmeqia	sp!, {r4, pc}
   116e4:	e3a02000 	mov	r2, #0	; 0x0
   116e8:	e4d13001 	ldrb	r3, [r1], #1
   116ec:	e7c2300c 	strb	r3, [r2, ip]
   116f0:	e2822001 	add	r2, r2, #1	; 0x1
   116f4:	e152000e 	cmp	r2, lr
   116f8:	1afffffa 	bne	116e8 <memmove+0x74>
   116fc:	e8bd8010 	ldmia	sp!, {r4, pc}
   11700:	e1843000 	orr	r3, r4, r0
   11704:	e3130003 	tst	r3, #3	; 0x3
   11708:	1afffff3 	bne	116dc <memmove+0x68>
   1170c:	e1a01004 	mov	r1, r4
   11710:	e1a0c000 	mov	ip, r0
   11714:	e5913000 	ldr	r3, [r1]
   11718:	e58c3000 	str	r3, [ip]
   1171c:	e5912004 	ldr	r2, [r1, #4]
   11720:	e58c2004 	str	r2, [ip, #4]
   11724:	e5913008 	ldr	r3, [r1, #8]
   11728:	e58c3008 	str	r3, [ip, #8]
   1172c:	e24ee010 	sub	lr, lr, #16	; 0x10
   11730:	e591300c 	ldr	r3, [r1, #12]
   11734:	e35e000f 	cmp	lr, #15	; 0xf
   11738:	e58c300c 	str	r3, [ip, #12]
   1173c:	e2811010 	add	r1, r1, #16	; 0x10
   11740:	e28cc010 	add	ip, ip, #16	; 0x10
   11744:	8afffff2 	bhi	11714 <memmove+0xa0>
   11748:	e35e0003 	cmp	lr, #3	; 0x3
   1174c:	9affffe2 	bls	116dc <memmove+0x68>
   11750:	e24ee004 	sub	lr, lr, #4	; 0x4
   11754:	e4913004 	ldr	r3, [r1], #4
   11758:	e35e0003 	cmp	lr, #3	; 0x3
   1175c:	e48c3004 	str	r3, [ip], #4
   11760:	8afffffa 	bhi	11750 <memmove+0xdc>
   11764:	e35e0000 	cmp	lr, #0	; 0x0
   11768:	1affffdd 	bne	116e4 <memmove+0x70>
   1176c:	e8bd8010 	ldmia	sp!, {r4, pc}

00011770 <_Bfree>:
   11770:	e251c000 	subs	ip, r1, #0	; 0x0
   11774:	1590104c 	ldrne	r1, [r0, #76]
   11778:	159c2004 	ldrne	r2, [ip, #4]
   1177c:	17913102 	ldrne	r3, [r1, r2, lsl #2]
   11780:	158c3000 	strne	r3, [ip]
   11784:	1781c102 	strne	ip, [r1, r2, lsl #2]
   11788:	e12fff1e 	bx	lr

0001178c <_hi0bits>:
   1178c:	e1a03820 	mov	r3, r0, lsr #16
   11790:	e1a03803 	mov	r3, r3, lsl #16
   11794:	e3530000 	cmp	r3, #0	; 0x0
   11798:	01a00800 	moveq	r0, r0, lsl #16
   1179c:	13a03000 	movne	r3, #0	; 0x0
   117a0:	03a03010 	moveq	r3, #16	; 0x10
   117a4:	e31004ff 	tst	r0, #-16777216	; 0xff000000
   117a8:	01a00400 	moveq	r0, r0, lsl #8
   117ac:	02833008 	addeq	r3, r3, #8	; 0x8
   117b0:	e310020f 	tst	r0, #-268435456	; 0xf0000000
   117b4:	01a00200 	moveq	r0, r0, lsl #4
   117b8:	02833004 	addeq	r3, r3, #4	; 0x4
   117bc:	e3100103 	tst	r0, #-1073741824	; 0xc0000000
   117c0:	01a00100 	moveq	r0, r0, lsl #2
   117c4:	02833002 	addeq	r3, r3, #2	; 0x2
   117c8:	e3500000 	cmp	r0, #0	; 0x0
   117cc:	ba000002 	blt	117dc <_hi0bits+0x50>
   117d0:	e3100101 	tst	r0, #1073741824	; 0x40000000
   117d4:	03a03020 	moveq	r3, #32	; 0x20
   117d8:	12833001 	addne	r3, r3, #1	; 0x1
   117dc:	e1a00003 	mov	r0, r3
   117e0:	e12fff1e 	bx	lr

000117e4 <_lo0bits>:
   117e4:	e5902000 	ldr	r2, [r0]
   117e8:	e1a01000 	mov	r1, r0
   117ec:	e2120007 	ands	r0, r2, #7	; 0x7
   117f0:	0a00000a 	beq	11820 <_lo0bits+0x3c>
   117f4:	e3120001 	tst	r2, #1	; 0x1
   117f8:	13a00000 	movne	r0, #0	; 0x0
   117fc:	112fff1e 	bxne	lr
   11800:	e3120002 	tst	r2, #2	; 0x2
   11804:	11a030a2 	movne	r3, r2, lsr #1
   11808:	01a03122 	moveq	r3, r2, lsr #2
   1180c:	13a00001 	movne	r0, #1	; 0x1
   11810:	03a00002 	moveq	r0, #2	; 0x2
   11814:	15813000 	strne	r3, [r1]
   11818:	05813000 	streq	r3, [r1]
   1181c:	e12fff1e 	bx	lr
   11820:	e1a03802 	mov	r3, r2, lsl #16
   11824:	e1a03823 	mov	r3, r3, lsr #16
   11828:	e3530000 	cmp	r3, #0	; 0x0
   1182c:	01a02822 	moveq	r2, r2, lsr #16
   11830:	03a00010 	moveq	r0, #16	; 0x10
   11834:	e31200ff 	tst	r2, #255	; 0xff
   11838:	01a02422 	moveq	r2, r2, lsr #8
   1183c:	02800008 	addeq	r0, r0, #8	; 0x8
   11840:	e312000f 	tst	r2, #15	; 0xf
   11844:	01a02222 	moveq	r2, r2, lsr #4
   11848:	02800004 	addeq	r0, r0, #4	; 0x4
   1184c:	e3120003 	tst	r2, #3	; 0x3
   11850:	01a02122 	moveq	r2, r2, lsr #2
   11854:	02800002 	addeq	r0, r0, #2	; 0x2
   11858:	e3120001 	tst	r2, #1	; 0x1
   1185c:	1a000003 	bne	11870 <_lo0bits+0x8c>
   11860:	e1b020a2 	movs	r2, r2, lsr #1
   11864:	03a00020 	moveq	r0, #32	; 0x20
   11868:	012fff1e 	bxeq	lr
   1186c:	e2800001 	add	r0, r0, #1	; 0x1
   11870:	e5812000 	str	r2, [r1]
   11874:	e12fff1e 	bx	lr

00011878 <__mcmp>:
   11878:	e5903010 	ldr	r3, [r0, #16]
   1187c:	e5912010 	ldr	r2, [r1, #16]
   11880:	e52de004 	str	lr, [sp, #-4]!
   11884:	e053e002 	subs	lr, r3, r2
   11888:	1a00000c 	bne	118c0 <__mcmp+0x48>
   1188c:	e1a02102 	mov	r2, r2, lsl #2
   11890:	e2800014 	add	r0, r0, #20	; 0x14
   11894:	e2823014 	add	r3, r2, #20	; 0x14
   11898:	e0811003 	add	r1, r1, r3
   1189c:	e080c002 	add	ip, r0, r2
   118a0:	e51c2004 	ldr	r2, [ip, #-4]
   118a4:	e5113004 	ldr	r3, [r1, #-4]
   118a8:	e1520003 	cmp	r2, r3
   118ac:	e24cc004 	sub	ip, ip, #4	; 0x4
   118b0:	e2411004 	sub	r1, r1, #4	; 0x4
   118b4:	1a000003 	bne	118c8 <__mcmp+0x50>
   118b8:	e150000c 	cmp	r0, ip
   118bc:	3afffff7 	bcc	118a0 <__mcmp+0x28>
   118c0:	e1a0000e 	mov	r0, lr
   118c4:	e49df004 	ldr	pc, [sp], #4
   118c8:	33e0e000 	mvncc	lr, #0	; 0x0
   118cc:	23a0e001 	movcs	lr, #1	; 0x1
   118d0:	e1a0000e 	mov	r0, lr
   118d4:	e49df004 	ldr	pc, [sp], #4

000118d8 <_ulp>:
   118d8:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   118dc:	e1a00a20 	mov	r0, r0, lsr #20
   118e0:	e1a00a00 	mov	r0, r0, lsl #20
   118e4:	e240250d 	sub	r2, r0, #54525952	; 0x3400000
   118e8:	e3520000 	cmp	r2, #0	; 0x0
   118ec:	e2623000 	rsb	r3, r2, #0	; 0x0
   118f0:	e1a0ca43 	mov	ip, r3, asr #20
   118f4:	c1a00002 	movgt	r0, r2
   118f8:	c3a01000 	movgt	r1, #0	; 0x0
   118fc:	c12fff1e 	bxgt	lr
   11900:	e35c0013 	cmp	ip, #19	; 0x13
   11904:	e24c3014 	sub	r3, ip, #20	; 0x14
   11908:	d3a03702 	movle	r3, #524288	; 0x80000
   1190c:	d1a00c53 	movle	r0, r3, asr ip
   11910:	d3a01000 	movle	r1, #0	; 0x0
   11914:	d12fff1e 	bxle	lr
   11918:	e353001e 	cmp	r3, #30	; 0x1e
   1191c:	e263201f 	rsb	r2, r3, #31	; 0x1f
   11920:	e3a03001 	mov	r3, #1	; 0x1
   11924:	d3a03001 	movle	r3, #1	; 0x1
   11928:	d1a03213 	movle	r3, r3, lsl r2
   1192c:	e3a00000 	mov	r0, #0	; 0x0
   11930:	e1a01003 	mov	r1, r3
   11934:	e12fff1e 	bx	lr

00011938 <_b2d>:
   11938:	e5903010 	ldr	r3, [r0, #16]
   1193c:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
   11940:	e2806014 	add	r6, r0, #20	; 0x14
   11944:	e0863103 	add	r3, r6, r3, lsl #2
   11948:	e5137004 	ldr	r7, [r3, #-4]
   1194c:	e1a00007 	mov	r0, r7
   11950:	e1a04001 	mov	r4, r1
   11954:	e2435004 	sub	r5, r3, #4	; 0x4
   11958:	ebffff8b 	bl	1178c <_hi0bits>
   1195c:	e2603020 	rsb	r3, r0, #32	; 0x20
   11960:	e350000a 	cmp	r0, #10	; 0xa
   11964:	e1a02000 	mov	r2, r0
   11968:	e5843000 	str	r3, [r4]
   1196c:	ca00000a 	bgt	1199c <_b2d+0x64>
   11970:	e1560005 	cmp	r6, r5
   11974:	35153004 	ldrcc	r3, [r5, #-4]
   11978:	e260c00b 	rsb	ip, r0, #11	; 0xb
   1197c:	31a0ec33 	movcc	lr, r3, lsr ip
   11980:	e1a03c37 	mov	r3, r7, lsr ip
   11984:	23a0e000 	movcs	lr, #0	; 0x0
   11988:	e2822015 	add	r2, r2, #21	; 0x15
   1198c:	e18e1217 	orr	r1, lr, r7, lsl r2
   11990:	e38305ff 	orr	r0, r3, #1069547520	; 0x3fc00000
   11994:	e3800603 	orr	r0, r0, #3145728	; 0x300000
   11998:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
   1199c:	e1560005 	cmp	r6, r5
   119a0:	23a0e000 	movcs	lr, #0	; 0x0
   119a4:	3535e004 	ldrcc	lr, [r5, #-4]!
   119a8:	e250200b 	subs	r2, r0, #11	; 0xb
   119ac:	1a000003 	bne	119c0 <_b2d+0x88>
   119b0:	e38705ff 	orr	r0, r7, #1069547520	; 0x3fc00000
   119b4:	e3800603 	orr	r0, r0, #3145728	; 0x300000
   119b8:	e1a0100e 	mov	r1, lr
   119bc:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
   119c0:	e1550006 	cmp	r5, r6
   119c4:	85153004 	ldrhi	r3, [r5, #-4]
   119c8:	e262c020 	rsb	ip, r2, #32	; 0x20
   119cc:	81a04c33 	movhi	r4, r3, lsr ip
   119d0:	e1a03217 	mov	r3, r7, lsl r2
   119d4:	e38335ff 	orr	r3, r3, #1069547520	; 0x3fc00000
   119d8:	93a04000 	movls	r4, #0	; 0x0
   119dc:	e3833603 	orr	r3, r3, #3145728	; 0x300000
   119e0:	e1830c3e 	orr	r0, r3, lr, lsr ip
   119e4:	e184121e 	orr	r1, r4, lr, lsl r2
   119e8:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}

000119ec <_ratio>:
   119ec:	e92d43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   119f0:	e24dd008 	sub	sp, sp, #8	; 0x8
   119f4:	e1a04001 	mov	r4, r1
   119f8:	e28d1004 	add	r1, sp, #4	; 0x4
   119fc:	e1a05000 	mov	r5, r0
   11a00:	ebffffcc 	bl	11938 <_b2d>
   11a04:	e1a06000 	mov	r6, r0
   11a08:	e1a07001 	mov	r7, r1
   11a0c:	e1a00004 	mov	r0, r4
   11a10:	e1a0100d 	mov	r1, sp
   11a14:	ebffffc7 	bl	11938 <_b2d>
   11a18:	e5942010 	ldr	r2, [r4, #16]
   11a1c:	e1a09001 	mov	r9, r1
   11a20:	e5951010 	ldr	r1, [r5, #16]
   11a24:	e59d3004 	ldr	r3, [sp, #4]
   11a28:	e0621001 	rsb	r1, r2, r1
   11a2c:	e59d2000 	ldr	r2, [sp]
   11a30:	e0623003 	rsb	r3, r2, r3
   11a34:	e0833281 	add	r3, r3, r1, lsl #5
   11a38:	e1a08000 	mov	r8, r0
   11a3c:	e3530000 	cmp	r3, #0	; 0x0
   11a40:	c0866a03 	addgt	r6, r6, r3, lsl #20
   11a44:	d0488a03 	suble	r8, r8, r3, lsl #20
   11a48:	e1a00006 	mov	r0, r6
   11a4c:	e1a01007 	mov	r1, r7
   11a50:	e1a02008 	mov	r2, r8
   11a54:	e1a03009 	mov	r3, r9
   11a58:	ebffe37f 	bl	a85c <__divdf3>
   11a5c:	e28dd008 	add	sp, sp, #8	; 0x8
   11a60:	e8bd83f0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, pc}

00011a64 <_mprec_log10>:
   11a64:	e3500017 	cmp	r0, #23	; 0x17
   11a68:	e92d4010 	stmdb	sp!, {r4, lr}
   11a6c:	e1a04000 	mov	r4, r0
   11a70:	c3a005ff 	movgt	r0, #1069547520	; 0x3fc00000
   11a74:	c2800603 	addgt	r0, r0, #3145728	; 0x300000
   11a78:	c3a01000 	movgt	r1, #0	; 0x0
   11a7c:	ca000003 	bgt	11a90 <_mprec_log10+0x2c>
   11a80:	e59f3024 	ldr	r3, [pc, #36]	; 11aac <prog+0x11a64>
   11a84:	e0833184 	add	r3, r3, r4, lsl #3
   11a88:	e8930003 	ldmia	r3, {r0, r1}
   11a8c:	e8bd8010 	ldmia	sp!, {r4, pc}
   11a90:	e3a02101 	mov	r2, #1073741824	; 0x40000000
   11a94:	e2822709 	add	r2, r2, #2359296	; 0x240000
   11a98:	e3a03000 	mov	r3, #0	; 0x0
   11a9c:	ebffe28a 	bl	a4cc <__muldf3>
   11aa0:	e2544001 	subs	r4, r4, #1	; 0x1
   11aa4:	1afffff9 	bne	11a90 <_mprec_log10+0x2c>
   11aa8:	e8bd8010 	ldmia	sp!, {r4, pc}
   11aac:	00014590 	muleq	r1, r0, r5

00011ab0 <_Balloc>:
   11ab0:	e590c04c 	ldr	ip, [r0, #76]
   11ab4:	e35c0000 	cmp	ip, #0	; 0x0
   11ab8:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
   11abc:	e3a02010 	mov	r2, #16	; 0x10
   11ac0:	e1a06001 	mov	r6, r1
   11ac4:	e1a04000 	mov	r4, r0
   11ac8:	e3a01004 	mov	r1, #4	; 0x4
   11acc:	0a00000c 	beq	11b04 <_Balloc+0x54>
   11ad0:	e79c5106 	ldr	r5, [ip, r6, lsl #2]
   11ad4:	e3550000 	cmp	r5, #0	; 0x0
   11ad8:	15953000 	ldrne	r3, [r5]
   11adc:	e3a02001 	mov	r2, #1	; 0x1
   11ae0:	e1a00004 	mov	r0, r4
   11ae4:	e1a01002 	mov	r1, r2
   11ae8:	178c3106 	strne	r3, [ip, r6, lsl #2]
   11aec:	0a00000b 	beq	11b20 <_Balloc+0x70>
   11af0:	e3a03000 	mov	r3, #0	; 0x0
   11af4:	e585300c 	str	r3, [r5, #12]
   11af8:	e5853010 	str	r3, [r5, #16]
   11afc:	e1a00005 	mov	r0, r5
   11b00:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
   11b04:	eb000570 	bl	130cc <_calloc_r>
   11b08:	e3500000 	cmp	r0, #0	; 0x0
   11b0c:	e1a0c000 	mov	ip, r0
   11b10:	e1a05000 	mov	r5, r0
   11b14:	e584004c 	str	r0, [r4, #76]
   11b18:	1affffec 	bne	11ad0 <_Balloc+0x20>
   11b1c:	eafffff6 	b	11afc <_Balloc+0x4c>
   11b20:	e1a04612 	mov	r4, r2, lsl r6
   11b24:	e1a02104 	mov	r2, r4, lsl #2
   11b28:	e2822014 	add	r2, r2, #20	; 0x14
   11b2c:	eb000566 	bl	130cc <_calloc_r>
   11b30:	e3500000 	cmp	r0, #0	; 0x0
   11b34:	0afffff0 	beq	11afc <_Balloc+0x4c>
   11b38:	e1a05000 	mov	r5, r0
   11b3c:	e5806004 	str	r6, [r0, #4]
   11b40:	e5804008 	str	r4, [r0, #8]
   11b44:	eaffffe9 	b	11af0 <_Balloc+0x40>

00011b48 <_d2b>:
   11b48:	e92d47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11b4c:	e1a04001 	mov	r4, r1
   11b50:	e24dd008 	sub	sp, sp, #8	; 0x8
   11b54:	e3a01001 	mov	r1, #1	; 0x1
   11b58:	e1a05002 	mov	r5, r2
   11b5c:	e1a0a003 	mov	sl, r3
   11b60:	e59d9028 	ldr	r9, [sp, #40]
   11b64:	ebffffd1 	bl	11ab0 <_Balloc>
   11b68:	e3c42102 	bic	r2, r4, #-2147483648	; 0x80000000
   11b6c:	e3c434ff 	bic	r3, r4, #-16777216	; 0xff000000
   11b70:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
   11b74:	e1b07a22 	movs	r7, r2, lsr #20
   11b78:	e58d3000 	str	r3, [sp]
   11b7c:	13833601 	orrne	r3, r3, #1048576	; 0x100000
   11b80:	158d3000 	strne	r3, [sp]
   11b84:	e3550000 	cmp	r5, #0	; 0x0
   11b88:	e1a06000 	mov	r6, r0
   11b8c:	e2808014 	add	r8, r0, #20	; 0x14
   11b90:	0a000022 	beq	11c20 <_d2b+0xd8>
   11b94:	e28d0008 	add	r0, sp, #8	; 0x8
   11b98:	e5205004 	str	r5, [r0, #-4]!
   11b9c:	ebffff10 	bl	117e4 <_lo0bits>
   11ba0:	e3500000 	cmp	r0, #0	; 0x0
   11ba4:	0a000030 	beq	11c6c <_d2b+0x124>
   11ba8:	e89d000c 	ldmia	sp, {r2, r3}
   11bac:	e2601020 	rsb	r1, r0, #32	; 0x20
   11bb0:	e1833112 	orr	r3, r3, r2, lsl r1
   11bb4:	e5863014 	str	r3, [r6, #20]
   11bb8:	e59d3000 	ldr	r3, [sp]
   11bbc:	e1a03033 	mov	r3, r3, lsr r0
   11bc0:	e58d3000 	str	r3, [sp]
   11bc4:	e3530000 	cmp	r3, #0	; 0x0
   11bc8:	03a04001 	moveq	r4, #1	; 0x1
   11bcc:	13a04002 	movne	r4, #2	; 0x2
   11bd0:	e3570000 	cmp	r7, #0	; 0x0
   11bd4:	e5883004 	str	r3, [r8, #4]
   11bd8:	10803007 	addne	r3, r0, r7
   11bdc:	12433e43 	subne	r3, r3, #1072	; 0x430
   11be0:	12433003 	subne	r3, r3, #3	; 0x3
   11be4:	12602035 	rsbne	r2, r0, #53	; 0x35
   11be8:	e5864010 	str	r4, [r6, #16]
   11bec:	158a3000 	strne	r3, [sl]
   11bf0:	15892000 	strne	r2, [r9]
   11bf4:	1a000019 	bne	11c60 <_d2b+0x118>
   11bf8:	e2403e43 	sub	r3, r0, #1072	; 0x430
   11bfc:	e0882104 	add	r2, r8, r4, lsl #2
   11c00:	e2433002 	sub	r3, r3, #2	; 0x2
   11c04:	e58a3000 	str	r3, [sl]
   11c08:	e5120004 	ldr	r0, [r2, #-4]
   11c0c:	ebfffede 	bl	1178c <_hi0bits>
   11c10:	e1a04284 	mov	r4, r4, lsl #5
   11c14:	e0604004 	rsb	r4, r0, r4
   11c18:	e5894000 	str	r4, [r9]
   11c1c:	ea00000f 	b	11c60 <_d2b+0x118>
   11c20:	e1a0000d 	mov	r0, sp
   11c24:	ebfffeee 	bl	117e4 <_lo0bits>
   11c28:	e59d3000 	ldr	r3, [sp]
   11c2c:	e3570000 	cmp	r7, #0	; 0x0
   11c30:	e2800020 	add	r0, r0, #32	; 0x20
   11c34:	e5863014 	str	r3, [r6, #20]
   11c38:	10803007 	addne	r3, r0, r7
   11c3c:	e3a02001 	mov	r2, #1	; 0x1
   11c40:	12433e43 	subne	r3, r3, #1072	; 0x430
   11c44:	e5862010 	str	r2, [r6, #16]
   11c48:	e1a04002 	mov	r4, r2
   11c4c:	12433003 	subne	r3, r3, #3	; 0x3
   11c50:	12602035 	rsbne	r2, r0, #53	; 0x35
   11c54:	158a3000 	strne	r3, [sl]
   11c58:	15892000 	strne	r2, [r9]
   11c5c:	0affffe5 	beq	11bf8 <_d2b+0xb0>
   11c60:	e1a00006 	mov	r0, r6
   11c64:	e28dd008 	add	sp, sp, #8	; 0x8
   11c68:	e8bd87f0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11c6c:	e59d3004 	ldr	r3, [sp, #4]
   11c70:	e5863014 	str	r3, [r6, #20]
   11c74:	e59d3000 	ldr	r3, [sp]
   11c78:	eaffffd1 	b	11bc4 <_d2b+0x7c>

00011c7c <__mdiff>:
   11c7c:	e92d45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
   11c80:	e1a04001 	mov	r4, r1
   11c84:	e1a07000 	mov	r7, r0
   11c88:	e1a01002 	mov	r1, r2
   11c8c:	e1a00004 	mov	r0, r4
   11c90:	e1a05002 	mov	r5, r2
   11c94:	ebfffef7 	bl	11878 <__mcmp>
   11c98:	e2506000 	subs	r6, r0, #0	; 0x0
   11c9c:	0a00003a 	beq	11d8c <__mdiff+0x110>
   11ca0:	b1a03005 	movlt	r3, r5
   11ca4:	b1a05004 	movlt	r5, r4
   11ca8:	b1a04003 	movlt	r4, r3
   11cac:	e1a00007 	mov	r0, r7
   11cb0:	e5941004 	ldr	r1, [r4, #4]
   11cb4:	b3a0a001 	movlt	sl, #1	; 0x1
   11cb8:	a3a0a000 	movge	sl, #0	; 0x0
   11cbc:	ebffff7b 	bl	11ab0 <_Balloc>
   11cc0:	e5953010 	ldr	r3, [r5, #16]
   11cc4:	e5946010 	ldr	r6, [r4, #16]
   11cc8:	e284e014 	add	lr, r4, #20	; 0x14
   11ccc:	e2854014 	add	r4, r5, #20	; 0x14
   11cd0:	e580a00c 	str	sl, [r0, #12]
   11cd4:	e1a08000 	mov	r8, r0
   11cd8:	e0847103 	add	r7, r4, r3, lsl #2
   11cdc:	e08ea106 	add	sl, lr, r6, lsl #2
   11ce0:	e280c014 	add	ip, r0, #20	; 0x14
   11ce4:	e3a05000 	mov	r5, #0	; 0x0
   11ce8:	e4942004 	ldr	r2, [r4], #4
   11cec:	e49e0004 	ldr	r0, [lr], #4
   11cf0:	e1a01802 	mov	r1, r2, lsl #16
   11cf4:	e1a03800 	mov	r3, r0, lsl #16
   11cf8:	e1a03823 	mov	r3, r3, lsr #16
   11cfc:	e1a01821 	mov	r1, r1, lsr #16
   11d00:	e0613003 	rsb	r3, r1, r3
   11d04:	e1a02822 	mov	r2, r2, lsr #16
   11d08:	e0833005 	add	r3, r3, r5
   11d0c:	e0622820 	rsb	r2, r2, r0, lsr #16
   11d10:	e0822843 	add	r2, r2, r3, asr #16
   11d14:	e1570004 	cmp	r7, r4
   11d18:	e1cc20b2 	strh	r2, [ip, #2]
   11d1c:	e1a05842 	mov	r5, r2, asr #16
   11d20:	e0cc30b4 	strh	r3, [ip], #4
   11d24:	8affffef 	bhi	11ce8 <__mdiff+0x6c>
   11d28:	e15a000e 	cmp	sl, lr
   11d2c:	9a00000a 	bls	11d5c <__mdiff+0xe0>
   11d30:	e49e3004 	ldr	r3, [lr], #4
   11d34:	e1a02803 	mov	r2, r3, lsl #16
   11d38:	e1a02822 	mov	r2, r2, lsr #16
   11d3c:	e0822005 	add	r2, r2, r5
   11d40:	e1a01842 	mov	r1, r2, asr #16
   11d44:	e0811823 	add	r1, r1, r3, lsr #16
   11d48:	e15a000e 	cmp	sl, lr
   11d4c:	e1cc10b2 	strh	r1, [ip, #2]
   11d50:	e1a05841 	mov	r5, r1, asr #16
   11d54:	e0cc20b4 	strh	r2, [ip], #4
   11d58:	8afffff4 	bhi	11d30 <__mdiff+0xb4>
   11d5c:	e51c3004 	ldr	r3, [ip, #-4]
   11d60:	e3530000 	cmp	r3, #0	; 0x0
   11d64:	1a000005 	bne	11d80 <__mdiff+0x104>
   11d68:	e1a0200c 	mov	r2, ip
   11d6c:	e5123008 	ldr	r3, [r2, #-8]
   11d70:	e3530000 	cmp	r3, #0	; 0x0
   11d74:	e2466001 	sub	r6, r6, #1	; 0x1
   11d78:	e2422004 	sub	r2, r2, #4	; 0x4
   11d7c:	0afffffa 	beq	11d6c <__mdiff+0xf0>
   11d80:	e1a00008 	mov	r0, r8
   11d84:	e5886010 	str	r6, [r8, #16]
   11d88:	e8bd85f0 	ldmia	sp!, {r4, r5, r6, r7, r8, sl, pc}
   11d8c:	e1a00007 	mov	r0, r7
   11d90:	e1a01006 	mov	r1, r6
   11d94:	ebffff45 	bl	11ab0 <_Balloc>
   11d98:	e3a03001 	mov	r3, #1	; 0x1
   11d9c:	e1a08000 	mov	r8, r0
   11da0:	e5803010 	str	r3, [r0, #16]
   11da4:	e5806014 	str	r6, [r0, #20]
   11da8:	e1a00008 	mov	r0, r8
   11dac:	e8bd85f0 	ldmia	sp!, {r4, r5, r6, r7, r8, sl, pc}

00011db0 <_lshift>:
   11db0:	e5913010 	ldr	r3, [r1, #16]
   11db4:	e92d45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
   11db8:	e2833001 	add	r3, r3, #1	; 0x1
   11dbc:	e1a042c2 	mov	r4, r2, asr #5
   11dc0:	e1a06002 	mov	r6, r2
   11dc4:	e5912008 	ldr	r2, [r1, #8]
   11dc8:	e0845003 	add	r5, r4, r3
   11dcc:	e1550002 	cmp	r5, r2
   11dd0:	e1a07001 	mov	r7, r1
   11dd4:	e1a0a000 	mov	sl, r0
   11dd8:	e5911004 	ldr	r1, [r1, #4]
   11ddc:	da000003 	ble	11df0 <_lshift+0x40>
   11de0:	e1a02082 	mov	r2, r2, lsl #1
   11de4:	e1550002 	cmp	r5, r2
   11de8:	e2811001 	add	r1, r1, #1	; 0x1
   11dec:	cafffffb 	bgt	11de0 <_lshift+0x30>
   11df0:	e1a0000a 	mov	r0, sl
   11df4:	ebffff2d 	bl	11ab0 <_Balloc>
   11df8:	e3540000 	cmp	r4, #0	; 0x0
   11dfc:	e1a08000 	mov	r8, r0
   11e00:	e2800014 	add	r0, r0, #20	; 0x14
   11e04:	da000005 	ble	11e20 <_lshift+0x70>
   11e08:	e3a03000 	mov	r3, #0	; 0x0
   11e0c:	e1a02003 	mov	r2, r3
   11e10:	e2833001 	add	r3, r3, #1	; 0x1
   11e14:	e1540003 	cmp	r4, r3
   11e18:	e4802004 	str	r2, [r0], #4
   11e1c:	1afffffb 	bne	11e10 <_lshift+0x60>
   11e20:	e5973010 	ldr	r3, [r7, #16]
   11e24:	e2871014 	add	r1, r7, #20	; 0x14
   11e28:	e216401f 	ands	r4, r6, #31	; 0x1f
   11e2c:	e081c103 	add	ip, r1, r3, lsl #2
   11e30:	0a000012 	beq	11e80 <_lshift+0xd0>
   11e34:	e264e020 	rsb	lr, r4, #32	; 0x20
   11e38:	e3a02000 	mov	r2, #0	; 0x0
   11e3c:	e5913000 	ldr	r3, [r1]
   11e40:	e1823413 	orr	r3, r2, r3, lsl r4
   11e44:	e4803004 	str	r3, [r0], #4
   11e48:	e4912004 	ldr	r2, [r1], #4
   11e4c:	e15c0001 	cmp	ip, r1
   11e50:	e1a02e32 	mov	r2, r2, lsr lr
   11e54:	8afffff8 	bhi	11e3c <_lshift+0x8c>
   11e58:	e3520000 	cmp	r2, #0	; 0x0
   11e5c:	e5802000 	str	r2, [r0]
   11e60:	12855001 	addne	r5, r5, #1	; 0x1
   11e64:	e2453001 	sub	r3, r5, #1	; 0x1
   11e68:	e1a0000a 	mov	r0, sl
   11e6c:	e5883010 	str	r3, [r8, #16]
   11e70:	e1a01007 	mov	r1, r7
   11e74:	ebfffe3d 	bl	11770 <_Bfree>
   11e78:	e1a00008 	mov	r0, r8
   11e7c:	e8bd85f0 	ldmia	sp!, {r4, r5, r6, r7, r8, sl, pc}
   11e80:	e4913004 	ldr	r3, [r1], #4
   11e84:	e15c0001 	cmp	ip, r1
   11e88:	e4803004 	str	r3, [r0], #4
   11e8c:	9afffff4 	bls	11e64 <_lshift+0xb4>
   11e90:	e4913004 	ldr	r3, [r1], #4
   11e94:	e15c0001 	cmp	ip, r1
   11e98:	e4803004 	str	r3, [r0], #4
   11e9c:	8afffff7 	bhi	11e80 <_lshift+0xd0>
   11ea0:	eaffffef 	b	11e64 <_lshift+0xb4>

00011ea4 <_multiply>:
   11ea4:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ea8:	e5918010 	ldr	r8, [r1, #16]
   11eac:	e5925010 	ldr	r5, [r2, #16]
   11eb0:	e1580005 	cmp	r8, r5
   11eb4:	b1a03002 	movlt	r3, r2
   11eb8:	e1a06002 	mov	r6, r2
   11ebc:	b1a06001 	movlt	r6, r1
   11ec0:	e1a04001 	mov	r4, r1
   11ec4:	b1a08005 	movlt	r8, r5
   11ec8:	b1a04003 	movlt	r4, r3
   11ecc:	b5965010 	ldrlt	r5, [r6, #16]
   11ed0:	e994000a 	ldmib	r4, {r1, r3}
   11ed4:	e0889005 	add	r9, r8, r5
   11ed8:	e1590003 	cmp	r9, r3
   11edc:	e24dd00c 	sub	sp, sp, #12	; 0xc
   11ee0:	c2811001 	addgt	r1, r1, #1	; 0x1
   11ee4:	ebfffef1 	bl	11ab0 <_Balloc>
   11ee8:	e2801014 	add	r1, r0, #20	; 0x14
   11eec:	e58d0000 	str	r0, [sp]
   11ef0:	e0810109 	add	r0, r1, r9, lsl #2
   11ef4:	e1510000 	cmp	r1, r0
   11ef8:	e58d0004 	str	r0, [sp, #4]
   11efc:	2a000005 	bcs	11f18 <_multiply+0x74>
   11f00:	e1a03001 	mov	r3, r1
   11f04:	e3a02000 	mov	r2, #0	; 0x0
   11f08:	e4832004 	str	r2, [r3], #4
   11f0c:	e59d0004 	ldr	r0, [sp, #4]
   11f10:	e1500003 	cmp	r0, r3
   11f14:	8afffffb 	bhi	11f08 <_multiply+0x64>
   11f18:	e2867014 	add	r7, r6, #20	; 0x14
   11f1c:	e0875105 	add	r5, r7, r5, lsl #2
   11f20:	e284b014 	add	fp, r4, #20	; 0x14
   11f24:	e1570005 	cmp	r7, r5
   11f28:	e58d5008 	str	r5, [sp, #8]
   11f2c:	e08b8108 	add	r8, fp, r8, lsl #2
   11f30:	2a000038 	bcs	12018 <_multiply+0x174>
   11f34:	e1a0a001 	mov	sl, r1
   11f38:	e5973000 	ldr	r3, [r7]
   11f3c:	e1a06803 	mov	r6, r3, lsl #16
   11f40:	e1a06826 	mov	r6, r6, lsr #16
   11f44:	e3560000 	cmp	r6, #0	; 0x0
   11f48:	0a000015 	beq	11fa4 <_multiply+0x100>
   11f4c:	e1a0500b 	mov	r5, fp
   11f50:	e1a0400a 	mov	r4, sl
   11f54:	e3a03000 	mov	r3, #0	; 0x0
   11f58:	e594c000 	ldr	ip, [r4]
   11f5c:	e4950004 	ldr	r0, [r5], #4
   11f60:	e1a0280c 	mov	r2, ip, lsl #16
   11f64:	e1a01800 	mov	r1, r0, lsl #16
   11f68:	e1a02822 	mov	r2, r2, lsr #16
   11f6c:	e0832002 	add	r2, r3, r2
   11f70:	e1a01821 	mov	r1, r1, lsr #16
   11f74:	e1a00820 	mov	r0, r0, lsr #16
   11f78:	e1a0c82c 	mov	ip, ip, lsr #16
   11f7c:	e02e2691 	mla	lr, r1, r6, r2
   11f80:	e023c690 	mla	r3, r0, r6, ip
   11f84:	e1580005 	cmp	r8, r5
   11f88:	e083382e 	add	r3, r3, lr, lsr #16
   11f8c:	e1c430b2 	strh	r3, [r4, #2]
   11f90:	e0c4e0b4 	strh	lr, [r4], #4
   11f94:	e1a03823 	mov	r3, r3, lsr #16
   11f98:	8affffee 	bhi	11f58 <_multiply+0xb4>
   11f9c:	e5843000 	str	r3, [r4]
   11fa0:	e5973000 	ldr	r3, [r7]
   11fa4:	e1b05823 	movs	r5, r3, lsr #16
   11fa8:	0a000015 	beq	12004 <_multiply+0x160>
   11fac:	e59ae000 	ldr	lr, [sl]
   11fb0:	e1a0c00a 	mov	ip, sl
   11fb4:	e1a0400b 	mov	r4, fp
   11fb8:	e3a00000 	mov	r0, #0	; 0x0
   11fbc:	e4941004 	ldr	r1, [r4], #4
   11fc0:	e59c2000 	ldr	r2, [ip]
   11fc4:	e1a03801 	mov	r3, r1, lsl #16
   11fc8:	e0802822 	add	r2, r0, r2, lsr #16
   11fcc:	e1a03823 	mov	r3, r3, lsr #16
   11fd0:	e0202593 	mla	r0, r3, r5, r2
   11fd4:	e1cce0b0 	strh	lr, [ip]
   11fd8:	e1cc00b2 	strh	r0, [ip, #2]
   11fdc:	e5bc3004 	ldr	r3, [ip, #4]!
   11fe0:	e1a03803 	mov	r3, r3, lsl #16
   11fe4:	e1a01821 	mov	r1, r1, lsr #16
   11fe8:	e1a03823 	mov	r3, r3, lsr #16
   11fec:	e0223591 	mla	r2, r1, r5, r3
   11ff0:	e1580004 	cmp	r8, r4
   11ff4:	e082e820 	add	lr, r2, r0, lsr #16
   11ff8:	e1a0082e 	mov	r0, lr, lsr #16
   11ffc:	8affffee 	bhi	11fbc <_multiply+0x118>
   12000:	e58ce000 	str	lr, [ip]
   12004:	e59d2008 	ldr	r2, [sp, #8]
   12008:	e2877004 	add	r7, r7, #4	; 0x4
   1200c:	e1520007 	cmp	r2, r7
   12010:	828aa004 	addhi	sl, sl, #4	; 0x4
   12014:	8affffc7 	bhi	11f38 <_multiply+0x94>
   12018:	e3590000 	cmp	r9, #0	; 0x0
   1201c:	da00000b 	ble	12050 <_multiply+0x1ac>
   12020:	e59d0004 	ldr	r0, [sp, #4]
   12024:	e5103004 	ldr	r3, [r0, #-4]
   12028:	e3530000 	cmp	r3, #0	; 0x0
   1202c:	1a000007 	bne	12050 <_multiply+0x1ac>
   12030:	e1a02000 	mov	r2, r0
   12034:	ea000003 	b	12048 <_multiply+0x1a4>
   12038:	e5123008 	ldr	r3, [r2, #-8]
   1203c:	e3530000 	cmp	r3, #0	; 0x0
   12040:	e2422004 	sub	r2, r2, #4	; 0x4
   12044:	1a000001 	bne	12050 <_multiply+0x1ac>
   12048:	e2599001 	subs	r9, r9, #1	; 0x1
   1204c:	1afffff9 	bne	12038 <_multiply+0x194>
   12050:	e59d2000 	ldr	r2, [sp]
   12054:	e1a00002 	mov	r0, r2
   12058:	e5829010 	str	r9, [r2, #16]
   1205c:	e28dd00c 	add	sp, sp, #12	; 0xc
   12060:	e8bd8ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012064 <_i2b>:
   12064:	e92d4010 	stmdb	sp!, {r4, lr}
   12068:	e1a04001 	mov	r4, r1
   1206c:	e3a01001 	mov	r1, #1	; 0x1
   12070:	ebfffe8e 	bl	11ab0 <_Balloc>
   12074:	e3a03001 	mov	r3, #1	; 0x1
   12078:	e5803010 	str	r3, [r0, #16]
   1207c:	e5804014 	str	r4, [r0, #20]
   12080:	e8bd8010 	ldmia	sp!, {r4, pc}

00012084 <_multadd>:
   12084:	e92d41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12088:	e5916010 	ldr	r6, [r1, #16]
   1208c:	e1a07001 	mov	r7, r1
   12090:	e1a08000 	mov	r8, r0
   12094:	e1a04002 	mov	r4, r2
   12098:	e1a05003 	mov	r5, r3
   1209c:	e281c014 	add	ip, r1, #20	; 0x14
   120a0:	e3a0e000 	mov	lr, #0	; 0x0
   120a4:	e59c1000 	ldr	r1, [ip]
   120a8:	e1a03801 	mov	r3, r1, lsl #16
   120ac:	e1a03823 	mov	r3, r3, lsr #16
   120b0:	e0225394 	mla	r2, r4, r3, r5
   120b4:	e1a01821 	mov	r1, r1, lsr #16
   120b8:	e1a03822 	mov	r3, r2, lsr #16
   120bc:	e0203194 	mla	r0, r4, r1, r3
   120c0:	e1a02802 	mov	r2, r2, lsl #16
   120c4:	e1a02822 	mov	r2, r2, lsr #16
   120c8:	e28ee001 	add	lr, lr, #1	; 0x1
   120cc:	e0822800 	add	r2, r2, r0, lsl #16
   120d0:	e156000e 	cmp	r6, lr
   120d4:	e48c2004 	str	r2, [ip], #4
   120d8:	e1a05820 	mov	r5, r0, lsr #16
   120dc:	cafffff0 	bgt	120a4 <_multadd+0x20>
   120e0:	e3550000 	cmp	r5, #0	; 0x0
   120e4:	0a000006 	beq	12104 <_multadd+0x80>
   120e8:	e5973008 	ldr	r3, [r7, #8]
   120ec:	e1560003 	cmp	r6, r3
   120f0:	aa000005 	bge	1210c <_multadd+0x88>
   120f4:	e2862001 	add	r2, r6, #1	; 0x1
   120f8:	e0873106 	add	r3, r7, r6, lsl #2
   120fc:	e5835014 	str	r5, [r3, #20]
   12100:	e5872010 	str	r2, [r7, #16]
   12104:	e1a00007 	mov	r0, r7
   12108:	e8bd81f0 	ldmia	sp!, {r4, r5, r6, r7, r8, pc}
   1210c:	e5971004 	ldr	r1, [r7, #4]
   12110:	e1a00008 	mov	r0, r8
   12114:	e2811001 	add	r1, r1, #1	; 0x1
   12118:	ebfffe64 	bl	11ab0 <_Balloc>
   1211c:	e5972010 	ldr	r2, [r7, #16]
   12120:	e1a02102 	mov	r2, r2, lsl #2
   12124:	e287100c 	add	r1, r7, #12	; 0xc
   12128:	e1a04000 	mov	r4, r0
   1212c:	e2822008 	add	r2, r2, #8	; 0x8
   12130:	e280000c 	add	r0, r0, #12	; 0xc
   12134:	ebffe7d6 	bl	c094 <memcpy>
   12138:	e1a01007 	mov	r1, r7
   1213c:	e1a00008 	mov	r0, r8
   12140:	ebfffd8a 	bl	11770 <_Bfree>
   12144:	e1a07004 	mov	r7, r4
   12148:	eaffffe9 	b	120f4 <_multadd+0x70>

0001214c <_pow5mult>:
   1214c:	e92d41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12150:	e1a04002 	mov	r4, r2
   12154:	e2122003 	ands	r2, r2, #3	; 0x3
   12158:	e1a07000 	mov	r7, r0
   1215c:	e1a08001 	mov	r8, r1
   12160:	1a000025 	bne	121fc <_pow5mult+0xb0>
   12164:	e1b06144 	movs	r6, r4, asr #2
   12168:	0a00001c 	beq	121e0 <_pow5mult+0x94>
   1216c:	e5975048 	ldr	r5, [r7, #72]
   12170:	e3550000 	cmp	r5, #0	; 0x0
   12174:	1a000009 	bne	121a0 <_pow5mult+0x54>
   12178:	ea000026 	b	12218 <_pow5mult+0xcc>
   1217c:	e1b060c6 	movs	r6, r6, asr #1
   12180:	e1a01005 	mov	r1, r5
   12184:	e1a02005 	mov	r2, r5
   12188:	e1a00007 	mov	r0, r7
   1218c:	0a000013 	beq	121e0 <_pow5mult+0x94>
   12190:	e5954000 	ldr	r4, [r5]
   12194:	e3540000 	cmp	r4, #0	; 0x0
   12198:	0a000012 	beq	121e8 <_pow5mult+0x9c>
   1219c:	e1a05004 	mov	r5, r4
   121a0:	e3160001 	tst	r6, #1	; 0x1
   121a4:	e1a02005 	mov	r2, r5
   121a8:	e1a00007 	mov	r0, r7
   121ac:	e1a01008 	mov	r1, r8
   121b0:	0afffff1 	beq	1217c <_pow5mult+0x30>
   121b4:	ebffff3a 	bl	11ea4 <_multiply>
   121b8:	e1a01008 	mov	r1, r8
   121bc:	e1a04000 	mov	r4, r0
   121c0:	e1a00007 	mov	r0, r7
   121c4:	ebfffd69 	bl	11770 <_Bfree>
   121c8:	e1b060c6 	movs	r6, r6, asr #1
   121cc:	e1a08004 	mov	r8, r4
   121d0:	e1a01005 	mov	r1, r5
   121d4:	e1a02005 	mov	r2, r5
   121d8:	e1a00007 	mov	r0, r7
   121dc:	1affffeb 	bne	12190 <_pow5mult+0x44>
   121e0:	e1a00008 	mov	r0, r8
   121e4:	e8bd81f0 	ldmia	sp!, {r4, r5, r6, r7, r8, pc}
   121e8:	ebffff2d 	bl	11ea4 <_multiply>
   121ec:	e5850000 	str	r0, [r5]
   121f0:	e1a05000 	mov	r5, r0
   121f4:	e5804000 	str	r4, [r0]
   121f8:	eaffffe8 	b	121a0 <_pow5mult+0x54>
   121fc:	e59f3038 	ldr	r3, [pc, #56]	; 1223c <prog+0x121f4>
   12200:	e0833102 	add	r3, r3, r2, lsl #2
   12204:	e5132004 	ldr	r2, [r3, #-4]
   12208:	e3a03000 	mov	r3, #0	; 0x0
   1220c:	ebffff9c 	bl	12084 <_multadd>
   12210:	e1a08000 	mov	r8, r0
   12214:	eaffffd2 	b	12164 <_pow5mult+0x18>
   12218:	e3a01e27 	mov	r1, #624	; 0x270
   1221c:	e2811001 	add	r1, r1, #1	; 0x1
   12220:	e1a00007 	mov	r0, r7
   12224:	ebffff8e 	bl	12064 <_i2b>
   12228:	e3a03000 	mov	r3, #0	; 0x0
   1222c:	e1a05000 	mov	r5, r0
   12230:	e5870048 	str	r0, [r7, #72]
   12234:	e5803000 	str	r3, [r0]
   12238:	eaffffd8 	b	121a0 <_pow5mult+0x54>
   1223c:	000146a8 	andeq	r4, r1, r8, lsr #13

00012240 <_s2b>:
   12240:	e59fc0d4 	ldr	ip, [pc, #212]	; 1231c <prog+0x122d4>
   12244:	e92d41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12248:	e1a08003 	mov	r8, r3
   1224c:	e2833008 	add	r3, r3, #8	; 0x8
   12250:	e0ce439c 	smull	r4, lr, ip, r3
   12254:	e1a03fc3 	mov	r3, r3, asr #31
   12258:	e063c0ce 	rsb	ip, r3, lr, asr #1
   1225c:	e35c0001 	cmp	ip, #1	; 0x1
   12260:	e1a05001 	mov	r5, r1
   12264:	e1a06000 	mov	r6, r0
   12268:	e1a07002 	mov	r7, r2
   1226c:	d3a01000 	movle	r1, #0	; 0x0
   12270:	da000005 	ble	1228c <_s2b+0x4c>
   12274:	e3a03001 	mov	r3, #1	; 0x1
   12278:	e3a01000 	mov	r1, #0	; 0x0
   1227c:	e1a03083 	mov	r3, r3, lsl #1
   12280:	e15c0003 	cmp	ip, r3
   12284:	e2811001 	add	r1, r1, #1	; 0x1
   12288:	cafffffb 	bgt	1227c <_s2b+0x3c>
   1228c:	e1a00006 	mov	r0, r6
   12290:	ebfffe06 	bl	11ab0 <_Balloc>
   12294:	e59d3018 	ldr	r3, [sp, #24]
   12298:	e3570009 	cmp	r7, #9	; 0x9
   1229c:	e3a02001 	mov	r2, #1	; 0x1
   122a0:	e5803014 	str	r3, [r0, #20]
   122a4:	e5802010 	str	r2, [r0, #16]
   122a8:	d285700a 	addle	r7, r5, #10	; 0xa
   122ac:	d3a04009 	movle	r4, #9	; 0x9
   122b0:	da00000b 	ble	122e4 <_s2b+0xa4>
   122b4:	e3a04009 	mov	r4, #9	; 0x9
   122b8:	e7d43005 	ldrb	r3, [r4, r5]
   122bc:	e1a01000 	mov	r1, r0
   122c0:	e2433030 	sub	r3, r3, #48	; 0x30
   122c4:	e2844001 	add	r4, r4, #1	; 0x1
   122c8:	e1a00006 	mov	r0, r6
   122cc:	e3a0200a 	mov	r2, #10	; 0xa
   122d0:	ebffff6b 	bl	12084 <_multadd>
   122d4:	e1570004 	cmp	r7, r4
   122d8:	1afffff6 	bne	122b8 <_s2b+0x78>
   122dc:	e0853004 	add	r3, r5, r4
   122e0:	e2837001 	add	r7, r3, #1	; 0x1
   122e4:	e1580004 	cmp	r8, r4
   122e8:	d8bd81f0 	ldmleia	sp!, {r4, r5, r6, r7, r8, pc}
   122ec:	e0645008 	rsb	r5, r4, r8
   122f0:	e3a04000 	mov	r4, #0	; 0x0
   122f4:	e7d43007 	ldrb	r3, [r4, r7]
   122f8:	e1a01000 	mov	r1, r0
   122fc:	e2433030 	sub	r3, r3, #48	; 0x30
   12300:	e2844001 	add	r4, r4, #1	; 0x1
   12304:	e1a00006 	mov	r0, r6
   12308:	e3a0200a 	mov	r2, #10	; 0xa
   1230c:	ebffff5c 	bl	12084 <_multadd>
   12310:	e1550004 	cmp	r5, r4
   12314:	1afffff6 	bne	122f4 <_s2b+0xb4>
   12318:	e8bd81f0 	ldmia	sp!, {r4, r5, r6, r7, r8, pc}
   1231c:	38e38e39 	stmccia	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00012320 <_realloc_r>:
   12320:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12324:	e251a000 	subs	sl, r1, #0	; 0x0
   12328:	e24dd00c 	sub	sp, sp, #12	; 0xc
   1232c:	e1a06002 	mov	r6, r2
   12330:	e58d0000 	str	r0, [sp]
   12334:	0a00008d 	beq	12570 <_realloc_r+0x250>
   12338:	ebffe7a3 	bl	c1cc <__malloc_lock>
   1233c:	e286300b 	add	r3, r6, #11	; 0xb
   12340:	e3530016 	cmp	r3, #22	; 0x16
   12344:	83c3e007 	bichi	lr, r3, #7	; 0x7
   12348:	93a0e010 	movls	lr, #16	; 0x10
   1234c:	958de004 	strls	lr, [sp, #4]
   12350:	858de004 	strhi	lr, [sp, #4]
   12354:	e59d0004 	ldr	r0, [sp, #4]
   12358:	93a03000 	movls	r3, #0	; 0x0
   1235c:	81a03fae 	movhi	r3, lr, lsr #31
   12360:	e1500006 	cmp	r0, r6
   12364:	33833001 	orrcc	r3, r3, #1	; 0x1
   12368:	e24a5008 	sub	r5, sl, #8	; 0x8
   1236c:	e3530000 	cmp	r3, #0	; 0x0
   12370:	e5959004 	ldr	r9, [r5, #4]
   12374:	1a0000d0 	bne	126bc <_realloc_r+0x39c>
   12378:	e3c94003 	bic	r4, r9, #3	; 0x3
   1237c:	e154000e 	cmp	r4, lr
   12380:	a1a08005 	movge	r8, r5
   12384:	a1a07004 	movge	r7, r4
   12388:	a1a0c008 	movge	ip, r8
   1238c:	a2884008 	addge	r4, r8, #8	; 0x8
   12390:	aa00004a 	bge	124c0 <_realloc_r+0x1a0>
   12394:	e59f25b8 	ldr	r2, [pc, #1464]	; 12954 <prog+0x1290c>
   12398:	e592b008 	ldr	fp, [r2, #8]
   1239c:	e0850004 	add	r0, r5, r4
   123a0:	e150000b 	cmp	r0, fp
   123a4:	e1a08005 	mov	r8, r5
   123a8:	0a0000c8 	beq	126d0 <_realloc_r+0x3b0>
   123ac:	e5901004 	ldr	r1, [r0, #4]
   123b0:	e3c13001 	bic	r3, r1, #1	; 0x1
   123b4:	e0833000 	add	r3, r3, r0
   123b8:	e5932004 	ldr	r2, [r3, #4]
   123bc:	e3120001 	tst	r2, #1	; 0x1
   123c0:	0a00005f 	beq	12544 <_realloc_r+0x224>
   123c4:	e3a0c000 	mov	ip, #0	; 0x0
   123c8:	e1a0000c 	mov	r0, ip
   123cc:	e3190001 	tst	r9, #1	; 0x1
   123d0:	1a00006a 	bne	12580 <_realloc_r+0x260>
   123d4:	e5953000 	ldr	r3, [r5]
   123d8:	e0633005 	rsb	r3, r3, r5
   123dc:	e5932004 	ldr	r2, [r3, #4]
   123e0:	e3500000 	cmp	r0, #0	; 0x0
   123e4:	e58d3008 	str	r3, [sp, #8]
   123e8:	e3c22003 	bic	r2, r2, #3	; 0x3
   123ec:	0a000083 	beq	12600 <_realloc_r+0x2e0>
   123f0:	e150000b 	cmp	r0, fp
   123f4:	0a0000f9 	beq	127e0 <_realloc_r+0x4c0>
   123f8:	e0849002 	add	r9, r4, r2
   123fc:	e08c7009 	add	r7, ip, r9
   12400:	e157000e 	cmp	r7, lr
   12404:	ba00007e 	blt	12604 <_realloc_r+0x2e4>
   12408:	e2802008 	add	r2, r0, #8	; 0x8
   1240c:	e892000c 	ldmia	r2, {r2, r3}
   12410:	e5832008 	str	r2, [r3, #8]
   12414:	e582300c 	str	r3, [r2, #12]
   12418:	e59d3008 	ldr	r3, [sp, #8]
   1241c:	e2444004 	sub	r4, r4, #4	; 0x4
   12420:	e593200c 	ldr	r2, [r3, #12]
   12424:	e59d8008 	ldr	r8, [sp, #8]
   12428:	e5933008 	ldr	r3, [r3, #8]
   1242c:	e3540024 	cmp	r4, #36	; 0x24
   12430:	e5823008 	str	r3, [r2, #8]
   12434:	e583200c 	str	r2, [r3, #12]
   12438:	e2885008 	add	r5, r8, #8	; 0x8
   1243c:	8a0000d4 	bhi	12794 <_realloc_r+0x474>
   12440:	e3540013 	cmp	r4, #19	; 0x13
   12444:	e1a0c00a 	mov	ip, sl
   12448:	e1a0e005 	mov	lr, r5
   1244c:	9a000011 	bls	12498 <_realloc_r+0x178>
   12450:	e1a0000a 	mov	r0, sl
   12454:	e4903004 	ldr	r3, [r0], #4
   12458:	e5883008 	str	r3, [r8, #8]
   1245c:	e59a2004 	ldr	r2, [sl, #4]
   12460:	e354001b 	cmp	r4, #27	; 0x1b
   12464:	e588200c 	str	r2, [r8, #12]
   12468:	e288e010 	add	lr, r8, #16	; 0x10
   1246c:	e280c004 	add	ip, r0, #4	; 0x4
   12470:	9a000008 	bls	12498 <_realloc_r+0x178>
   12474:	e5903004 	ldr	r3, [r0, #4]
   12478:	e5883010 	str	r3, [r8, #16]
   1247c:	e59c2004 	ldr	r2, [ip, #4]
   12480:	e28c3004 	add	r3, ip, #4	; 0x4
   12484:	e3540024 	cmp	r4, #36	; 0x24
   12488:	e5882014 	str	r2, [r8, #20]
   1248c:	e288e018 	add	lr, r8, #24	; 0x18
   12490:	e283c004 	add	ip, r3, #4	; 0x4
   12494:	0a000119 	beq	12900 <_realloc_r+0x5e0>
   12498:	e1a0200c 	mov	r2, ip
   1249c:	e4920004 	ldr	r0, [r2], #4
   124a0:	e1a0100e 	mov	r1, lr
   124a4:	e4810004 	str	r0, [r1], #4
   124a8:	e59c3004 	ldr	r3, [ip, #4]
   124ac:	e58e3004 	str	r3, [lr, #4]
   124b0:	e5920004 	ldr	r0, [r2, #4]
   124b4:	e59dc008 	ldr	ip, [sp, #8]
   124b8:	e5810004 	str	r0, [r1, #4]
   124bc:	e1a04005 	mov	r4, r5
   124c0:	e59d1004 	ldr	r1, [sp, #4]
   124c4:	e0610007 	rsb	r0, r1, r7
   124c8:	e350000f 	cmp	r0, #15	; 0xf
   124cc:	8a00000d 	bhi	12508 <_realloc_r+0x1e8>
   124d0:	e59c3004 	ldr	r3, [ip, #4]
   124d4:	e2033001 	and	r3, r3, #1	; 0x1
   124d8:	e1873003 	orr	r3, r7, r3
   124dc:	e58c3004 	str	r3, [ip, #4]
   124e0:	e0872008 	add	r2, r7, r8
   124e4:	e5923004 	ldr	r3, [r2, #4]
   124e8:	e3833001 	orr	r3, r3, #1	; 0x1
   124ec:	e5823004 	str	r3, [r2, #4]
   124f0:	e59d0000 	ldr	r0, [sp]
   124f4:	ebffe735 	bl	c1d0 <__malloc_unlock>
   124f8:	e1a06004 	mov	r6, r4
   124fc:	e1a00006 	mov	r0, r6
   12500:	e28dd00c 	add	sp, sp, #12	; 0xc
   12504:	e8bd8ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12508:	e59c3004 	ldr	r3, [ip, #4]
   1250c:	e2033001 	and	r3, r3, #1	; 0x1
   12510:	e1813003 	orr	r3, r1, r3
   12514:	e3802001 	orr	r2, r0, #1	; 0x1
   12518:	e0811008 	add	r1, r1, r8
   1251c:	e58c3004 	str	r3, [ip, #4]
   12520:	e5812004 	str	r2, [r1, #4]
   12524:	e0810000 	add	r0, r1, r0
   12528:	e5903004 	ldr	r3, [r0, #4]
   1252c:	e3833001 	orr	r3, r3, #1	; 0x1
   12530:	e5803004 	str	r3, [r0, #4]
   12534:	e2811008 	add	r1, r1, #8	; 0x8
   12538:	e59d0000 	ldr	r0, [sp]
   1253c:	ebfff9e5 	bl	10cd8 <_free_r>
   12540:	eaffffea 	b	124f0 <_realloc_r+0x1d0>
   12544:	e3c1c003 	bic	ip, r1, #3	; 0x3
   12548:	e084700c 	add	r7, r4, ip
   1254c:	e15e0007 	cmp	lr, r7
   12550:	caffff9d 	bgt	123cc <_realloc_r+0xac>
   12554:	e2802008 	add	r2, r0, #8	; 0x8
   12558:	e892000c 	ldmia	r2, {r2, r3}
   1255c:	e1a0c005 	mov	ip, r5
   12560:	e2854008 	add	r4, r5, #8	; 0x8
   12564:	e5832008 	str	r2, [r3, #8]
   12568:	e582300c 	str	r3, [r2, #12]
   1256c:	eaffffd3 	b	124c0 <_realloc_r+0x1a0>
   12570:	e1a01002 	mov	r1, r2
   12574:	e28dd00c 	add	sp, sp, #12	; 0xc
   12578:	e8bd4ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1257c:	eaffe4c2 	b	b88c <_malloc_r>
   12580:	e1a01006 	mov	r1, r6
   12584:	e59d0000 	ldr	r0, [sp]
   12588:	ebffe4bf 	bl	b88c <_malloc_r>
   1258c:	e2506000 	subs	r6, r0, #0	; 0x0
   12590:	0a000017 	beq	125f4 <_realloc_r+0x2d4>
   12594:	e5953004 	ldr	r3, [r5, #4]
   12598:	e3c33001 	bic	r3, r3, #1	; 0x1
   1259c:	e0853003 	add	r3, r5, r3
   125a0:	e2462008 	sub	r2, r6, #8	; 0x8
   125a4:	e1520003 	cmp	r2, r3
   125a8:	0a0000c9 	beq	128d4 <_realloc_r+0x5b4>
   125ac:	e2441004 	sub	r1, r4, #4	; 0x4
   125b0:	e3510024 	cmp	r1, #36	; 0x24
   125b4:	8a000085 	bhi	127d0 <_realloc_r+0x4b0>
   125b8:	e3510013 	cmp	r1, #19	; 0x13
   125bc:	e1a0c00a 	mov	ip, sl
   125c0:	e1a0e006 	mov	lr, r6
   125c4:	8a000057 	bhi	12728 <_realloc_r+0x408>
   125c8:	e1a0000c 	mov	r0, ip
   125cc:	e4902004 	ldr	r2, [r0], #4
   125d0:	e1a0100e 	mov	r1, lr
   125d4:	e4812004 	str	r2, [r1], #4
   125d8:	e59c3004 	ldr	r3, [ip, #4]
   125dc:	e58e3004 	str	r3, [lr, #4]
   125e0:	e5902004 	ldr	r2, [r0, #4]
   125e4:	e5812004 	str	r2, [r1, #4]
   125e8:	e1a0100a 	mov	r1, sl
   125ec:	e59d0000 	ldr	r0, [sp]
   125f0:	ebfff9b8 	bl	10cd8 <_free_r>
   125f4:	e59d0000 	ldr	r0, [sp]
   125f8:	ebffe6f4 	bl	c1d0 <__malloc_unlock>
   125fc:	eaffffbe 	b	124fc <_realloc_r+0x1dc>
   12600:	e0849002 	add	r9, r4, r2
   12604:	e159000e 	cmp	r9, lr
   12608:	baffffdc 	blt	12580 <_realloc_r+0x260>
   1260c:	e59d0008 	ldr	r0, [sp, #8]
   12610:	e2444004 	sub	r4, r4, #4	; 0x4
   12614:	e590200c 	ldr	r2, [r0, #12]
   12618:	e5903008 	ldr	r3, [r0, #8]
   1261c:	e3540024 	cmp	r4, #36	; 0x24
   12620:	e1a08000 	mov	r8, r0
   12624:	e5823008 	str	r3, [r2, #8]
   12628:	e583200c 	str	r2, [r3, #12]
   1262c:	e2805008 	add	r5, r0, #8	; 0x8
   12630:	8a00005e 	bhi	127b0 <_realloc_r+0x490>
   12634:	e3540013 	cmp	r4, #19	; 0x13
   12638:	e1a0c00a 	mov	ip, sl
   1263c:	e1a0e005 	mov	lr, r5
   12640:	9a000011 	bls	1268c <_realloc_r+0x36c>
   12644:	e1a0000a 	mov	r0, sl
   12648:	e4903004 	ldr	r3, [r0], #4
   1264c:	e5883008 	str	r3, [r8, #8]
   12650:	e59a2004 	ldr	r2, [sl, #4]
   12654:	e354001b 	cmp	r4, #27	; 0x1b
   12658:	e588200c 	str	r2, [r8, #12]
   1265c:	e288e010 	add	lr, r8, #16	; 0x10
   12660:	e280c004 	add	ip, r0, #4	; 0x4
   12664:	9a000008 	bls	1268c <_realloc_r+0x36c>
   12668:	e5903004 	ldr	r3, [r0, #4]
   1266c:	e5883010 	str	r3, [r8, #16]
   12670:	e59c2004 	ldr	r2, [ip, #4]
   12674:	e28c3004 	add	r3, ip, #4	; 0x4
   12678:	e3540024 	cmp	r4, #36	; 0x24
   1267c:	e5882014 	str	r2, [r8, #20]
   12680:	e288e018 	add	lr, r8, #24	; 0x18
   12684:	e283c004 	add	ip, r3, #4	; 0x4
   12688:	0a0000a3 	beq	1291c <_realloc_r+0x5fc>
   1268c:	e1a0200c 	mov	r2, ip
   12690:	e4921004 	ldr	r1, [r2], #4
   12694:	e1a0000e 	mov	r0, lr
   12698:	e4801004 	str	r1, [r0], #4
   1269c:	e59c3004 	ldr	r3, [ip, #4]
   126a0:	e58e3004 	str	r3, [lr, #4]
   126a4:	e59dc008 	ldr	ip, [sp, #8]
   126a8:	e5921004 	ldr	r1, [r2, #4]
   126ac:	e1a07009 	mov	r7, r9
   126b0:	e1a04005 	mov	r4, r5
   126b4:	e5801004 	str	r1, [r0, #4]
   126b8:	eaffff80 	b	124c0 <_realloc_r+0x1a0>
   126bc:	e59d1000 	ldr	r1, [sp]
   126c0:	e3a0300c 	mov	r3, #12	; 0xc
   126c4:	e3a06000 	mov	r6, #0	; 0x0
   126c8:	e5813000 	str	r3, [r1]
   126cc:	eaffff8a 	b	124fc <_realloc_r+0x1dc>
   126d0:	e5903004 	ldr	r3, [r0, #4]
   126d4:	e59d1004 	ldr	r1, [sp, #4]
   126d8:	e3c3c003 	bic	ip, r3, #3	; 0x3
   126dc:	e084200c 	add	r2, r4, ip
   126e0:	e2813010 	add	r3, r1, #16	; 0x10
   126e4:	e1520003 	cmp	r2, r3
   126e8:	baffff37 	blt	123cc <_realloc_r+0xac>
   126ec:	e0613002 	rsb	r3, r1, r2
   126f0:	e3833001 	orr	r3, r3, #1	; 0x1
   126f4:	e0851001 	add	r1, r5, r1
   126f8:	e5813004 	str	r3, [r1, #4]
   126fc:	e5952004 	ldr	r2, [r5, #4]
   12700:	e59d3004 	ldr	r3, [sp, #4]
   12704:	e2022001 	and	r2, r2, #1	; 0x1
   12708:	e1832002 	orr	r2, r3, r2
   1270c:	e5852004 	str	r2, [r5, #4]
   12710:	e59f223c 	ldr	r2, [pc, #572]	; 12954 <prog+0x1290c>
   12714:	e59d0000 	ldr	r0, [sp]
   12718:	e5821008 	str	r1, [r2, #8]
   1271c:	ebffe6ab 	bl	c1d0 <__malloc_unlock>
   12720:	e2856008 	add	r6, r5, #8	; 0x8
   12724:	eaffff74 	b	124fc <_realloc_r+0x1dc>
   12728:	e1a0400a 	mov	r4, sl
   1272c:	e4943004 	ldr	r3, [r4], #4
   12730:	e1a00006 	mov	r0, r6
   12734:	e4803004 	str	r3, [r0], #4
   12738:	e59a2004 	ldr	r2, [sl, #4]
   1273c:	e351001b 	cmp	r1, #27	; 0x1b
   12740:	e5862004 	str	r2, [r6, #4]
   12744:	e280e004 	add	lr, r0, #4	; 0x4
   12748:	e284c004 	add	ip, r4, #4	; 0x4
   1274c:	9affff9d 	bls	125c8 <_realloc_r+0x2a8>
   12750:	e5943004 	ldr	r3, [r4, #4]
   12754:	e5803004 	str	r3, [r0, #4]
   12758:	e59c2004 	ldr	r2, [ip, #4]
   1275c:	e3510024 	cmp	r1, #36	; 0x24
   12760:	e28c3004 	add	r3, ip, #4	; 0x4
   12764:	e28e1004 	add	r1, lr, #4	; 0x4
   12768:	e58e2004 	str	r2, [lr, #4]
   1276c:	e283c004 	add	ip, r3, #4	; 0x4
   12770:	e281e004 	add	lr, r1, #4	; 0x4
   12774:	1affff93 	bne	125c8 <_realloc_r+0x2a8>
   12778:	e5933004 	ldr	r3, [r3, #4]
   1277c:	e5813004 	str	r3, [r1, #4]
   12780:	e59c2004 	ldr	r2, [ip, #4]
   12784:	e28cc008 	add	ip, ip, #8	; 0x8
   12788:	e58e2004 	str	r2, [lr, #4]
   1278c:	e28ee008 	add	lr, lr, #8	; 0x8
   12790:	eaffff8c 	b	125c8 <_realloc_r+0x2a8>
   12794:	e1a02004 	mov	r2, r4
   12798:	e1a0100a 	mov	r1, sl
   1279c:	e1a00005 	mov	r0, r5
   127a0:	ebfffbb3 	bl	11674 <memmove>
   127a4:	e1a04005 	mov	r4, r5
   127a8:	e1a0c008 	mov	ip, r8
   127ac:	eaffff43 	b	124c0 <_realloc_r+0x1a0>
   127b0:	e1a02004 	mov	r2, r4
   127b4:	e1a0100a 	mov	r1, sl
   127b8:	e1a00005 	mov	r0, r5
   127bc:	ebfffbac 	bl	11674 <memmove>
   127c0:	e1a07009 	mov	r7, r9
   127c4:	e1a04005 	mov	r4, r5
   127c8:	e1a0c008 	mov	ip, r8
   127cc:	eaffff3b 	b	124c0 <_realloc_r+0x1a0>
   127d0:	e1a02001 	mov	r2, r1
   127d4:	e1a0100a 	mov	r1, sl
   127d8:	ebfffba5 	bl	11674 <memmove>
   127dc:	eaffff81 	b	125e8 <_realloc_r+0x2c8>
   127e0:	e59d0004 	ldr	r0, [sp, #4]
   127e4:	e0849002 	add	r9, r4, r2
   127e8:	e08c7009 	add	r7, ip, r9
   127ec:	e2803010 	add	r3, r0, #16	; 0x10
   127f0:	e1570003 	cmp	r7, r3
   127f4:	baffff82 	blt	12604 <_realloc_r+0x2e4>
   127f8:	e59d1008 	ldr	r1, [sp, #8]
   127fc:	e2444004 	sub	r4, r4, #4	; 0x4
   12800:	e591200c 	ldr	r2, [r1, #12]
   12804:	e5913008 	ldr	r3, [r1, #8]
   12808:	e3540024 	cmp	r4, #36	; 0x24
   1280c:	e5823008 	str	r3, [r2, #8]
   12810:	e583200c 	str	r2, [r3, #12]
   12814:	e2816008 	add	r6, r1, #8	; 0x8
   12818:	8a000033 	bhi	128ec <_realloc_r+0x5cc>
   1281c:	e3540013 	cmp	r4, #19	; 0x13
   12820:	e1a0c00a 	mov	ip, sl
   12824:	e1a0e006 	mov	lr, r6
   12828:	9a000011 	bls	12874 <_realloc_r+0x554>
   1282c:	e1a0000a 	mov	r0, sl
   12830:	e4903004 	ldr	r3, [r0], #4
   12834:	e5813008 	str	r3, [r1, #8]
   12838:	e59a2004 	ldr	r2, [sl, #4]
   1283c:	e354001b 	cmp	r4, #27	; 0x1b
   12840:	e581200c 	str	r2, [r1, #12]
   12844:	e281e010 	add	lr, r1, #16	; 0x10
   12848:	e280c004 	add	ip, r0, #4	; 0x4
   1284c:	9a000008 	bls	12874 <_realloc_r+0x554>
   12850:	e5903004 	ldr	r3, [r0, #4]
   12854:	e5813010 	str	r3, [r1, #16]
   12858:	e59c2004 	ldr	r2, [ip, #4]
   1285c:	e28c3004 	add	r3, ip, #4	; 0x4
   12860:	e3540024 	cmp	r4, #36	; 0x24
   12864:	e5812014 	str	r2, [r1, #20]
   12868:	e281e018 	add	lr, r1, #24	; 0x18
   1286c:	e283c004 	add	ip, r3, #4	; 0x4
   12870:	0a000030 	beq	12938 <_realloc_r+0x618>
   12874:	e1a0000c 	mov	r0, ip
   12878:	e4902004 	ldr	r2, [r0], #4
   1287c:	e1a0100e 	mov	r1, lr
   12880:	e4812004 	str	r2, [r1], #4
   12884:	e59c3004 	ldr	r3, [ip, #4]
   12888:	e58e3004 	str	r3, [lr, #4]
   1288c:	e5902004 	ldr	r2, [r0, #4]
   12890:	e5812004 	str	r2, [r1, #4]
   12894:	e59d2004 	ldr	r2, [sp, #4]
   12898:	e59d0008 	ldr	r0, [sp, #8]
   1289c:	e0623007 	rsb	r3, r2, r7
   128a0:	e0801002 	add	r1, r0, r2
   128a4:	e3833001 	orr	r3, r3, #1	; 0x1
   128a8:	e5813004 	str	r3, [r1, #4]
   128ac:	e5902004 	ldr	r2, [r0, #4]
   128b0:	e59d3004 	ldr	r3, [sp, #4]
   128b4:	e2022001 	and	r2, r2, #1	; 0x1
   128b8:	e1832002 	orr	r2, r3, r2
   128bc:	e5802004 	str	r2, [r0, #4]
   128c0:	e59f208c 	ldr	r2, [pc, #140]	; 12954 <prog+0x1290c>
   128c4:	e59d0000 	ldr	r0, [sp]
   128c8:	e5821008 	str	r1, [r2, #8]
   128cc:	ebffe63f 	bl	c1d0 <__malloc_unlock>
   128d0:	eaffff09 	b	124fc <_realloc_r+0x1dc>
   128d4:	e5923004 	ldr	r3, [r2, #4]
   128d8:	e3c33003 	bic	r3, r3, #3	; 0x3
   128dc:	e0847003 	add	r7, r4, r3
   128e0:	e1a0c005 	mov	ip, r5
   128e4:	e2854008 	add	r4, r5, #8	; 0x8
   128e8:	eafffef4 	b	124c0 <_realloc_r+0x1a0>
   128ec:	e1a0100a 	mov	r1, sl
   128f0:	e1a02004 	mov	r2, r4
   128f4:	e1a00006 	mov	r0, r6
   128f8:	ebfffb5d 	bl	11674 <memmove>
   128fc:	eaffffe4 	b	12894 <_realloc_r+0x574>
   12900:	e5933004 	ldr	r3, [r3, #4]
   12904:	e5883018 	str	r3, [r8, #24]
   12908:	e59c2004 	ldr	r2, [ip, #4]
   1290c:	e288e020 	add	lr, r8, #32	; 0x20
   12910:	e28cc008 	add	ip, ip, #8	; 0x8
   12914:	e588201c 	str	r2, [r8, #28]
   12918:	eafffede 	b	12498 <_realloc_r+0x178>
   1291c:	e5933004 	ldr	r3, [r3, #4]
   12920:	e5883018 	str	r3, [r8, #24]
   12924:	e59c2004 	ldr	r2, [ip, #4]
   12928:	e288e020 	add	lr, r8, #32	; 0x20
   1292c:	e28cc008 	add	ip, ip, #8	; 0x8
   12930:	e588201c 	str	r2, [r8, #28]
   12934:	eaffff54 	b	1268c <_realloc_r+0x36c>
   12938:	e5933004 	ldr	r3, [r3, #4]
   1293c:	e5813018 	str	r3, [r1, #24]
   12940:	e59c2004 	ldr	r2, [ip, #4]
   12944:	e281e020 	add	lr, r1, #32	; 0x20
   12948:	e28cc008 	add	ip, ip, #8	; 0x8
   1294c:	e581201c 	str	r2, [r1, #28]
   12950:	eaffffc7 	b	12874 <_realloc_r+0x554>
   12954:	40000418 	andmi	r0, r0, r8, lsl r4

00012958 <isinf>:
   12958:	e2612000 	rsb	r2, r1, #0	; 0x0
   1295c:	e1822001 	orr	r2, r2, r1
   12960:	e3c03102 	bic	r3, r0, #-2147483648	; 0x80000000
   12964:	e3a0047f 	mov	r0, #2130706432	; 0x7f000000
   12968:	e1833fa2 	orr	r3, r3, r2, lsr #31
   1296c:	e280060f 	add	r0, r0, #15728640	; 0xf00000
   12970:	e0630000 	rsb	r0, r3, r0
   12974:	e52d4004 	str	r4, [sp, #-4]!
   12978:	e2602000 	rsb	r2, r0, #0	; 0x0
   1297c:	e1800002 	orr	r0, r0, r2
   12980:	e1a00fa0 	mov	r0, r0, lsr #31
   12984:	e1a04001 	mov	r4, r1
   12988:	e2600001 	rsb	r0, r0, #1	; 0x1
   1298c:	e8bd0010 	ldmia	sp!, {r4}
   12990:	e12fff1e 	bx	lr

00012994 <isnan>:
   12994:	e52d4004 	str	r4, [sp, #-4]!
   12998:	e2612000 	rsb	r2, r1, #0	; 0x0
   1299c:	e1822001 	orr	r2, r2, r1
   129a0:	e3c03102 	bic	r3, r0, #-2147483648	; 0x80000000
   129a4:	e3a0047f 	mov	r0, #2130706432	; 0x7f000000
   129a8:	e1833fa2 	orr	r3, r3, r2, lsr #31
   129ac:	e280060f 	add	r0, r0, #15728640	; 0xf00000
   129b0:	e0630000 	rsb	r0, r3, r0
   129b4:	e1a04001 	mov	r4, r1
   129b8:	e1a00fa0 	mov	r0, r0, lsr #31
   129bc:	e8bd0010 	ldmia	sp!, {r4}
   129c0:	e12fff1e 	bx	lr

000129c4 <findslot>:
   129c4:	e59f2024 	ldr	r2, [pc, #36]	; 129f0 <prog+0x129a8>
   129c8:	e1a01000 	mov	r1, r0
   129cc:	e3a00000 	mov	r0, #0	; 0x0
   129d0:	e5923000 	ldr	r3, [r2]
   129d4:	e1530001 	cmp	r3, r1
   129d8:	e2822008 	add	r2, r2, #8	; 0x8
   129dc:	012fff1e 	bxeq	lr
   129e0:	e2800001 	add	r0, r0, #1	; 0x1
   129e4:	e3500014 	cmp	r0, #20	; 0x14
   129e8:	1afffff8 	bne	129d0 <findslot+0xc>
   129ec:	e12fff1e 	bx	lr
   129f0:	400015b8 	strmih	r1, [r0], -r8

000129f4 <_getpid>:
   129f4:	e3a00001 	mov	r0, #1	; 0x1
   129f8:	e12fff1e 	bx	lr

000129fc <_link>:
   129fc:	e3e00000 	mvn	r0, #0	; 0x0
   12a00:	e12fff1e 	bx	lr

00012a04 <_unlink>:
   12a04:	e3e00000 	mvn	r0, #0	; 0x0
   12a08:	e12fff1e 	bx	lr

00012a0c <_raise>:
   12a0c:	e12fff1e 	bx	lr

00012a10 <isatty>:
   12a10:	e3a00001 	mov	r0, #1	; 0x1
   12a14:	e12fff1e 	bx	lr

00012a18 <_rename>:
   12a18:	e52de004 	str	lr, [sp, #-4]!
   12a1c:	ebffe27c 	bl	b414 <__errno>
   12a20:	e3a03058 	mov	r3, #88	; 0x58
   12a24:	e5803000 	str	r3, [r0]
   12a28:	e3e00000 	mvn	r0, #0	; 0x0
   12a2c:	e49df004 	ldr	pc, [sp], #4

00012a30 <_system>:
   12a30:	e3500000 	cmp	r0, #0	; 0x0
   12a34:	e52de004 	str	lr, [sp, #-4]!
   12a38:	049df004 	ldreq	pc, [sp], #4
   12a3c:	ebffe274 	bl	b414 <__errno>
   12a40:	e3a03058 	mov	r3, #88	; 0x58
   12a44:	e5803000 	str	r3, [r0]
   12a48:	e3e00000 	mvn	r0, #0	; 0x0
   12a4c:	e49df004 	ldr	pc, [sp], #4

00012a50 <_sbrk>:
   12a50:	e59f1044 	ldr	r1, [pc, #68]	; 12a9c <prog+0x12a54>
   12a54:	e5913000 	ldr	r3, [r1]
   12a58:	e52de004 	str	lr, [sp, #-4]!
   12a5c:	e3530000 	cmp	r3, #0	; 0x0
   12a60:	059f3038 	ldreq	r3, [pc, #56]	; 12aa0 <prog+0x12a58>
   12a64:	e0830000 	add	r0, r3, r0
   12a68:	05813000 	streq	r3, [r1]
   12a6c:	e150000d 	cmp	r0, sp
   12a70:	e1a02003 	mov	r2, r3
   12a74:	95810000 	strls	r0, [r1]
   12a78:	8a000001 	bhi	12a84 <_sbrk+0x34>
   12a7c:	e1a00002 	mov	r0, r2
   12a80:	e49df004 	ldr	pc, [sp], #4
   12a84:	ebffe262 	bl	b414 <__errno>
   12a88:	e3e02000 	mvn	r2, #0	; 0x0
   12a8c:	e3a0300c 	mov	r3, #12	; 0xc
   12a90:	e5803000 	str	r3, [r0]
   12a94:	e1a00002 	mov	r0, r2
   12a98:	e49df004 	ldr	pc, [sp], #4
   12a9c:	400015a8 	andmi	r1, r0, r8, lsr #11
   12aa0:	400036a8 	andmi	r3, r0, r8, lsr #13

00012aa4 <_fstat>:
   12aa4:	e92d4010 	stmdb	sp!, {r4, lr}
   12aa8:	e1a00001 	mov	r0, r1
   12aac:	e1a04001 	mov	r4, r1
   12ab0:	e3a0203c 	mov	r2, #60	; 0x3c
   12ab4:	e3a01000 	mov	r1, #0	; 0x0
   12ab8:	ebffe59d 	bl	c134 <memset>
   12abc:	e3a03b01 	mov	r3, #1024	; 0x400
   12ac0:	e3a02a02 	mov	r2, #8192	; 0x2000
   12ac4:	e3a00000 	mov	r0, #0	; 0x0
   12ac8:	e584302c 	str	r3, [r4, #44]
   12acc:	e5842004 	str	r2, [r4, #4]
   12ad0:	e8bd8010 	ldmia	sp!, {r4, pc}

00012ad4 <remap_handle>:
   12ad4:	e59f3064 	ldr	r3, [pc, #100]	; 12b40 <prog+0x12af8>
   12ad8:	e5932000 	ldr	r2, [r3]
   12adc:	e3520000 	cmp	r2, #0	; 0x0
   12ae0:	e92d4010 	stmdb	sp!, {r4, lr}
   12ae4:	e1a04000 	mov	r4, r0
   12ae8:	0a000002 	beq	12af8 <remap_handle+0x24>
   12aec:	e5923038 	ldr	r3, [r2, #56]
   12af0:	e3530000 	cmp	r3, #0	; 0x0
   12af4:	0a00000b 	beq	12b28 <remap_handle+0x54>
   12af8:	e3540000 	cmp	r4, #0	; 0x0
   12afc:	1a000002 	bne	12b0c <remap_handle+0x38>
   12b00:	e59f303c 	ldr	r3, [pc, #60]	; 12b44 <prog+0x12afc>
   12b04:	e5930000 	ldr	r0, [r3]
   12b08:	e8bd8010 	ldmia	sp!, {r4, pc}
   12b0c:	e3540001 	cmp	r4, #1	; 0x1
   12b10:	0a000007 	beq	12b34 <remap_handle+0x60>
   12b14:	e3540002 	cmp	r4, #2	; 0x2
   12b18:	059f3028 	ldreq	r3, [pc, #40]	; 12b48 <prog+0x12b00>
   12b1c:	05930000 	ldreq	r0, [r3]
   12b20:	12440020 	subne	r0, r4, #32	; 0x20
   12b24:	e8bd8010 	ldmia	sp!, {r4, pc}
   12b28:	e1a00002 	mov	r0, r2
   12b2c:	ebffe28f 	bl	b570 <__sinit>
   12b30:	eafffff0 	b	12af8 <remap_handle+0x24>
   12b34:	e59f3010 	ldr	r3, [pc, #16]	; 12b4c <prog+0x12b04>
   12b38:	e5930000 	ldr	r0, [r3]
   12b3c:	e8bd8010 	ldmia	sp!, {r4, pc}
   12b40:	40000014 	andmi	r0, r0, r4, lsl r0
   12b44:	400015ac 	andmi	r1, r0, ip, lsr #11
   12b48:	400015b4 	strmih	r1, [r0], -r4
   12b4c:	400015b0 	strmih	r1, [r0], -r0

00012b50 <initialise_monitor_handles>:
   12b50:	e92d45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
   12b54:	e59f709c 	ldr	r7, [pc, #156]	; 12bf8 <prog+0x12bb0>
   12b58:	e24dd00c 	sub	sp, sp, #12	; 0xc
   12b5c:	e3a08003 	mov	r8, #3	; 0x3
   12b60:	e3a03000 	mov	r3, #0	; 0x0
   12b64:	e58d7000 	str	r7, [sp]
   12b68:	e3a06001 	mov	r6, #1	; 0x1
   12b6c:	e58d8008 	str	r8, [sp, #8]
   12b70:	e1a0500d 	mov	r5, sp
   12b74:	e58d3004 	str	r3, [sp, #4]
   12b78:	e1a00006 	mov	r0, r6
   12b7c:	e1a0100d 	mov	r1, sp
   12b80:	ef123456 	swi	0x00123456
   12b84:	e1a04000 	mov	r4, r0
   12b88:	e59fa06c 	ldr	sl, [pc, #108]	; 12bfc <prog+0x12bb4>
   12b8c:	e58a4000 	str	r4, [sl]
   12b90:	e3a04004 	mov	r4, #4	; 0x4
   12b94:	e58d7000 	str	r7, [sp]
   12b98:	e58d8008 	str	r8, [sp, #8]
   12b9c:	e58d4004 	str	r4, [sp, #4]
   12ba0:	e1a00006 	mov	r0, r6
   12ba4:	e1a0100d 	mov	r1, sp
   12ba8:	ef123456 	swi	0x00123456
   12bac:	e1a04000 	mov	r4, r0
   12bb0:	e59f3048 	ldr	r3, [pc, #72]	; 12c00 <prog+0x12bb8>
   12bb4:	e59f2048 	ldr	r2, [pc, #72]	; 12c04 <prog+0x12bbc>
   12bb8:	e59f0048 	ldr	r0, [pc, #72]	; 12c08 <prog+0x12bc0>
   12bbc:	e5834000 	str	r4, [r3]
   12bc0:	e5824000 	str	r4, [r2]
   12bc4:	e3e03000 	mvn	r3, #0	; 0x0
   12bc8:	e28020a0 	add	r2, r0, #160	; 0xa0
   12bcc:	e4803008 	str	r3, [r0], #8
   12bd0:	e1500002 	cmp	r0, r2
   12bd4:	1afffffc 	bne	12bcc <initialise_monitor_handles+0x7c>
   12bd8:	e59a3000 	ldr	r3, [sl]
   12bdc:	e24020a0 	sub	r2, r0, #160	; 0xa0
   12be0:	e3a01000 	mov	r1, #0	; 0x0
   12be4:	e50030a0 	str	r3, [r0, #-160]
   12be8:	e582100c 	str	r1, [r2, #12]
   12bec:	e9820012 	stmib	r2, {r1, r4}
   12bf0:	e28dd00c 	add	sp, sp, #12	; 0xc
   12bf4:	e8bd85f0 	ldmia	sp!, {r4, r5, r6, r7, r8, sl, pc}
   12bf8:	00014f20 	andeq	r4, r1, r0, lsr #30
   12bfc:	400015ac 	andmi	r1, r0, ip, lsr #11
   12c00:	400015b4 	strmih	r1, [r0], -r4
   12c04:	400015b0 	strmih	r1, [r0], -r0
   12c08:	400015b8 	strmih	r1, [r0], -r8

00012c0c <_times>:
   12c0c:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
   12c10:	e1a05000 	mov	r5, r0
   12c14:	e3a04010 	mov	r4, #16	; 0x10
   12c18:	e3a06000 	mov	r6, #0	; 0x0
   12c1c:	e1a00004 	mov	r0, r4
   12c20:	e1a01006 	mov	r1, r6
   12c24:	ef123456 	swi	0x00123456
   12c28:	e1a04000 	mov	r4, r0
   12c2c:	e1550006 	cmp	r5, r6
   12c30:	e1a00004 	mov	r0, r4
   12c34:	1585600c 	strne	r6, [r5, #12]
   12c38:	15854000 	strne	r4, [r5]
   12c3c:	15856004 	strne	r6, [r5, #4]
   12c40:	15856008 	strne	r6, [r5, #8]
   12c44:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}

00012c48 <_gettimeofday>:
   12c48:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
   12c4c:	e2507000 	subs	r7, r0, #0	; 0x0
   12c50:	e1a06001 	mov	r6, r1
   12c54:	0a000007 	beq	12c78 <_gettimeofday+0x30>
   12c58:	e3a05011 	mov	r5, #17	; 0x11
   12c5c:	e3a04000 	mov	r4, #0	; 0x0
   12c60:	e1a00005 	mov	r0, r5
   12c64:	e1a01004 	mov	r1, r4
   12c68:	ef123456 	swi	0x00123456
   12c6c:	e1a05000 	mov	r5, r0
   12c70:	e5874004 	str	r4, [r7, #4]
   12c74:	e5875000 	str	r5, [r7]
   12c78:	e3a03000 	mov	r3, #0	; 0x0
   12c7c:	e1560003 	cmp	r6, r3
   12c80:	e3a00000 	mov	r0, #0	; 0x0
   12c84:	15863004 	strne	r3, [r6, #4]
   12c88:	15863000 	strne	r3, [r6]
   12c8c:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}

00012c90 <_kill>:
   12c90:	e92d4030 	stmdb	sp!, {r4, r5, lr}
   12c94:	e3a05802 	mov	r5, #131072	; 0x20000
   12c98:	e2855026 	add	r5, r5, #38	; 0x26
   12c9c:	e3a04018 	mov	r4, #24	; 0x18
   12ca0:	e1a00004 	mov	r0, r4
   12ca4:	e1a01005 	mov	r1, r5
   12ca8:	ef123456 	swi	0x00123456
   12cac:	e1a04000 	mov	r4, r0
   12cb0:	e1a00004 	mov	r0, r4
   12cb4:	e8bd8030 	ldmia	sp!, {r4, r5, pc}

00012cb8 <_exit>:
   12cb8:	e3a05802 	mov	r5, #131072	; 0x20000
   12cbc:	e2855026 	add	r5, r5, #38	; 0x26
   12cc0:	e3a04018 	mov	r4, #24	; 0x18
   12cc4:	e1a00004 	mov	r0, r4
   12cc8:	e1a01005 	mov	r1, r5
   12ccc:	ef123456 	swi	0x00123456
   12cd0:	e1a04000 	mov	r4, r0
   12cd4:	e12fff1e 	bx	lr

00012cd8 <_swiclose>:
   12cd8:	e92d4030 	stmdb	sp!, {r4, r5, lr}
   12cdc:	e24dd004 	sub	sp, sp, #4	; 0x4
   12ce0:	ebffff7b 	bl	12ad4 <remap_handle>
   12ce4:	e58d0000 	str	r0, [sp]
   12ce8:	ebffff35 	bl	129c4 <findslot>
   12cec:	e3500014 	cmp	r0, #20	; 0x14
   12cf0:	159f3028 	ldrne	r3, [pc, #40]	; 12d20 <prog+0x12cd8>
   12cf4:	13e02000 	mvnne	r2, #0	; 0x0
   12cf8:	17832180 	strne	r2, [r3, r0, lsl #3]
   12cfc:	e3a04002 	mov	r4, #2	; 0x2
   12d00:	e1a0500d 	mov	r5, sp
   12d04:	e1a00004 	mov	r0, r4
   12d08:	e1a0100d 	mov	r1, sp
   12d0c:	ef123456 	swi	0x00123456
   12d10:	e1a04000 	mov	r4, r0
   12d14:	e1a00004 	mov	r0, r4
   12d18:	e28dd004 	add	sp, sp, #4	; 0x4
   12d1c:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
   12d20:	400015b8 	strmih	r1, [r0], -r8

00012d24 <_swiwrite>:
   12d24:	e92d4030 	stmdb	sp!, {r4, r5, lr}
   12d28:	e24dd00c 	sub	sp, sp, #12	; 0xc
   12d2c:	e1a04001 	mov	r4, r1
   12d30:	e1a05002 	mov	r5, r2
   12d34:	ebffff66 	bl	12ad4 <remap_handle>
   12d38:	e88d0031 	stmia	sp, {r0, r4, r5}
   12d3c:	e3a04005 	mov	r4, #5	; 0x5
   12d40:	e1a0500d 	mov	r5, sp
   12d44:	e1a00004 	mov	r0, r4
   12d48:	e1a0100d 	mov	r1, sp
   12d4c:	ef123456 	swi	0x00123456
   12d50:	e1a04000 	mov	r4, r0
   12d54:	e1a00004 	mov	r0, r4
   12d58:	e28dd00c 	add	sp, sp, #12	; 0xc
   12d5c:	e8bd8030 	ldmia	sp!, {r4, r5, pc}

00012d60 <_swilseek>:
   12d60:	e92d41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12d64:	e24dd008 	sub	sp, sp, #8	; 0x8
   12d68:	e1a04002 	mov	r4, r2
   12d6c:	e1a05001 	mov	r5, r1
   12d70:	e1a08000 	mov	r8, r0
   12d74:	ebffff56 	bl	12ad4 <remap_handle>
   12d78:	e1a07000 	mov	r7, r0
   12d7c:	ebffff10 	bl	129c4 <findslot>
   12d80:	e3540001 	cmp	r4, #1	; 0x1
   12d84:	e1a06000 	mov	r6, r0
   12d88:	0a00001a 	beq	12df8 <_swilseek+0x98>
   12d8c:	e3540002 	cmp	r4, #2	; 0x2
   12d90:	11a0700d 	movne	r7, sp
   12d94:	0a00001f 	beq	12e18 <_swilseek+0xb8>
   12d98:	e1a00008 	mov	r0, r8
   12d9c:	ebffff4c 	bl	12ad4 <remap_handle>
   12da0:	e3a0400a 	mov	r4, #10	; 0xa
   12da4:	e88d0021 	stmia	sp, {r0, r5}
   12da8:	e1a00004 	mov	r0, r4
   12dac:	e1a01007 	mov	r1, r7
   12db0:	ef123456 	swi	0x00123456
   12db4:	e1a04000 	mov	r4, r0
   12db8:	e2744001 	rsbs	r4, r4, #1	; 0x1
   12dbc:	33a04000 	movcc	r4, #0	; 0x0
   12dc0:	e3560014 	cmp	r6, #20	; 0x14
   12dc4:	03a03000 	moveq	r3, #0	; 0x0
   12dc8:	12043001 	andne	r3, r4, #1	; 0x1
   12dcc:	e3530000 	cmp	r3, #0	; 0x0
   12dd0:	159f3064 	ldrne	r3, [pc, #100]	; 12e3c <prog+0x12df4>
   12dd4:	10833186 	addne	r3, r3, r6, lsl #3
   12dd8:	15835004 	strne	r5, [r3, #4]
   12ddc:	e3540000 	cmp	r4, #0	; 0x0
   12de0:	0a000002 	beq	12df0 <_swilseek+0x90>
   12de4:	e1a00005 	mov	r0, r5
   12de8:	e28dd008 	add	sp, sp, #8	; 0x8
   12dec:	e8bd81f0 	ldmia	sp!, {r4, r5, r6, r7, r8, pc}
   12df0:	e3e05000 	mvn	r5, #0	; 0x0
   12df4:	eafffffa 	b	12de4 <_swilseek+0x84>
   12df8:	e3500014 	cmp	r0, #20	; 0x14
   12dfc:	0afffffb 	beq	12df0 <_swilseek+0x90>
   12e00:	e59f3034 	ldr	r3, [pc, #52]	; 12e3c <prog+0x12df4>
   12e04:	e0833180 	add	r3, r3, r0, lsl #3
   12e08:	e5932004 	ldr	r2, [r3, #4]
   12e0c:	e1a0700d 	mov	r7, sp
   12e10:	e0855002 	add	r5, r5, r2
   12e14:	eaffffdf 	b	12d98 <_swilseek+0x38>
   12e18:	e58d7000 	str	r7, [sp]
   12e1c:	e284400a 	add	r4, r4, #10	; 0xa
   12e20:	e1a0700d 	mov	r7, sp
   12e24:	e1a00004 	mov	r0, r4
   12e28:	e1a0100d 	mov	r1, sp
   12e2c:	ef123456 	swi	0x00123456
   12e30:	e1a04000 	mov	r4, r0
   12e34:	e0855004 	add	r5, r5, r4
   12e38:	eaffffd6 	b	12d98 <_swilseek+0x38>
   12e3c:	400015b8 	strmih	r1, [r0], -r8

00012e40 <error>:
   12e40:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
   12e44:	e1a07000 	mov	r7, r0
   12e48:	ebffe171 	bl	b414 <__errno>
   12e4c:	e3a04013 	mov	r4, #19	; 0x13
   12e50:	e1a06000 	mov	r6, r0
   12e54:	e3a05000 	mov	r5, #0	; 0x0
   12e58:	e1a00004 	mov	r0, r4
   12e5c:	e1a01005 	mov	r1, r5
   12e60:	ef123456 	swi	0x00123456
   12e64:	e1a04000 	mov	r4, r0
   12e68:	e1a00007 	mov	r0, r7
   12e6c:	e5864000 	str	r4, [r6]
   12e70:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}

00012e74 <_swiopen>:
   12e74:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
   12e78:	e1a07000 	mov	r7, r0
   12e7c:	e24dd00c 	sub	sp, sp, #12	; 0xc
   12e80:	e3e00000 	mvn	r0, #0	; 0x0
   12e84:	e1a05001 	mov	r5, r1
   12e88:	ebfffecd 	bl	129c4 <findslot>
   12e8c:	e3500014 	cmp	r0, #20	; 0x14
   12e90:	e1a06000 	mov	r6, r0
   12e94:	03e00000 	mvneq	r0, #0	; 0x0
   12e98:	0a000019 	beq	12f04 <_swiopen+0x90>
   12e9c:	e2054002 	and	r4, r5, #2	; 0x2
   12ea0:	e3150c02 	tst	r5, #512	; 0x200
   12ea4:	13844004 	orrne	r4, r4, #4	; 0x4
   12ea8:	e3150b01 	tst	r5, #1024	; 0x400
   12eac:	13844004 	orrne	r4, r4, #4	; 0x4
   12eb0:	e3150008 	tst	r5, #8	; 0x8
   12eb4:	13c43004 	bicne	r3, r4, #4	; 0x4
   12eb8:	e1a00007 	mov	r0, r7
   12ebc:	13834008 	orrne	r4, r3, #8	; 0x8
   12ec0:	e58d7000 	str	r7, [sp]
   12ec4:	ebffe62b 	bl	c778 <strlen>
   12ec8:	e3a05001 	mov	r5, #1	; 0x1
   12ecc:	e58d4004 	str	r4, [sp, #4]
   12ed0:	e58d0008 	str	r0, [sp, #8]
   12ed4:	e1a00005 	mov	r0, r5
   12ed8:	e1a0100d 	mov	r1, sp
   12edc:	ef123456 	swi	0x00123456
   12ee0:	e1a04000 	mov	r4, r0
   12ee4:	e3540000 	cmp	r4, #0	; 0x0
   12ee8:	ba000007 	blt	12f0c <_swiopen+0x98>
   12eec:	e59f1024 	ldr	r1, [pc, #36]	; 12f18 <prog+0x12ed0>
   12ef0:	e3a03000 	mov	r3, #0	; 0x0
   12ef4:	e0812186 	add	r2, r1, r6, lsl #3
   12ef8:	e5823004 	str	r3, [r2, #4]
   12efc:	e7814186 	str	r4, [r1, r6, lsl #3]
   12f00:	e2840020 	add	r0, r4, #32	; 0x20
   12f04:	e28dd00c 	add	sp, sp, #12	; 0xc
   12f08:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
   12f0c:	e1a00004 	mov	r0, r4
   12f10:	ebffffca 	bl	12e40 <error>
   12f14:	eafffffa 	b	12f04 <_swiopen+0x90>
   12f18:	400015b8 	strmih	r1, [r0], -r8

00012f1c <_write>:
   12f1c:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
   12f20:	e1a06002 	mov	r6, r2
   12f24:	e1a05001 	mov	r5, r1
   12f28:	e1a04000 	mov	r4, r0
   12f2c:	ebfffee8 	bl	12ad4 <remap_handle>
   12f30:	ebfffea3 	bl	129c4 <findslot>
   12f34:	e1a02006 	mov	r2, r6
   12f38:	e1a07000 	mov	r7, r0
   12f3c:	e1a01005 	mov	r1, r5
   12f40:	e1a00004 	mov	r0, r4
   12f44:	ebffff76 	bl	12d24 <_swiwrite>
   12f48:	e1a02000 	mov	r2, r0
   12f4c:	e3e00000 	mvn	r0, #0	; 0x0
   12f50:	e1520000 	cmp	r2, r0
   12f54:	11560002 	cmpne	r6, r2
   12f58:	0a000008 	beq	12f80 <_write+0x64>
   12f5c:	e59f3024 	ldr	r3, [pc, #36]	; 12f88 <prog+0x12f40>
   12f60:	e3570014 	cmp	r7, #20	; 0x14
   12f64:	e0831187 	add	r1, r3, r7, lsl #3
   12f68:	e0620006 	rsb	r0, r2, r6
   12f6c:	08bd80f0 	ldmeqia	sp!, {r4, r5, r6, r7, pc}
   12f70:	e5913004 	ldr	r3, [r1, #4]
   12f74:	e0833000 	add	r3, r3, r0
   12f78:	e5813004 	str	r3, [r1, #4]
   12f7c:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
   12f80:	e8bd40f0 	ldmia	sp!, {r4, r5, r6, r7, lr}
   12f84:	eaffffad 	b	12e40 <error>
   12f88:	400015b8 	strmih	r1, [r0], -r8

00012f8c <wrap>:
   12f8c:	e3700001 	cmn	r0, #1	; 0x1
   12f90:	112fff1e 	bxne	lr
   12f94:	eaffffa9 	b	12e40 <error>

00012f98 <_close>:
   12f98:	e52de004 	str	lr, [sp, #-4]!
   12f9c:	ebffff4d 	bl	12cd8 <_swiclose>
   12fa0:	e49de004 	ldr	lr, [sp], #4
   12fa4:	eafffff8 	b	12f8c <wrap>

00012fa8 <_open>:
   12fa8:	e92d000e 	stmdb	sp!, {r1, r2, r3}
   12fac:	e52de004 	str	lr, [sp, #-4]!
   12fb0:	e59d1004 	ldr	r1, [sp, #4]
   12fb4:	ebffffae 	bl	12e74 <_swiopen>
   12fb8:	ebfffff3 	bl	12f8c <wrap>
   12fbc:	e49de004 	ldr	lr, [sp], #4
   12fc0:	e28dd00c 	add	sp, sp, #12	; 0xc
   12fc4:	e12fff1e 	bx	lr

00012fc8 <_stat>:
   12fc8:	e92d4030 	stmdb	sp!, {r4, r5, lr}
   12fcc:	e1a04001 	mov	r4, r1
   12fd0:	e3a01000 	mov	r1, #0	; 0x0
   12fd4:	ebfffff3 	bl	12fa8 <_open>
   12fd8:	e2505000 	subs	r5, r0, #0	; 0x0
   12fdc:	e3a01000 	mov	r1, #0	; 0x0
   12fe0:	e3a0203c 	mov	r2, #60	; 0x3c
   12fe4:	e1a00004 	mov	r0, r4
   12fe8:	e3e03000 	mvn	r3, #0	; 0x0
   12fec:	ba000007 	blt	13010 <_stat+0x48>
   12ff0:	ebffe44f 	bl	c134 <memset>
   12ff4:	e3a03b01 	mov	r3, #1024	; 0x400
   12ff8:	e3a02c81 	mov	r2, #33024	; 0x8100
   12ffc:	e584302c 	str	r3, [r4, #44]
   13000:	e5842004 	str	r2, [r4, #4]
   13004:	e1a00005 	mov	r0, r5
   13008:	ebffff32 	bl	12cd8 <_swiclose>
   1300c:	e3a03000 	mov	r3, #0	; 0x0
   13010:	e1a00003 	mov	r0, r3
   13014:	e8bd8030 	ldmia	sp!, {r4, r5, pc}

00013018 <_lseek>:
   13018:	e52de004 	str	lr, [sp, #-4]!
   1301c:	ebffff4f 	bl	12d60 <_swilseek>
   13020:	e49de004 	ldr	lr, [sp], #4
   13024:	eaffffd8 	b	12f8c <wrap>

00013028 <_swiread>:
   13028:	e92d4030 	stmdb	sp!, {r4, r5, lr}
   1302c:	e24dd00c 	sub	sp, sp, #12	; 0xc
   13030:	e1a04001 	mov	r4, r1
   13034:	e1a05002 	mov	r5, r2
   13038:	ebfffea5 	bl	12ad4 <remap_handle>
   1303c:	e88d0031 	stmia	sp, {r0, r4, r5}
   13040:	e3a04006 	mov	r4, #6	; 0x6
   13044:	e1a0500d 	mov	r5, sp
   13048:	e1a00004 	mov	r0, r4
   1304c:	e1a0100d 	mov	r1, sp
   13050:	ef123456 	swi	0x00123456
   13054:	e1a04000 	mov	r4, r0
   13058:	e1a00004 	mov	r0, r4
   1305c:	e28dd00c 	add	sp, sp, #12	; 0xc
   13060:	e8bd8030 	ldmia	sp!, {r4, r5, pc}

00013064 <_read>:
   13064:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
   13068:	e1a06002 	mov	r6, r2
   1306c:	e1a05001 	mov	r5, r1
   13070:	e1a04000 	mov	r4, r0
   13074:	ebfffe96 	bl	12ad4 <remap_handle>
   13078:	ebfffe51 	bl	129c4 <findslot>
   1307c:	e1a01005 	mov	r1, r5
   13080:	e1a07000 	mov	r7, r0
   13084:	e1a02006 	mov	r2, r6
   13088:	e1a00004 	mov	r0, r4
   1308c:	ebffffe5 	bl	13028 <_swiread>
   13090:	e2501000 	subs	r1, r0, #0	; 0x0
   13094:	e3e00000 	mvn	r0, #0	; 0x0
   13098:	ba000008 	blt	130c0 <_read+0x5c>
   1309c:	e59f3024 	ldr	r3, [pc, #36]	; 130c8 <prog+0x13080>
   130a0:	e3570014 	cmp	r7, #20	; 0x14
   130a4:	e0832187 	add	r2, r3, r7, lsl #3
   130a8:	e0610006 	rsb	r0, r1, r6
   130ac:	08bd80f0 	ldmeqia	sp!, {r4, r5, r6, r7, pc}
   130b0:	e5923004 	ldr	r3, [r2, #4]
   130b4:	e0833000 	add	r3, r3, r0
   130b8:	e5823004 	str	r3, [r2, #4]
   130bc:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
   130c0:	e8bd40f0 	ldmia	sp!, {r4, r5, r6, r7, lr}
   130c4:	eaffff5d 	b	12e40 <error>
   130c8:	400015b8 	strmih	r1, [r0], -r8

000130cc <_calloc_r>:
   130cc:	e92d4010 	stmdb	sp!, {r4, lr}
   130d0:	e0010192 	mul	r1, r2, r1
   130d4:	ebffe1ec 	bl	b88c <_malloc_r>
   130d8:	e2504000 	subs	r4, r0, #0	; 0x0
   130dc:	0a00000f 	beq	13120 <_calloc_r+0x54>
   130e0:	e5143004 	ldr	r3, [r4, #-4]
   130e4:	e3c33003 	bic	r3, r3, #3	; 0x3
   130e8:	e2433004 	sub	r3, r3, #4	; 0x4
   130ec:	e3a0c000 	mov	ip, #0	; 0x0
   130f0:	e3530024 	cmp	r3, #36	; 0x24
   130f4:	e1a02003 	mov	r2, r3
   130f8:	e1a0100c 	mov	r1, ip
   130fc:	8a000017 	bhi	13160 <_calloc_r+0x94>
   13100:	e3530013 	cmp	r3, #19	; 0x13
   13104:	e1a01004 	mov	r1, r4
   13108:	e1a02004 	mov	r2, r4
   1310c:	8a000005 	bhi	13128 <_calloc_r+0x5c>
   13110:	e1a03002 	mov	r3, r2
   13114:	e483c004 	str	ip, [r3], #4
   13118:	e582c004 	str	ip, [r2, #4]
   1311c:	e583c004 	str	ip, [r3, #4]
   13120:	e1a00004 	mov	r0, r4
   13124:	e8bd8010 	ldmia	sp!, {r4, pc}
   13128:	e481c004 	str	ip, [r1], #4
   1312c:	e353001b 	cmp	r3, #27	; 0x1b
   13130:	e2812004 	add	r2, r1, #4	; 0x4
   13134:	e584c004 	str	ip, [r4, #4]
   13138:	e282e004 	add	lr, r2, #4	; 0x4
   1313c:	9afffff3 	bls	13110 <_calloc_r+0x44>
   13140:	e3530024 	cmp	r3, #36	; 0x24
   13144:	e581c004 	str	ip, [r1, #4]
   13148:	e582c004 	str	ip, [r2, #4]
   1314c:	e28e2004 	add	r2, lr, #4	; 0x4
   13150:	058ec004 	streq	ip, [lr, #4]
   13154:	0582c004 	streq	ip, [r2, #4]
   13158:	02822008 	addeq	r2, r2, #8	; 0x8
   1315c:	eaffffeb 	b	13110 <_calloc_r+0x44>
   13160:	ebffe3f3 	bl	c134 <memset>
   13164:	e1a00004 	mov	r0, r4
   13168:	e8bd8010 	ldmia	sp!, {r4, pc}

0001316c <isnan>:
   1316c:	e5900000 	ldr	r0, [r0]
   13170:	e3500001 	cmp	r0, #1	; 0x1
   13174:	83a00000 	movhi	r0, #0	; 0x0
   13178:	93a00001 	movls	r0, #1	; 0x1
   1317c:	e12fff1e 	bx	lr

00013180 <__eqdf2>:
   13180:	e92d4030 	stmdb	sp!, {r4, r5, lr}
   13184:	e24dd038 	sub	sp, sp, #56	; 0x38
   13188:	e28d5014 	add	r5, sp, #20	; 0x14
   1318c:	e58d0030 	str	r0, [sp, #48]
   13190:	e58d1034 	str	r1, [sp, #52]
   13194:	e28d0030 	add	r0, sp, #48	; 0x30
   13198:	e1a01005 	mov	r1, r5
   1319c:	e58d2028 	str	r2, [sp, #40]
   131a0:	e58d302c 	str	r3, [sp, #44]
   131a4:	ebffdff1 	bl	b170 <__unpack_d>
   131a8:	e1a0100d 	mov	r1, sp
   131ac:	e28d0028 	add	r0, sp, #40	; 0x28
   131b0:	ebffdfee 	bl	b170 <__unpack_d>
   131b4:	e1a00005 	mov	r0, r5
   131b8:	ebffffeb 	bl	1316c <isnan>
   131bc:	e3500000 	cmp	r0, #0	; 0x0
   131c0:	e1a0400d 	mov	r4, sp
   131c4:	e1a0000d 	mov	r0, sp
   131c8:	0a000002 	beq	131d8 <__eqdf2+0x58>
   131cc:	e3a00001 	mov	r0, #1	; 0x1
   131d0:	e28dd038 	add	sp, sp, #56	; 0x38
   131d4:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
   131d8:	ebffffe3 	bl	1316c <isnan>
   131dc:	e3500000 	cmp	r0, #0	; 0x0
   131e0:	e1a0100d 	mov	r1, sp
   131e4:	e1a00005 	mov	r0, r5
   131e8:	1afffff7 	bne	131cc <__eqdf2+0x4c>
   131ec:	ebffe037 	bl	b2d0 <__fpcmp_parts_d>
   131f0:	eafffff6 	b	131d0 <__eqdf2+0x50>

000131f4 <rom8x8_bits>:
	...
   131fc:	183c3c18 00180018 006c6c6c 00000000     .<<.....lll.....
   1320c:	6cfe6c6c 006c6cfe 7cc07e18 0018fc06     ll.l.ll..~.|....
   1321c:	180cc600 00c66030 76386c38 0076cccc     ....0`..8l8v..v.
   1322c:	00301818 00000000 60603018 00183060     ..0......0```0..
   1323c:	18183060 00603018 fe7cee00 0000ee7c     `0...0`...|.|...
   1324c:	7e181800 00001818 00000000 00301818     ...~..........0.
   1325c:	fe000000 00000000 00000000 00383800     .............88.
   1326c:	30180c06 0080c060 decec67c 007ce6f6     ...0`...|.....|.
   1327c:	18187818 007e1818 180cc67c 00fe6630     .x....~.|...0f..
   1328c:	3c06c67c 007cc606 6c3c1c0c 000c0cfe     |..<..|...<l....
   1329c:	06fcc0fe 007cc606 fcc0c67c 007cc6c6     ......|.|.....|.
   132ac:	0c06c6fe 00181818 7cc6c67c 007cc6c6     ........|..|..|.
   132bc:	7ec6c67c 007cc606 001c1c00 001c1c00     |..~..|.........
   132cc:	00181800 30181800 6030180c 000c1830     .......0..0`0...
   132dc:	00fe0000 0000fe00 0c183060 00603018     ........`0...0`.
   132ec:	0c06c67c 00180018 dec6c67c 007ec0dc     |.......|.....~.
   132fc:	c6c66c38 00c6c6fe 7c6666fc 00fc6666     8l.......ff|ff..
   1330c:	c0c0663c 003c66c0 66666cf8 00f86c66     <f...f<..lfffl..
   1331c:	f8c0c2fe 00fec2c0 7c6062fe 00f06060     .........b`|``..
   1332c:	c0c0c67c 007cc6de fec6c6c6 00c6c6c6     |.....|.........
   1333c:	1818183c 003c1818 1818183c 0070d8d8     <.....<.<.....p.
   1334c:	f0d8ccc6 00c6ccd8 606060f0 00fe6260     .........````b..
   1335c:	d6feeec6 00c6c6d6 f6e6e6c6 00c6cede     ................
   1336c:	c6c6c67c 007cc6c6 7c6666fc 00f06060     |.....|..ff|``..
   1337c:	c6c6c67c 067cd6c6 fcc6c6fc 00c6ccd8     |.....|.........
   1338c:	7cc0c67c 007cc606 18185a7e 003c1818     |..|..|.~Z....<.
   1339c:	c6c6c6c6 007cc6c6 c6c6c6c6 0010386c     ......|.....l8..
   133ac:	d6d6c6c6 00c6eefe 38386cc6 00c66c38     .........l888l..
   133bc:	3c666666 003c1818 180c86fe 00fe6230     fff<..<.....0b..
   133cc:	6060607c 007c6060 183060c0 0002060c     |`````|..`0.....
   133dc:	0c0c0c7c 007c0c0c c66c3810 00000000     |.....|..8l.....
   133ec:	00000000 ff000000 00183030 00000000     ........00......
   133fc:	0c780000 007ecc7c 667c60e0 00fc6666     ..x.|.~..`|fff..
   1340c:	c67c0000 007cc6c0 cc7c0c1c 007ecccc     ..|...|...|...~.
   1341c:	c67c0000 007cc0fe fc30361c 00783030     ..|...|..60.00x.
   1342c:	ce760000 7c067ec6 667c60e0 00e66666     ..v..~.|.`|fff..
   1343c:	18380018 003c1818 0c1c000c 78cc0c0c     ..8...<........x
   1344c:	6c6660e0 00e66c78 18181818 001c1818     .`flxl..........
   1345c:	fe6c0000 00c6d6d6 66dc0000 00666666     ..l........ffff.
   1346c:	c67c0000 007cc6c6 66dc0000 f0607c66     ..|...|....ff|`.
   1347c:	cc760000 1e0c7ccc 66dc0000 00f06060     ..v..|.....f``..
   1348c:	c07c0000 007c067c 30fc3030 001c3630     ..|.|.|.00.006..
   1349c:	cccc0000 0076cccc c6c60000 0010386c     ......v.....l8..
   134ac:	c6c60000 006cfed6 6cc60000 00c66c38     ......l....l8l..
   134bc:	c6c60000 7c0676ce 98fc0000 00fc6430     .....v.|....0d..
   134cc:	7018180e 000e1818 00181818 00181818     ...p............
   134dc:	0e181870 00701818 0000dc76 00000000     p.....p.v.......
   134ec:	38381000 00fe6c6c                       ..88ll..

000134f4 <xid>:
   134f4:	2312dead                                ...#

000134f8 <magic_cookie>:
   134f8:	63538263                                c.Sc

000134fc <__FUNCTION__.2769>:
   134fc:	50696763 65636f72 6f467373 6e496d72     cgiProcessFormIn
   1350c:	00747570                                put.

00013510 <__FUNCTION__.2678>:
   13510:	70747468 7465735f 6365735f 00000000     http_set_sec....

00013520 <__FUNCTION__.2664>:
   13520:	70747468 7465735f 756f685f 00000072     http_set_hour...

00013530 <__FUNCTION__.2659>:
   13530:	70747468 7465735f 64636c5f 00000000     http_set_lcd....

00013540 <temp>:
   13540:	000149d0 00004d0c                       .I...M..

00013548 <file_index_html>:
   13548:	00000000 00013584 00013590 000001b2     .....5...5......
   13558:	00000000                                ....

0001355c <file_404_html>:
   1355c:	00013548 00013742 0001374c 000000a8     H5..B7..L7......
   1356c:	00000000                                ....

00013570 <file_tcc_shtml>:
   13570:	0001355c 000137f4 000137ff 00000806     \5...7...7......
   13580:	00000000                                ....

00013584 <data_index_html>:
   13584:	646e692f 682e7865 006c6d74 4f44213c     /index.html.<!DO
   13594:	50595443 54482045 50204c4d 494c4255     CTYPE HTML PUBLI
   135a4:	2d222043 33572f2f 442f2f43 48204454     C "-//W3C//DTD H
   135b4:	204c4d54 31302e34 61725420 7469736e     TML 4.01 Transit
   135c4:	616e6f69 452f2f6c 2220224e 70747468     ional//EN" "http
   135d4:	772f2f3a 772e7777 726f2e33 52542f67     ://www.w3.org/TR
   135e4:	6d74682f 6c2f346c 65736f6f 6474642e     /html4/loose.dtd
   135f4:	0a0d3e22 6d74683c 0a0d3e6c 683c2020     ">..<html>..  <h
   13604:	3e646165 20200a0d 743c2020 656c7469     ead>..    <title
   13614:	2d2d2d3e 69646572 74636572 2d676e69     >---redirecting-
   13624:	2f3c2d2d 6c746974 0a0d3e65 2f3c2020     --</title>..  </
   13634:	64616568 200a0d3e 4f423c20 6f205944     head>..  <BODY o
   13644:	616f4c6e 77223d64 6f646e69 65732e77     nLoad="window.se
   13654:	6d695474 74756f65 75712628 6c3b746f     tTimeout(&quot;l
   13664:	7461636f 2e6e6f69 66657268 6374273d     ocation.href='tc
   13674:	68732e63 276c6d74 6f757126 312c3b74     c.shtml'&quot;,1
   13684:	62222930 6c6f6367 223d726f 66666623     0)"bgcolor="#fff
   13694:	22666666 3c0a0d3e 746e6f66 63616620     fff">..<font fac
   136a4:	61223d65 6c616972 703c3e22 696c6120     e="arial"><p ali
   136b4:	223d6e67 746e6563 3e227265 6f4c0a0d     gn="center">..Lo
   136c4:	6e696461 63742067 68732e63 2e6c6d74     ading tcc.shtml.
   136d4:	6c432020 206b6369 6820613c 3d666572       Click <a href=
   136e4:	63637422 7468732e 3e226c6d 65726568     "tcc.shtml">here
   136f4:	3e612f3c 20666920 20746f6e 6f747561     </a> if not auto
   13704:	6974616d 6c6c6163 65722079 65726964     matically redire
   13714:	64657463 3c0a0d2e 6e6f662f 0a0d3e74     cted...</font>..
   13724:	6f662f3c 0d3e746e 622f3c0a 3e79646f     </font>..</body>
   13734:	2f3c0a0d 6c6d7468 0d0a0d3e 342f000a              ..</html>.....

00013742 <data_404_html>:
   13742:	3430342f 6d74682e 683c006c 3e6c6d74     /404.html.<html>
   13752:	20200a0d 646f623c 67622079 6f6c6f63     ..  <body bgcolo
   13762:	77223d72 65746968 0a0d3e22 20202020     r="white">..    
   13772:	6e65633c 3e726574 20200a0d 20202020     <center>..      
   13782:	3e31683c 20343034 6966202d 6e20656c     <h1>404 - file n
   13792:	6620746f 646e756f 31682f3c 200a0d3e     ot found</h1>.. 
   137a2:	20202020 33683c20 206f473e 6820613c          <h3>Go <a h
   137b2:	3d666572 3e222f22 65726568 3e612f3c     ref="/">here</a>
   137c2:	736e6920 64616574 682f3c2e 0a0d3e33      instead.</h3>..
   137d2:	20202020 65632f3c 7265746e 200a0d3e         </center>.. 
   137e2:	622f3c20 3e79646f 2f3c0a0d 6c6d7468      </body>..</html
   137f2:	742f003e                                         >.

000137f4 <data_tcc_shtml>:
   137f4:	6363742f 7468732e 3c006c6d 434f4421     /tcc.shtml.<!DOC
   13804:	45505954 4d544820 5550204c 43494c42     TYPE HTML PUBLIC
   13814:	2f2d2220 4333572f 54442f2f 54482044      "-//W3C//DTD HT
   13824:	34204c4d 2031302e 6e617254 69746973     ML 4.01 Transiti
   13834:	6c616e6f 4e452f2f 68222022 3a707474     onal//EN" "http:
   13844:	77772f2f 33772e77 67726f2e 2f52542f     //www.w3.org/TR/
   13854:	6c6d7468 6f6c2f34 2e65736f 22647464     html4/loose.dtd"
   13864:	3c0a0d3e 6c6d7468 200a0d3e 65683c20     >..<html>..  <he
   13874:	0d3e6461 743c090a 656c7469 4343543e     ad>...<title>TCC
   13884:	4d202d20 6f637261 6c755420 2d206f69      - Marco Tulio -
   13894:	676e4520 6564202e 6d6f4320 63617570      Eng. de Compuac
   138a4:	2f3c6f61 6c746974 0a0d3e65 090a0d09     ao</title>......
   138b4:	2d2d213c 7974733c 0d3e656c 662e090a     <!--<style>....f
   138c4:	206d726f 6c656966 777b2064 68746469     orm field {width
   138d4:	3033333a 203b7870 67696568 203a7468     :330px; height: 
   138e4:	78703033 090a0d7d 726f662e 69665f6d     30px}....form_fi
   138f4:	20646c65 66656c2e 69777b74 3a687464     eld .left{width:
   13904:	78703631 6162203b 72676b63 646e756f     16px; background
   13914:	7275203a 6966286c 5f646c65 6e702e6c     : url(field_l.pn
   13924:	74202967 6c20706f 20746665 722d6f6e     g) top left no-r
   13934:	61657065 65683b74 74686769 3834203a     epeat;height: 48
   13944:	203b7870 616f6c66 656c3a74 7d3b7466     px; float:left;}
   13954:	2e090a0d 6d726f66 6569665f 2e20646c     ....form_field .
   13964:	6464696d 777b656c 68746469 7035373a     middle{width:75p
   13974:	62203b78 676b6361 6e756f72 75203a64     x; background: u
   13984:	66286c72 646c6569 702e6d5f 2029676e     rl(field_m.png) 
   13994:	20706f74 7466656c 70657220 2d746165     top left repeat-
   139a4:	203b2078 64726f62 203a7265 656e6f6e     x ; border: none
   139b4:	6568203b 74686769 3834203a 663b7870     ; height: 48px;f
   139c4:	74616f6c 66656c3a 0d7d3b74 662e090a     loat:left;}....f
   139d4:	5f6d726f 6c656966 722e2064 74686769     orm_field .right
   139e4:	6469777b 313a6874 3b787036 63616220     {width:16px; bac
   139f4:	6f72676b 3a646e75 6c727520 65696628     kground: url(fie
   13a04:	725f646c 676e702e 6f742029 656c2070     ld_r.png) top le
   13a14:	6e207466 65722d6f 74616570 6965683b     ft no-repeat;hei
   13a24:	3a746867 70383420 6c663b78 3a74616f     ght: 48px;float:
   13a34:	7466656c 0a0d7d3b 732f3c09 656c7974     left;}...</style
   13a44:	3e2d2d3e 0a0d0a0d 2f3c2020 64616568     >-->....  </head
   13a54:	200a0d3e 4f423c20 62205944 6c6f6367     >..  <BODY bgcol
   13a64:	223d726f 32323223 65742022 223d7478     or="#222" text="
   13a74:	46464623 0a0d3e22 6e6f663c 61662074     #FFF">..<font fa
   13a84:	223d6563 6f686174 3e22616d 633c0a0d     ce="tahoma">..<c
   13a94:	65746e65 683c3e72 554d3e31 5049544c     enter><h1>MULTIP
   13aa4:	20534f4c 56524553 534f4349 20454420     LOS SERVICOS DE 
   13ab4:	45544e49 54454e52 4d4f4320 75204f20     INTERNET COM O u
   13ac4:	2f3c5049 0d3e3168 32683c0a 5345443e     IP</h1>..<h2>DES
   13ad4:	4f564e45 4d49564c 4f544e45 20454420     ENVOLVIMENTO DE 
   13ae4:	20414d55 494c5041 4f414343 424d4520     UMA APLICCAO EMB
   13af4:	41435241 50204144 20415241 45444552     ARCADA PARA REDE
   13b04:	43542053 50492f50 32682f3c 3c0a0d3e     S TCP/IP</h2>..<
   13b14:	0d3e7262 632f3c0a 65746e65 0a0d3e72     br>..</center>..
   13b24:	743c0a0d 656c6261 64697720 223d6874     ..<table width="
   13b34:	22253039 6c656320 6170736c 676e6963     90%" cellspacing
   13b44:	2230223d 726f6220 3d726564 20223022     ="0" border="0" 
   13b54:	6c6c6563 64646170 3d676e69 22303022     cellpadding="00"
   13b64:	696c6120 223d6e67 746e6563 3e227265      align="center">
   13b74:	743c2020 79646f62 0d0a0d3e 2020200a       <tbody>....   
   13b84:	72743c20 200a0d3e 20202020 64743c20      <tr>..      <td
   13b94:	696c6120 223d6e67 7466656c 69772022      align="left" wi
   13ba4:	3d687464 25303522 0a0d3e22 6d655409     dth="50%">...Tem
   13bb4:	61726570 61727574 75744120 203a6c61     peratura Atual: 
   13bc4:	73626e26 6e263b70 3b707362 6e6f663c     &nbsp;&nbsp;<fon
   13bd4:	6f632074 3d726f6c 65756c62 7a697320     t color=blue siz
   13be4:	3e353d65 253e623c 61742021 65742d67     e=5><b>%! tag-te
   13bf4:	0a0d706d 65642620 3c433b67 3c3e622f     mp.. &deg;C</b><
   13c04:	6e6f662f 0a0d3e74 72623c09 090a0d3e     /font>...<br>...
   13c14:	3c090a0d 6d726f66 6d616e20 61223d65     ...<form name="a
   13c24:	6d726f46 63612022 6e6f6974 742f223d     Form" action="/t
   13c34:	732e6363 6c6d7468 656d2022 646f6874     cc.shtml" method
   13c44:	6567223d 0d3e2274 7254090a 7261636f     ="get">...Trocar
   13c54:	6e654d20 65676173 6f64206d 44434c20      Mensagem do LCD
   13c64:	72623c3a 0d09203e 693c090a 7475706e     :<br> ....<input
   13c74:	70797420 74223d65 22747865 6d616e20      type="text" nam
   13c84:	73223d65 2264636c 78616d20 676e656c     e="slcd" maxleng
   13c94:	223d6874 20223631 6c797473 66223d65     th="16" style="f
   13ca4:	2d746e6f 6f6c6f63 62203a72 2265756c     ont-color: blue"
   13cb4:	0d3e2f20 623c090a 0a0d3e72 090a0d09      />...<br>......
   13cc4:	666e6f43 72756769 52207261 676f6c65     Configurar Relog
   13cd4:	3c3a6f69 0d3e7262 693c090a 7475706e     io:<br>...<input
   13ce4:	70797420 74223d65 22747865 7a697320      type="text" siz
   13cf4:	33223d65 20227870 656d616e 6873223d     e="3px" name="sh
   13d04:	6d202272 656c7861 6874676e 2232223d     r" maxlength="2"
   13d14:	79747320 223d656c 746e6f66 6c6f632d      style="font-col
   13d24:	203a726f 65756c62 3e2f2022 0a0d3a20     or: blue" /> :..
   13d34:	6e693c09 20747570 65707974 6574223d     .<input type="te
   13d44:	20227478 657a6973 7033223d 6e202278     xt" size="3px" n
   13d54:	3d656d61 696d7322 6d20226e 656c7861     ame="smin" maxle
   13d64:	6874676e 2232223d 79747320 223d656c     ngth="2" style="
   13d74:	746e6f66 6c6f632d 203a726f 65756c62     font-color: blue
   13d84:	3e2f2022 0a0d3a20 6e693c09 20747570     " /> :...<input 
   13d94:	65707974 6574223d 20227478 657a6973     type="text" size
   13da4:	7033223d 6e202278 3d656d61 65737322     ="3px" name="sse
   13db4:	6d202263 656c7861 6874676e 2232223d     c" maxlength="2"
   13dc4:	79747320 223d656c 746e6f66 6c6f632d      style="font-col
   13dd4:	203a726f 65756c62 3e2f2022 3e72623c     or: blue" /><br>
   13de4:	3c090a0d 746e6f66 7a697320 3e313d65     ...<font size=1>
   13df4:	666e6f43 72756769 6f616361 206f6420     Configuracao do 
   13e04:	3c435452 6e6f662f 0a0d3e74 72623c09     RTC</font>...<br
   13e14:	090a0d3e 3c090a0d 3c3e7262 75706e69     >......<br><inpu
   13e24:	79742074 223d6570 6d627573 20227469     t type="submit" 
   13e34:	756c6176 53223d65 656d6275 22726574     value="Submeter"
   13e44:	090a0d3e 6f662f3c 0d3e6d72 2020200a     >...</form>..   
   13e54:	3c202020 3e64742f 20200a0d 20202020        </td>..      
   13e64:	2064743c 67696c61 63223d6e 65746e65     <td align="cente
   13e74:	77202272 68746469 3035223d 0d3e2225     r" width="50%">.
   13e84:	2020200a 09202020 2d2d213c 474d493c     .      .<!--<IMG
   13e94:	63727320 6973223d 6f6c6373 702e6f67      src="sisclogo.p
   13ea4:	2022676e 74646977 32223d68 20223435     ng" width="254" 
   13eb4:	67696568 223d7468 22353333 696c6120     height="335" ali
   13ec4:	223d6e67 746e6563 20227265 64726f62     gn="center" bord
   13ed4:	223d7265 3c3e2230 3c3e7262 413e7262     er="0"><br><br>A
   13ee4:	6f696f70 613c203a 65726820 68223d66     poio: <a href="h
   13ef4:	3a707474 65732f2f 7276696c 6f772e65     ttp://selivre.wo
   13f04:	72706472 2e737365 226d6f63 6c65733e     rdpress.com">sel
   13f14:	65727669 726f772e 65727064 632e7373     ivre.wordpress.c
   13f24:	2f3c6d6f 2d2d3e61 742f3c3e 0a0d3e64     om</a>--></td>..
   13f34:	20202020 72742f3c 200a0d3e 742f3c20         </tr>..  </t
   13f44:	79646f62 3c0a0d3e 6261742f 0d3e656c     body>..</table>.
   13f54:	3c0a0d0a 3c3e7262 3c3e7262 3c3e7262     ...<br><br><br><
   13f64:	0d3e7262 34683c0a 696c6120 223d6e67     br>..<h4 align="
   13f74:	68676972 4d3e2274 6f637261 6c755420     right">Marco Tul
   13f84:	47206f69 61636e6f 7365766c 72614d20     io Goncalves Mar
   13f94:	736e6974 3e72623c 4f090a0d 6e656972     tins<br>...Orien
   13fa4:	6f646174 4d203a72 6f637261 75412073     tador: Marcos Au
   13fb4:	74737567 7453206f 656d6d65 72623c72     gusto Stemmer<br
   13fc4:	090a0d3e 74726f50 6c41206f 65726765     >...Porto Alegre
   13fd4:	31303220 31302f31 2f3c0a0d 0d3e3468      2011/01..</h4>.
   13fe4:	3c0a0d0a 6e6f662f 0a0d3e74 6f622f3c     ...</font>..</bo
   13ff4:	0d3e7964 682f3c0a 3e6c6d74 0a0d0a0d     dy>..</html>....
   14004:	00000000                                ....

00014008 <http_http>:
   14008:	70747468 002f2f3a                       http://.

00014010 <http_200>:
   14010:	20303032 31303300                                200 .

00014015 <http_301>:
   14015:	20313033 32303300                                301 .

0001401a <http_302>:
   1401a:	20323033 54454700                                302 .

0001401f <http_get>:
   1401f:	20544547 54544800                                GET .

00014024 <http_10>:
   14024:	50545448 302e312f 54544800                       HTTP/1.0.

0001402d <http_11>:
   1402d:	50545448 312e312f 6e6f6300                       HTTP/1.1.

00014036 <http_content_type>:
   14036:	746e6f63 2d746e65 65707974 7400203a              content-type: .

00014045 <http_texthtml>:
   14045:	74786574 6d74682f 6f6c006c                       text/html.

0001404f <http_location>:
   1404f:	61636f6c 6e6f6974 6800203a                       location: .

0001405a <http_host>:
   1405a:	74736f68 0d00203a                                host: .

00014061 <http_crnl>:
   14061:	2f000a0d                                         ...

00014064 <http_index_html>:
   14064:	646e692f 682e7865 006c6d74              /index.html.

00014070 <http_404_html>:
   14070:	3430342f 6d74682e 6552006c                       /404.html.

0001407a <http_referer>:
   1407a:	65666552 3a726572 54544800                       Referer:.

00014083 <http_header_200>:
   14083:	50545448 302e312f 30303220 0d4b4f20     HTTP/1.0 200 OK.
   14093:	7265530a 3a726576 50497520 302e312f     .Server: uIP/1.0
   140a3:	74746820 2f2f3a70 2e777777 73636973      http://www.sics
   140b3:	2f65732e 6164617e 69752f6d 0a0d2f70     .se/~adam/uip/..
   140c3:	6e6e6f43 69746365 203a6e6f 736f6c63     Connection: clos
   140d3:	000a0d65                                e...

000140d7 <http_header_404>:
   140d7:	50545448 302e312f 34303420 746f4e20     HTTP/1.0 404 Not
   140e7:	756f6620 0a0d646e 76726553 203a7265      found..Server: 
   140f7:	2f504975 20302e31 70747468 772f2f3a     uIP/1.0 http://w
   14107:	732e7777 2e736369 7e2f6573 6d616461     ww.sics.se/~adam
   14117:	7069752f 430a0d2f 656e6e6f 6f697463     /uip/..Connectio
   14127:	63203a6e 65736f6c 43000a0d                       n: close...

00014132 <http_content_type_plain>:
   14132:	746e6f43 2d746e65 65707974 6574203a     Content-type: te
   14142:	702f7478 6e69616c 0a0d0a0d 6e6f4300              xt/plain.....

0001414f <http_content_type_html>:
   1414f:	746e6f43 2d746e65 65707974 6574203a     Content-type: te
   1415f:	682f7478 0d6c6d74 000a0d0a              xt/html.....

0001416b <http_content_type_css>:
   1416b:	746e6f43 2d746e65 65707974 6574203a     Content-type: te
   1417b:	632f7478 0a0d7373 43000a0d                       xt/css.....

00014186 <http_content_type_text>:
   14186:	746e6f43 2d746e65 65707974 6574203a     Content-type: te
   14196:	742f7478 0d747865 000a0d0a              xt/text.....

000141a2 <http_content_type_png>:
   141a2:	746e6f43 2d746e65 65707974 6d69203a     Content-type: im
   141b2:	2f656761 0d676e70 000a0d0a              age/png.....

000141be <http_content_type_gif>:
   141be:	746e6f43 2d746e65 65707974 6d69203a     Content-type: im
   141ce:	2f656761 0d666967 000a0d0a              age/gif.....

000141da <http_content_type_jpg>:
   141da:	746e6f43 2d746e65 65707974 6d69203a     Content-type: im
   141ea:	2f656761 6765706a 0a0d0a0d 6e6f4300              age/jpeg.....

000141f7 <http_content_type_binary>:
   141f7:	746e6f43 2d746e65 65707974 7061203a     Content-type: ap
   14207:	63696c70 6f697461 636f2f6e 2d746574     plication/octet-
   14217:	65727473 0a0d6d61 2e000a0d                       stream.....

00014222 <http_html>:
   14222:	6d74682e 732e006c                                .html.

00014228 <http_shtml>:
   14228:	7468732e 2e006c6d                                .shtml.

0001422f <http_htm>:
   1422f:	6d74682e 73632e00                                .htm.

00014234 <http_css>:
   14234:	7373632e 6e702e00                                .css.

00014239 <http_png>:
   14239:	676e702e 69672e00                                .png.

0001423e <http_gif>:
   1423e:	6669672e 706a2e00                                .gif.

00014243 <http_jpg>:
   14243:	67706a2e 78742e00                                .jpg.

00014248 <http_text>:
   14248:	7478742e 78742e00                                .txt.

0001424d <http_txt>:
   1424d:	7478742e 25000000 00000073 00000000     .txt...%s.......
	...

000142f0 <api_cli>:
   142f0:	000061a4 00014a90 00014a9c 00006854     .a...J...J..Th..
   14300:	00014abc 00014ac0 00006510 00014af8     .J...J...e...J..
   14310:	00014b00 00006394 00014b40 00014b48     .K...c..@K..HK..
   14320:	00006238 00014b84 00014b90 000061c4     8b...K...K...a..
   14330:	00014bb0 00014bb4 000069c0 00014bcc     .K...K...i...K..
   14340:	00014bd4 00006770 00014be8 00014bec     .K..pg...K...K..
   14350:	00006a24 00014a4c 00014c14 00006184     $j..LJ...L...a..
   14360:	00014a54 00014c34 00000000 00000000     TJ..4L..........
   14370:	00000000                                ....

00014374 <menu_cli>:
   14374:	000142f0                                .B..

00014378 <MSG>:
   14378:	2b2b2b2b 2b2b2b2b 2b2b2b2b 2b2b2b2b     ++++++++++++++++
   14388:	2b2b2b2b 2b2b2b2b 2b2b2b2b 2b2b2b2b     ++++++++++++++++
   14398:	2b2b2b2b 2b2b2b2b 2b2b2b2b 2b2b2b2b     ++++++++++++++++
   143a8:	2b2b2b2b 2b2b2b2b 2b2b2b2b 2b2b2b2b     ++++++++++++++++
   143b8:	2b2b2b2b 2b2b2b2b 2b2b2b2b 2b2b2b2b     ++++++++++++++++
   143c8:	090a0d2b 43435409 43202d20 6f737275     +....TCC - Curso
   143d8:	676e4520 61686e65 20616972 43206564      Engenharia de C
   143e8:	75706d6f 61636174 090a0d6f 72614d09     omputacao....Mar
   143f8:	54206f63 6f696c75 6e6f4720 766c6163     co Tulio Goncalv
   14408:	4d207365 69747261 0a0d736e 00000909     es Martins......

00014418 <broadcast_ethaddr>:
   14418:	ffffffff 0000ffff                       ........

00014420 <__thenan_df>:
	...

00014434 <_global_impure_ptr>:
   14434:	40000018                                ...@

00014438 <zeroes.3055>:
   14438:	30303030 30303030 30303030 30303030     0000000000000000

00014448 <blanks.3054>:
   14448:	20202020 20202020 20202020 20202020                     

00014458 <_ctype_>:
   14458:	20202000 20202020 28282020 20282828     .         ((((( 
   14468:	20202020 20202020 20202020 20202020                     
   14478:	10108820 10101010 10101010 10101010      ...............
   14488:	04040410 04040404 10040404 10101010     ................
   14498:	41411010 41414141 01010101 01010101     ..AAAAAA........
   144a8:	01010101 01010101 01010101 10101010     ................
   144b8:	42421010 42424242 02020202 02020202     ..BBBBBB........
   144c8:	02020202 02020202 02020202 10101010     ................
   144d8:	00000020 00000000 00000000 00000000      ...............
	...

0001455c <lconv>:
   1455c:	00014af4 000148ec 000148ec 000148ec     .J...H...H...H..
   1456c:	000148ec 000148ec 000148ec 000148ec     .H...H...H...H..
   1457c:	000148ec 000148ec ffffffff ffffffff     .H...H..........

0001458c <charset>:
   1458c:	00014f14                                .O..

00014590 <__mprec_tens>:
   14590:	3ff00000 00000000 40240000 00000000     ...?......$@....
   145a0:	40590000 00000000 408f4000 00000000     ..Y@.....@.@....
   145b0:	40c38800 00000000 40f86a00 00000000     ...@.....j.@....
   145c0:	412e8480 00000000 416312d0 00000000     ...A......cA....
   145d0:	4197d784 00000000 41cdcd65 00000000     ...A....e..A....
   145e0:	4202a05f 20000000 42374876 e8000000     _..B... vH7B....
   145f0:	426d1a94 a2000000 42a2309c e5400000     ..mB.....0.B..@.
   14600:	42d6bcc4 1e900000 430c6bf5 26340000     ...B.....k.C..4&
   14610:	4341c379 37e08000 43763457 85d8a000     y.AC...7W4vC....
   14620:	43abc16d 674ec800 43e158e4 60913d00     m..C..Ng.X.C.=.`
   14630:	4415af1d 78b58c40 444b1ae4 d6e2ef50     ...D@..x..KDP...
   14640:	4480f0cf 064dd592 44b52d02 c7e14af6     ...D..M..-.D.J..
   14650:	44ea7843 79d99db4                       Cx.D...y

00014658 <__mprec_bigtens>:
   14658:	4341c379 37e08000 4693b8b5 b5056e17     y.AC...7...F.n..
   14668:	4d384f03 e93ff9f5 5a827748 f9301d32     .O8M..?.Hw.Z2.0.
   14678:	75154fdd 7f73bf3c                       .O.u<.s.

00014680 <__mprec_tinytens>:
   14680:	3c9cd2b2 97d889bc 3949f623 d5a8a733     ...<....#.I93...
   14690:	32a50ffd 44f4a73d 255bba08 cf8c979d     ...2=..D..[%....
   146a0:	0ac80628 64ac6f43                       (...Co.d

000146a8 <p05.2298>:
   146a8:	00000005 00000019 0000007d 45444e55     ........}...UNDE
   146b8:	00000046 00514946 00495753 6572500a     F...FIQ.SWI..Pre
   146c8:	63746566 62412068 2074726f 65637845     fetch Abort Exce
   146d8:	6f697470 7461206e 25783020 00000078     ption at 0x%x...
   146e8:	7461440a 62412061 2074726f 65637845     .Data Abort Exce
   146f8:	6f697470 7461206e 25783020 203a2078     ption at 0x%x : 
   14708:	4f43504f 303d4544 00782578 6c65440a     OPCODE=0x%x..Del
   14718:	74207961 3a747365 00000020 0a6b4f20     ay test: ... Ok.
   14728:	00000000 20435452 74736574 2e2e203a     ....RTC test: ..
   14738:	00000000 656d6954 65742072 203a7473     ....Timer test: 
   14748:	00000000 74696e49 64636c20 002e2e20     ....Init lcd ...
   14758:	20504955 696c7041 69746163 00006e6f     UIP Aplication..
   14768:	00006b4f 4854450a 002e2e2e 006b4f20     Ok...ETH.... Ok.
   14778:	4332490a 002e2e2e 6f727265 00000000     .I2C....erro....
   14788:	74696e69 2e2e2e64 00000000 2c642520     initd....... %d,
   14798:	20436425 00000000 6b6f4e0a 4c206169     %dC .....Nokia L
   147a8:	69204443 2e74696e 0000202e 0a6b6f20     CD init.. .. ok.
   147b8:	00000000 4343540a 203e534f 00000000     .....TCCOS> ....
   147c8:	6548200a 3e207061 61747320 00006b63     . Heap > stack..
   147d8:	59485020 5453522d 00000044 54554120      PHY-RSTD... AUT
   147e8:	454e2d4f 00004447 4e494c20 4e4f2d4b     O-NEGD.. LINK-ON
   147f8:	00000000 6c754620 7075446c 0078656c     .... FullDuplex.
   14808:	6c614820 70754466 0078656c 4d303120      HalfDuplex. 10M
   14818:	0a737062 00000000 30303120 7370624d     bps..... 100Mbps
   14828:	0000000a 43435420 4d202d20 20544c55     .... TCC - MULT 
   14838:	20504955 00000000 32303030 00000000     UIP ....0002....
   14848:	00000030 00003030 00007325 00006b6f     0...00..%s..ok..
   14858:	61747345 203a6f64 000a6425 646d630a     Estado: %d...cmd
   14868:	3025203a 00096432 3a6e656c 34302520     : %02d..len: %04
   14878:	00000964 203a464d 00096425 204f524e     d...MF: %d..NRO 
   14888:	3a544b50 32302520 00000964 203a4449     PKT: %02d...ID: 
   14898:	00096425 6d69660a 206f6420 69766e65     %d...fim do envi
   148a8:	6564206f 616d6920 736e6567 0000002e     o de imagens....
   148b8:	20746f47 61205049 65726464 25207373     Got IP address %
   148c8:	64252e64 2e64252e 000a6425 20746f47     d.%d.%d.%d..Got 
   148d8:	6d74656e 206b7361 252e6425 64252e64     netmask %d.%d.%d
   148e8:	0a64252e 00000000 20746f47 20534e44     .%d.....Got DNS 
   148f8:	76726573 25207265 64252e64 2e64252e     server %d.%d.%d.
   14908:	000a6425 20746f47 61666564 20746c75     %d..Got default 
   14918:	74756f72 25207265 64252e64 2e64252e     router %d.%d.%d.
   14928:	000a6425 7361654c 78652065 65726970     %d..Lease expire
   14938:	6e692073 646c2520 63657320 73646e6f     s in %ld seconds
   14948:	0000000a 2c643325 64323025 00000000     ....%3d,%02d....
   14958:	2073250a 7325202d 29642528 54544820     .%s - %s(%d) HTT
   14968:	65722050 74726f70 7325203a 0000000a     P report: %s....
   14978:	70747468 74682f64 665f7074 2e636e75     httpd/http_func.
   14988:	00000068 000a7325 70747468 74682f64     h...%s..httpd/ht
   14998:	2d647074 2e696763 00000063 64636c73     tpd-cgi.c...slcd
   149a8:	0000003d 255b2d2d 2d2d5d73 00000000     =...--[%s]--....
   149b8:	3d726873 00000000 6e696d73 0000003d     shr=....smin=...
   149c8:	63657373 0000003d 2d676174 706d6574     ssec=...tag-temp
   149d8:	00000000 74697571 00000000 2e657962     ....quit....bye.
   149e8:	0000000a 2e657962 00000000 432d6425     ....bye.....%d-C
   149f8:	3e544148 00000000 2d64253a 0000003e     HAT>....:%d->...
   14a08:	6b6e550a 6e776f6e 6d6f6320 646e616d     .Unknown command
   14a18:	7325203a 0000000a 63257325 00000000     : %s....%s%c....
   14a28:	4d4d4f43 20444e41 4f525245 00000a52     COMMAND ERROR...
   14a38:	0000203a 00544547 00544553 504c4548     : ..GET.SET.HELP
   14a48:	00000000 54414843 00000000 00505446     ....CHAT....FTP.
   14a58:	6e75460a 73656f63 73614220 73616369     .Funcoes Basicas
   14a68:	206f6420 64b3c34d 206f6c75 6e697250      do M..dulo Prin
   14a78:	61706963 00000a6c 3032250a 2d200973     cipal....%20s. -
   14a88:	73250920 00000000 504d4554 54415245      .%s....TEMPERAT
   14a98:	00455255 6f746552 20616e72 65742061     URE.Retorna a te
   14aa8:	7265706d 72757461 61642061 616c7020     mperatura da pla
   14ab8:	002e6163 00005049 746e6953 20657861     ca..IP..Sintaxe 
   14ac8:	45535b2d 50492054 64613c20 73657264     -[SET IP <addres
   14ad8:	205d3e73 666e4f43 72756769 6e652061     s>] COnfigura en
   14ae8:	65726564 64206f63 50492065 0000002e     dereco de IP....
   14af8:	45544147 00594157 746e6953 20657861     GATEWAY.Sintaxe 
   14b08:	45535b2d 41472054 41574554 613c2059     -[SET GATEWAY <a
   14b18:	65726464 5d3e7373 6e6f4320 75676966     ddress>] Configu
   14b28:	65206172 7265646e 206f6365 47206564     ra endereco de G
   14b38:	77657461 002e7961 4353414d 00415241     ateway..MASCARA.
   14b48:	746e6953 20657861 45535b2d 414d2054     Sintaxe -[SET MA
   14b58:	3c204b53 72646461 3e737365 6f43205d     SK <address>] Co
   14b68:	6769666e 20617275 6373616d 20617261     nfigura mascara 
   14b78:	72206564 2e656465 00000000 4f435049     de rede.....IPCO
   14b88:	4749464e 00000000 6f746552 20616e72     NFIG....Retorna 
   14b98:	666e6f63 72756769 c3a7c361 64206fa3     configura....o d
   14ba8:	65722061 002e6564 0043414d 6f746552     a rede..MAC.Reto
   14bb8:	20616e72 2043414d 70206164 6163616c     rna MAC da placa
   14bc8:	0000002e 54494e49 00000000 736e654d     ....INIT....Mens
   14bd8:	6d656761 696e6920 6c616963 0000002e     agem inicial....
   14be8:	0044434c 746e6953 20657861 45535b2d     LCD.Sintaxe -[SE
   14bf8:	434c2054 643c2044 3e617461 6f633c20     T LCD <data> <co
   14c08:	3c203e6c 686e696c 00003e61 54414843     l> <linha>..CHAT
   14c18:	524f5020 74204154 61636f72 20656420      PORTA troca de 
   14c28:	736e656d 6e656761 00002e73 20505446     mensagens...FTP 
   14c38:	444e455b 5d504920 66202d20 63207074     [END IP] - ftp c
   14c48:	6e65696c 00000074 76726553 206f6369     lient...Servico 
   14c58:	69646e49 6e6f7073 6c657669 00000000     Indisponivel....
   14c68:	63206d65 74736e6f 61637572 0000006f     em construcao...
   14c78:	6e657041 63207361 6e616d6f 64206f64     Apenas comando d
   14c88:	45472065 00002e54 253a6425 64253a64     e GET...%d:%d:%d
   14c98:	3a64253a 253a6425 00000064 7473754a     :%d:%d:%d...Just
   14ca8:	74656720 6d6f6320 646e616d 0000002e      get command....
   14cb8:	73614d0a 25203a6b 64252e64 2e64252e     .Mask: %d.%d.%d.
   14cc8:	00006425 7461470a 79617765 6425203a     %d...Gateway: %d
   14cd8:	2e64252e 252e6425 00000064 3a50490a     .%d.%d.%d....IP:
   14ce8:	64252020 2e64252e 252e6425 00000064       %d.%d.%d.%d...
   14cf8:	002e2c20 20746573 25206f74 64252e64      ,..set to %d.%d
   14d08:	2e64252e 00006425 252e6425 64252e64     .%d.%d..%d.%d.%d
   14d18:	0064252e 756c6f43 203a616e 6c206425     .%d.Coluna: %d l
   14d28:	61686e69 6425203a 00000000 0000003b     inha: %d....;...
   14d38:	6f646144 73452073 74697263 6320736f     Dados Escritos c
   14d48:	73206d6f 73656375 002e6f73 6e657041     om sucesso..Apen
   14d58:	63207361 6e616d6f 64206f64 45532065     as comando de SE
   14d68:	00002e54 00205049 2d2d2d0a 2d2d2d2d     T...IP ..-------
   14d78:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   14d88:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   14d98:	2d2d2d2d 00000000 20202d0a 54202020     ----.....-     T
   14da8:	20204343 5520202d 4d205049 49544c55     CC  -  UIP MULTI
   14db8:	20454c50 494c5041 49544143 20204e4f     PLE APLICATION  
   14dc8:	2d202020 00000000 2d2d2d0a 2d2d2d2d        -.....-------
   14dd8:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   14de8:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   14df8:	2d2d2d2d 0000000a 74726f50 64252061     ----....Porta %d
   14e08:	00000000 494c430a 53555320 534e4550     .....CLI SUSPENS
   14e18:	000a2e41 3a643225 3a643225 00643225     A...%2d:%2d:%2d.
   14e28:	20504975 6d6d6f63 20646e61 6c656873     uIP command shel
   14e38:	0000006c 6d6d6f63 20646e61 69757127     l...command 'qui
   14e48:	74202774 6572206f 6e727574 00000a2e     t' to return....
   14e58:	74696157 66206465 6e20726f 61647765     Waited for newda
   14e68:	00006174 726f500a 72206174 65757165     ta...Porta reque
   14e78:	746e6572 25203a65 00000a78 00000043     rente: %x...C...
   14e88:	33323130 37363534 62613938 66656463     0123456789abcdef
   14e98:	00000000 00464e49 004e414e 006e616e     ....INF.NAN.nan.
   14ea8:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   14eb8:	00000000 20677562 76206e69 69727066     ....bug in vfpri
   14ec8:	3a66746e 64616220 73616220 00000065     ntf: bad base...
   14ed8:	00666e69 6c756e28 0000296c 54552d43     inf.(null)..C-UT
   14ee8:	00382d46 4a532d43 00005349 55452d43     F-8.C-SJIS..C-EU
   14ef8:	00504a43 494a2d43 00000053 69666e49     CJP.C-JIS...Infi
   14f08:	7974696e 00000000 004e614e 2d4f5349     nity....NaN.ISO-
   14f18:	39353838 0000312d 0074743a              8859-1..:tt.
